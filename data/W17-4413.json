{
    "article": "We present a novel method for obtaining high-quality, domain-targeted multiple choice questions from crowd workers. Generating these questions can be difficult without trading away originality, relevance or diversity in the answer options. Our method addresses these problems by leveraging a large corpus of domain-specific text and a small set of existing questions. It produces model suggestions for document selection and answer distractor choice which aid the human question generation process. With this method we have assembled SciQ, a dataset of 13.7K multiple choice science exam questions. 1 We demonstrate that the method produces indomain questions by providing an analysis of this new dataset and by showing that humans cannot distinguish the crowdsourced questions from original questions. When using SciQ as additional training data to existing questions, we observe accuracy improvements on real science exams. Introduction The construction of large, high-quality datasets has been one of the main drivers of progress in NLP. The recent proliferation of datasets for textual entailment, reading comprehension and Question Answering (QA) (Bowman et al., 2015; Hermann et al., 2015; Rajpurkar et al., 2016; Hill et al., 2015; Hewlett et al., 2016; Nguyen et al., 2016) has allowed for advances on these tasks, particularly with neural models (Kadlec et al.,   * Work done while at the Allen Institute for Artificial Intelligence. 1 Dataset available at http://allenai.org/data. html 2016; Dhingra et al., 2016; Sordoni et al., 2016; Seo et al., 2016) . These recent datasets cover broad and general domains, but progress on these datasets has not translated into similar improvements in more targeted domains, such as science exam QA. Science exam QA is a high-level NLP task which requires the mastery and integration of information extraction, reading comprehension and common sense reasoning (Clark et al., 2013; Clark, 2015) . Consider, for example, the question \"With which force does the moon affect tidal movements of the oceans?\". To solve it, a model must possess an abstract understanding of natural phenomena and apply it to new questions. This transfer of general and domain-specific background knowledge into new scenarios poses a formidable challenge, one which modern statistical techniques currently struggle with. In a recent Kaggle competition addressing 8 th grade science questions (Schoenick et al., 2016) , the highest scoring systems achieved only 60% on a multiple choice test, with retrieval-based systems far outperforming neural systems. A major bottleneck for applying sophisticated statistical techniques to science QA is the lack of large in-domain training sets. Creating a large, multiple choice science QA dataset is challenging, since crowd workers cannot be expected to have domain expertise, and questions can lack relevance and diversity in structure and content. Furthermore, poorly chosen answer distractors in a multiple choice setting can make questions almost trivial to solve. The first contribution of this paper is a general method for mitigating the difficulties of crowdsourcing QA data, with a particular focus on multiple choice science questions. The method is broadly similar to other recent work (Rajpurkar et al., 2016) , relying mainly on showing crowd 2) muon e ect 2) unbalanced 2) beta decay 3) gymnosperms 3) centrifugal e ect 3) reactive 3) gamma decay 4) viruses 4) tropical e ect 4) endothermic 4) zeta decay Mesophiles grow best in moderate temperature, typically between 25 C and 40 C (77 F and 104 F) . Mesophiles are often found living in or on the bodies of humans or other animals. The optimal growth temperature of many pathogenic mesophiles is 37 C (98 F), the normal human body temperature. Mesophilic organisms have important uses in food preparation, including cheese, yogurt, beer and wine. Without Coriolis E ect the global winds would blow north to south or south to north. But Coriolis makes them blow northeast to southwest or the reverse in the Northern Hemisphere. The winds blow northwest to southeast or the reverse in the southern hemisphere. Summary Changes of state are examples of phase changes, or phase transitions. All phase changes are accompanied by changes in the energy of a system. Changes from a moreordered state to a less-ordered state (such as a liquid to a gas) are endothermic. Changes from a less-ordered state to a moreordered state (such as a liquid to a solid) are always exothermic. The conversion . . . All radioactive decay is dangerous to living things, but alpha decay is the least dangerous. workers a passage of text and having them ask a question about it. However, unlike previous dataset construction tasks, we (1) need domainrelevant passages and questions, and (2) seek to create multiple choice questions, not directanswer questions. We use a two-step process to solve these problems, first using a noisy classifier to find relevant passages and showing several options to workers to select from when generating a question. Second, we use a model trained on real science exam questions to predict good answer distractors given a question and a correct answer. We use these predictions to aid crowd workers in transforming the question produced from the first step into a multiple choice question. Thus, with our methodology we leverage existing study texts and science questions to obtain new, relevant questions and plausible answer distractors. Consequently, the human intelligence task is shifted away from a purely generative task (which is slow, difficult, expensive and can lack diversity in the outcomes when repeated) and reframed in terms of a selection, modification and validation task (being faster, easier, cheaper and with content variability induced by the suggestions provided). The second contribution of this paper is a dataset constructed by following this methodology. With a total budget of $10,415, we collected 13,679 multiple choice science questions, which we call SciQ. Figure 1 shows the first four training examples in SciQ. This dataset has a multiple choice version, where the task is to select the correct answer using whatever background information a system can find given a question and several answer options, and a direct answer version, where given a passage and a question a system must predict the span within the passage that answers the question. With experiments using recent state-ofthe-art reading comprehension methods, we show that this is a useful dataset for further research. Interestingly, neural models do not beat simple information retrieval baselines on the multiple choice version of this dataset, leaving room for research on applying neural models in settings where training examples number in the tens of thousands, instead of hundreds of thousands. We also show that using SciQ as an additional source of training data improves performance on real 4 th and 8 th grade exam questions, proving that our method successfully produces useful in-domain training data. Related Work Dataset Construction. A lot of recent work has focused on constructing large datasets suitable for training neural models. QA datasets have been assembled based on Freebase (Berant et al., 2013; Bordes et al., 2015) , Wikipedia articles (Yang et al., 2015; Rajpurkar et al., 2016; Hewlett et al., 2016) and web search user queries (Nguyen et al., 2016) ; for reading comprehension (RC) based on news (Hermann et al., 2015; Onishi et al., 2016) , children books (Hill et al., 2015) and novels (Paperno et al., 2016) , and for recognizing textual entailment based on image captions (Bowman et al., 2015) . We continue this line of work and construct a dataset for science exam QA. Our dataset differs from some of the aforementioned datasets in that it consists of natural language questions produced by people, instead of cloze-style questions. It also differs from prior work in that we aim at the narrower domain of science exams and in that we produce multiple choice questions, which are more difficult to generate. Science Exam Question Answering. Existing models for multiple-choice science exam QA vary in their reasoning framework and training methodology. A set of sub-problems and solution strategies are outlined in Clark et al. (2013) . The method described by Li and Clark (2015) evaluates the coherence of a scene constructed from the question enriched with background KB information, while Sachan et al. (2016) train an entailment model that derives the correct answer from background knowledge aligned with a maxmargin ranker. Probabilistic reasoning approaches include Markov logic networks (Khot et al., 2015) and an integer linear program-based model that assembles proof chains over structured knowledge (Khashabi et al., 2016) . The Aristo ensemble (Clark et al., 2016) combines multiple reasoning strategies with shallow statistical methods based on lexical co-occurrence and IR, which by themselves provide surprisingly strong baselines. There has not been much work applying neural networks to this task, likely because of the paucity of training data; this paper is an attempt to address this issue by constructing a much larger dataset than was previously available, and we present results of experiments using state-of-the-art reading comprehension techniques on our datasets. Automatic Question Generation. Transforming text into questions has been tackled before, mostly for didactic purposes. Some approaches rely on syntactic transformation templates (Mitkov and Ha, 2003; Heilman and Smith, 2010) , while most others generate cloze-style questions. Our first attempts at constructing a science question dataset followed these techniques. We found the methods did not produce high-quality science questions, as there were problems with selecting relevant text, generating reasonable distractors, and formulating coherent questions. Several similarity measures have been employed for selecting answer distractors (Mitkov et al., 2009) , including measures derived from WordNet (Mitkov and Ha, 2003) , thesauri (Sumita et al., 2005) and distributional context (Pino et al., 2008; Aldabe and Maritxalar, 2010) . Domainspecific ontologies (Papasalouros et al., 2008) , phonetic or morphological similarity (Pino and Esknazi, 2009; Correia et al., 2010) , probability scores for the question context (Mostow and Jang, 2012) and context-sensitive lexical inference (Zesch and Melamud, 2014) have also been used. In contrast to the aforementioned similaritybased selection strategies, our method uses a feature-based ranker to learn plausible distractors from original questions. Several of the above heuristics are used as features in this ranking model. Feature-based distractor generation models (Sakaguchi et al., 2013) have been used in the past by Agarwal and Mannem (2011) for creating biology questions. Our model uses a random forest to rank candidates; it is agnostic towards taking cloze or humanly-generated questions, and it is learned specifically to generate distractors that resemble those in real science exam questions. Creating a science exam QA dataset In this section we present our method for crowdsourcing science exam questions. The method is a two-step process: first we present a set of candidate passages to a crowd worker, letting the worker choose one of the passages and ask a question about it. Second, another worker takes the question and answer generated in the first step and produces three distractors, aided by a model trained to predict good answer distractors. The end result is a multiple choice science question, consisting of a question q, a passage p, a correct answer a \u21e4 , and a set of distractors, or incorrect answer options, {a 0 }. Some example questions are shown in Figure 1 . The remainder of this section elaborates on the two steps in our question generation process. First task: producing in-domain questions Conceiving an original question from scratch in a specialized domain is surprisingly difficult; performing the task repeatedly involves the danger of falling into specific lexical and structural patterns. To enforce diversity in question content and lexical expression, and to inspire relevant in-domain questions, we rely on a corpus of in-domain text about which crowd workers ask questions. However, not all text in a large in-domain corpus, such as a textbook, is suitable for generating questions. We use a simple filter to narrow down the selection to paragraphs likely to produce reasonable questions. Base Corpus. Choosing a relevant, in-domain base corpus to inspire the questions is of crucial importance for the overall characteristics of the dataset. For science questions, the corpus should consist of topics covered in school exams, but not be too linguistically complex, specific, or loaded with technical detail (e.g., scientific papers). We observed that articles retrieved from web searches for science exam keywords (e.g. \"animal\" and \"food\") yield a significant proportion of commercial or otherwise irrelevant documents and did not consider this further. Articles from science-related categories in Simple Wikipedia are more targeted and factual, but often state highly specific knowledge (e.g., \"Hoatzin can reach 25 inches in length and 1.78 pounds of weight.\"). We chose science study textbooks as our base corpus because they are directly relevant and linguistically tailored towards a student audience. They contain verbal descriptions of general natural principles instead of highly specific example features of particular species. While the number of resources is limited, we compiled a list of 28 books from various online learning resources, including CK-12 2 and OpenStax 3 , who share this material under a Creative Commons License. The books are about biology, chemistry, earth science and physics and span elementary level to college introductory material. A full list of the books we used can be found in the appendix. Document Filter. We designed a rule-based document filter model into which individual paragraphs of the base corpus are fed. The system classifies individual sentences and accepts a paragraph if a minimum number of sentences is accepted. With a small manually annotated dataset of sentences labelled as either relevant or irrelevant, the filter was designed iteratively by adding filter rules to first improve precision and then re-2 www.ck12.org 3 www.openstax.org call on a held-out validation set. The final filter included lexical, grammatical, pragmatical and complexity based rules. Specifically, sentences were filtered out if they i) were a question or exclamation ii) had no verb phrase iii) contained modal verbs iv) contained imperative phrases v) contained demonstrative pronouns vi) contained personal pronouns other than third-person vii) began with a pronoun viii) contained first names ix) had less than 6 or more than 18 tokens or more than 2 commas x) contained special characters other than punctuation xi) had more than three tokens beginning uppercase xii) mentioned a graph, table or web link xiii) began with a discourse marker (e.g. 'Nonetheless') xiv) contained absoulute wording (e.g. 'never', 'nothing', 'definitely') xv) contained instructional vocabulary ( 'teacher', 'worksheet', . . . ). Besides the last, these rules are all generally applicable in other domains to identify simple declarative statements in a corpus. Question Formulation Task. To actually generate in-domain QA pairs, we presented the filtered, in-domain text to crowd workers and had them ask a question that could be answered by the presented passage. Although most undesirable paragraphs had been filtered out beforehand, a non-negligible proportion of irrelevant documents remained. To circumvent this problem, we showed each worker three textbook paragraphs and gave them the freedom to choose one or to reject all of them if irrelevant. Once a paragraph had been chosen, it was not reused to formulate more questions about it. We further specified desirable characteristics of science exam questions: no yes/no questions, not requiring further context, querying general principles rather than highly specific facts, question length between 6-30 words, answer length up to 3 words (preferring shorter), no ambiguous questions, answers clear from paragraph chosen. Examples for both desirable and undesirable questions were given, with explanations for why they were good or bad examples. Furthermore we encouraged workers to give feedback, and a contact email was provided to address upcoming questions directly; multiple crowdworkers made use of this opportunity. The task was advertised on Amazon Mechanical Turk, requiring Master's status for the crowdworkers, and paying a compensation of 0.30$ per HIT. A total of 175 workers participated in the whole crowdsourcing project. In 12.1% of the cases all three documents were rejected, much fewer than if a single document had been presented (assuming the same proportion of relevant documents). Thus, besides being more economical, proposing several documents reduces the risk of generating irrelevant questions and in the best case helps match a crowdworker's individual preferences. Second task: selecting distractors Generating convincing answer distractors is of great importance, since bad distractors can make a question trivial to solve. When writing science questions ourselves, we found that finding reasonable distractors was the most time-consuming part overall. Thus, we support the process in our crowdsourcing task with model-generated answer distractor suggestions. This primed the workers with relevant examples, and we allowed them to use the suggested distractors directly if they were good enough. We next discuss characteristics of good answer distractors, propose and evaluate a model for suggesting such distractors, and describe the crowdsourcing task that uses them. Distractor Characteristics. Multiple choice science questions with nonsensical incorrect answer options are not interesting as a task to study, nor are they useful for training a model to do well on real science exams, as the model would not need to do any kind of science reasoning to answer the training questions correctly. The difficulty in generating a good multiple choice question, then, lies not in identifying expressions which are false answers to q, but in generating expressions which are plausible false answers. Concretely, besides being false answers, good distractors should thus: \u2022 be grammatically consistent: for the question \"When animals use energy, what is always produced?\" a noun phrase is expected. \u2022 be consistent with respect to abstract properties: if the correct answer belongs to a certain category (e.g., chemical elements) good distractors likely should as well. \u2022 be consistent with the semantic context of the question: a question about animals and energy should not have newspaper or bingo as distractors. Distractor Model Overview. We now introduce a model which generates plausible answer distrators and takes into account the above criteria. On a basic level, it ranks candidates from a large collection C of possible distractors and selects the highest scoring items. Its ranking function r : (q, a \u21e4 , a 0 ) 7 ! s a 0 2 [0, 1] (1) produces a confidence score s a 0 for whether a 0 2 C is a good distractor in the context of question q and correct answer a \u21e4 . For r we use the scoring function s a 0 = P (a 0 is good | q, a \u21e4 ) of a binary classifier which distinguishes plausible (good) distractors from random (bad) distractors based on features (q, a \u21e4 , a 0 ). For classification, we train r on actual in-domain questions with observed false answers as the plausible (good) distractors, and random expressions as negative examples, sampled in equal proportion from C. As classifier we chose a random forest (Breiman, 2001) , because of its robust performance in small and mid-sized data settings and its power to incorporate nonlinear feature interactions, in contrast, e.g., to logistic regression. Distractor Model Features. This section describes the features (q, a \u21e4 , a 0 ) used by the distractor ranking model. With these features, the distractor model can learn characteristics of real distractors from original questions and will suggest those distractors that it deems the most realistic for a question. The following features of question q, correct answer a \u21e4 and a tentative distractor expression a 0 were used: \u2022 bags of GloV e embeddings for q, a \u21e4 and a 0 ; \u2022 an indicator for POS-tag consistency of a \u21e4 and a 0 ; \u2022 singular/plural consistency of a \u21e4 and a 0 ; \u2022 log. avg. word frequency in a \u21e4 and a 0 ; \u2022 Levenshtein string edit distance between a \u21e4 and a 0 ; \u2022 suffix consistency of a \u21e4 and a 0 (firing e.g. for (regeneration, exhaustion)); \u2022 token overlap indicators for q, a \u21e4 and a 0 ; \u2022 token and character length for a \u21e4 and a 0 and similarity therein; \u2022 indicators for numerical content in q, a \u21e4 and a 0 consistency therein; \u2022 indicators for units of measure in q, a \u21e4 and a 0 , and for co-occurrence of the same unit; \u2022 WordNet-based hypernymy indicators between tokens in q, a \u21e4 and a 0 , in both directions and potentially via two steps; \u2022 indicators for 2-step connections between entities in a \u21e4 and a 0 via a KB based on OpenIE triples (Mausam et al., 2012) extracted from pages in Simple Wikipedia about anatomical structures; \u2022 indicators for shared Wordnet-hyponymy of a \u21e4 and a 0 to one of the concepts most frequently generalising all three question distractors in the training set (e.g. element, organ, organism). The intuition for the knowledge-base link and hypernymy indicator features is that they can reveal sibling structures of a \u21e4 and a 0 with respect to a shared property or hypernym. For example, if the correct answer a \u21e4 is heart, then a plausible distractor a 0 like liver would share with a \u21e4 the hyponymy relation to organ in WordNet. Model Training. We first constructed a large candidate distractor set C whose items were to be ranked by the model. C contained 488,819 expressions, consisting of (1) the 400K items in the GloVe vocabulary (Pennington et al., 2014) ; (2) answer distractors observed in training questions; (3) a list of noun phrases from Simple Wikipedia articles about body parts; (4) a noun vocabulary of \u21e06000 expressions extracted from primary school science texts. In examples where a \u21e4 consisted of multiple tokens, we added to C any expression that could be obtained by exchanging one unigram in a \u21e4 with another unigram from C. The model was then trained on a set of 3705 science exam questions (4 th and 8 th grade) , separated into 80% training questions and 20% validation questions. Each question came with four answer options, providing three good distractor examples. We used scikit-learn's implementation of random forests with default parameters. We used 500 trees and enforced at least 4 samples per tree leaf. Distractor Model Evaluation. Our model achieved 99, 4% training and 94, 2% validation accuracy overall. Example predictions of the distractor model are shown in Table 1 . Qualitatively, the predictions appear acceptable in most cases, though the quality is not high enough to use them directly without additional filtering by crowd workers. In many cases the distractor is semantically related, but does not have the correct type (e.g., in column 1, \"nutrient\" and \"soil\" are not elements). Some predictions are misaligned in their level of specificity (e.g. \"frogs\" in column 3), and multiword expressions were more likely to be unrelated or ungrammatical despite the inclusion of part of speech features. Even where the predicted distractors are not fully coherent, showing them to a crowd worker still has a positive priming effect, helping the worker generate good distractors either by providing nearly-good-enough candidates, or by forcing the worker to think why a suggestion is not a good distractor for the question. Distractor Selection Task. To actually generate a multiple choice science question, we show the result of the first task, a (q, a \u21e4 ) pair, to a crowd worker, along with the top six distractors suggested from the previously described model. The goal of this task is two-fold: (1) quality control (validating a previously generated (q, a \u21e4 ) pair), and (2) validating the predicted distractors or writing new ones if necessary. The first instruction was to judge whether the question could appear in a school science exam; questions could be marked as ungrammatical, having a false answer, being unrelated to science or requiring very specific background knowledge. The total proportion of questions passing was 92.8%. The second instruction was to select up to two of the six suggested distractors, and to write at least one distractor by themselves such that there is a total of three. The requirement for the worker to generate one of their own distractors, instead of being allowed to select three predicted distractors, was added after an initial pilot of the task, as we found that it forced workers to engage more with the task and resulted in higher quality distractors. We gave examples of desirable and undesirable distractors and the opportunity to provide feedback, as before. We advertised the task on Amazon Mechanical Turk, paying 0.2$ per HIT, again requiring AMT Master's status. On average, crowd workers found the predicted distractors good enough to include in the final question around half of the time, resulting in 36.1% of the distractors in the final dataset being generated by the model (because workers were only allowed to pick two predicted distractors, the theoretical maximum is 66%). Acceptance rates were higher in The remainder of this paper will investigate properties of SciQ, the dataset we generated by following the methodology described in this section. We present system and human performance, and we show that SciQ can be used as additional training data to improve model performance on real science exams. Dataset properties SciQ has a total of 13,679 multiple choice questions. We randomly shuffled this dataset and split it into training, validation and test portions, with 1000 questions in each of the validation and test portions, and the remainder in train. In Figure 2 we show the distribution of question and answer lengths in the data. For the most part, questions and answers in the dataset are relatively short, though there are some longer questions. Each question also has an associated passage used when generating the question. Because the multiple choice question is trivial to answer when given the correct passage, the multiple choice version of SciQ does not include the passage; systems must retrieve their own background knowledge when answering the question. Because we have the associated passage, we additionally created a direct-answer version of SciQ, which has the passage and the question, but no answer options. A small percentage of the passages were obtained from unreleasable texts, so the direct answer version of SciQ is slightly smaller, with 10481 questions in train, 887 in dev, and 884 in test. Qualitative Evaluation. We created a crowdsourcing task with the following setup: A person was presented with an original science exam question and a crowdsourced question. The instructions were to choose which of the two questions was more likely to be the real exam question. We randomly drew 100 original questions and 100 instances from the SciQ training set and presented the two options in random order. People identified the science exam question in 55% of the cases, which falls below the significance level of p=0.05 under a null hypothesis of a random guess 4 . 2016 )), which recently achieved state-of-the-art results on SQuAD (Rajpurkar et al., 2016) . We trained BiDAF on the training portion of SciQ and evaluated on the test set. BiDAF achieves a 66.7% exact match and 75.7 F1 score, which is 1.3% and 1.6% below the model's performance on SQuAD. Dataset Using SciQ to answer exam questions Our last experiment with SciQ shows its usefulness as training data for models that answer real science questions. We collected a corpus of 4 th and 8 th grade science exam questions and used the AS Reader and GA Reader to answer these questions. 8 Table 3 shows model performances when only using real science questions as training data, and when augmenting the training data with SciQ. By adding SciQ, performance for both the AS Reader and the GA Reader improves on both grade levels, in a few cases substantially. This contrasts with our earlier attempts using purely synthetic data, where we saw models overfit the synthetic data and an overall performance decrease. Our successful transfer of information from SciQ to real science exam questions shows that the question distribution is similar to that of real science questions. Conclusion We have presented a method for crowdsourcing the creation of multiple choice QA data, with a particular focus on science questions. Using this methodology, we have constructed a dataset of 13.7K science questions, called SciQ, which we release for future research. We have shown through baseline evaluations that this dataset is a useful research resource, both to investigate neural model performance in medium-sized data settings, and to augment training data for answering real science exam questions. There are multiple strands for possible future work. One direction is a systematic exploration of multitask settings to best exploit this new dataset. Possible extensions for the direction of generating answer distractors could lie in the adaptation of this idea in negative sampling, e.g. in KB population. Another direction is to further bootstrap the data we obtained to improve automatic document selection, question generation and distractor prediction to generate questions automatically. \u2022 CK-12 Earth Science For Middle School 30 B Training and Implementation Details Multiple Choice Reading Comprehension. During training of the AS Reader and GA Reader, we monitored model performance after each epoch and stopped training when the error on the validation set had increased (early stopping, with a patience of one). We set a hard limit of ten epochs, but most models reached their peak validation accuracy after the first or second epoch. Test set evaluation, when applicable, used model parameters at the epoch of their peak validation accuracy. We implemented the models in Keras, and ran them with the Theano backend on a Tesla K80 GPU. The hyperparameters for each of the models were adopted from previous work. For the AS Reader, we use an embedding dimension of 256 and GRU hidden layer dimension of 384 (obtained through correspondence with the authors of Onishi et al. (2016) ) and use the hyperparameters reported in the original paper (Kadlec et al., 2016) for the rest. For the GA Reader, we use three gated-attention layers with the multiplicative gating mechanism. We do not use the character-level embedding features or the question-evidence common word features, but we do follow their work by using pretrained 100-dimension GloVe vectors to initialize a fixed word embedding layer. Between each gated attention layer, we apply dropout with a rate of 0.3. The other hyperparameters are the same as their original work (Dhingra et al., 2016) . Direct Answer Reading Comprehension. We implemented the Bidirectional Attention Flow model exactly as described in Seo et al. (2016) and adopted the hyperparameters used in the paper. 4 SciQ Experiments System performance We evaluated several state-of-the-art science QA systems, reading comprehension models, and human performance on SciQ. Multiple Choice Setting. We used the Aristo ensemble (Clark et al., 2016) , and two of its individual components: a simple information retrieval baseline (Lucene), and a table-based integer linear programming model (TableILP), to evaluate SciQ. We also evaluate two competitive neural reading comprehension models: the Attention Sum Reader (AS Reader, a GRU with a pointer-attention mechanism; Kadlec et al. (2016) ) and the Gated Attention Reader (GA Reader, an AS Reader with additional gated attention layers; Dhingra et al. (2016) ). These reading comprehension methods require a supporting text passage to answer a question. We use the same corpus as Aristo's Lucene component to retrieve a text passage, by formulating five queries based on the question and answer 5 and then concatenating the top three results from each query into a passage. We train the reading comprehension models on the training set with hyperparameters recommended by prior work ((Onishi et al., 2016) for the AS Reader and (Dhingra et al., 2016) for the GA Reader), with early stopping on the validation data 6 . Human accuracy is estimated using a sampled subset of 650 questions, with 13 different people each answering 50 questions. When answering the questions, people were allowed to query the web, just as the systems were. Table 2 shows the results of this evaluation. Aristo performance is slightly better on this set than on real science exams (where Aristo achieves 71.3% accuracy (Clark et al., 2016) ). 7 Because TableILP uses a hand-collected set of background knowledge that does not cover the topics in SciQ, its performance is substantially worse here than on its original test set. Neural models perform reasonably well on this dataset, though, interestingly, they are not able to outperform a very simple information retrieval baseline, even when using exactly the same background information. This suggests that SciQ is a useful dataset for studying reading comprehension models in medium-data settings. A List of Study Books The following is a list of the books we used as data source: \u2022 OpenStax, Anatomy & Physiology. Open-Stax. 25 April 2013 9",
    "abstract": "We present a novel method for obtaining high-quality, domain-targeted multiple choice questions from crowd workers. Generating these questions can be difficult without trading away originality, relevance or diversity in the answer options. Our method addresses these problems by leveraging a large corpus of domain-specific text and a small set of existing questions. It produces model suggestions for document selection and answer distractor choice which aid the human question generation process. With this method we have assembled SciQ, a dataset of 13.7K multiple choice science exam questions. 1 We demonstrate that the method produces indomain questions by providing an analysis of this new dataset and by showing that humans cannot distinguish the crowdsourced questions from original questions. When using SciQ as additional training data to existing questions, we observe accuracy improvements on real science exams.",
    "countries": [
        "United Kingdom",
        "United States"
    ],
    "languages": [
        ""
    ],
    "numcitedby": "77",
    "year": "2017",
    "month": "September",
    "title": "Crowdsourcing Multiple Choice Science Questions"
}