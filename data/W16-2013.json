{
    "article": "Many people are multilingual and they may draw from multiple language varieties when writing their messages. This paper is a first step towards analyzing and detecting code-switching within words. We first segment words into smaller units. Then, words are identified that are composed of sequences of subunits associated with different languages. We demonstrate our method on Twitter data in which both Dutch and dialect varieties labeled as Limburgish, a minority language, are used. Introduction Individuals have their own linguistic repertoire from which they can draw elements or codes (e.g., language varieties). In both spoken and written communication, multilingual speakers may use multiple languages in a single conversation, for example within a turn or even within a syntactic unit, often referred to as intra-and extra-sentential code-switching. In online communication the usage of multiple languages is also prevalent. Over 10% of the Twitter users tweet in more than one language (Hale, 2014) and code-switching has been observed on various social media platforms as well (Androutsopoulos, 2013; Johnson, 2013; Jurgens et al., 2014; Nguyen et al., 2015) . The occurrence of code-switching in online communication has sparked interest in two research directions. First, the presence of code-switching in text introduces new challenges for NLP tools, since these tools are usually designed for texts written in a single language. Recently, various studies have focused on automatic language identification at a more-fine grained level, such as words instead of documents (Solorio et al., 2014) , to facilitate the processing of such texts. Several studies have adapted NLP tools for code-switched texts (e.g., Solorio and Liu (2008) and Peng et al. (2014) ). Second, the availability of social media data has enabled studying code-switching patterns in a multitude of social situations and on a larger scale than datasets collected using more traditional methods. To fully leverage these large amounts of data, several recent studies have employed automatic language identification to study code-switching patterns in social media (Kim et al., 2014; Nguyen et al., 2015) . Research in both these directions has so far studied code-switching by assigning concrete languages to messages or individual words. However, the notion of languages or a language implies that languages are concrete, stable, countable identities that can be distinguished unproblematically from each other. In reality, however, people use language: linguistic resources (features, items, nouns, morphemes, etc.) that are recognized by the speakers or others as belonging to two or more sets of resources (J\u00f8rgensen and Juffermans, 2011) . From this perspective, codeswitching can thus occur within words. For example, in oetverkocht 'sold out', the particle oet 'out' is used that is associated with Limburgish whereas verkocht 'sold' is associated with Dutch. This study is a first step towards detecting code-switching within words using computational methods, which could support the processing of code-switched texts and support sociolinguists in their study of code-switching patterns. We focus on tweets from a province in the Netherlands where a minority language is spoken alongside Dutch (see Section 3). We automatically segment the words into smaller units using the Morfessor tool (Section 4). We then identify words with subunits that are associated with different languages (Section 5). Related Work This paper builds on research on morphology and automatic language identification. Morphology We focus on tweets written in Limburg, a province in the Netherlands. Morphological analysis for Dutch using computational approaches has been the focus in several studies. Van den Bosch and Daelemans (1999) proposed a memory-based learning approach. Cast as a classification problem, morpheme boundaries were detected based on letter sequences. De Pauw et al. (2004) built on this work and compared a memory-based learning method with a finite state method. One of the characteristic features of Dutch is diminutive formation (Trommelen, 1983 ) and computational approaches have been explored to predict the correct diminutive suffix in Dutch (Daelemans et al., 1996; Kool et al., 2000) . McArthur (1998) identified four major types of code-switching, ranging from tag-switching (tags and set of phrases) to intra-word switching, where a change occurs within a word boundary. The occurrence of intra-word switching has only been rarely addressed in computational linguistics research. Habash et al. (2005) developed a morphological analyzer and generator for the Arabic language family. The tool allows combining morphemes from different dialects. Language Identification The prevalence of code-switching in online textual data has generated a renewed interest in automatic language identification. Instead of focusing on document level classification, recent studies have focused on language identification on a word level to support the analysis and processing of code-switched texts (Nguyen and Dogru\u00f6z, 2013) . In the First Shared Task on Language Identification in Code-Switched Data (Solorio et al., 2014) , a small fraction of the words were labeled as 'mixed', indicating that these words were composed of morphemes from different languages. However, many participating systems had very low performance, i.e., zero F-scores, on this particular category (Chittaranjan et al., 2014; Jain and Bhat, 2014; Bar and Dershowitz, 2014; Shrestha, 2014) . Oco and Roxas (2012) focused on detecting code-switching points and noted that intra-word code-switching caused difficulties to a dictionary based approach. In this study, we segment words into smaller units to detect intra-word code-switching. Dataset We confine our analysis to tweets from users in the Dutch province of Limburg, the southernmost province in the Netherlands. The 'dialects' of Limburg were extended minor recognition in 1997 under the label 'Limburgish' by The Netherlands, a signatory of the 1992 European Charter for Regional and Minority Languages (cf. Cornips ( 2013 )). To collect users located in Limburg, seed users were identified based on geotagged tweets and manual identification. The set was then expanded based on the social network of the users. Users were then mapped to locations based on their provided profile location to create the final set. Tweets are labeled with languages, such as Dutch, Limburgish, and English, using an inhouse language identification tool. The dataset is described in more detail in Nguyen et al. (2015) . Morphological Segmentation The first step in our analysis is to segment the words into smaller units. We use the Morfessor Baseline implementation (Virpioja et al., 2013) to learn a model for what is called morphological segmentation in an unsupervised manner. Morfessor segments the words into morphs (usually 'morpheme-like' units), such that words in the data can be formed by concatenation of such morphs. Training We experiment with two different sources to train Morfessor: tweets and Wikipedia texts. The tweets come from the data described in Section 3. We also downloaded the Dutch and Limburgish Wikipedia versions. More specifically, we have the following datasets: \u2022 Dutch Wikipedia (NL WIKI) \u2022 Limburgish Wikipedia (LIM WIKI) \u2022 Dutch tweets (NL TWEETS) \u2022 Limburgish tweets (LIM TWEETS) We exclude words that only occur once. Following Creutz and Lagus (2005), we explore two different ways for training Morfessor: based on word tokens (such that the frequencies of words are taken into account) and based on word types. Creutz and Lagus (2005) suggest using word types, which in their experiments led to a higher recall. 1 reports the precision and recall as calculated by the Morfessor Overall, the performance differences are small. The best performance is obtained when Limburgish data is part of the training data. Furthermore, training on word tokens results in a higher precision, while training on word types results in a higher recall, matching the findings of Creutz and Lagus ( 2005 ). Dutch An analysis of the resulting segmentations in the Twitter data illustrates this even more. We consider models trained on both the Wikipedia and Twitter data. A model trained on word tokens segments only 23.5% of the words, while a model trained on word types segments 71.4% of the words. For our application, a higher recall is preferred, and thus following Creutz and Lagus ( 2005 ) we use a model trained on word types in the remaining part of this paper. Example segmentations using this model are rogstaekersoptocht as rogstaeker+s+optocht 'carnivalsname+s+parade', leedjesaovend as leed-jes+aovend 'songs+evening' and zoemetein as zoe+metein 'immediately'. Detection of Intra-Word Code-Switching We now identify code-switching within words based on the extracted morphs (e.g., morphemes, particles, bare nouns and character sequences). Language Identification To identify code-switching within words, we first compute the association of the morphs with Dutch and Limburgish. and Limburgish (LIM) according to the odds ratio. morphs that occur on their own in the data from morphs that only occur in combination with other morphs. For each morph, we compute its probability in each language (Dutch and Limburgish) and apply Laplace smoothing. For each morph, the odds ratio is then computed as follows (Mladenic and Grobelnik, 1999) , with m being the morph: log( P (m|N L)(1 \u2212 P (m|LIM )) (1 \u2212 P (m|N L))(P (m|LIM ) ) (1) Since the odds ratio is sensitive to infrequent words, only morphs were considered that occur in at least 5 words. Table 2 displays the most distinguishing morphs that do not occur on their own. While some of the extracted morphs are not strictly morphemes but grapheme sequences, they do seem to reflect the differences between the Dutch and Limburgish language. One example is reflected in pje and pke. The diminutive je is associated with Dutch, while ke is associated with Limburgish. We also see the frequent use of diacritics, characteristic of Limburgish orthography. The results are also affected by the informal nature of social media, such as the use of lengthening in the extracted morphs (e.g., oool). Furthermore, the occurrence of English words has led to morphs like ary (from, e.g., anniversary) and ful. We also 3 LIM o\u00e8t, veu, i\u00e9r, vuu, \u00f4ch NL gro, hor, cal, tec, ish 4 LIM ho\u00ebg, kaup, roop, st\u00f6k, zurg NL rook, rouw, uuuu, ship, doek 5 LIM slaop, sjaol, paort, hoe\u00ebg, rieje NL fonds, dorps, kruis, kraam, keten Table 3 : Most distinguishing morphs with lengths 3-5 that do occur on their own, for Dutch (NL) and Limburgish (LIM) according to the odds ratio. see oetge and uitge oet 'out' is associated with Limburgish. Table 3 shows the distinguishing morphs that do occur on their own. In this table we find many units that are bare nouns, like rook ('smoke'), rouw ('mourning'), etc. Identified Words Since many words are cognates in Dutch and Limburgish, we apply a strict threshold to assign the extracted units to a single language (1.5 and -1.5 odds ratio). We then extract all words that are composed of sequences of units that are associated with different languages. Results In total 50 words were identified. We manually checked whether they were correct, and if not, the type of error that was made (Table 4 ). Since Limburgish is a label for various dialect varieties, we consulted several sources to determine the Limburgish form(s).  An example of an identified word with codeswitching is cijfer + kes 'small numbers'. The Limburgish plural diminutive kes is combined with the Dutch noun cijfer 'number' whereas /'si:f@\u00f6/ is associated with Limburgish. As another example, in sjlaag + boom ('crossing gate') Limburgish sjlaag (palatized /s/) is combined with Dutch boom (instead of /bO:m/). Error analysis Manual inspection of the identified words shows that the informal nature of the Twitter data makes the task challenging. In particular, spelling mistakes (e.g., woendag 'Wednesday' instead of woensdag), the occurrence of English words (e.g., wearable), and concatenated words (e.g., kleiduivenschieten instead of kleiduiven schieten) were sometimes incorrectly identified as words containing code-switching. Furthermore, most of the errors were names that were incorrectly identified (prinsestraat, kleistekerstraat). We therefore expect that more preprocessing, like removing named entities, would improve the system. Conclusion Research using automatic language identification to study code-switching patterns has so far focused on assigning languages to messages or individual words (Nguyen et al., 2016) . This study is a first step towards automatic language identification and analysis of code-switching patterns within words. Our experiments demonstrate that Twitter users do code-switch within words and are creative in their language use by combining elements from both the standard language (Dutch) and the minority language (Limburgish). The precision of the system could be improved by applying more preprocessing steps, such as filtering named entities. Evaluation was challenging due to the difficulty of labeling languages on such a fine-grained level as the extracted morphs. In particular, when focusing on minority languages such as Limburgish for which no standard exists and which shares many cognates with Dutch, it is not always clear whether a certain variant is associated with Dutch, Limburgish, or both. A future study could focus on a more extensive evaluation of the system. Acknowledgements This research was supported by the Netherlands Organization for Scientific Research (NWO), grants 314-98-008 (Twidentity) and 640.005.002 (FACT). Kfir Bar and Nachum Dershowitz. 2014 . The Tel Aviv university system for the code-switching workshop shared task. In Proceedings of the First Workshop on Computational Approaches to Code Switching.",
    "abstract": "Many people are multilingual and they may draw from multiple language varieties when writing their messages. This paper is a first step towards analyzing and detecting code-switching within words. We first segment words into smaller units. Then, words are identified that are composed of sequences of subunits associated with different languages. We demonstrate our method on Twitter data in which both Dutch and dialect varieties labeled as Limburgish, a minority language, are used.",
    "countries": [
        "Netherlands"
    ],
    "languages": [
        "Limburgish",
        "Dutch"
    ],
    "numcitedby": "13",
    "year": "2016",
    "month": "August",
    "title": "Automatic Detection of Intra-Word Code-Switching"
}