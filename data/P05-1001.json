{
    "article": "In machine learning, whether one can build a more accurate classifier by using unlabeled data (semi-supervised learning) is an important issue. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. This paper presents a novel semi-supervised method that employs a learning paradigm which we call structural learning. The idea is to find \"what good classifiers are like\" by learning from thousands of automatically generated auxiliary classification problems on unlabeled data. By doing so, the common predictive structure shared by the multiple classification problems can be discovered, which can then be used to improve performance on the target problem. The method produces performance higher than the previous best results on CoNLL'00 syntactic chunking and CoNLL'03 named entity chunking (English and German). Introduction In supervised learning applications, one can often find a large amount of unlabeled data without difficulty, while labeled data are costly to obtain. Therefore, a natural question is whether we can use unlabeled data to build a more accurate classifier, given the same amount of labeled data. This problem is often referred to as semi-supervised learning. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. For example, co-training (Blum and Mitchell, 1998) automatically bootstraps labels, and such labels are not necessarily reliable (Pierce and Cardie, 2001) . A related idea is to use Expectation Maximization (EM) to impute labels. Although useful under some circumstances, when a relatively large amount of labeled data is available, the procedure often degrades performance (e.g. Merialdo (1994) ). A number of bootstrapping methods have been proposed for NLP tasks (e.g. Yarowsky (1995) , Collins and Singer (1999) , Riloff and Jones (1999) ). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the-art performance when a large amount of labeled data is available. Our goal has been to develop a general learning framework for reliably using unlabeled data to improve performance irrespective of the amount of labeled data available. It is exactly this important and difficult problem that we tackle here. This paper presents a novel semi-supervised method that employs a learning framework called structural learning (Ando and Zhang, 2004) , which seeks to discover shared predictive structures (i.e. what good classifiers for the task are like) through jointly learning multiple classification problems on unlabeled data. That is, we systematically create thousands of problems (called auxiliary problems) relevant to the target task using unlabeled data, and train classifiers from the automatically generated 'training data'. We learn the commonality (or structure) of such many classifiers relevant to the task, and use it to improve performance on the target task. One example of such auxiliary problems for chunking tasks is to 'mask' a word and predict whether it is \"people\" or not from the context, like language modeling. Another example is to predict the pre-diction of some classifier trained for the target task. These auxiliary classifiers can be adequately learned since we have very large amounts of 'training data' for them, which we automatically generate from a very large amount of unlabeled data. The contributions of this paper are two-fold. First, we present a novel robust semi-supervised method based on a new learning model and its application to chunking tasks. Second, we report higher performance than the previous best results on syntactic chunking (the CoNLL'00 corpus) and named entity chunking (the CoNLL'03 English and German corpora). In particular, our results are obtained by using unlabeled data as the only additional resource while many of the top systems rely on hand-crafted resources such as large name gazetteers or even rulebased post-processing. A Model for Learning Structures This work uses a linear formulation of structural learning. We first briefly review a standard linear prediction model and then extend it for structural learning. We sketch an optimization algorithm using SVD and compare it to related methods. Standard linear prediction model In the standard formulation of supervised learning, we seek a predictor that maps an input vector \u00dc \u00be to the corresponding output \u00dd \u00be . Linear prediction models are based on real-valued predictors of the form \u00b4\u00dc\u00b5 \u00db \u00cc \u00dc, where \u00db is called a weight vector. For binary problems, the sign of the linear prediction gives the class label. For -way classification (with \u00be), a typical method is winner takes all, where we train one predictor per class and choose the class with the highest output value. A frequently used method for finding an accurate predictor is regularized empirical risk minimization (ERM), which minimizes an empirical loss of the predictor (with regularization) on the \u00d2 training examples \u00b4 \u00b5 : \u00d6 \u00d1 \u00d2 \u00d2 \u00bd \u00c4\u00b4 \u00b4 \u00b5 \u00b5 \u2022 \u00d6\u00b4 \u00b5 \u00c4\u00b4\u00a1\u00b5 is a loss function to quantify the difference between the prediction \u00b4 \u00b5 and the true output , and \u00d6\u00b4\u00a1\u00b5 is a regularization term to control the model complexity. ERM-based methods for discriminative learning are known to be effective for NLP tasks such as chunking (e.g. Kudoh and Matsumoto (2001) , Zhang and Johnson (2003) ). Linear model for structural learning We present a linear prediction model for structural learning, which extends the traditional model to multiple problems. Specifically, we assume that there exists a low-dimensional predictive structure shared by multiple prediction problems. We seek to discover this structure through joint empirical risk minimization over the multiple problems. Consider \u00d1 problems indexed by \u00be \u00bd \u00d1 , each with \u00d2 samples \u00b4 \u00b5 indexed by \u00be \u00bd \u00d2 . In our joint linear model, a predictor for problem takes the following form \u00b4\u00a2 \u00dc\u00b5 \u00db \u00cc \u00dc \u2022 \u00da \u00cc \u00a2\u00dc \u00a2\u00a2 \u00cc \u00c1 (1) where we use \u00c1 to denote the identity matrix. Matrix \u00a2 (whose rows are orthonormal) is the common structure parameter shared by all the problems; \u00db and \u00da are weight vectors specific to each prediction problem . The idea of this model is to discover a common low-dimensional predictive structure (shared by the \u00d1 problems) parameterized by the projection matrix \u00a2. In this setting, the goal of structural learning may also be regarded as learning a good feature map \u00a2\u00dc -a low-dimensional feature vector parameterized by \u00a2. In joint ERM, we seek \u00a2 (and weight vectors) that minimizes the empirical risk summed over all the problems: \u00a2 \u2104 \u00d6 \u00d1 \u00d2 \u00a2 \u00d1 \u00bd \u00d2 \u00bd \u00c4\u00b4 \u00b4\u00a2 \u00b5 \u00b5 \u00d2 \u2022 \u00d6\u00b4 \u00b5 (2) It can be shown that using joint ERM, we can reliably estimate the optimal joint parameter \u00a2 as long as \u00d1 is large (even when each \u00d2 is small). This is the key reason why structural learning is effective. A formal PAC-style analysis can be found in (Ando and Zhang, 2004) . Alternating structure optimization (ASO) The optimization problem (2) has a simple solution using SVD when we choose square regularization: \u00d6\u00b4 \u00b5 \u00db \u00be \u00be , where the regularization parameter is given. For clarity, let \u00d9 be a weight vector for problem such that: \u00d9 \u00db \u2022 \u00a2 \u00cc \u00da Then, (2) becomes the minimization of the joint empirical risk written as: \u00d1 \u00bd \u00d2 \u00bd \u00c4\u00b4\u00d9 \u00cc \u00b5 \u00d2 \u2022 \u00d9 \u00a2 \u00cc \u00da \u00be \u00be (3) This minimization can be approximately solved by the following alternating optimization procedure: \u00afFix \u00b4\u00a2 \u00da \u00b5, and find \u00d1 predictors \u00d9 that minimizes the joint empirical risk (3). \u00afFix \u00d1 predictors \u00d9 , and find \u00b4\u00a2 \u00da \u00b5 that minimizes the joint empirical risk (3). \u00afIterate until a convergence criterion is met. In the first step, we train \u00d1 predictors independently. It is the second step that couples all the problems. Its solution is given by the SVD (singular value decomposition) of the predictor matrix \u00cd \u00d9 \u00bd \u00d9 \u00d1 \u2104: the rows of the optimum \u00a2 are given by the most significant left singular vectors 1 of \u00cd. Intuitively, the optimum \u00a2 captures the maximal commonality of the \u00d1 predictors (each derived from \u00d9 ). These \u00d1 predictors are updated using the new structure matrix \u00a2 in the next iteration, and the process repeats. Figure 1 summarizes the algorithm sketched above, which we call the alternating structure optimization (ASO) algorithm. The formal derivation can be found in (Ando and Zhang, 2004) . Comparison with existing techniques It is important to note that this SVD-based ASO (SVD-ASO) procedure is fundamentally different from the usual principle component analysis (PCA), which can be regarded as dimension reduction in the data space . By contrast, the dimension reduction performed in the SVD-ASO algorithm is on the predictor space (a set of predictors). This is possible because we observe multiple predictors from multiple learning tasks. If we regard the observed predictors as sample points of the predictor distribution in 1 In other words, \u00a2 is computed so that the best low-rank approximation of \u00cd in the least square sense is obtained by projecting \u00cd onto the row space of \u00a2; see e.g. Golub and Loan (1996) \u00db \u00d6 \u00d1 \u00d2\u00db \u00c8 \u00d2 \u00bd \u00c4\u00b4\u00db \u00cc \u2022\u00b4\u00da \u00cc \u00a2\u00b5 \u00b5 \u00d2 \u2022 \u00db \u00be \u00be \u00a3 Let \u00d9 \u00db \u2022 \u00a2 \u00cc \u00da endfor Compute the SVD of \u00cd \u00d9\u00bd \u00d9\u00d1\u2104. Let the rows of \u00a2 be the left singular vectors of \u00cd corresponding to the largest singular values. until converge the predictor space (corrupted with estimation error, or noise), then SVD-ASO can be interpreted as finding the \"principle components\" (or commonality) of these predictors (i.e., \"what good predictors are like\"). Consequently the method directly looks for low-dimensional structures with the highest predictive power. By contrast, the principle components of input data in the data space (which PCA seeks) may not necessarily have the highest predictive power. The above argument also applies to the feature generation from unlabeled data using LSI (e.g. Ando ( 2004 )). Similarly, Miller et al. (2004) used word-cluster memberships induced from an unannotated corpus as features for named entity chunking. Our work is related but more general, because we can explore additional information from unlabeled data using many different auxiliary problems. Since Miller et al. (2004) 's experiments used a proprietary corpus, direct performance comparison is not possible. However, our preliminary implementation of the word clustering approach did not provide any improvement on our tasks. As we will see, our starting performance is already high. Therefore the additional information discovered by SVD-ASO appears crucial to achieve appreciable improvements. Semi-supervised Learning Method For semi-supervised learning, the idea is to create many auxiliary prediction problems (relevant to the task) from unlabeled data so that we can learn the shared structure \u00a2 (useful for the task) using the ASO algorithm. In particular, we want to create auxiliary problems with the following properties: \u00afAutomatic labeling: we need to automatically generate various \"labeled\" data for the auxiliary problems from unlabeled data. \u00afRelevancy: auxiliary problems should be related to the target problem. That is, they should share a certain predictive structure. The final classifier for the target task is in the form of (1), a linear predictor for structural learning. We fix \u00a2 (learned from unlabeled data through auxiliary problems) and optimize weight vectors \u00db and \u00da on the given labeled data. We summarize this semisupervised learning procedure below. Create training data \u00b4 \u00b5 for each auxiliary problem from unlabeled data . 2. Compute \u00a2 from through SVD-ASO. 3. Minimize the empirical risk on the labeled data: \u00d6 \u00d1 \u00d2 \u00c8 \u00d2 \u00bd \u00c4\u00b4 \u00b4\u00a2 \u00b5 \u00b5 \u00d2 \u2022 \u00db \u00be \u00be , where \u00b4\u00a2 \u00dc\u00b5 \u00db \u00cc \u00dc \u2022 \u00da \u00cc \u00a2\u00dc as in (1). Auxiliary problem creation The idea is to discover useful features (which do not necessarily appear in the labeled data) from the unlabeled data through learning auxiliary problems. Clearly, auxiliary problems more closely related to the target problem will be more beneficial. However, even if some problems are less relevant, they will not degrade performance severely since they merely result in some irrelevant features (originated from irrelevant \u00a2-components), which ERM learners can cope with. On the other hand, potential gains from relevant auxiliary problems can be significant. In this sense, our method is robust. We present two general strategies for generating useful auxiliary problems: one in a completely unsupervised fashion, and the other in a partiallysupervised fashion. Unsupervised strategy In the first strategy, we regard some observable substructures of the input data as auxiliary class labels, and try to predict these labels using other parts of the input data. Ex 3.1 Predict words. Create auxiliary problems by regarding the word at each position as an auxiliary label, which we want to predict from the context. For instance, predict whether a word is \"Smith\" or not from its context. This problem is relevant to, for instance, named entity chunking since knowing a word is \"Smith\" helps to predict whether it is part of a name. One binary classification problem can be created for each possible word value (e.g., \"IBM\", \"he\", \"get\", \u00a1 \u00a1 \u00a1 ). Hence, many auxiliary problems can be obtained using this idea. More generally, given a feature representation of the input data, we may mask some features as unobserved, and learn classifiers to predict these 'masked' features based on other features that are not masked. The automatic-labeling requirement is satisfied since the auxiliary labels are observable to us. To create relevant problems, we should choose to (mask and) predict features that have good correlation to the target classes, such as words on text tagging/chunking tasks. Partially-supervised strategy The second strategy is motivated by co-training. We use two (or more) distinct feature maps: \u00a8\u00bd and \u00a8\u00be. First, we train a classifier \u00bd for the target task, using the feature map \u00a8\u00bd and the labeled data. The auxiliary tasks are to predict the behavior of this classifier \u00bd (such as predicted labels) on the unlabeled data, by using the other feature map \u00a8\u00be. Note that unlike co-training, we only use the classifier as a means of creating auxiliary problems that meet the relevancy requirement, instead of using it to bootstrap labels. Ex 3.2 Predict the top-choices of the classifier. Predict the combination of (a few) classes to which \u00bd assigns the highest output (confidence) values. For instance, predict whether \u00bd assigns the highest confidence values to CLASS1 and CLASS2 in this order. By setting \u00bd, the auxiliary task is simply to predict the label prediction of classifier \u00bd . By setting \u00bd, fine-grained distinctions (related to intrinsic sub-classes of target classes) can be learned. From a -way classification problem, \u00b4 \u00b5 binary prediction problems can be created. Algorithms Used in Experiments Using auxiliary problems introduced above, we study the performance of our semi-supervised learning method on named entity chunking and syntactic chunking. This section describes the algorithmic aspects of the experimental framework. The taskspecific setup is described in Sections 5 and 6. Extension of the basic SVD-ASO algorithm In our experiments, we use an extension of SVD-ASO. In NLP applications, features have natural grouping according to their types/origins such as 'current words', 'parts-of-speech on the right', and so forth. It is desirable to perform a localized optimization for each of such natural feature groups. Hence, we associate each feature group with a submatrix of structure matrix \u00a2. The optimization algorithm for this extension is essentially the same as SVD-ASO in Figure 1 , but with the SVD step performed separately for each group. See (Ando and Zhang, 2004) for the precise formulation. In addition, we regularize only those components of \u00db which correspond to the non-negative part of \u00d9 . The motivation is that positive weights are usually directly related to the target concept, while negative ones often yield much less specific information representing 'the others'. The resulting extension, in effect, only uses the positive components of \u00cd in the SVD computation. Chunking algorithm, loss function, training algorithm, and parameter settings As is commonly done, we encode chunk information into word tags to cast the chunking problem to that of sequential word tagging. We perform Viterbistyle decoding to choose the word tag sequence that maximizes the sum of tagging confidence values. In all settings (including baseline methods), the loss function is a modification of the Huber's robust loss for regression: \u00c4\u00b4\u00d4 \u00dd\u00b5 \u00d1 \u00dc\u00b4\u00bc \u00bd \u00d4\u00dd\u00b5 \u00be if \u00d4\u00dd \u00bd; and \u00d4\u00dd otherwise; with square regularization ( \u00bd\u00bc ). One may select other loss functions such as SVM or logistic regression. The specific choice is not important for the purpose of this paper. The training algorithm is stochastic gradient descent, which is argued to perform well for regularized convex ERM learning formulations (Zhang, 2004) . As we will show in Section 7.3, our formulation is relatively insensitive to the change in (rowdimension of the structure matrix). We fix (for each feature group) to 50, and use it in all settings. The most time-consuming process is the training of \u00d1 auxiliary predictors on the unlabeled data (computing \u00cd in Figure 1 ). Fixing the number of iterations to a constant, it runs in linear to \u00d1 and the number of unlabeled instances and takes hours in our settings that use more than 20 million unlabeled instances. Baseline algorithms Supervised classifier For comparison, we train a classifier using the same features and algorithm, but without unlabeled data (\u00a2 \u00bc in effect). Co-training We test co-training since our idea of partially-supervised auxiliary problems is motivated by co-training. Our implementation follows the original work (Blum and Mitchell, 1998) . The two (or more) classifiers (with distinct feature maps) are trained with labeled data. We maintain a pool of \u00d5 unlabeled instances by random selection. The classifier proposes labels for the instances in this pool. We choose \u00d7 instances for each classifier with high confidence while preserving the class distribution observed in the initial labeled data, and add them to the labeled data. The process is then repeated. We explore \u00d5=50K, 100K, \u00d7=50,100,500,1K, and commonly-used feature splits: 'current vs. context' and 'current+left-context vs. current+right-context'. Self-training Single-view bootstrapping is sometimes called self-training. We test the basic selftraining 2 , which replaces multiple classifiers in the co-training procedure with a single classifier that employs all the features. co/self-training oracle performance To avoid the issue of parameter selection for the co-and selftraining, we report their best possible oracle performance, which is the best F-measure number among all the co-and self-training parameter settings including the choice of the number of iterations. \u00a1 words, parts-of-speech (POS), character types, 4 characters at the beginning/ending in a 5-word window. \u00a1 words in a 3-syntactic chunk window. \u00a1 labels assigned to two words on the left. \u00a1 bi-grams of the current word and the label on the left. \u00a1 labels assigned to previous occurrences of the current word. Figure 2 : Feature types for named entity chunking. POS and syntactic chunk information is provided by the organizer. Named Entity Chunking Experiments We report named entity chunking performance on the CoNLL'03 shared-task 3 corpora (English and German). We choose this task because the original intention of this shared task was to test the effectiveness of semi-supervised learning methods. However, it turned out that none of the top performing systems used unlabeled data. The likely reason is that the number of labeled data is relatively large ( 200K), making it hard to benefit from unlabeled data. We show that our ASO-based semi-supervised learning method (hereafter, ASO-semi) can produce results appreciably better than all of the top systems, by using unlabeled data as the only additional resource. In particular, we do not use any gazetteer information, which was used in all other systems. The CoNLL corpora are annotated with four types of named entities: persons, organizations, locations, and miscellaneous names (e.g., \"World Cup\"). We use the official training/development/test splits. Our unlabeled data sets consist of 27 million words (English) and 35 million words (German), respectively. They were chosen from the same sources -Reuters and ECI Multilingual Text Corpus -as the provided corpora but disjoint from them. Features Our feature representation is a slight modification of a simpler configuration (without any gazetteer) in (Zhang and Johnson, 2003) , as shown in Figure 2 . We use POS and syntactic chunk information provided by the organizer. Auxiliary problems As shown in Figure 3 of the classifier\" using feature splits 'left context vs. the others' and 'right context vs. the others'. For word-prediction problems, we only consider the instances whose current words are either nouns or adjectives since named entities mostly consist of these types. Also, we leave out all but at most 1000 binary prediction problems of each type that have the largest numbers of positive examples to ensure that auxiliary predictors can be adequately learned with a sufficiently large number of examples. The results we report are obtained by using all the problems in Figure 3 unless otherwise specified.  Figure 4 shows results in comparison with the supervised baseline in six configurations, each trained with one of three sets of labeled training examples: a small English set (10K examples randomly chosen), the entire English training set (204K), and the entire German set (207K), tested on either the development set or test set. ASO-semi significantly improves both precision and recall in all the six configurations, resulting in improved F-measures over the supervised baseline by +2.62% to +10.10%. Named entity chunking results Co-and self-training, at their oracle performance, improve recall but often degrade precision; consequently, their F-measure improvements are relatively low: 0.05% to +1.63%. Comparison with top systems As shown in Figure 5 , ASO-semi achieves higher performance than the top systems on both English and German data. Most of the top systems boost performance by external hand-crafted resources such as: large gazetteers 4 ; a large amount (2 million words) of labeled data manually annotated with finer-grained named entities (FIJZ03); and rule-based post processing (KSNM03). Hence, we feel that our results, obtained by using unlabeled data as the only additional resource, are encouraging. (Florian et al., 2003), CN03 (Chieu and Ng, 2003) , KSNM03 (Klein et al., 2003) . Syntactic Chunking Experiments Next, we report syntactic chunking performance on the CoNLL'00 shared-task 5 corpus. The training and test data sets consist of the Wall Street Journal corpus (WSJ) sections 15-18 (212K words) and section 20, respectively. They are annotated with eleven types of syntactic chunks such as noun phrases. We \u00a1 uni-and bi-grams of words and POS in a 5-token window. \u00a1 word-POS bi-grams in a 3-token window. \u00a1 POS tri-grams on the left and right. \u00a1 labels of the two words on the left and their bi-grams. \u00a1 bi-grams of the current word and two labels on the left.  use the WSJ articles in 1991 (15 million words) from the TREC corpus as the unlabeled data. Features and auxiliary problems Our feature representation is a slight modification of a simpler configuration (without linguistic features) in (Zhang et al., 2002) , as shown in Figure 6 . We use the POS information provided by the organizer. The types of auxiliary problems are the same as in the named entity experiments. For word predictions, we exclude instances of punctuation symbols. Syntactic chunking results As shown in Figure 7 , ASO-semi improves both precision and recall over the supervised baseline. It achieves \u00bf \u00b1 in F-measure, which outperforms the supervised baseline by \u00bc \u00b1. Co-and selftraining again slightly improve recall but slightly degrade precision at their oracle performance, which demonstrates that it is not easy to benefit from unlabeled data on this task. Comparison with the previous best systems As shown in Figure 8 , ASO-semi achieves performance higher than the previous best systems. Though the space constraint precludes providing the detail, we note that ASO-semi outperforms all of the previous top systems in both precision and recall. Unlike named entity chunking, the use of external resources on this task is rare. An exception is the use of output from a grammar-based full parser as features in ZDJ02+, which our system does not use. KM01 and CM03 boost performance by classifier combinations. SP03 trains conditional random fields for NP (Carreras and Marquez, 2003) , SP03 (Sha and Pereira, 2003) , ZDJ02 (Zhang et al., 2002) . (noun phrases) only. ASO-semi produces higher NP chunking performance than the others. 7 Empirical Analysis Figure 9 shows F-measure obtained by computing \u00a2 from individual types of auxiliary problems on named entity chunking. Both types -\"Predict words\" and \"Predict top-2 choices of the classifier\" -are useful, producing significant performance improvements over the supervised baseline. The best performance is achieved when \u00a2 is produced from all of the auxiliary problems. Interpretation of \u00a2 To gain insights into the information obtained from unlabeled data, we examine the \u00a2 entries associated with the feature 'current words', computed for the English named entity task. Figure 10 shows the features associated with the entries of \u00a2 with the largest values, computed from the 2000 unsupervised auxiliary problems: \"Predict previous words\" and \"Predict next words\". For clarity, the figure only shows  words beginning with upper-case letters (i.e., likely to be names in English). Our method captures the spirit of predictive word-clustering but is more general and effective on our tasks. It is possible to develop a general theory to show that the auxiliary problems we use are helpful under reasonable conditions. The intuition is as follows. Suppose we split the features into two parts \u00a8\u00bd and \u00a8\u00be and predict \u00a8\u00bd based on \u00a8\u00be. Suppose features in \u00a8\u00bd are correlated to the class labels (but not necessarily correlated among themselves). Then, the auxiliary prediction problems are related to the target task, and thus can reveal useful structures of \u00a8\u00be. Under some conditions, it can be shown that features in \u00a8\u00be with similar predictive performance tend to map to similar low-dimensional vectors through \u00a2. This effect can be empirically observed in Figure 10 and will be formally shown elsewhere. English named entity chunking, test set. Effect of the \u00a2 dimension Recall that throughout the experiments, we fix the row-dimension of \u00a2 (for each feature group) to 50. Conclusion We presented a novel semi-supervised learning method that learns the most predictive lowdimensional feature projection from unlabeled data using the structural learning algorithm SVD-ASO. On CoNLL'00 syntactic chunking and CoNLL'03 named entity chunking (English and German), the method exceeds the previous best systems (including those which rely on hand-crafted resources) by using unlabeled data as the only additional resource. The key idea is to create auxiliary problems automatically from unlabeled data so that predictive structures can be learned from that data. In practice, it is desirable to create as many auxiliary problems as possible, as long as there is some reason to believe in their relevancy to the task. This is because the risk is relatively minor while the potential gain from relevant problems is large. Moreover, the auxiliary problems used in our experiments are merely possible examples. One advantage of our approach is that one may design a variety of auxiliary problems to learn various aspects of the target problem from unlabeled data. Structural learning provides a framework for carrying out possible new ideas. Acknowledgments Part of the work was supported by ARDA under the NIMD program PNWD-SW-6059.",
    "abstract": "In machine learning, whether one can build a more accurate classifier by using unlabeled data (semi-supervised learning) is an important issue. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. This paper presents a novel semi-supervised method that employs a learning paradigm which we call structural learning. The idea is to find \"what good classifiers are like\" by learning from thousands of automatically generated auxiliary classification problems on unlabeled data. By doing so, the common predictive structure shared by the multiple classification problems can be discovered, which can then be used to improve performance on the target problem. The method produces performance higher than the previous best results on CoNLL'00 syntactic chunking and CoNLL'03 named entity chunking (English and German).",
    "countries": [
        "United States"
    ],
    "languages": [
        "German",
        "English"
    ],
    "numcitedby": "239",
    "year": "2005",
    "month": "June",
    "title": "A High-Performance Semi-Supervised Learning Method for Text Chunking"
}