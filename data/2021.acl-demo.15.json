{
    "article": "An essential operation in web corpus construction consists in retaining the desired content while discarding the rest. Another challenge finding one's way through websites. This article introduces a text discovery and extraction tool published under open-source license. Its installation and use is straightforward, notably from Python and on the command-line. The software allows for main text, comments and metadata extraction, while also providing building blocks for web crawling tasks. A comparative evaluation on real-world data also shows its interest as well as the performance of other available solutions. The contributions of this paper are threefold: it references the software, features a benchmark, and provides a meaningful baseline for similar tasks. The tool performs significantly better than other open-source solutions in this evaluation and in external benchmarks. Introduction 1.Gathering texts from the Web As useful monolingual text corpora across languages are highly relevant for the NLP community (Caswell et al., 2020) , web corpora seem to be a natural way to gather language data. Corpus construction usually involves \"crawling, downloading, 'cleaning' and de-duplicating the data, then linguistically annotating it and loading it into a corpus query tool\" (Kilgarriff, 2007) . However, although text is ubiquitous on the Web, drawing accurate information from web pages can be difficult. In addition, the vastly increasing variety of corpora, text types and use cases makes it more and more difficult to assess the usefulness and appropriateness of certain web texts for given research objectives. As a result, content adequacy, focus and quality need to be evaluated after the downloads (Baroni et al., 2009) . A significant challenge lies in the ability to extract and pre-process web data to meet scientific expectations with respect to text quality. An essential operation in corpus construction consists in retaining the desired content while discarding the rest, a task carrying various names referring to specific subtasks or to pre-processing as a whole: web scraping, boilerplate removal, web page segmentation, web page cleaning, template extraction, or content extraction. This step is sometimes overlooked although it involves a series of design decisions and turning points in data processing. Depending on the purpose of data collection, adequate filtering and quality assessment can be crucial. It has a significant impact on a wide range of downstream applications like text analysis, information retrieval, link analysis, page adaptation to other terminals and screens, and especially natural language processing pipelines. Another challenge is how to find one's way through the Web, notably as linguistic data are gathered by running targeted web crawlers (Scannell, 2007) . As web crawling involves discarding much of the downloaded content (Olston and Najork, 2010) , especially link filtering and prioritization can prove to be tricky for contexts in which data collection is just the first step of a project, so that time resources for this task are scarce. Data collection approaches using the CommonCrawl 1 have flourished as they allow for faster download and processing by skipping (or more precisely outsourcing) the crawling phase. Barring the fact that finding one's \"own\" way through the Web can be preferable, such data should not be used without forethought and exhaustive filtering. Beside the discovery of relevant websites, a major issue consists in selecting appropriate content after download and processing (Sch\u00e4fer et al., 2013) , which can be com-123 plex due to unexpected machine-generated flaws and biases. Finally, depending on the project's jurisdiction, legal aspects of retrieving and granting access to web documents can be unclear or restrictive. Boundaries of copyright law are not clear when it comes to corpus building (De Clercq and Perez, 2010) so that some corpus infrastructure projects leave it to users to decide what to do from a copyright standpoint (Benko, 2016) . Copyright and intellectual property rights usually do not apply to resources such as language models or n-grams (Buck et al., 2014) , so are shuffled sentences (Biemann et al., 2007) . Web corpora focusing on manually selected sources under Creative Commons licenses have been built (Brunello, 2009; Lyding et al., 2014) , although only a very small proportion of websites use them (Barbaresi and W\u00fcrzner, 2014) . Corpora based on machine-checked licenses have also been developed (Habernal et al., 2016) , as well as systems to merge annotation with web parts from the CommonCrawl (Sch\u00e4fer, 2016) . Considering the progresses of annotation tools, is can be easier to retrieve documents directly from the Web or from archives and to process them to one's taste. Research context This effort is part of methods to derive information from web documents in order to build text databases for a lexicographic information platform (Geyken et al., 2017) . Extracting and preprocessing web texts to the exacting standards of scientific research turned out to be a substantial challenge where existing open-source solutions were not entirely convincing in terms of accuracy, versatility, and ease of use. The current tool follows from earlier work on news and blog articles extraction (Barbaresi, 2015 (Barbaresi, , 2016)) . Its packaging into a directly re-usable format generalizes the process and makes it available to the community, with thorough testing it has also become much more robust and versatile. Contributions Distinguishing between a whole page and the page's essential parts can help to alleviate many quality problems related to web text processing, notably by dealing with the noise caused by recurring elements (headers and footers, ads, links/blogroll, etc.). This can be particularly useful to de-duplicate recurring language samples. Tasks related to content extraction and language modeling also benefit from a cleaner text base. In the concrete case of linguistic and lexicographic research, it allows for content queries on meaningful parts of the documents. The remainder of this article introduces a text extraction and web navigation tool published under open-source license. Its installation and use is straightforward, notably from Python and on the command-line. The software makes it easier to extract the main text, comments and metadata, while also providing building blocks for text discovery tasks such as web crawling. The following also entails a comparative evaluation of text extraction on real-world data. The contributions of this paper are thus threefold as it references the software, features a benchmark, and provides a fast, meaningful baseline for similar tasks. State of the art 2.1 \"A difficult IE problem\" Even before the \"Web 2.0\" paradigm with web pages assembling information from and for a variety of sources (notably the advertising industry), web pages have been known for their lack of focus on directly usable text content. Despite the quantity of pages following an article format where there is a main text to be found, web pages now accessible through archives cannot be expected to be easy to process: \"Articles published on the WWW often contain extraneous clutter. Most articles consist of a main body which constitutes the relevant part of the particular page. [...] Identifying the main body of a web page in a general robust manner is a difficult information extraction problem.\" (Finn et al., 2001) Web pages come in different shapes and sizes mostly because of the wide variety of platforms and content management systems, and not least because of varying reasons to publish and diverging goals followed during web publication. Web page structure is also constantly evolving from the perspective of standards. HTML 5 was first released in 2008 to provide support for multimedia and graphical elements. This standard streamlined syntax while retaining backward-compatibility. Web content extraction is also an active field of research in user experience, resulting from the need for higher download and rendering speeds as well as from a growing amount of \"Web bloat\" requiring the development of \"reader modes\" and \"distillers\" 2 for web browsers (Ghasemisharif et al., 2019) . Wrappers Data extraction has first been based on \"wrappers\" (now called \"scrapers\") which were mostly relying on manual design and tended to be brittle and hard to maintain (Crescenzi et al., 2001) . These extraction procedures have also been used early on by blogs search engines (Glance et al., 2004) . Since the genre of \"web diaries\" was established before the blogs in Japan, there have been attempts to target not only blog software but also regular pages (Nanno et al., 2004) , in which the extraction of metadata also allows for a distinction based on heuristics. Regarding metadata extraction for pages in article form and blogs in particular, common targets include the title of the entry, the date, the author, the content, the number of comments, the archived link, and the trackback link (Glance et al., 2004) ; they can also aim at comments specifically (Mishne and Glance, 2006) . Generic web content extraction Generic extraction techniques ground on Document Object Model (DOM) examination. An earlier, language-independent approach uses entropy measures applied to features, links, and content in order to discriminate among parts of a web page (Kao et al., 2004) . Another notable technique, Visual Page Segmentation, applies heuristics to find visually grouped blocks (Cai et al., 2003) . Other methods are based on style tree induction, that is detection of similarities of DOM trees on site-level (Yi et al., 2003; Vieira et al., 2006) . Overall, efforts made to automatically generate wrappers have been centered on three different approaches (Guo et al., 2010) : wrapper induction (e.g. building a grammar to parse a web page), sequence labeling (e.g. labeled examples or a schema of data in the page), and statistical analysis. This approach combined to the inspection of DOM tree characteristics (Wang et al., 2009; Guo et al., 2010) is a common ground to the information retrieval and computational linguistics communities, with the categorization of HTML elements and linguistic features (Ziegler and Skubacz, 2007) for the former and boilerplate removal for the latter. The DOM considers a given HTML document as a tree structure whose nodes represent parts of the document to be operated on. Text, tag and/or link distiller density have proven to be good indicators in order to select or discard content nodes, using the cumulative distribution of tags (Finn et al., 2001) , or with approaches such as the content extraction via tag ratios (Weninger et al., 2010) and the content extraction via text density algorithms (Sun et al., 2011) . Statistical selection of informative nodes through a combination of both methods proved more efficient on comparable datasets (Qureshi and Memon, 2012) . The large majority of DOM-based approaches try to leverage semantic information conveyed by HTML tags, notably paragraphs (p) on which text-to-tag ratios are calculated (Carey and Manic, 2016), or tag ratios and semantic features from id and class attributes (Peters and Lecocq, 2013) . Machine learning approaches have also been used, whose interest generally consists in leveraging advances in classification tasks by treating a HTML document as a series of blocks to be classified. Relevant algorithms include conditional random fields learning header, text, and noisy blocks with markup-based, content-based, and documentrelated features (Spousta et al., 2008) , support vector machines trained on linguistic, structural and visual features (Bauer et al., 2007) , Naive Bayes (Pasternack and Roth, 2009) , multi-layer perceptron based on paragraph-level features (Sch\u00e4fer and Bildhauer, 2012) , or logistic regressions (Peters and Lecocq, 2013). More recently, deep learning has also been used for similar classifications, e.g. the Web2Text system is based on convolutional neural networks learning combinations of DOMbased features (Vogels et al., 2018) . Despite the number of article on this topic, very few systems are open-source or freely available (Alarte et al., 2019) . Corpus linguistics and NLP There are few comparable projects coming from the linguistics or natural language processing communities and focused on making software publicly available and usable. Boilerpipe uses shallow text features like word counts and link density with decision tree and SVM classifiers (Kohlsch\u00fctter et al., 2010) . JusText is based on length heuristics as well as link and stop word densities (Pomik\u00e1lek, 2011) . Both algorithms have been prevalent since their release and are now mostly used through their subsequent forks, as software needs to be kept upto-date. More recent initiatives explicitly targeting 125 corpus creation feature the Corpus Crawler 3 or Texrex 4 (Sch\u00e4fer, 2017) , neither of which appears to be actively maintained. An evaluation and discussion following from the Cleaneval initiative (Baroni et al., 2008) would put the topic back into focus, as content processing on the Web is affected by both time and geography. This benchmark could be elaborated on, results are not consistent in different languages and metrics sometime fail to capture the variable influence of extractors on downstream modules (Lejeune and Zhu, 2018) . Often, tools are developed with particular page styles in mind, mostly from the Englishspeaking world (Barbaresi and Lejeune, 2020) . For certain projects, customized scrapers which are adjusted to each website remain feasible (Krasselt et al., 2020) . A generic approach can really save human time and resources, albeit at a certain cost in terms of accuracy depending on the context. 3 Introducing the Trafilatura tool Features Trafilatura is a web scraping tool for text discovery and retrieval which seamlessly downloads, parses, and scrapes web page data. It can crawl and discover texts within a website and process them accordingly. The extractor focuses on metadata, main body text and comments while preserving parts of the text formatting and page structure. It aims to be precise enough in order not to miss texts or to discard valid documents, as it must be robust but also reasonably fast. With these objectives in mind, Trafilatura is designed to run in production on millions of web documents. The software features parallel online and offline processing: URLs, HTML files or parsed HTML trees can be used as input. Although straight output of Python variables is possible, conversion to various common output formats makes the software more versatile: plain text (minimal formatting), CSV (with metadata, tab-separated values), JSON (with metadata), XML and XML-TEI (for metadata and structure). The latter support for TEI format (following the recommendations of the Text Encoding Initiative) also includes a validator for Python which can be used apart from the extraction. The scraping and conversion parts also work with existing archives, Raw HTML documents can be retrieved from sources such as the CommonCrawl 5 or the Internet Archive 6 . In addition, download utilities are included, notably using a multi-threaded but \"polite\" processing of URL queues, i.e. time restrictions based on domain names. Persistent connections are managed by a connection pool, thus maintaining connections with websites to be scraped. The tool also entails web crawling capacities which provide accessible and fail-safe ways to gather data based on a series of target sites. First, support for sitemaps (XML and TXT formats) according to the sitemap protocol. Second, support for web feeds (ATOM, RDF and RSS formats) which make it possible to build a seamless news crawler. Third, crawling components to discover content. It can also manipulate URL lists, including filtering and prioritization based on site characteristics or language-aware heuristics based on internationalization. The package provides a relatively light-weight and modular architecture, letting users choose the components they wish to include. It has been tested on Linux, MacOS and Windows, and can be used with Python, on the command-line, with R (using the reticulate adapter package), and through a graphical user interface. The package documentation also acts as a manual on web text collection. 7 Extraction process The extraction combines two acknowledged libraries, readability-lxml 8 and jusText 9 , which are used as safety nets and fallbacks. Trafilatura's own extraction algorithm is based on a cascade of rulebased filters and content heuristics: (1) Content delimitation is performed by XPath expressions targeting common HTML elements and attributes as well as idiosyncrasies of main content management systems, first in a negative perspective with the exclusion of unwanted parts of the HTML code (e.g. <div class=\"nav\">) and next by centering on the desirable content (e.g. <section id=\"entry-content\">). The same operations are performed for comments in case they are part of the extraction. The selected nodes of the HTML tree are then processed, i.e. checked for relevance (notably by element type, text length and link density) and simplified as to their HTML structure. 126 (2) If fallbacks are selected and triggered by a possibly faulty extraction, the other algorithms are run as a backup. Since they proceed differently their approach is complementary. They notably apply heuristics based on line length, text-to-markup ratio, and position/depth of elements in the HTML tree. If applicable, the output of these generic algorithms is compared to the \"homegrown\" extraction and heuristics are applied to determine the most efficient extraction, mostly in terms of extraction length (all algorithms are fairly reliable, so much longer is better) and \"impurities\" (e.g. no media elements). (3) In case nothing worked, a baseline extraction is run in order to look for \"wild\" text elements that most probably have been missed, which implies to discard unwanted parts and to look for any element which may contain useful text content (e.g. div elements without paragraphs). The extraction is designed to be robust and modular and provides a trade-off between precision and recall in most settings. As a result, main texts and potential comments are returned, with optional preservation of structural elements (paragraphs, titles, lists, quotes, code, line breaks, in-line text formatting). Extraction of metadata is also included, that is by descending frequency title, site name, author, date, categories and tags. For date extraction the library acts like a wrapper around htmldate (Barbaresi, 2020) , a module specifically developed for this task. An optional language detection can be run on the extracted content, currently using the Compact Language Detector v3 (CLD3) 10 , which can be subject to accuracy issues depending on text length and language modeling (Caswell et al., 2020) . Evaluation Benchmark The evaluation focuses on the ability to retain appropriate text spans and discarded unwanted clutter, a functionality shared by many tools. Text discovery and conversion utilities are not evaluated here as most solutions do not include them. The benchmark is run on a collection of 500 documents which are either typical for Internet articles (news outlets, blogs) or non-standard and thus harder to process. Some contain mixed content (lists, tables) and/or non-standard, not fully valid HTML code. They were selected from large collections of web pages 10 https://github.com/google/cld3 in German, for the sake of completeness a few documents in other languages are added (notably English, French, other European languages, Chinese and Arabic). The evaluation is reproducible, the needed script and instructions are available from the project repository. 11  Target of the extraction is the main content, which is usually the part displayed centrally, without the left or right bars, the header or the footer, but including potential titles and (optionally) comments. This task is also known as web scraping, boilerplate removal, DOM-based content extraction, main content identification, or web page cleaning. Decisive document segments of a few words each are singled out, about three per webpage are manually annotated as being part of the main text or unwanted boilerplate. They represent parts of the documents which are of high significance in the perspective of working with the texts, most notably beginnings and endings, left/right columns, additional header, author or footer information such as imprints or addresses, as well as affiliated and social network links. Raw text segments are expected as a way to evaluate extraction quality without markup, i.e. HTML to TXT in itself, which avoids indirectly factoring in how the systems deal with markup. The chosen segments are included in a single HTML element span and they do not imply trimming or normalizing spaces, which makes the output strings directly comparable. Due to the language diversity of the sample the documents entail different text encodings. Since not all packages deal with them in a similar way, the given input string is in Unicode format. Tools The benchmark focuses on the Python programming language, reportedly the most popular programming language in academia and one of the most popular overall. 12 A few algorithms have been ported from other languages such as Java and JavaScript, which contributes to giving an exhaustive yet incomplete panorama of available solutions overall. In case software packages are not actively maintained the most prominent usable fork is used. First, these packages are provided for reference as they keep the structure intact but do not focus 127 on main text extraction: \u2022 html2text 13 converts HTML pages to Markup language \u2022 html text 14 converts HTML code to plain text \u2022 inscriptis 15 converts HTML to text with a particular emphasis on nested tables The following packages are strictly comparable as they focus on main text extraction: \u2022 boilerpy3 16 is a Python version of the boilerpipe algorithm (Kohlsch\u00fctter et al., 2010) for boilerplate removal and fulltext extraction \u2022 dragnet 17 features machine-learning and combined approaches (Peters and Lecocq, 2013) but requires more dependencies and potentially fine-tuning: it is used with its default training data \u2022 goose3 18 can extract information for embedded content but doesnt preserve markup \u2022 jusText 19 is designed to preserve mainly text containing full sentences along with some markup, it has been explicitly developed to create linguistic resources (Pomik\u00e1lek, 2011) \u2022 newspaper 20 is mostly geared towards newspaper texts, provides additional functions but no structured text or comment extraction \u2022 news-please 21 is a news crawler that extracts structured information (Hamborg et al., 2017) \u2022 readability-lxml 22 cleans the page and preserves some markup The tools are compared to the raw page source and to a meaningful baseline also provided by Trafilatura which consists in extracting all the text contained in JSON data or paragraph, code or quoting elements. Two variants of Trafilatura are evaluated, first using its own algorithm and second including its fallback mechanisms based on external libraries. Results The results are listed in Table 1 . Baseline extraction is simple and fast, it beats a few systems, showing its interest. JusText is highly configurable and tweaking its configuration leads to better performance than its generic settings, that is why it has been done here. The only solid conclusions which can be drawn for execution times are that goose3 and newspaper are slower than the rest while newspleases execution time isn't comparable because of operations unrelated to text extraction. The newspaper and boilerpy3 modules do not work without errors on every HTML file in the test set, probably because of malformed HTML, encoding or parsing bugs. It turns out that rule-based approaches such as Trafilatura's own algorithm (\"fast\" option) obtain balanced results despite a lack of precision. Although the library in itself is already above the rest, it performs significantly better than the other tested solutions when combined with generic algorithmic approaches. External evaluations A few external evaluations are already available, they ground on early releases of the software during its development. A previous version of Trafilatura is the most efficient open-source library in ScrapingHub's article extraction benchmark. 23 Significantly better results are also reported in the case of French and Swedish for a previous version (Laippala et al., 2020) , as well as the best overall macromean on the multilingual and manually-annotated DANIEL corpus comprising about 1,600 webpages in five different languages (Lejeune and Barbaresi, 2020) . In a further context, the tool has proven to be efficient on main text extraction to create Russian-Turkic parallel corpora (Khusainov et al., 2020) . Discussion In some cases, no text is returned, but there is no way to return text at all costs without impacting precision. Trafilatura as a whole is currently made for users aiming for better text quality. While rulebased approaches are both easier to use and to parameterize and could be more efficient in the long-run (Barbaresi and Lejeune, 2020) , extraction presets would be useful in order to make the tool more adaptable to research contexts, such as precision-based settings where discarding more elements is paramount or recall-based settings where empty or nearly empty documents are a concern (Gao et al., 2020) . Even if text encoding detection is performed at least as well and possibly better than the competition, a compromise has to be found between speed and accuracy. This issue impedes results to a variable extent, as character sequences are improperly recognized or completely skipped. Conclusions and outlook The variety of contexts and text genres leads to important design decisions impacting web corpora: could and should the tooling be adapted to particular sources that are targeted or should the extraction be as generic as possible to provide opportunistic ways of gathering information? Due to corpus size or limited resources, the second option is often best. The software package introduced here can help facilitate text data collection and enhance corpus quality. It can answer two research questions related to web corpus construction: How can an accessible generic extraction be run on web pages? And how can text content be found given a list of websites? In the evaluation, Trafilatura performs significantly better than other open-source solutions, which is corroborated by external benchmarks. The article also provided a fast and meaningful baseline which can be used in similar extraction tasks. Most scraping tools are developed considering particular page styles, whereas linguistic and geographic factors are most probably reflected in HTML structure diversity. In addition, different eras of web development result in diverging \"HTM-Lects\". These discrepancies deeply affect extraction processes and can lead to diverging performances. Trafilatura tries to mitigate these biases but cannot bridge all potential gaps. While some large-scale natural language processing and language modeling algorithms can be expected to smooth out irregularities to a certain extent, uses requiring a low margin of error and close reading approaches can greatly benefit from refinements during construction and processing of corpora. As this tool has been released under an open-source license and field-tested by users, feedback loops and collaborative work will hopefully be carried on and foster further improvements. Although the extraction parameters are configurable, recall-and precision-oriented settings will be made available to make major extraction settings more convenient. Presets corresponding to different usage scenarios could be developed. Comment extraction still has to be evaluated although most libraries do not offer this functionality. Forthcoming additions include refinements of navigation functions, notably further work on a spider in order to be able to derive links from websites which do not provide sitemaps or web feeds.",
    "abstract": "An essential operation in web corpus construction consists in retaining the desired content while discarding the rest. Another challenge finding one's way through websites. This article introduces a text discovery and extraction tool published under open-source license. Its installation and use is straightforward, notably from Python and on the command-line. The software allows for main text, comments and metadata extraction, while also providing building blocks for web crawling tasks. A comparative evaluation on real-world data also shows its interest as well as the performance of other available solutions. The contributions of this paper are threefold: it references the software, features a benchmark, and provides a meaningful baseline for similar tasks. The tool performs significantly better than other open-source solutions in this evaluation and in external benchmarks.",
    "countries": [
        "Germany"
    ],
    "languages": [
        "English",
        "French",
        "Swedish",
        "Russian",
        "German",
        "Turkic",
        "Arabic",
        "Chinese"
    ],
    "numcitedby": "3",
    "year": "2021",
    "month": "August",
    "title": "Trafilatura: {A} Web Scraping Library and Command-Line Tool for Text Discovery and Extraction"
}