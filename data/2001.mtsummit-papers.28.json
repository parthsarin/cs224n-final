{
    "article": "In Japanese constructions of the form [N 1 no Adj N 2 ], the adjective Adj modifies either N 1 or N 2 . Determing the semantic dependencies of adjective in such phrase is an important task for machine translation. This paper describes a method for determining the adjective dependency in such constructions using decision lists, and inducing decision lists from training contexts with correct semantic dependencies and without. Based on evaluation, our method is able to determine adjective dependency with an precision of about 94%. We further analyze rules in the induced decision lists and examine effective features to determine the semantic dependencies of adjectives. Introduction Background In Japanese constructions of the form [N 1 no Adj N 2 ], Adj can modify either N 1 or N 2 , where N 1 and N 2 are nouns, Adj is an adjective and \"no\" is an adnominal function word. The following are examples of this construction type: a) zo no nagai hana (elephant) (long) (trunk) \"an elephant's long trunk\" b) kami no nagai shojo (hair) (long) (girl) \"a girl with long hair\" The adjective \"nagai (long)\" modifies the proceeding noun \"hana (trunk)\" in noun phrase a), while the adjective \"nagai (long)\" modifies the preceding noun \"kami (hair)\" in noun phrase b). In terms of syntactic dependency, both adjectives modify the proceeding noun, because all words syntactically modify the succeeding word in Japanese. In terms of semantic dependency, however, adjectives can modify the preceding noun as in b). Obviously, determining the semantic dependencies of adjective is an important task for machine translation. Notice that the syntactic composition of a) and b) are the same in Japanese, but different in English. As the part-of-speech (POS hereafter) context of the two example noun phrases is the same, the determination of whether Adj semantically modifies N 1 or N 2 is strongly influenced by lexical items in the noun phrase. Therefore, lexical preferences are necessary to analyse semantic dependencies between adjectives and nouns. Related Work Tanaka and Ogino (1980) observed that the semantic dependency of the adjective is highly correlated with the semantic dependency between the two nouns in constructions of the form [N 1 no Adj N 2 ], and proposed a set of principles to determine the modifiee of the adjective (\"Noun-Noun Dependency Principles\") as follows: In Japanese constructions of the form [N 1 no Adj N 2 ], Principle 1 If [N 1 no N 2 ] is felicitous, 1 then Adj modi- fies N 2 . Principle 2 If [N 2 no N 1 ] is felicitous, then Adj modi- fies N 1 . Principle 3 If both [N 1 no N 2 ] and [N 2 no N 1 ] are felicitous, then Adj modifies the noun which it is most plausibly dependent on. In noun phrase a), for example, \"nagai (long)\" modifies \"hana (trunk)\" according to Principle 1, because \"zo no hana (an elephant's trunk)\" is semantically felicitous. On the other hand, in noun phrases b), \"nagai (long)\" modifies \"kami (hair)\" according to Principle 2, because \"shoujo no kami (hair of a girl)\" is felicitous. Principle 1 and 2 only consider the semantic dependency between the nouns surrounding the adjective, not the adjective itself, in determining the modifiee of the adjective. One fascinating characteristic of the Noun-Noun Dependency Principles is that Principle 1 and 2 are preferred to Principle 3 which directly considers the semantic dependency between the adjective and each noun. Hashimoto et al. (2000) proposed a statistical method for determining the modifiee of Adj according to the Noun-Noun Dependency Principles. First, they compare the relative occurrence of \"N 1 no N 2 \" with that of \"N 2 no N 1 \" in a training corpus. If the former is greater than the latter, they analyze \"N 1 no N 2 \" to be more felicitous and Adj as modifying N 1 according to Principle 1. Otherwise they analyze Adj as modifying N 2 according to Principle 2. While empirically verifying the validity of Principles 1 and 2, they do not consider semantic dependency between the adjective and each noun (Principle 3). Kikuchi and Itoh (1999) also proposed a method for determining semantic dependencies between words in constructions of the form [N 1 no Adj N 2 ]. They manually analyzed 2,029 example constructions, and derived seven rules for determining semantic dependencies. Their rules are based on the syntactic and semantic features of words appearing in the construction. They achieved an precision of 96.5% over 791 test phrases. The disadvantage of their method is that the number of adjectives covered by rules is highly restricted, because their rules are derived manually. In fact, their method relies on the semantic features of only 22 adjectives. There are considerable advantages to using automatic means to learn such rules to determine semantic dependencies. Purpose In this paper, we propose a method which automatically learns semantic dependencies between adjectives and nouns in Japanese constructions of the form [N 1 no Adj N 2 ]. We base our method on decision lists (Rivest, 1987) . Decision list have been applied to various tasks in natural language processing, such as accent restoration (Yarowsky, 1994) , word sense disambiguation (Yarowsky, 1995) , detection of homophone errors (Shinnou, 1999) , and a named entity task (Utsuro and Sassano, 2000) . Another goal of this paper is to explore features which are effective for determining the modifiee of adjectives. Especially, we are interested in examining the validity of lexical preferences between N 1 and N 2 , supported by the Noun-Noun Dependency Principles. One of the reason why we choose to use a decision lists is that the induced decision list can be interpreted easily in examining effective features in this task. Decision List Induction In this section, we describe the method for inducing a decision list (Rivest, 1987) to determine the modifiee of the adjective in constructions of the form [N 1 no Adj N 2 ]. The algorithm described here is essentially the same as in (Yarowsky, 1995) , except as detailed in Section 2.2.2. Deriving Decision Rules As training data, we extracted constructions of the form [N 1 no Adj N 2 ] from the RWC POStagged corpus (Hasida et al., 1998) by way of simple heuristics, finding POS sequences of type \"N 1 + no Adj N 2 + \". N i + is a sequence of one or more nouns, which we regard as a single com-pound noun. We manually annotated each extracted construction for Adj dependency. Next, we derived six rule types from the training noun phrases, as detailed in Table 1 . Rule (C \u2192 d) Type Adj = x \u2192 N 1 or N 2 A N 1 = x \u2192 N 1 or N 2 N1 N 2 = x \u2192 N 1 or N 2 N2 Adj = x & N 1 = y \u2192 N 1 or N 2 A+N1 Adj = x & N 2 = y \u2192 N 1 or N 2 A+N2 N 1 = x & N 2 = y \u2192 N 1 or N 2 N1+N2 \u2022 Adj = nagai(long) \u2192 N 2 \u2022 N 1 = zo(elephant) \u2192 N 2 \u2022 N 2 = hana(trunk) \u2192 N 2 \u2022 Adj = nagai(long) & N 1 = zo(elephant) \u2192 N 2 \u2022 Adj = nagai(long) & N 2 = hana(trunk) \u2192 N 2 \u2022 N 1 = zo(elephant) & N 2 = hana(trunk) \u2192 N 2 Actually, N 1 or N 2 in [N 1 no Adj N 2 ] can be a sequence of nouns as described above. Treating a sequence of nouns as a single compound noun leads to data sparseness, because the number of rule instances increases dramatically. To overcome this problem, we extracted rules which refer to only N h 1 and N h 2 , where N h i is the semantic head of compound noun N i + . In general, the semantic head of a Japanese compound noun is the last noun of that noun sequence, such that we were able to identify the semantic head of each compound noun {N 1 . . . N k } simply as the last noun N k . In addition to these rules, we also added the default rule (1), which is applicable to any input noun phrase. true \u2192 N 2 (1) Note that the default rule always analyzes the modifiee of Adj as N 2 , because N 2 is preferred to N 1 as the modifiee of Adj in the training data described in Section 3. Sorting Decision Rules The next step in constructing the decision list is to sort the decision rules, i.e. to determine the rule order. We constructed two decision lists: one based on log-likelihood (Section 2.2.1), and the other on the Noun-Noun Dependency Principles (Section 2.2.2). Decision list based on log-likelihood We define the log-likelihood L(r) of a rule r(C \u2192 d) as : L(r) = log P (d|C) P ( d|C) (2) P (d|C) is the probability that Adj modifies d when condition C is true, while P ( d|C) is the probability that Adj doesn't modify d. P (d|C) is estimated as : The rule r which is most strongly indicative of the modifiee of Adj will have the largest loglikelihood L(r). Sorting by L(r) will list the rules in order of reliablity. P (d|C) = O(C, d) + \u03b1 O(C) + \u03b1 (3) O(C) After sorting the decision rules, we removed some rules from the list. First, we discarded rules for which the log-likelihood was smaller than that of the default rule (1). In other words, the last rule in the list is always the default rule. Next, we removed \"redundant rules\". Redundant rules are the rules which can never be applied. For example, consider the following rules, r a and r b : r a Adj = a 1 \u2192 d 1 r b Adj = a 1 & N 1 = n 1 \u2192 d 2 If the log-likelihood of rule r a is greater than that of r b , rule r a is always used earlier than r b for determining the modifiee of Adj, and r b would never be used. As such, r b is redundant and can be removed from the list. Decision List based on the Noun-Noun Dependency Principles According to the Noun-Noun Dependency Principles described in Section 1.2, we should first check whether [N 1 no N 2 ] and [N 2 no N 1 ] are felicitous or not (Principles 1 and 2), then check for semantic dependencies between Adj and N 1 and Adj and N 2 (Principle 3). In the framework of decision lists, Noun-Noun Dependency Principles correspond to rules of type N1+N2 being applied first, followed by rules of type A+N1 and A+N2. Simulating Noun-Noun Dependency Principles by a decision list, we sort the rules by their type in the following order: N 1 + N 2 > A + N 2 > A + N 1 > N 1 > A > N 2 (4) Rules of the same type are sorted in decreasing order of log-likelihood based on Equation (2). We removed rules for which the log-likelihood is lower than that of the default rule. Unlike decision lists sorted in order of log-likelihood, there is no redundancy in a decision list ordered based on (4), because rules associated with two words (types N1+N2, A+N2 and A+N1) are always ranked higher than rules associated with a single word (types N1, A and N2). Bootstrap The decision list induction method described above needs training data annotated with semantic dependencies between Adj and N i , and as such constitutes supervised learning. However, the cost in manually annoting semantic dependencies is high. Utilizing unannotated training data enables us to extend the size of the training data. For this reason, we introduce the following bootstrapping algorithm: 1 For annotated training noun phrases with semantic dependencies T c , and unannotated training noun phrases T u . 2 Induce decision list dl 1 from T c . 3 Determine the modifiee of Adj for each noun phrase in T u using decision list dl i . 4 Induce decision list dl i+1 from both T c and T u . 5 Repeat steps 3 and 4 until no classificational change is seen in T u (using dl i and dl i+1 ). Experiment Inducing Decision Lists We used the RWC POS-tagged corpus (Hasida et al., 1998) We induced two decision lists, dl-L and dl-T: dl-L is the log-likelihood-based decision list (see Section 2.2.1), while dl-T is the Noun-Noun Dependency Principles-based decision list (see Section 2.2.2). With the bootstrapping algorithm (see Section 2.3), the learning process converged after 5 iterations for dl-L, and 2 iterations for dl-T. Results The results of our experiment are given in Table 2. BL (baseline) indicates a naive strategy, where by N 2 is analyzed as modifying Adj for all test cases. The definitions of \"Precision\" and \"Applicability\" are as follows: P recision def = x y \u00d7 100 (5) Applicability def = y z \u00d7 100 (6) x: # of noun phrases where the modifiee of the adjective was correctly identified. y: # of noun phrases where the modifiee of the adjective was identified by decision rules (other than default rule). z: total number of noun phrases in the test set. The precisions of both dl-L and dl-T were about 94%, much higher than that of the baseline, and the applicabilities were almost 100%. On the other hand, the gain achieved by bootstrapping was small. Comparing these results with previous work, the precision is higher than the 92% figure 2000 ), but lower than the 97% figure cited by Kikuchi and Itoh (1999) , while the applicability achieved with our method is much higher than that for these two methods. The applicability of Hashimoto et al.'s method was 61%, because they considered only N 1 and N 2 and ignored Adj. Kikuchi and Itoh don't indicate the applicability of their method, but the number of adjectives covered by their rules is highly restricted: they used semantic features of only 22 adjectives. In dl-L, on the other hand, 536 adjectives were observed in rules of type A, i.e. the semantic dependencies in noun phrases with these 536 adjectives can be determined by dl-L. Effective Features Next, we examined which types of decision rules are effective in determining the modifiee of adjectives. Figure 1 indicates the number of induced rules in the decision list associated with the 6 rule types. Figure 2 indicates the number of times the various rule types were activated in determining the modifiee of Adj with the test noun phrases. Figure 3 indicates the precision of each rule type. In dl-L, a large propotion of induced rules were of types N1 and N2. The reason is that the log-likelihood of rules associated with two words (types A+N1, A+N2 and N1+N2) tends to be smaller than that of rules associated with a single word (types A, N1 and N2), and many instances of the lower rule type were thus removed from the list on the grounds of being redundant 2 . In fact, 81 of the top 100 rules in dl-L were associated with a single word. This is contrary to the prediction of the Noun-Noun Dependency Principles that rules of type N1+N2 would be most highly ranked. Furthermore, many rules of type A, N1 and N2 were activated during testing as shown in Figure 2 . Despite rules of type A being fewest in number, they were activated with the greatest frequency in testing (dl-L). In addition to this, the mean precision of rules of type A is high at about 95%, as shown in Figure 3 . It indicates that semantic dependency in constructions of the form [N 1 no Adj N 2 ] is largely determined by Adj. The precision of dl-T, based on the Noun-Noun Dependency Principles, is almost equal to that of dl-L. Compared with dl-L, many rules of type N1+N2 were activated in the test phrase , performing at a relatively high precision of around 93%. Although rules of type N1+N2 ranked lower with dl-L, they were still effective in determining the semantic dependency of [N 1 no Adj N 2 ] constructons, underlining the validity of the Noun-Noun Dependency Principles. Conclusion In this paper, we proposed two methods for inducing decision lists to determine the semantic dependency of adjectives in Japanese construction of the form [N 1 no Adj N 2 ]. In the first method, the decision list was sorted in decreasing order of log-likelihood, in the second, it was based on Noun-Noun Dependency Principles. For both methods, the precision and applicability of the induced decision list were around 94% and 100%, respectively. We also examined the effectiveness of different rule types. In dl-L (method 1), rules of type N1 and N2 were induced with greatest frequency, and rules of type A were activated most frequently in testing. Furthermore, as suggested by the Noun-Noun Dependency Principles, rules of type N1+N2 were also found to be effective in determining the modifiee of the adjective One reason why rules of type N1+N2 ranked lower in dl-L is that the number of nouns types is much greater than that of adjectives, leading to data sparseness. In the future, we intend to devise a method to induce a decision list using semantic classes in order to overcome this problem.",
    "abstract": "In Japanese constructions of the form [N 1 no Adj N 2 ], the adjective Adj modifies either N 1 or N 2 . Determing the semantic dependencies of adjective in such phrase is an important task for machine translation. This paper describes a method for determining the adjective dependency in such constructions using decision lists, and inducing decision lists from training contexts with correct semantic dependencies and without. Based on evaluation, our method is able to determine adjective dependency with an precision of about 94%. We further analyze rules in the induced decision lists and examine effective features to determine the semantic dependencies of adjectives.",
    "countries": [
        "Japan"
    ],
    "languages": [
        "Japanese"
    ],
    "numcitedby": "1",
    "year": "2001",
    "month": "September 18-22",
    "title": "Decision lists for determining adjective dependency in {J}apanese"
}