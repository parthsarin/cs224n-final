{
    "article": "We introduce the brat rapid annotation tool (BRAT), an intuitive web-based tool for text annotation supported by Natural Language Processing (NLP) technology. BRAT has been developed for rich structured annotation for a variety of NLP tasks and aims to support manual curation efforts and increase annotator productivity using NLP techniques. We discuss several case studies of real-world annotation projects using pre-release versions of BRAT and present an evaluation of annotation assisted by semantic class disambiguation on a multicategory entity mention annotation task, showing a 15% decrease in total annotation time. BRAT is available under an opensource license from: http://brat.nlplab.org Introduction Manually-curated gold standard annotations are a prerequisite for the evaluation and training of state-of-the-art tools for most Natural Language Processing (NLP) tasks. However, annotation is also one of the most time-consuming and financially costly components of many NLP research efforts, and can place heavy demands on human annotators for maintaining annotation quality and consistency. Yet, modern annotation tools are generally technically oriented and many offer little support to users beyond the minimum required functionality. We believe that intuitive and userfriendly interfaces as well as the judicious application of NLP technology to support, not supplant, human judgements can help maintain the quality of annotations, make annotation more accessible to non-technical users such as subject * These authors contributed equally to this work domain experts, and improve annotation productivity, thus reducing both the human and financial cost of annotation. The tool presented in this work, BRAT, represents our attempt to realise these possibilities. Features High-quality Annotation Visualisation BRAT is based on our previously released opensource STAV text annotation visualiser (Stenetorp et al., 2011b) , which was designed to help users gain an understanding of complex annotations involving a large number of different semantic types, dense, partially overlapping text annotations, and non-projective sets of connections between annotations. Both tools share a vector graphics-based visualisation component, which provide scalable detail and rendering. BRAT integrates PDF and EPS image format export functionality to support use in e.g. figures in publications (Figure 1 ). Figure 2 : Screenshot of the main BRAT user-interface, showing a connection being made between the annotations for \"moving\" and \"Citibank\". Intuitive Annotation Interface We extended the capabilities of STAV by implementing support for annotation editing. This was done by adding functionality for recognising standard user interface gestures familiar from text editors, presentation software, and many other tools. In BRAT, a span of text is marked for annotation simply by selecting it with the mouse by \"dragging\" or by double-clicking on a word. Similarly, annotations are linked by clicking with the mouse on one annotation and dragging a connection to the other (Figure 2 ). BRAT is browser-based and built entirely using standard web technologies. It thus offers a familiar environment to annotators, and it is possible to start using BRAT simply by pointing a standards-compliant modern browser to an installation. There is thus no need to install or distribute any additional annotation software or to use browser plug-ins. The use of web standards also makes it possible for BRAT to uniquely identify any annotation using Uniform Resource Identifiers (URIs), which enables linking to individual annotations for discussions in e-mail, documents and on web pages, facilitating easy communication regarding annotations. Versatile Annotation Support BRAT is fully configurable and can be set up to support most text annotation tasks. The most basic annotation primitive identifies a text span and assigns it a type (or tag or label), marking for e.g. POS-tagged tokens, chunks or entity mentions (Figure 1 top ). These base annotations can be connected by binary relations -either directed or undirected -which can be configured for e.g. simple relation extraction, or verb frame annotation (Figure 1 middle and bottom). n-ary associations of annotations are also supported, allowing the annotation of event structures such as those targeted in the MUC (Sundheim, 1996) , ACE (Doddington et al., 2004) , and BioNLP (Kim et al., 2011) Information Extraction (IE) tasks (Figure 2 ). Additional aspects of annotations can be marked using attributes, binary or multi-valued flags that can be added to other annotations. Finally, annotators can attach free-form text notes to any annotation. In addition to information extraction tasks, these annotation primitives allow BRAT to be configured for use in various other tasks, such as chunking (Abney, 1991) , Semantic Role Labeling (Gildea and Jurafsky, 2002; Carreras and M\u00e0rquez, 2005) , and dependency annotation (Nivre, 2003) (See Figure 1 for examples). Further, both the BRAT client and server implement full support for the Unicode standard, which allow the tool to support the annotation of text using e.g. Chinese or Devan\u0101gar\u012b characters. BRAT is distributed with examples from over 20 corpora for a variety of tasks, involving texts in seven different languages and including examples from corpora such as those introduced for the CoNLL shared tasks on language-independent named entity recognition (Tjong Kim Sang and De Meulder, 2003) and multilingual dependency parsing (Buchholz and Marsi, 2006) . BRAT also implements a fully configurable system for checking detailed constraints on annotation semantics, for example specifying that a TRANSFER event must take exactly one of each of GIVER, RECIPIENT and BENEFICIARY arguments, each of which must have one of the types PERSON, ORGANIZATION or GEO-POLITICAL ENTITY, as well as a MONEY argument of type , 2005) . Constraint checking is fully integrated into the annotation interface and feedback is immediate, with clear visual effects marking incomplete or erroneous annotations (Figure 3 ). NLP Technology Integration BRAT supports two standard approaches for integrating the results of fully automatic annotation tools into an annotation workflow: bulk annotation imports can be performed by format conversion tools distributed with BRAT for many standard formats (such as in-line and columnformatted BIO), and tools that provide standard web service interfaces can be configured to be invoked from the user interface. However, human judgements cannot be replaced or based on a completely automatic analysis without some risk of introducing bias and reducing annotation quality. To address this issue, we have been studying ways to augment the annotation process with input from statistical and machine learning methods to support the annotation process while still involving human annotator judgement for each annotation. As a specific realisation based on this approach, we have integrated a recently introduced machine learning-based semantic class disambiguation system capable of offering multiple outputs with probability estimates that was shown to be able to reduce ambiguity on average by over 75% while retaining the correct class in on average 99% of cases over six corpora (Stenetorp et al., 2011a) . Section 4 presents an evaluation of the contribution of this component to annotator productivity. Corpus Search Functionality BRAT implements a comprehensive set of search functions, allowing users to search document col-Figure 4 : The BRAT search dialog lections for text span annotations, relations, event structures, or simply text, with a rich set of search options definable using a simple point-and-click interface (Figure 4 ). Additionally, search results can optionally be displayed using keyword-incontext concordancing and sorted for browsing using any aspect of the matched annotation (e.g. type, text, or context). Implementation BRAT is implemented using a client-server architecture with communication over HTTP using JavaScript Object Notation (JSON). The server is a RESTful web service (Fielding, 2000) and the tool can easily be extended or adapted to switch out the server or client. The client user interface is implemented using XHTML and Scalable Vector Graphics (SVG), with interactivity implemented using JavaScript with the jQuery library. The client communicates with the server using Asynchronous JavaScript and XML (AJAX), which permits asynchronous messaging. BRAT uses a stateless server back-end implemented in Python and supports both the Common Gateway Interface (CGI) and FastCGI protocols, the latter allowing response times far below the 100 ms boundary for a \"smooth\" user experience without noticeable delay (Card et al., 1983) . For server side annotation storage BRAT uses an easyto-process file-based stand-off format that can be converted from or into other formats; there is no need to perform database import or export to interface with the data storage. The BRAT server in- stallation requires only a CGI-capable web server and the set-up supports any number of annotators who access the server using their browsers, on any operating system, without separate installation. Client-server communication is managed so that all user edit operations are immediately sent to the server, which consolidates them with the stored data. There is no separate \"save\" operation and thus a minimal risk of data loss, and as the authoritative version of all annotations is always maintained by the server, there is no chance of conflicting annotations being made which would need to be merged to produce an authoritative version. The BRAT client-server architecture also makes real-time collaboration possible: multiple annotators can work on a single document simultaneously, seeing each others edits as they appear in a document. Case Studies Annotation Projects BRAT has been used throughout its development during 2011 in the annotation of six different corpora by four research groups in efforts that have in total involved the creation of well-over 50,000 annotations in thousands of documents comprising hundreds of thousands of words. These projects include structured event annotation for the domain of cancer biology, Japanese verb frame annotation, and genemutation-phenotype relation annotation. One prominent effort making use of BRAT is the BioNLP Shared Task 2011, 1 in which the tool was used in the annotation of the EPI and ID main task corpora (Pyysalo et al., 2012) . These two information extraction tasks involved the annotation of entities, relations and events in the epigenetics and infectious diseases subdomains of biology. Figure 5 shows an illustration of shared task annotations. Many other annotation efforts using BRAT are still ongoing. We refer the reader to the BRAT Table 1 : Total annotation time, portion spent selecting annotation type, and absolute improvement for rapid mode. website 2 for further details on current and past annotation projects using BRAT. Automatic Annotation Support To estimate the contribution of the semantic class disambiguation component to annotation productivity, we performed a small-scale experiment involving an entity and process mention tagging task. The annotation targets were of 54 distinct mention types (19 physical entity and 35 event/process types) marked using the simple typed-span representation. To reduce confounding effects from annotator productivity differences and learning during the task, annotation was performed by a single experienced annotator with a Ph.D. in biology in a closely related area who was previously familiar with the annotation task. The experiment was performed on publication abstracts from the biomolecular science subdomain of glucose metabolism in cancer. The texts were drawn from a pool of 1,750 initial candidates using stratified sampling to select pairs of 10-document sets with similar overall statistical properties. 3 Four pairs of 10 documents (80 in total) were annotated in the experiment, with 10 in each pair annotated with automatic support and 10 without, in alternating sequence to prevent learning effects from favouring either approach. The results of this experiment are summarized in Table 1 and Figure 6 . In total 1,546 annotations were created in normal mode and 1,541 annota- tions in rapid mode; the sets are thus highly comparable. We observe a 15.4% reduction in total annotation time, and, as expected, this is almost exclusively due to a reduction in the time the annotator spent selecting the type to assign to each span, which is reduced by 30.7%; annotation time is otherwise stable across the annotation modes (Figure 6 ). The reduction in the time spent in selecting the span is explained by the limiting of the number of candidate types exposed to the annotator, which were decreased from the original 54 to an average of 2.88 by the semantic class disamcomponent (Stenetorp et al., 2011a) . Although further research is needed to establish the benefits of this approach in various annotation tasks, we view the results of this initial experiment as promising regarding the potential of our approach to using machine learning to support annotation efforts. Related Work and Conclusions We have introduced BRAT, an intuitive and userfriendly web-based annotation tool that aims to enhance annotator productivity by closely integrating NLP technology into the annotation process. BRAT has been and is being used for several ongoing annotation efforts at a number of academic institutions and has so far been used for the creation of well-over 50,000 annotations. We presented an experiment demonstrating that integrated machine learning technology can reduce the time for type selection by over 30% and overall annotation time by 15% for a multi-type entity mention annotation task. The design and implementation of BRAT was informed by experience from several annotation tasks and research efforts spanning more than a decade. A variety of previously introduced annotation tools and approaches also served to guide our design decisions, including the fast annotation mode of Knowtator (Ogren, 2006) , the search capabilities of the XConc tool (Kim et al., 2008) , and the design of web-based systems such as MyMiner (Salgado et al., 2010) , and GATE Teamware (Cunningham et al., 2011) . Using machine learning to accelerate annotation by supporting human judgements is well documented in the literature for tasks such as entity annotation (Tsuruoka et al., 2008) and translation (Mart\u00ednez-G\u00f3mez et al., 2011) , efforts which served as inspiration for our own approach. BRAT, along with conversion tools and extensive documentation, is freely available under the open-source MIT license from its homepage at http://brat.nlplab.org Acknowledgements The authors would like to thank early adopters of BRAT who have provided us with extensive feedback and feature suggestions. This work was supported by Grant-in-Aid for Specially Promoted Research (MEXT, Japan), the UK Biotechnology and Biological Sciences Research Council (BB-SRC) under project Automated Biological Event Extraction from the Literature for Drug Discovery (reference number: BB/G013160/1), and the Royal Swedish Academy of Sciences.",
    "abstract": "We introduce the brat rapid annotation tool (BRAT), an intuitive web-based tool for text annotation supported by Natural Language Processing (NLP) technology. BRAT has been developed for rich structured annotation for a variety of NLP tasks and aims to support manual curation efforts and increase annotator productivity using NLP techniques. We discuss several case studies of real-world annotation projects using pre-release versions of BRAT and present an evaluation of annotation assisted by semantic class disambiguation on a multicategory entity mention annotation task, showing a 15% decrease in total annotation time. BRAT is available under an opensource license from: http://brat.nlplab.org",
    "countries": [
        "China",
        "Japan",
        "United Kingdom"
    ],
    "languages": [
        "Japanese",
        "Chinese"
    ],
    "numcitedby": "1065",
    "year": "2012",
    "month": "April",
    "title": "brat: a Web-based Tool for {NLP}-Assisted Text Annotation"
}