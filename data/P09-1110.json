{
    "article": "We consider the problem of learning context-dependent mappings from sentences to logical form. The training examples are sequences of sentences annotated with lambda-calculus meaning representations. We develop an algorithm that maintains explicit, lambda-calculus representations of salient discourse entities and uses a context-dependent analysis pipeline to recover logical forms. The method uses a hidden-variable variant of the perception algorithm to learn a linear model used to select the best analysis. Experiments on context-dependent utterances from the ATIS corpus show that the method recovers fully correct logical forms with 83.7% accuracy. Introduction Recently, researchers have developed algorithms that learn to map natural language sentences to representations of their underlying meaning (He and Young, 2006; Wong and Mooney, 2007; Zettlemoyer and Collins, 2005) . For instance, a training example might be: Sent. 1: List flights to Boston on Friday night. LF 1: \u03bbx.f light(x) \u2227 to(x, bos) \u2227 day(x, f ri) \u2227 during(x, night) Here the logical form (LF) is a lambda-calculus expression defining a set of entities that are flights to Boston departing on Friday night. Most of this work has focused on analyzing sentences in isolation. In this paper, we consider the problem of learning to interpret sentences whose underlying meanings can depend on the context in which they appear. For example, consider an interaction where Sent. 1 is followed by the sentence: Sent. 2: Show me the flights after 3pm. LF 2: \u03bbx.f light(x) \u2227 to(x, bos) \u2227day(x, f ri) \u2227 depart(x) > 1500 In this case, the fact that Sent. 2 describes flights to Boston on Friday must be determined based on the context established by the first sentence. We introduce a supervised, hidden-variable approach for learning to interpret sentences in context. Each training example is a sequence of sentences annotated with logical forms. Figure 1 shows excerpts from three training examples in the ATIS corpus (Dahl et al., 1994) . For context-dependent analysis, we develop an approach that maintains explicit, lambda-calculus representations of salient discourse entities and uses a two-stage pipeline to construct contextdependent logical forms. The first stage uses a probabilistic Combinatory Categorial Grammar (CCG) parsing algorithm to produce a contextindependent, underspecified meaning representation. The second stage resolves this underspecified meaning representation by making a sequence of modifications to it that depend on the context provided by previous utterances. In general, there are a large number of possible context-dependent analyses for each sentence. To select the best one, we present a weighted linear model that is used to make a range of parsing and context-resolution decisions. Since the training data contains only the final logical forms, we model these intermediate decisions as hidden variables that must be estimated without explicit supervision. We show that this model can be effectively trained with a hidden-variable variant of the perceptron algorithm. In experiments on the ATIS DEC94 test set, the approach recovers fully correct logical forms with 83.7% accuracy. pression z i,j specifying the target logical form. Figure 1 contains example interactions. The logical forms in the training set are representations of each sentence's underlying meaning. In most cases, context (the previous utterances and their interpretations) is required to recover the logical form for a sentence. For instance, in Example 1(b) in Figure 1 , the sentence \"show me the ones that leave in the morning\" is paired with \u03bbx.f light(x) \u2227 f rom(x, bos) \u2227 to(x, phi) \u2227 during(x, morning) Some parts of this logical form (f rom(x, bos) and to(x, phi)) depend on the context. They have to be recovered from the previous logical forms. At step j in interaction i, we define the context z i,1 , . . . , z i,j\u22121 to be the j \u2212 1 preceding logical forms. 1 Now, given the training data, we can create training examples (x i,j , z i,j ) for i = 1 . . . n, j = 1 . . . n i . Each x i,j is a sentence and a context, x i,j = (w i,j , z i,1 , . . . , z i,j\u22121 ). Given this set up, we have a supervised learning problem with input x i,j and output z i,j . Overview of Approach In general, the mapping from a sentence and a context to a logical form can be quite complex. In this section, we present an overview of our learning approach. We assume the learning algorithm has access to: \u2022 A training set D, defined in Section 2. \u2022 A CCG lexicon. 2 See Section 4 for an overview of CCG. Each entry in the lexicon pairs a word (or sequence of words), with a CCG category specifying both the syntax and semantics for that word. One example CCG entry would pair flights with the category N : \u03bbx.f light(x). Derivations A derivation for the j'th sentence in an interaction takes as input a pair x = (w j , C), where C = z 1 . . . z j\u22121 is the current context. It produces a logical form z. There are two stages: \u2022 First, the sentence w j is parsed using the CCG lexicon to form an intermediate, context-independent logical form \u03c0. \u2022 Second, in a series of steps, \u03c0 is mapped to z. These steps depend on the context C. As one sketch of a derivation, consider how we might analyze Example 1(b) in Figure 1 . In this case the sentence is \"show me the ones that leave in the morning.\" The CCG parser would produce the following context-independent logical form: \u03bbx.! e, t (x) \u2227 during(x, morning) The subexpression ! e, t results directly from the referential phrase the ones; we discuss this in more detail in Section 4.2, but intuitively this subexpression specifies that a lambda-calculus expression of type e, t must be recovered from the context and substituted in its place. In the second (contextually dependent) stage of the derivation, the expression \u03bbx.f light(x) \u2227 f rom(x, bos) \u2227 to(x, phi) is recovered from the context, and substituted for the ! e, t subexpression, producing the desired final logical form, seen in Example 1(b). In addition to substitutions of this type, we will also perform other types of context-dependent resolution steps, as described in Section 5. In general, both of the stages of the derivation involve considerable ambiguity -there will be a large number of possible context-independent logical forms \u03c0 for w j and many ways of modifying each \u03c0 to create a final logical form z j . Learning We model the problem of selecting the best derivation as a structured prediction problem (Johnson et al., 1999; Lafferty et al., 2001; Collins, 2002; Taskar et al., 2004) . We present a linear model with features for both the parsing and context resolution stages of the derivation. In our setting, the choice of the context-independent logical form \u03c0 and all of the steps that map \u03c0 to the output z are hidden variables; these steps are not annotated in the training data. To estimate the parameters of the model, we use a hidden-variable version of the perceptron algorithm. We use an approximate search procedure to find the best derivation both while training the model and while applying it to test examples. Evaluation We evaluate the approach on sequences of sentences w 1 , . . . , w k . For each w j , the algorithm constructs an output logical form z j which is compared to a gold standard annotation to check correctness. At step j, the context contains the previous z i , for i < j, output by the system. Context-independent Parsing In this section, we first briefly review the CCG parsing formalism. We then define a set of extensions that allow the parser to construct logical forms containing references, such as the ! e, t expression from the example derivation in Section 3. Background: CCG CCG is a lexicalized, mildly context-sensitive parsing formalism that models a wide range of linguistic phenomena (Steedman, 1996; Steedman, 2000) . Parses are constructed by combining lexical entries according to a small set of relatively simple rules. For example, consider the lexicon flights := N : \u03bbx.f light(x) to := (N \\N )/N P : \u03bby.\u03bbf.\u03bbx.f (x) \u2227 to(x, y) boston := N P : boston Each lexical entry consists of a word and a category. Each category includes syntactic and semantic content. For example, the first entry pairs the word flights with the category N : \u03bbx.f light(x). This category has syntactic type N , and includes the lambda-calculus semantic expression \u03bbx.f light(x). In general, syntactic types can either be simple types such as N , N P , or S, or can be more complex types that make use of slash notation, for example (N \\N )/N P . CCG parses construct parse trees according to a set of combinator rules. For example, consider the functional application combinators: 3 A/B : f B : g \u21d2 A : f (g) (>) B : g A\\B : f \u21d2 A : f (g) (<) The first rule is used to combine a category with syntactic type A/B with a category to the right of syntactic type B to create a new category of type A. It also constructs a new lambda-calculus expression by applying the function f to the expression g. The second rule handles arguments to the left. Using these rules, we can parse the following phrase: flights to boston N (N \\N )/N P N P \u03bbx.f light(x) \u03bby.\u03bbf.\u03bbx.f (x) \u2227 to(x, y) boston > (N \\N ) \u03bbf.\u03bbx.f (x) \u2227 to(x, boston) < N \u03bbx.f light(x) \u2227 to(x, boston) The top-most parse operations pair each word with a corresponding category from the lexicon. The later steps are labeled with the rule that was applied (\u2212> for the first and \u2212< for the second). Parsing with References In this section, we extend the CCG parser to introduce references. We use an exclamation point followed by a type expression to specify references in a logical form. For example, !e is a reference to an entity and ! e, t is a reference to a function. As motivated in Section 3, we introduce these expressions so they can later be replaced with appropriate lambda-calculus expressions from the context. Sometimes references are lexically triggered. For example, consider parsing the phrase \"show me the ones that leave in the morning\" from Example 1(b) in Figure 1 . Given the lexical entry: ones := N : \u03bbx.! e, t (x) a CCG parser could produce the desired context-independent logical form: \u03bbx.! e, t (x) \u2227 during(x, morning) Our first extension is to simply introduce lexical items that include references into the CCG lexicon. They describe anaphoric words, for example including \"ones,\" \"those,\" and \"it.\" In addition, we sometimes need to introduce references when there is no explicit lexical trigger. For instance, Example 2(c) in Figure 1 consists of the single word \"cheapest.\" This query has the same meaning as the longer request \"show me the cheapest one,\" but it does not include the lexical reference. We add three CCG type-shifting rules to handle these cases. The first two new rules are applicable when there is a category that is expecting an argument with type e, t . This argument is replaced with a ! e, t reference: A/B : f \u21d2 A : f (\u03bbx.! e, t (x)) A\\B : f \u21d2 A : f (\u03bbx.! e, t (x)) For example, using the first rule, we could produce the following parse for Example 2(c) cheapest N P/N \u03bbg.argmin(\u03bbx.g(x), \u03bby.f are(y)) N P argmin(\u03bbx.! e, t (x), \u03bby.f are(y)) where the final category has the desired lambdacaculus expression. The third rule is motivated by examples such as \"show me nonstop flights.\" Consider this sentence being uttered after Example 1(a) in Figure 1 . Although there is a complete, context-independent meaning, the request actually restricts the salient set of flights to include only the nonstop ones. To achieve this analysis, we introduce the rule: A : f \u21d2 A : \u03bbx.f (x) \u2227 ! e, t (x) where f is an function of type e, t . With this rule, we can construct the parse nonstop flights N/N N \u03bbf.\u03bbx.f (x) \u2227 nonstop(x) \u03bbx.f light(x) > N \u03bbx.nonstop(x) \u2227 f light(x) N \u03bbx.nonstop(x) \u2227 f light(x) \u2227 ! e, t (x) where the last parsing step is achieved with the new type-shifting rule. These three new parsing rules allow significant flexibility when introducing references. Later, we develop an approach that learns when to introduce references and how to best resolve them. Contextual Analysis In this section, we first introduce the general patterns of context-dependent analysis that we consider. We then formally define derivations that model these phenomena. Overview This section presents an overview of the ways that the context C is used during the analysis. References Every reference expression (!e or ! e, t ) must be replaced with an expression from the context. For example, in Section 3, we considered the following logical form: \u03bbx.! e, t (x) \u2227 during(x, morning) In this case, we saw that replacing the ! e, t subexpression with the logical form for Example 1(a), which is directly available in C, produces the desired final meaning. Elaborations Later statements can expand the meaning of previous ones in ways that are difficult to model with references. For example, consider analyzing Example 2(c) in Figure 1 . Here the phrase \"departing wednesday after 5 o'clock\" has a context-independent logical form: 4 \u03bbx.day(x, wed) \u2227 depart(x) > 1700 (1) that must be combined with the meaning of the previous sentence from the context C: argmin(\u03bbx.f ight(x) \u2227 f rom(x, mil) \u2227 to(x, orl), \u03bby.f are(y)) to produce the expression argmin(\u03bbx.f ight(x) \u2227 f rom(x, mil) \u2227 to(x, orl) \u2227day(x, wed) \u2227 depart(x) > 1700, \u03bby.f are(y)) Intuitively, the phrase \"departing wednesday after 5 o'clock\" is providing new constraints for the set of flights embedded in the argmin expression. We handle examples of this type by constructing elaboration expressions from the z i in C. For example, if we constructed the following function: \u03bbf.argmin(\u03bbx.f ight(x) \u2227 f rom(x, mil) \u2227 to(x, orl) \u2227 f (x), (2) \u03bby.f are(y)) we could apply this function to Expression 1 and produce the desired result. The introduction of the new variable f provides a mechanism for expanding the embedded subexpression. We need to construct this from the contextindependent logical form: References with Deletion \u03bbx.! e, t \u2227 day(x, thur) \u2227 during(x, af ternoon) The reference ! e, t must be resolved. The only expression in the context C is the meaning from the previous sentence, Example 3(a): \u03bbx.f light(x) \u2227 f rom(x, pit) \u2227 to(x, la) (3) \u2227 day(x, thur) \u2227 during(x, evening) Substituting this expression directly would produce the following logical form: \u03bbx.f light(x) \u2227 f rom(x, pit) \u2227 to(x, la) \u2227 day(x, thur) \u2227 during(x, evening) \u2227 day(x, thur) \u2227 during(x, af ternoon) which specifies the day twice and has two different time spans. We can achieve the desired analysis by deleting parts of expressions before they are substituted. For example, we could remove the day and time constraints from Expression 3 to create: \u03bbx.f light(x) \u2227 f rom(x, pit) \u2227 to(x, la) which would produce the desired final meaning when substituted into the original expression. Elaborations with Deletion We also allow deletions for elaborations. In this case, we delete subexpressions of the elaboration expression that is constructed from the context. Derivations We now formally define a derivation that maps a sentence w j and a context C = {z 1 , . . . , z j\u22121 } to an output logical form z j . We first introduce notation for expressions in C that we will use in the derivation steps. We then present a definition of deletion. Finally, we define complete derivations. Context Sets Given a context C, our algorithm constructs three sets of expressions: \u2022 R e (C): A set of e-type expressions that can be used to resolve references. \u2022 R e,t (C): A set of e, t -type expressions that can be used to resolve references. \u2022 E(C): A set of possible elaboration expressions (for example, see Expression 2). We will provide the details of how these sets are defined in Section 5.3. As an example, if C contains only the logical form \u03bbx.f light(x) \u2227 f rom(x, pit) \u2227 to(x, la) then R e (C) = {pit, la} and R e,t (C) is a set that contains a single entry, the complete logical form. Deletion A deletion operator accepts a logical form l and produces a new logical form l . It constructs l by removing a single subexpression that appears in a coordination (conjunction or disjunction) in l. For example, if l is \u03bbx.f light(x) \u2227 f rom(x, pit) \u2227 to(x, la) there are three possible deletion operations, each of which removes a single subexpression. Derivations We now formally define a derivation to be a sequence d = (\u03a0, s 1 , . . . , s m ). \u03a0 is a CCG parse that constructs a context-independent logical form \u03c0 with m \u2212 1 reference expressions. 5  Each s i is a function that accepts as input a logical form, makes some change to it, and produces a new logical form that is input to the next function s i+1 . The initial s i for i < m are reference steps. The final s m is an optional elaboration step. \u2022 Reference Steps: A reference step is a tuple (l, l , f, r, r 1 , . . . , r p ). This operator selects a reference f in the input logical form l and an appropriately typed expression r from either R e (C) or R e,t (C). It then applies a sequence of p deletion operators to create new expressions r 1 . . . r p . Finally, it constructs the output logical form l by substituting r p for the selected reference f in l. \u2022 Elaboration Steps: An elaboration step is a tuple (l, l , b, b 1 , . . . , b q ). This operator selects an expression b from E(C) and applies q deletions to create new expressions b 1 . . . b q . The output expression l is b q (l). In general, the space of possible derivations is large. In Section 6, we describe a linear model and decoding algorithm that we use to find high scoring derivations. Context Sets For a context C = {z 1 , . . . , z j\u22121 }, we define sets R e (C), R e,t (C), and E(C) as follows. e-type Expressions R e (z) is a set of e-type expressions extracted from a logical form z. We define R e (C) = j\u22121 i=1 R e (z i ). R e (z) includes all e-type subexpressions of z. 6 For example, if z is argmin(\u03bbx.f light(x) \u2227 f rom(x, mil) \u2227 to(x, orl), \u03bby.f are(y)) the resulting set is R e (z) = {mil, orl, z}, where z is included because the entire argmin expression has type e. e, t -type Expressions R e,t (z) is a set of e, t -type expressions extracted from a logical form z. We define R e,t (C) = j\u22121 i=1 R e,t (z i ). The set R e,t (z) contains all of the e, t -type subexpressions of z. For each quantified variable x in z, it also contains a function \u03bbx.g. The expression g contains the subexpressions in the scope of x that do not have free variables. For example, if z is \u03bby.\u2203x.f light(x) \u2227 f rom(x, bos) \u2227 to(x, phi) \u2227 during(x, morning) \u2227 aircraf t(x) = y R e,t (z) would contain two functions: the entire expression z and the function \u03bbx.f light(x) \u2227 f rom(x, bos) \u2227 to(x, phi) \u2227 during(x, morning) constructed from the variable x, where the subexpression aircraf t(x) = y has been removed because it contains the free variable y. Elaboration Expressions Finally, E(z) is a set of elaboration expressions constructed from a logical form z. We define E(C) = j\u22121 i=1 E(z i ). E(z) is defined by enumerating the places where embedded variables are found in z. For each logical variable x and each coordination (conjunction or disjunction) in the scope of x, a new expression is created by defining a function \u03bbf.z where z has the function f (x) added to the appropriate coordination. This procedure would produce the example elaboration Expression 2 and elaborations that expand other embedded expressions, such as the quantifier in Example 1(c). A Linear Model In general, there will be many possible derivations d for an input sentence w in the current context C. In this section, we introduce a weighted linear model that scores derivations and a decoding algorithm that finds high scoring analyses. We define GEN(w; C) to be the set of possible derivations d for an input sentence w given a context C, as described in Section 5.2. Let \u03c6(d) \u2208 R m be an m-dimensional feature representation for a derivation d and \u03b8 \u2208 R m be an m-dimensional parameter vector. The optimal derivation for a sentence w given context C and parameters \u03b8 is d * (w; C) = arg max d\u2208GEN(w;C) \u03b8 \u2022 \u03c6(d) Decoding We now describe an approximate algorithm for computing d * (w; C). The CCG parser uses a CKY-style chart parsing algorithm that prunes to the top N = 50 entries for each span in the chart. We use a beam search procedure to find the best contextual derivations, with beam size N = 50. The beam is initialized to the top N logical forms from the CCG parser. The derivations are extended with reference and elaboration steps. The only complication is selecting the sequence of deletions. For each possible step, we use a greedy search procedure that selects the sequence of deletions that would maximize the score of the derivation after the step is applied. Training is online and error-driven. Step 1 parses the current sentence in context. If the optimal logical form is not correct, Step 2 finds the best derivation that produces the labeled logical form 7 and does an additive, perceptron-style parameter update. Learning Step 3 updates the context. This algorithm is a direct extension of the one introduced by Zettlemoyer and Collins (2007) . It maintains the context but does not have the lexical induction step that was previously used. Algorithm: \u2022 For t = 1 . . . T, i = 1 . . . n: (Iterate interactions) \u2022 Set C = {}. (Reset context) \u2022 For j = 1 . . . ni: (Iterate training examples) Step 1: (Check correctness) \u2022 Let d * = arg max d\u2208GEN(w i,j ;C) \u03b8 \u2022 \u03c6(d) . \u2022 If L(d * ) = zi,j, go to Step 3. Step 2: (Update parameters) \u2022 Let d = arg max d\u2208GEN(w i,j ,z i,j ;C) \u03b8 \u2022 \u03c6(d) . \u2022 Set \u03b8 = \u03b8 + \u03c6(d ) \u03c6(d * ) . Step 3: (Update context) \u2022 Append zi,j to the current context C. Output: Estimated parameters \u03b8. Features We now describe the features for both the parsing and context resolution stages of the derivation. Parsing Features The parsing features are used to score the contextindependent CCG parses during the first stage of analysis. We use the set developed by Zettlemoyer and Collins (2007) , which includes features that are sensitive to lexical choices and the structure of the logical form that is constructed. Context Features The context features are functions of the derivation steps described in Section 5.2. In a derivation for sentence j of an interaction, let l be the input logical form when considering a new step s (a reference or elaboration step). Let c be the expression that s selects from a context set R e (z i ), R e,t (z i ), or E(z i ), where z i , i < j, is an expression in the current context. Also, let r be a subexpression deleted from c. Finally, let f 1 and f 2 be predicates, for example f rom or to. Distance Features The distance features are binary indicators on the distance j \u2212 i. These features allow the model to, for example, favor re-solving references with lambda-calculus expressions recovered from recent sentences. Copy Features For each possible f 1 there is a feature that tests if f 1 is present in the context expression c but not in the current expression l. These features allow the model to learn to select expressions from the context that introduce expected predicates. For example, flights usually have a f rom predicate in the current expression. Deletion Features For each pair (f 1 , f 2 ) there is a feature that tests if f 1 is in the current expression l and f 2 is in the deleted expression r. For example, if f 1 = f 2 = days the model can favor overriding old constraints about the departure day with new ones introduced in the current utterance. When f 1 = during and f 2 = depart time the algorithm can learn that specific constraints on the departure time override more general constraints about the period of day. Related Work There has been a significant amount of work on the problem of learning context-independent mappings from sentences to meaning representations. Researchers have developed approaches using models and algorithms from statistical machine translation (Papineni et al., 1997; Ramaswamy and Kleindienst, 2000; Wong and Mooney, 2007) , statistical parsing (Miller et al., 1996; Ge and Mooney, 2005) , inductive logic programming (Zelle and Mooney, 1996; Tang and Mooney, 2000) and probabilistic push-down automata (He and Young, 2006) . There were a large number of successful handengineered systems developed for the original ATIS task and other related tasks (e.g., (Carbonell and Hayes, 1983; Seneff, 1992; Ward and Issar, 1994; Levin et al., 2000; Popescu et al., 2004) ). We are only aware of one system that learns to construct context-dependent interpretations (Miller et al., 1996) . The Miller et al. (1996) approach is fully supervised and produces a final meaning representation in SQL. It requires complete annotation of all of the syntactic, semantic, and discourse decisions required to correctly analyze each training example. In contrast, we learn from examples annotated with lambdacalculus expressions that represent only the final, context-dependent logical forms. Finally, the CCG (Steedman, 1996 (Clark and Curran, 2003) , wide-coverage semantic parsing (Bos et al., 2004) and grammar induction (Watkinson and Manandhar, 1999) . 10 Evaluation Data In this section, we present experiments in the context-dependent ATIS domain (Dahl et al., 1994) . Table 1 presents statistics for the training, development, and test sets. To facilitate comparison with previous work, we used the standard DEC94 test set. We randomly split the remaining data to make training and development sets. We manually converted the original SQL meaning annotations to lambda-calculus expressions. Evaluation Metrics Miller et al. (1996) report accuracy rates for recovering correct SQL annotations on the test set. For comparison, we report exact accuracy rates for recovering completely correct lambda-calculus expressions. We also present precision, recall and F-measure for partial match results that test if individual attributes, such as the from and to cities, are correctly assigned. See the discussion by Zettlemoyer and Collins (2007) (ZC07) for the full details. Initialization and Parameters The CCG lexicon is hand engineered. We constructed it by running the ZC07 algorithm to learn a lexicon on the context-independent ATIS data set and making manual corrections to improve performance on the training set. We also added lexical items with reference expressions, as described in Section 4. We ran the learning algorithm for T = 4 training iterations. The parsing feature weights were initialized as in ZC07, the context distance features were given small negative weights, and all other feature weights were initially set to zero. Test Setup During evaluation, the context C = {z 1 . . . z j\u22121 } contains the logical forms output by the learned system for the previous sentences. In general, errors made while constructing these expressions can propogate if they are used in derivations for new sentences. Results Table 2 shows performance on the ATIS DEC94 test set. Our approach correctly recovers 83.7% of the logical forms. This result compares favorably to Miller et al.'s fully-supervised approach (1996) while requiring significantly less annotation effort. We also evaluated performance when the context is limited to contain only the M most recent logical forms. Table 3 shows results on the development set for different values of M . The poor performance with no context (M = 0) demonstrates the need for context-dependent analysis. Limiting the context to the most recent statement (M = 1) significantly improves performance while using the last three utterances (M = 3) provides the best results. Finally, we evaluated a variation where the context contains gold-standard logical forms during evaluation instead of the output of the learned model. On the development set, this approach achieved 85.5% exact-match accuracy, an improvement of approximately 3% over the standard approach. This result suggests that incorrect logical forms in the context have a relatively limited impact on overall performance. Conclusion In this paper, we addressed the problem of learning context-dependent mappings from sentences to logical form. We developed a contextdependent analysis model and showed that it can be effectively trained with a hidden-variable variant of the perceptron algorithm. In the experiments, we showed that the approach recovers fully correct logical forms with 83.7% accuracy.",
    "abstract": "We consider the problem of learning context-dependent mappings from sentences to logical form. The training examples are sequences of sentences annotated with lambda-calculus meaning representations. We develop an algorithm that maintains explicit, lambda-calculus representations of salient discourse entities and uses a context-dependent analysis pipeline to recover logical forms. The method uses a hidden-variable variant of the perception algorithm to learn a linear model used to select the best analysis. Experiments on context-dependent utterances from the ATIS corpus show that the method recovers fully correct logical forms with 83.7% accuracy.",
    "countries": [
        "United States"
    ],
    "languages": [
        ""
    ],
    "numcitedby": "197",
    "year": "2009",
    "month": "August",
    "title": "Learning Context-Dependent Mappings from Sentences to Logical Form"
}