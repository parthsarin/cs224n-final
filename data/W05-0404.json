{
    "article": "In this paper, we introduce a new data representation format for language processing, the syntactic and semantic graphs (SSGs), and show its use for call classification in spoken dialog systems. For each sentence or utterance, these graphs include lexical information (words), syntactic information (such as the part of speech tags of the words and the syntactic parse of the utterance), and semantic information (such as the named entities and semantic role labels). In our experiments, we used written language as the training data while computing SSGs and tested on spoken language. In spite of this mismatch, we have shown that this is a very promising approach for classifying complex examples, and by using SSGs it is possible to reduce the call classification error rate by 4.74% relative. Introduction Goal-oriented spoken dialog systems aim to identify intents of humans, expressed in natural language, and take actions accordingly to satisfy their requests. The intent of each speaker is identified using a natural language understanding component. This step can be seen as a multi-label, multi-class call classification problem for customer care applications (Gorin et al., 1997; Chu-Carroll and Carpenter, 1999; Gupta et al., To appear, among others) . As an example, consider the utterance I would like to know my account balance, from a financial domain customer care application. Assuming that the utterance is recognized correctly by the automatic speech recognizer (ASR), the corresponding intent (call-type) would be Request(Balance) and the action would be telling the balance to the user after prompting for the account number or routing this call to the billing department. Typically these application specific call-types are pre-designed and large amounts of utterances manually labeled with call-types are used for training call classification systems. For classification, generally word \u00a2 -grams are used as features: In the How May I Help You?\u00a3 \u00a5\u00a4 (HMIHY) call routing system, selected word \u00a2 -grams, namely salient phrases, which are salient to certain call-types play an important role (Gorin et al., 1997) . For instance, for the above example, the salient phrase \"account balance\" is strongly associated with the call-type Request(Balance). Instead of using salient phrases, one can leave the decision of determining useful features (word \u00a2 -grams) to a classification algorithm used as described in (Di Fabbrizio et al., 2002) and (Gupta et al., To appear) . An alternative would be using a vector space model for classification where calltypes and utterances are represented as vectors including word \u00a2 -grams (Chu-Carroll and Carpenter, 1999) . Call classification is similar to text categorization, except the following: \u00a6 The utterances are much shorter than typical documents used for text categorization (such as broadcast news or newspaper articles). \u00a6 Since it deals with spontaneous speech, the utterances frequently include disfluencies or are ungrammatical, and \u00a6 ASR output is very noisy, typically one out of every four words is misrecognized (Riccardi and Hakkani-T\u00fcr, 2003) . Even though the shortness of the utterances may imply the easiness of the call classification task, unfortunately this is not the case. The call classification error rates typically range between 15% to 30% depending on the application (Gupta et al., To appear) . This is mainly due to the data sparseness problem because of the nature of the input. Even for simple call-types like Request(Balance), there are many ways of uttering the same intent. For instance, in one of the applications we used in our experiments, as a response to the greeting prompt, there are 2,697 unique utterances out of 3,547 utterances for that call-type. Some examples include: Given this data sparseness, current classification approaches require an extensive amount of labeled data in order to train a call classification system with a reasonable performance. In this paper, we present methods for extending the classifier's feature set by generalizing word sequences using syntactic and semantic information represented in compact graphs, called syntactic and semantic graphs (SSGs). For each sentence or utterance, these graphs include lexical information (words), syntactic information (such as the part of speech tags of the words and the syntactic parse of the utterance), and semantic information (such as the named entities and semantic role labels). The generalization is expected to help reduce the data sparseness problem by applying various groupings on word sequences. Furthermore, the classifier is provided with additional syntactic and semantic information which might be useful for the call classification task. In the following section, we describe the syntactic and semantic graphs. In Section 3, we describe our approach for call classification using SSGs. In Section 4, we present the computation of syntactic and semantic information for SSGs. In the last Section, we present our experiments and results using a spoken dialog system AT&T VoiceTone R \u00a7 Spoken Dialog System (Gupta et al., To appear) . Semantic and Syntactic Graphs Consider the typical case, where only lexical information, i.e. word \u00a2 -grams are used for call classification. This is equivalent to representing the words in an utterance as a directed acyclic graph where the words are the labels of the transitions and then extracting the transition \u00a2 -grams from it. Figure 1 shows the graph for the example sentence I paid six dollars, where \u00a8bos\u00a9 and \u00a8eos\u00a9 denote the beginning and end of the sentence, respectively. Syntactic and semantic graphs are also directed acyclic graphs, formed by adding transitions encoding syntactic and semantic categories of words or word sequences to the word graph. The first additional information is the part of speech tags of the words. In the graph, as a parallel transition for each word of the utterance, the part of speech category of the word is added, as shown in Figure 2 for the example sentence. Note that, the word is prefixed by the token WORD: and the part-of-speech tag is prefixed by the token POS:, in order to distinguish between different types of transitions in the graph. The other type of information that is encoded in these graphs is the syntactic parse of each utterance, namely the syntactic phrases with their head words. For example in the sentence I paid six dollars, six dollars is a noun phrase with the head word dollars. In Figure 2 , the labels of the transitions for syntactic phrases are prefixed by the token PHRASE:. There-   fore, six dollars is also represented by the transition labeled PHRASE:NP dollars. As an alternative, one may drop the head word of the phrase from the representation, or insert an epsilon transition parallel to the transitions of the modifiers of the head word to eliminate them from some \u00a2 -grams. \u03a3:\u03a3 0 3 2 1 \u03a3:\u03b5 \u03b5:\u03b5 \u03a3:\u03b5 \u03b5:\u03b5 \u03a3:\u03a3 \u03a3:\u03a3 Generic named entity tags, such as person, location and organization names and task-dependent named entity tags, such as drug names in a medical domain, are also incorporated into the graph, where applicable. For instance, for the example sentence, six dollars is a monetary amount, so the arc NE:m is inserted parallel to that sequence. As another source of semantic information, semantic role labels of the utterance components are incorporated to the SSGs. The semantic role labels represent the predicate/argument structure of each sentence: Given a predicate, the goal is to identify all of its arguments and their semantic roles. For example, in the example sentence the predicate is pay, the agent of this predicate is I and the amount is six dollars. In the graph, the labels of the transitions for semantic roles are prefixed by the token SRL: and the corresponding predicate. For example, the sequence six dollars is the amount of the predicate pay, and this is shown by the transition with label SRL:pay.A1 following the PropBank notation (Kingsbury et al., 2002) 1 . In this work, we were only able to incorporate part-of-speech tags, syntactic parses, named entity tags and semantic role labels in the syntactic and semantic graphs. Insertion of further information such as supertags (Bangalore and Joshi, 1999) or word stems can also be beneficial for further processing. Using SSGs for Call Classification In this paper we propose extracting all \u00a2 -grams from the SSGs to use them for call classification. The \u00a2grams in an utterance SSG can be extracted by converting it to a finite state transducer (FST), . Each transition of has the labels of the arcs on the SSG as input and output symbols 2 . Composing this FST with another FST, , representing all the possible \u00a2 -grams, forms the FST, , which includes all \u00a2grams in the SSG: ! \" $# Then, extracting the \u00a2 -grams in the SSG is equivalent to enumerating all paths of . For \u00a2 % '& , ( is shown in Figure 3 . The alphabet contains all the symbols in . We expect the SSGs to help call classification because of the following reasons: \u00a6 First of all, the additional information is expected to provide some generalization, by allowing new \u00a2 -grams to be encoded in the utterance graph since SSGs provide syntactic and semantic groupings. For example, the words a and the both have the part-of-speech tag category DT (determiner), or all the numbers are mapped to a cardinal number (CD), like the six in the example sentence. So the bigrams WORD:six WORD:dollars and POS:CD WORD:dollars will both be in the SSG. Similarly the sentences I paid six dollars and I paid seventy five dollars and sixty five cents will both have the trigram WORD:I WORD:paid NE:m in their SSGs. \u00a6 The head words of the syntactic phrases and predicate of the arguments are included in the SSGs. This enables the classifier to handle long distance dependencies better than using other simpler methods, such as extracting all gappy \u00a2 -grams. For example, consider the following two utterances: I need a copy of my bill and I need a copy of a past due bill. As shown in Figures 4 and 5 , the \u00a2 -gram WORD:copy WORD:of PHRASE:NP bill appears for both utterances, since both subsequences my bill and a past due bill are nothing but noun phrases with the head word bill. \u00a6 Another motivation is that, when using simply the word \u00a2 -grams in an utterance, the classifier is only given lexical information. Now the classifier is provided with more and different information using these extra syntactic and semantic features. For example, a named entity of type monetary amount may be strongly associated with some call-type. \u00a6 Furthermore, there is a close relationship between the call-types and semantic roles. For example, if the predicate is order this is most probably the call-type Order(Item) in a retail domain application. The simple \u00a2 -gram ap-proach would consider all the appearances of the unigram order as equal. However consider the utterance I'd like to check an order of a different call-type, where the order is not a predicate but an object. Word \u00a2 -gram features will fail to capture this distinction. Once the SSG of an utterance is formed, all the \u00a2 -grams are extracted as features, and the decision of which one to select/use is left to the classifier. Computation of the SSGs In this section, the tools used to compute the information in SSGs are described and their performances on manually transcribed spoken dialog utterances are presented. All of these components may be improved independently, for the specific application domain. Part-of-Speech Tagger Part-of-speech tagging has been very well studied in the literature for many languages, and the approaches vary from rule-based to HMM-based and classifier-based (Church, 1988; Brill, 1995, among others) tagging. In our framework, we employ a simple HMM-based tagger, where the most probable tag sequence, ) 0 , given the words, 1 , is output (Weischedel et al., 1993 ): ) 0 \"2 43 65 87 92 A@ B C ED 0 GF 1 IH \"2 43 P5 87 92 A@ B C ED 1 F 0 H C QD 0 H Since we do not have enough data which is manually tagged with part-of-speech tags for our applications, we used Penn Treebank (Marcus et al., 1994) as our training set. Penn Treebank includes data from Wall Street Journal, Brown, ATIS, and Switchboard corpora. The final two sets are the most useful for our domain, since they are also from spoken language and include disfluencies. As a test set, we manually labeled 2,000 words of user utterances from an AT&T VoiceTone spoken dialog system application, and we achieved an accuracy of 94.95% on manually transcribed utterances. When we examined the errors, we have seen that the frequent word please is mis-labeled or frequently occurs as a verb in the training data, even when it is not. Given that the latest literature on POS tagging using Penn Treebank reports an accuracy of around 97% with in-domain   training data (van Halteren et al., 2001) , we achieve a very reasonable performance, considering these errors. Syntactic Parser For syntactic parsing, we use the Collins' parser (Collins, 1999) , which is reported to give over 88% labeled recall and precision on Wall Street Journal portion of the Penn Treebank. We use Buchholz's chunklink script to extract information from the parse trees 3 . Since we do not have any data from our domain, we do not have a performance figure for this task for our domain. Named Entity Extractor For named entity extraction, we tried using a simple HMM-based approach, a simplified version of BBN's name finder (Bikel et al., 1999) , and a classifier-based tagger using Boostexter (Schapire and Singer, 2000) . In the simple HMM-based approach, which is the same as the part-of-speech tagging, the goal is to find the tag sequence, ) 0 , which maximizes C ED 0 GF 1 IH for the word sequence, 1 . The tags in this case are named entity categories (such as P and p for Person names, O and o for Organization names, etc. where upper-case indicates the first word in the named entity) or NA if the word is not a part of a named entity. In the simplified version of BBN's name finder, the states of the model were word/tag combinations, where the tag S T for word U V is the named entity category of each word. Transition probabilities consisted of trigram probabilities C ED U W YX `S T F U a cb ed fX `S g cb ed ih pU a cb $q rX `S g cb $q rH over these combined tokens. In the final version, we extended this model with an unknown words model (Hakkani-T\u00fcr et al., 1999) . In the classifierbased approach, we used simple features such as the current word and surrounding 4 words, binary tags indicating if the word considered contains any digits or is formed from digits, and features checking capitalization (Carreras et al., 2003) . To test these approaches, we have used data from an AT&T VoiceTone spoken dialog system application for a pharmaceutical domain, where some of the named entity categories were person, organization, drug name, prescription number, and date. The training and test sets contained around 11,000 and 5,000 utterances, respectively. Table 1 summarizes the overall F-measure results as well as F-measure for the most frequent named entity categories. Overall, the classifier based approach resulted in the best performance, so it is also used for the call classification experiments. Semantic Role Labeling The goal of semantic role labeling is to extract all the constituents which fill a semantic role of a target verb. Typical semantic arguments include Agent, Patient, Instrument, etc. and also adjuncts such as Locative, Temporal, Manner, Cause, etc. In this work, we use the semantic roles and annotations from the PropBank corpus (Kingsbury et al., 2002) , where the arguments are given mnemonic names, such as Arg0, Arg1, Arg-LOC, etc. For example, for the sentence I have bought myself a blue jacket from your summer catalog for twenty five dollars last week, the agent (buyer, or Arg0) is I, the predicate is buy, the thing bought (Arg1) is a blue jacket, the seller or source (Arg2) is from your summer catalog, the price paid (Arg3) is twenty five dollars, the benefactive (Arg4) is myself, and the date (ArgM-TMP) is last week 4 . Semantic role labeling can be viewed as a multiclass classification problem. Given a word (or phrase) and its features, the goal is to output the most probable semantic label. For semantic role labeling, we have used the exact same feature set that Hacioglu et al. (2004) have used, since their system performed the best among others in the CoNLL-2004 shared task (Carreras and M\u00e0rquez, 2004) . We have used Boostexter (Schapire and Singer, 2000) as the classifier. The features include tokenlevel features (such as the current (head) word, its part-of-speech tag, base phrase type and position, etc.), predicate-level features (such as the predicate's lemma, frequency, part-of-speech tag, etc.) and argument-level features which capture the relationship between the token (head word/phrase) and the predicate (such as the syntactic path between the token and the predicate, their distance, token position relative to the predicate, etc.). In order to evaluate the performance of semantic role labeling, we have manually annotated 285 utterances from an AT&T VoiceTone spoken dialog sys-tem application for a retail domain. The utterances include 645 predicates (2.3 predicates/utterance). First we have computed recall and precision rates for evaluating the predicate identification performance. The precision is found to be 93.04% and recall is 91.16%. More than 90% of false alarms for predicate extraction are due to the word please, which is very frequent in customer care domain and erroneously tagged as explained above. Most of the false rejections are due to disfluencies and ungrammatical utterances. For example in the utterance I'd like to order place an order, the predicate place is tagged as a noun erroneously, probably because of the preceding verb order. Then we have evaluated the argument labeling performance. We have used a stricter measure than the CoNLL-2004 shared task. The labeling is correct if both the boundary and the role of all the arguments of a predicate are correct. In our test set, we have found out that our SRL tool correctly tags all arguments of 57.4% of the predicates. Call Classification Experiments and Results In order to evaluate our approach, we carried out call classification experiments using human-machine dialogs collected by the spoken dialog system used for customer care. We have only considered utterances which are responses to the greeting prompt How may I help you? in order not to deal with confirmation and clarification utterances. We first describe this data, and then give the results obtained by the semantic classifier. We have performed our tests using the Boostexter tool, an implementation of the Boosting algorithm, which iteratively selects the most discriminative features for a given task (Schapire and Singer, 2000) . Data Table 2 summarizes the characteristics of our application including the amount of training and test data, total number of call-types, average utterance length, and call-type perplexity. Perplexity is computed using the prior distribution over all the call-types in the training data. Results For described above. When \u00a2 -grams are extracted from these SSGs, instead of the word graphs (Baseline), there is a huge increase in the number of features given to the classifier, as seen in Table 3 . The classifier has now 15 times more features to work with. Although one can apply a feature selection approach before classification as frequently done in the machine learning community, we left the burden of analyzing 825,201 features to the classifier. Table 4 presents the percentage of the features selected by Boostexter using SSGs for each information category. As expected the lexical information is the most frequently used, and 54.06% of the selected features have at least one word in its \u00a2 -gram. The total is more than 100%, since some features contain more than one category, as in the bigram feature example: POS:DT WORD:bill. This shows the use of other information sources as well as words. Table 5 presents our results for call classification. As the evaluation metric, we use the top class error rate (TCER), which is the ratio of utterances, where the top scoring call-type is not one of the true calltypes assigned to each utterance by the human labelers. The baseline TCER on the test set using only word \u00a2 -grams is 23.80%. When we extract features from the SSGs, we see a 2.14% relative decrease in the error rate down to 23.29%. When we analyze these results, we have seen that: \u00a6 For \"easy to classify\" utterances, the classifier already assigns a high score to the true call-type \u00a6 The particular classifier we use, namely Boosting, is known to handle large feature spaces poorer than some others, such as SVMs. This is especially important with 15 times more features. Due to this analysis, we have focused on a subset of utterances, namely utterances with low confidence scores, i.e. cases where the score given to the top scoring call-type by the baseline model is below a certain threshold. In this subset we had 333 utterances, which is about 17% of the test set. As expected the error rates are much higher than the overall and we get much larger improvement in performance when we use SSGs. The baseline for this set is 68.77%, and using extra features, this reduces to 62.16% which is a 9.61% relative reduction in the error rate. This final experiment suggests a cascaded approach for exploiting SSGs for call classification. That is, first the baseline word \u00a2 -gram based classifier is used to classify all the utterances, then if this model fails to commit on a call-type, we perform extra feature extraction using SSGs, and use the classification model trained with SSGs. This cascaded approach reduced the overall error rate of all utterances from 23.80% to 22.67%, which is 4.74% relative reduction in error rate. Conclusions In this paper, we have introduced syntactic and semantic graphs (SSGs) for speech and language processing. We have described their use for the task of call classification. We have presented results showing 4.74% improvement, using utterances collected from AT&T VoiceTone spoken dialog system. SSGs can also be useful for text classification and other similar language processing applications. Our future work includes feature selection prior to classification and developing methods that are more robust to ASR errors while computing the SSGs. We also plan to improve the syntactic and semantic processing components by adapting the models with some amount of labeled in-domain spoken dialog data.",
    "abstract": "In this paper, we introduce a new data representation format for language processing, the syntactic and semantic graphs (SSGs), and show its use for call classification in spoken dialog systems. For each sentence or utterance, these graphs include lexical information (words), syntactic information (such as the part of speech tags of the words and the syntactic parse of the utterance), and semantic information (such as the named entities and semantic role labels). In our experiments, we used written language as the training data while computing SSGs and tested on spoken language. In spite of this mismatch, we have shown that this is a very promising approach for classifying complex examples, and by using SSGs it is possible to reduce the call classification error rate by 4.74% relative.",
    "countries": [
        "United States"
    ],
    "languages": [
        "Tem"
    ],
    "numcitedby": "12",
    "year": "2005",
    "month": "June",
    "title": "Using Semantic and Syntactic Graphs for Call Classification"
}