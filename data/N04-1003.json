{
    "article": "A given entity, representing a person, a location or an organization, may be mentioned in text in multiple, ambiguous ways. Understanding natural language requires identifying whether different mentions of a name, within and across documents, represent the same entity. We develop an unsupervised learning approach that is shown to resolve accurately the name identification and tracing problem. At the heart of our approach is a generative model of how documents are generated and how names are \"sprinkled\" into them. In its most general form, our model assumes: (1) a joint distribution over entities, (2) an \"author\" model, that assumes that at least one mention of an entity in a document is easily identifiable, and then generates other mentions via (3) an appearance model, governing how mentions are transformed from the \"representative\" mention. We show how to estimate the model and do inference with it and how this resolves several aspects of the problem from the perspective of applications such as questions answering. Introduction Reading and understanding text is a task that requires the ability to disambiguate at several levels, abstracting away details and using background knowledge in a variety of ways. One of the difficulties that humans resolve instantaneously and unconsciously is that of reading names. Most names of people, locations, organizations and others, have multiple writings that are used freely within and across documents. The variability in writing a given concept, along with the fact that different concepts may have very similar writings, poses a significant challenge to progress in natural language processing. Consider, for example, an open domain question answering system (Voorhees, 2002) that attempts, given a question like: \"When was President Kennedy born?\" to search a large collection of articles in order to pinpoint the concise answer: \"on May 29, 1917.\" The sentence, and even the document that contains the answer, may not contain the name \"President Kennedy\"; it may refer to this entity as \"Kennedy\", \"JFK\" or \"John Fitzgerald Kennedy\". Other documents may state that \"John F. Kennedy, Jr. was born on November 25, 1960\", but this fact refers to our target entity's son. Other mentions, such as \"Senator Kennedy\" or \"Mrs. Kennedy\" are even \"closer\" to the writing of the target entity, but clearly refer to different entities. Even the statement \"John Kennedy, born 5-29-1941\" turns out to refer to a different entity, as one can tell observing that the document discusses Kennedy's batting statistics. A similar problem exists for other entity types, such as locations, organizations etc. Ad hoc solutions to this problem, as we show, fail to provide a reliable and accurate solution. This paper presents the first attempt to apply a unified approach to all major aspects of this problem, presented here from the perspective of the question answering task: (1) Entity Identity -do mentions A and B (typically, occurring in different documents, or in a question and a document, etc.) refer to the same entity? This problem requires both identifying when different writings refer to the same entity, and when similar or identical writings refer to different entities. (2) Name Expansion -given a writing of a name (say, in a question), find other likely writings of the same name. (3) Prominence -given question \"What is Bush's foreign policy?\", and given that any large collection of documents may contain several Bush's, there is a need to identify the most prominent, or relevant \"Bush\", perhaps taking into account also some contextual information. At the heart of our approach is a global probabilistic view on how documents are generated and how names (of different entity types) are \"sprinkled\" into them. In its most general form, our model assumes: (1) a joint distribution over entities, so that a document that mentions \"President Kennedy\" is more likely to mention \"Oswald\" or \" White House\" than \"Roger Clemens\"; (2) an \"author\" model, that makes sure that at least one mention of a name in a document is easily identifiable, and then generates other mentions via (3) an appearance model, governing how mentions are transformed from the \"rep-resentative\" mention. Our goal is to learn the model from a large corpus and use it to support robust reading -enabling \"on the fly\" identification and tracing of entities. This work presents the first study of our proposed model and several relaxations of it. Given a collection of documents we learn the models in an unsupervised way; that is, the system is not told during training whether two mentions represent the same entity. We only assume the ability to recognize names, using a named entity recognizer run as a preprocessor. We define several inferences that correspond to the solutions we seek, and evaluate the models by performing these inferences against a large corpus we annotated. Our experimental results suggest that the entity identity problem can be solved accurately, giving accuracies (F 1 ) close to 90%, depending on the specific task, as opposed to 80% given by state of the art ad-hoc approaches. Previous work in the context of question answering has not addressed this problem. Several works in NLP and Databases, though, have addressed some aspects of it. From the natural language perspective, there has been a lot of work on the related problem of coreference resolution (Soon et al., 2001; Ng and Cardie, 2003; Kehler, 2002) -which aims at linking occurrences of noun phrases and pronouns within a document based on their appearance and local context. (Charniak, 2001) presents a solution to the problem of name structure recognition by incorporating coreference information. In the context of databases, several works have looked at the problem of record linkage -recognizing duplicate records in a database (Cohen and Richman, 2002; Hernandez and Stolfo, 1995; Bilenko and Mooney, 2003) . Specifically, (Pasula et al., 2002) considers the problem of identity uncertainty in the context of citation matching and suggests a probabilistic model for that. Some of very few works we are aware of that works directly with text data and across documents, are (Bagga and Baldwin, 1998; Mann and Yarowsky, 2003) , which consider one aspect of the problem -that of distinguishing occurrences of identical names in different documents, and only of people. The rest of this paper is organized as follows: We formalize the \"robust reading\" problem in Sec. 2. Sec. 3 describes a generative view of documents' creation and three practical probabilistic models designed based on it, and discusses inference in these models. Sec. 4 illustrates how to learn these models in an unsupervised setting, and Sec. 5 describes the experimental study. Sec. 6 concludes. Robust Reading We consider reading a collection of documents D = {d 1 , d 2 , . . . , d m }, each of which may contain mentions (i.e. real occurrences) of |T | types of entities. In the current evaluation we consider T = {P erson, Location, Organization}. An entity refers to the \"real\" concept behind a mention and can be viewed as a unique identifier to a real-world object. Examples might be the person \"John F. Kennedy\" who became a president, \"White House\" -the residence of the US presidents, etc. E denotes the collection of all possible entities in the world and E d = {e d i } l d 1 is the set of entities mentioned in document d. M denotes the collection of all possible mentions and M d = {m d i } n d 1 is the set of mentions in document d. M d i (1 \u2264 i \u2264 l d ) is the set of mentions that refer to entity e d i \u2208 E d . For entity \"John F. Kennedy\", the corresponding set of mentions in a document may contain \"Kennedy\", \"J. F. Kennedy\" and \"President Kennedy\". Among all mentions of an entity e d i in document d we distinguish the one occurring first, r d i \u2208 M d i , as the representative of e d i . In practice, r d i is usually the longest mention of e d i in the document as well, and other mentions are variations of it. Representatives are viewed as a typical representation of an entity mentioned in a specific time and place. For example, \"President J.F.Kennedy\" and \"Congressman John Kennedy\" may be representatives of \"John F. Kennedy\" in different documents. R denotes the collection of all possible representatives and R d = {r d i } l d 1 \u2286 M d is the set of representatives in document d. This way, each document is represented as the collection of its entities, representatives and mentions d = {E d , R d , M d }. Elements in the name space W = E\u222aR\u222aM each have an identifying writing (denoted as wrt(n) for n \u2208 W ) 1 and an ordered list of attributes, A = {a 1 , . . . , a p }, which depends on the entity type. Attributes used in the current evaluation include both internal attributes, such as, for People, {title, firstname, middlename, lastname, gender} as well as contextual attributes such as {time, location, proper-names}. Proper-names refer to a list of proper names that occur around the mention in the document. All attributes are of string value and the values could be missing or unknown 2 . The fundamental problem we address in robust reading is to decide what entities are mentioned in a given document (given the observed set M d ) and what the most likely assignment of entity to each mention is. A Model of Document Generation We define a probability distribution over documents d = {E d , R d , M d }, by describing how documents are being generated. In its most general form the model has the following three components: (1) A joint probability distribution P (E d ) that governs  (2) The number of entities in a document, size(E d ), and the number of mentions of each entity in E d , size(M d i ), need to be decided. The current evaluation makes the simplifying assumption that these numbers are determined uniformly over a small plausible range. (3) The appearance probability of a name generated (transformed) from its representative is modelled as a product distribution over relational transformations of attribute values. This model captures the similarity between appearances of two names. In the current evaluation the same appearance model is used to calculate both the probability P (r|e) that generates a representative r given an entity e and the probability P (m|r) that generates a mention m given a representative r. Attribute transformations are relational, in the sense that the distribution is over transformation types and independent of the specific names. Given these, a document d is assumed to be generated as follows (see Fig. 1 ): A set of size(E d ) entities E d \u2286 E is selected to appear in a document d, accord- ing to P (E d ). For each entity e d i \u2208 E d , a representative r d i \u2208 R is chosen according to P (r d i |e d i ), generating R d . Then mentions M d i of an entity are generated from each representative r d i \u2208 R d -each mention m d j \u2208 M d i is independently transformed from r d i according to the ap- pearance probability P (m d j |r d i ). Assuming conditional independency between M d and E d given R d , the probability distribution over documents is therefore P (d) = P (E d , R d , M d ) = P (E d )P (R d |E d )P (M d |R d ), and the probability of the document collection D is: P (D) = d\u2208D P (d). Given a mention m in a document d (M d is the set of observed mentions in d), the key inference problem is to determine the most likely entity e * m that corresponds to it. This is done by computing: E d = argmax E \u2286E P (E d , R d |M d , \u03b8) (1) = argmax E \u2286E P (E d , R d , M d |\u03b8), ( 2 ) where \u03b8 is the learned model's parameters. This gives the assignment of the most likely entity e * m for m. Relaxations of the Model In order to simplify model estimation and to evaluate some assumptions, several relaxations are made to form three simpler probabilistic models. Model I: (the simplest model) The key relaxation here is in losing the notion of an \"author\" -rather than first choosing a representative for each document, mentions are generated independently and directly given an entity. That is, an entity e i is selected from E according to the prior probability P (e i ); then its actual mention m i is selected according to P (m i |e i ). Also, an entity is selected into a document independently of other entities. In this way, the probability of the whole document set can be computed simply as follows: P (D) = P ({(e i , m i )} n i=1 ) = n i=1 P (e i )P (m i |e i ), and the inference problem for the most likely entity given m is: e * m = argmaxe\u2208EP (e|m, \u03b8) = argmaxe\u2208EP (e)P (m|e). (3) Model II: (more expressive) The major relaxation made here is in assuming a simple model of choosing entities to appear in documents. Thus, in order to generate a document d, after we decide size(E d ) and {size(M d 1 , size(M d 2 ), . . . } according to uniform distributions, each entity e d i is selected into d independently of others according to P (e d i ). Next, the representative r d i for each entity e d i is selected according to P (r d i |e d i ) and for each representative the actual mentions are selected independently according to P (m d j |r d j ). Here, we have individual documents along with representatives, and the distribution over documents is: P (d) = P (E d , R d , M d ) = P (E d )P (R d |E d )P (M d |R d ) \u223c |E d | i=1 [P (e d i )P (r d i |e d i )] (r d j ,m d j ) P (m d j |r d j ) after we ignore the size components (they do not influence inferences). The inference problem here is the same as in Equ. (2). Model III: This model performs the least relaxation. After deciding size(E d ) according to a uniform distribution, instead of assuming independency among entities which does not hold in reality (For example, \"Gore\" and \"George. W. Bush\" occur together frequently, but \"Gore\" and \"Steve. Bush\" do not), we select entities using a graph based algorithm: entities in E are viewed as nodes in a weighted directed graph with edges (i, j) labelled P (e j |e i ) representing the probability that entity e j is chosen into a document that contains entity e i . We distribute entities to E d via a random walk on this graph starting from e d 1 with a prior probability P (e d i ). Representatives and mentions are generated in the same way as in Model II. Therefore, a more general model for the distribution over documents is: P (d) \u223c P (e d 1 )P (r d 1 |e d 1 ) |E d | i=2 [P (e d i |e d i\u22121 )P (r d i |e d i )] \u00d7 (r d j ,m d j ) P (m d j |r d j ). The inference problem is the same as in Equ. (2). Inference Algorithms The fundamental problem in robust reading can be solved as inference with the models: given a mention m, seek the most likely entity e \u2208 E for m according to Equ. ( 3 In Model II, we adopt a two-step algorithm: First, we seek the representatives R d for the mentions M d in document d by sequentially clustering the mentions according to the appearance model. The first mention in each group is chosen as the representative. Specifically, when considering a mention m \u2208 M d , P (m|r) is computed for each representative r that have already been created and a fixed threshold is then used to decide whether to create a new group for m or to add it to one of the existing groups with the largest P (m|r). In the second step, each representative r d i \u2208 R d is assigned to its most likely entity according to e * = argmax e\u2208E P (e) * P (r|e). This algorithm has a time complexity of O(( |M d | + |E|) * |M d |). Model III has a similar algorithm as Model II. The only difference is that we need to consider the global dependency between entities. Thus in the second step, instead of seeking an entity e for each representative r separately, we determine a set of entities E d for R d in a Hidden Markov Model with entities in E as hidden states and R d as observations. The prior probabilities, the transitive probabilities and the observation probabilities are given by P (e), P (e j |e i ) and P (r|e) respectively. Here we seek the most likely sequence of entities given those representatives in their appearing order using the Viterbi algorithm. The total time complexity is O(|M d | 2 + |E| 2 * |M d |). The |E| 2 component can be simplified by filtering out unlikely entities for a representative according to their appearance similarity. Discussion Besides different assumptions, some fundamental differences exist in inference with the models as well. In Model I, the entity of a mention is determined completely independently of other mentions, while in Model II, it relies on other mentions in the same document for clustering. In Model III, it is not only related to other mentions but to a global dependency over entities. The following conceptual example illustrates those differences as in Fig. 2 . Example 3.1 Given E = {George Bush, George W. Bush, Steve Bush}, documents d 1 , d 2 and 5 mentions in them, and suppose the prior probability of entity \"George W. Bush\" is higher than those of the other two entities, the entity assignments to the five mentions in the models could be as follows: For Model I, mentions(e 1 ) = \u03c6, mentions(e 2 ) = {m 1 , m 2 , m 5 } and mentions(e 3 ) = {m 4 }. The result is caused by the fact that a mention tends to be assigned to the entity with higher prior probability when the appearance similarity is not distinctive. For Model II, mentions(e1) = \u03c6, mentions(e2) = {m1, m2} and mentions(e3) = {m4, m5}. Local dependency (appearance similarity) between mentions inside each document enforces the constraint that they should refer to the same entity, like \"Steve Bush\" and \"Bush\" in d2. For Model III, mentions(e 1 ) = {m 1 , m 2 }, mentions(e 2 ) = \u03c6, mentions(e 3 ) = {m 4 , m 5 }. With the help of global dependency between entities, for example, \"George Bush\" and \"J. Quayle\", an entity can be distinguished from another one with a similar writing. Other Tasks Other aspects of \"Robust Reading\" can be solved based on the above inference problem. Entity Identity: Given two mentions m 1 \u2208 d 1 , m 2 \u2208 d 2 , determine whether they correspond to the same entity by: m 1 \u223c m 2 \u21d0\u21d2 argmax e\u2208E P (e, m 1 ) = argmax e\u2208E P (e, m 2 ) for Model I and m1 \u223c m2 \u21d0\u21d2 argmaxe\u2208EP (E d 1 , R d 1 , M d 1 ) = argmax e\u2208E P (E d 2 , R d 2 , M d 2 ). for Model II and III. Name Expansion: Given a mention m q in a query q, decide whether mention m in the document collection D is a 'legal' expansion of m q : m q \u2192 m \u21d0\u21d2 e * m q = argmax e\u2208E P (E q , R q , M q ) & m \u2208 mentions(e * ). Here it's assumed that we already know the possible mentions of e * after training the models with D. Prominence: Given a name n \u2208 W , the most prominent entity for n is given by (P (e) is given by the prior distribution P E and P (n|e) is given by the appearance model.): e * = argmax e\u2208E P (e)P (n|e). Learning the Models Confined by the labor of annotating data, we learn the probabilistic models in an unsupervised way given a collection of documents; that is, the system is not told during training whether two mentions represent the same entity. A greedy search algorithm modified after the standard EM algorithm (We call it Truncated EM algorithm) is adopted here to avoid complex computation. Given a set of documents D to be studied and the observed mentions M d in each document, this algorithm iteratively updates the model parameter \u03b8 (several underlying probabilistic distributions described before) and the structure (that is, E d and R d ) of each document d. Different from the standard EM algorithm, in the E-step, it seeks the most likely E d and R d for each document rather than the expected assignment. Truncated EM Algorithm The basic framework of the Truncated EM algorithm to learn Model II and III is as follows: 1. In the initial (I-) step, an initial (E d 0 , R d 0 ) is assigned to each document d by an initialization algorithm. After this step, we can assume that the documents are annotated with D0 = {(E d 0 , R d 0 , M d )}. 2. In the M-step, we seek the model parameter \u03b8t+1 that maximizes P (Dt|\u03b8). Given the \"labels\" supplied in the previous I-or E-step, this amounts to the maximum likelihood estimation. (to be described in Sec. 4.3). 3. In the E-step, we seek (E d t+1 , R d t+1 ) for each document d that maximizes P (Dt+1|\u03b8t+1) where The algorithm for Model I is similar to the above one, but much simpler in the sense that it does not have the notions of documents and representatives. So in the E-step we only seek the most likely entity e for each mention m \u2208 D, and this simplifies the parameter estimation in the M-step accordingly. It usually takes 3 \u2212 10 iterations before the algorithms stop in our experiments. D t+1 = {(E d t+1 , R d t+1 , M d )}. It' Initialization The purpose of the initial step is to acquire an initial guess of document structures and the set of entities E in a closed collection of documents D. The hope is to find all entities without loss so duplicate entities are allowed. For all the models, we use the same algorithm: A local clustering is performed to group mentions inside each document: simple heuristics are applied to calculating the similarity between mentions; and pairs of mentions with similarity above a threshold are then clustered together. The first mention in each group is chosen as the representative (only in Model II and III) and an entity having the same writing with the representative is created for each cluster 3 . For all the models, the set of entities created in different documents become the global entity set E in the following M-and E-steps. Estimating the Model Parameters In the learning process, assuming documents have already been annotated D = {(e, r, m)} n 1 from previous Ior E-step, several underlying probability distributions of the relaxed models are estimated by maximum likelihood estimation in each M-step. The model parameters include a set of prior probabilities for entities P E , a set of transitive probabilities for entity pairs P E|E (only in Model III) and the appearance probabilities P W |W of each name in the name space W being transformed from another. \u2022 The prior distribution P E is modelled as a multinomial distribution. Given a set of labelled entitymention pairs {(e i , m i )} n 1 , P (e) = f req(e) n where f req(e) denotes the number of pairs containing entity e. \u2022 Given all the entities appearing in D, the transitive probability P (e|e) is estimated by P (e2|e1) \u223c P (wrt(e2)|wrt(e1)) = doc # (wrt(e2), wrt(e1)) doc # (wrt(e 1 ) ) . Here, the conditional probability between two realworld entities P (e 2 |e 1 ) is backed off to the one between the identifying writings of the two entities P (wrt(e 2 )|wrt(e 1 )) in the document set D to avoid sparsity problem. doc # (w 1 , w 2 , ...) denotes the number of documents having the co-occurrence of writings w 1 , w 2 , .... \u2022 Appearance probability, the probability of one name being transformed from another, denoted as P (n 2 |n 1 ) (n 1 , n 2 \u2208 W ), is modelled as a product of the transformation probabilities over attribute values 4 . The transformation probability for each attribute is further modelled as a multi-nomial distribution over a set of predetermined transformation types: T T = {copy, missing, typical, non \u2212 typical} 5 . Suppose n 1 = (a 1 = v 1 , a 2 = v 2 , ..., a p = v p ) and n 2 = (a 1 = v 1 , a 2 = v 2 , . .., a p = v p ) are two names belonging to the same entity type, the transformation probabilities P M |R , P R|E and P M |E , are all modelled as a product distribution (naive Bayes) over attributes: P (n 2 |n 1 ) = \u03a0 p k=1 P (v k |v k ). We manually collected typical and non-typical transformations for attributes such as titles, first names, last names, organizations and locations from multiple sources such as U.S. government census and online dictionaries. For other attributes like gender, only copy transformation is allowed. The maximum likelihood estimation of the transformation probability P (t, k) (t \u2208 T T, a k \u2208 A) from annotated representative-mention pairs {(r, m)} n 1 is: P (t, k) = f req(r, m) : v r k \u2192 t v m k n (4) v r k \u2192 t v m k denotes the transformation from attribute a k of r to that of m is of type t. Simple smoothing is performed here for unseen transformations. Experimental Study Our experimental study focuses on (1) evaluating the three models on identifying three entity types (People, Locations, Organization); (2) comparing our induced similarity measure between names (the appearance model) with other similarity measures; (3) evaluating the contribution of the global nature of our model, and finally, (4) evaluating our models on name expansion and prominence ranking. Methodology We randomly selected 300 documents from 1998-2000 New York Times articles in the TREC corpus (Voorhees, 2002) . The documents were annotated by a named entity tagger for People, Locations and Organizations. The annotation was then corrected and each name mention was labelled with its corresponding entity by two annotators. In total, about 8, 000 mentions of named entities which correspond to about 2, 000 entities were labelled. The training process gets to see only the 300 documents and extracts attribute values for each mention. No supervision is supplied. These records are used to learn the probabilistic models. In the 64 million possible mention pairs, most are trivial non-matching one -the appearances of the two mentions are very different. Therefore, direct evaluation over all those pairs always get almost 100% accuracy in our experiments. To avoid this, only the 130, 000 pairs of matching mentions that correspond to the same entity are used to evaluate the performance of the models. Since the probabilistic models are learned in an unsupervised setting, testing can be viewed simply as the evaluation of the learned model, and is thus done on the same data. The same setting was used for all models and all comparison performed (see below). To evaluate the performance, we pair two mentions iff the learned model determined that they correspond to the same entity. The list of predicted pairs is then compared with the annotated pairs. We measure Precision (P ) -Percentage of correctly predicted pairs, Recall (R) -Percentage of correct pairs that were predicted, and F 1 = 2P R P +R . Comparisons: The appearance model induces a \"similarity\" measure between names, which is estimated during the training process. In order to understand whether the behavior of the generative model is dominated by the quality of the induced pairwise similarity or by the global aspects (for example, inference with the aid of the document structure), we (1) replace this measure by two other \"local\" similarity measures, and (2) compare three possible decision mechanisms -pairwise classification, straightforward clustering over local similarity, and our global model. To obtain the similarity required by pairwise classification and clustering, we use this formula sim a (n 1 , n 2 ) = P (n 1 |n 2 ) to convert the appearance probability described in Sec. 4.3 to it. The first similarity measure we use is a simple baseline approach: two names are similar iff they have identical writings (that is, sim b (n 1 , n 2 ) = 1 if n 1 , n 2 are identical or 0 otherwise). The second one is a state-of-art similarity measure sim s (n 1 , n 2 ) \u2208 [0, 1] for entity names (SoftTFIDF with Jaro-Winkler distance and \u03b8 = 0.9); it was ranked the best measure in a recent study (Cohen et al., 2003) . Pairwise classification is done by pairing two mentions iff the similarity between them is above a fixed threshold. For Clustering, a graph-based clustering al- gorithm is used. Two nodes in the graph are connected if the similarity between the corresponding mentions is above a threshold. In evaluation, any two mentions belonging to the same connected component are paired the same way as we did in Sec. 5.1 and all those pairs are then compared with the annotated pairs to calculate Precision, Recall and F 1 . Finally, we evaluate the baseline and the SoftTFIDF measure in the context of Model II, where the appearance model is replaced. We found that the probabilities directly converted from the SoftTFIDF similarity behave badly so we adopt this formula P (n 1 |n 2 ) = e 10\u2022sim s (n 1 ,n 2 ) \u22121 e 10 \u22121 instead to acquire P (n 1 |n 2 ) needed by Model II. Those probabilities are fixed as we estimate other model parameters in training. Results The bottom line result is given in Tab. 1. All the similarity measures are compared in the context of the three levels of decisions -local decision (pairwise), clustering and our probabilistic model II. Only the best results in the experiments, achieved by trying different thresholds in pairwise classification and clustering, are shown. The behavior across rows indicates that, locally, our unsupervised learning based appearance model is about the same as the state-of-the-art SoftTFIDF similarity. The behavior across columns, though, shows the contribution of the global model, and that the local appearance model behaves better with it than a fixed similarity measure does. A second observation is that the Location appearance model is not as good as the one for People and Organization, probably due to the attribute transformation types chosen. Tab. 2 presents a more detailed evaluation of the different approaches on the entity identity task. All the three probabilistic models outperform the discriminatory approaches in this experiment, an indication of the effectiveness of the generative model. We note that although Model III is more expressive and reasonable than model II, it does not always perform better. Indeed, the global dependency among entities in Model III achieves two-folded outcomes: it achieves better precision, but may degrade the recall. The following example, taken from the corpus, illustrates the advantage of this model. Example 5.1 \"Sherman Williams\" is mentioned along with the baseball team \"Dallas Cowboys\" in 8 out of 300 documents, while \"Jeff Williams\" is mentioned along with \"LA Dodgers\" in two documents. In all models but Model III, \"Jeff Williams\" is judged to correspond to the same entity as \"Sherman Williams\" since their appearances are similar and the prior probability of the latter is higher than the former. Only Model III, due to the co-occurring dependency between \"Jeff Williams\" and \"Dodgers\", identifies it as corresponding to an entity different from \"Sherman Williams\". While this shows that Model III achieves better precision, the recall may go down. The reason is that global dependencies among entities enforces restrictions over possible grouping of similar mentions; in addition, with a limited document set, estimating this global dependency is inaccurate, especially when the entities themselves need to be found when training the model. Hard Cases: To analyze the experimental results further, we evaluated separately two types of harder cases of the entity identity task: (1) mentions with different writings that refer to the same entity; and (2) mentions with similar writings that refer to different entities. Model II and III outperform other models in those two cases as well. Tab. 3 presents F 1 performance of different approaches in the first case. The best F 1 value is only 73.1%, indicating that appearance similarity and global dependency are not sufficient to solve this problem when the writings are very different. Tab. 4 shows the performance of different approaches for disambiguating similar writings that correspond to different entities. Both these cases exhibit the difficulty of the problem, and that our approach provides a significant improvement over the state of the art similarity measure -column D vs. column II in Tab. 4. It also shows that it is necessary to use contextual attributes of the names, which are not yet included in this evaluation. Identifying similar writings of different entities(F 1 ). The test set contains 39, 837 pairs of mentions that associated with different entities in the 300 documents and have at least one token in common. Other Tasks In the following experiments, we evaluate the generative model on other tasks related to robust reading. We present results only for Model II, the best one in previous experiments. Name Expansion: Given a mention m in a query, we find the most likely entity e \u2208 E for m using the inference algorithm as described in Sec. 3.2. All unique mentions of the entity in the documents are output as the expansions of m. The accuracy for a given mention is defined as the percentage of correct expansions output by the system. The average accuracy of name expansion of Model II is shown in Tab. 5. Here is an example: Query: Who is Gore ? Expansions: Vice President Al Gore, Al Gore, Gore. Prominence Ranking: We refer to Example 3.1 and use it to exemplify quantitatively how our system supports prominence ranking. Given a query name n, the ranking of the entities with regard to the value of P (e) * P (n|e) (shown in brackets) by Model II is as follows. Input: George Bush 1. George Bush (0.0448) 2. George W. Bush (0.0058) Input: Bush 1. George W. Bush (0.0047) 2. George Bush (0.0015) 3. Steve Bush (0.0002) Conclusion and Future Work This paper presents an unsupervised learning approach to several aspects of the \"robust reading\" problem -crossdocument identification and tracing of ambiguous names. We developed a model that describes the natural generation process of a document and the process of how names are \"sprinkled\" into them, taking into account dependencies between entities across types and an \"author\" model. Several relaxations of this model were developed and studied experimentally, and compared with a stateof-the-art discriminative model that does not take a global view. The experiments exhibit encouraging results and the advantages of our model. This work is a preliminary exploration of the robust reading problem. There are several critical issues that our model can support, but were not included in this preliminary evaluation. Some of the issues that will be included in future steps are: (1) integration with more contextual information (like time and place) related to the target entities, both to support a better model and to allow temporal tracing of entities; (2) studying an incremental approach of training the model; that is, when a new document is observed, coming, how to update existing model parameters ? (3) integration of this work with other aspects of general coreference resolution (e.g., other terms like pronouns that refer to an entity) and named entity recognition (which we now take as given); and (4) scalability issues in applying the system to large corpora. Acknowledgments This research is supported by NSF grants ITR-IIS-0085836, ITR-IIS-0085980 and IIS-9984168 and an ONR MURI Award.",
    "abstract": "A given entity, representing a person, a location or an organization, may be mentioned in text in multiple, ambiguous ways. Understanding natural language requires identifying whether different mentions of a name, within and across documents, represent the same entity. We develop an unsupervised learning approach that is shown to resolve accurately the name identification and tracing problem. At the heart of our approach is a generative model of how documents are generated and how names are \"sprinkled\" into them. In its most general form, our model assumes: (1) a joint distribution over entities, (2) an \"author\" model, that assumes that at least one mention of an entity in a document is easily identifiable, and then generates other mentions via (3) an appearance model, governing how mentions are transformed from the \"representative\" mention. We show how to estimate the model and do inference with it and how this resolves several aspects of the problem from the perspective of applications such as questions answering.",
    "countries": [
        "United States"
    ],
    "languages": [
        ""
    ],
    "numcitedby": "37",
    "year": "2004",
    "month": "May 2 - May 7",
    "title": "Robust Reading: Identification and Tracing of Ambiguous Names"
}