{
    "article": "Many named entities contain other named entities inside them. Despite this fact, the field of named entity recognition has almost entirely ignored nested named entity recognition, but due to technological, rather than ideological reasons. In this paper, we present a new technique for recognizing nested named entities, by using a discriminative constituency parser. To train the model, we transform each sentence into a tree, with constituents for each named entity (and no other syntactic structure). We present results on both newspaper and biomedical corpora which contain nested named entities. In three out of four sets of experiments, our model outperforms a standard semi-CRF on the more traditional top-level entities. At the same time, we improve the overall F-score by up to 30% over the flat model, which is unable to recover any nested entities. Introduction Named entity recognition is the task of finding entities, such as people and organizations, in text. Frequently, entities are nested within each other, such as Bank of China and University of Washington, both organizations with nested locations. Nested entities are also common in biomedical data, where different biological entities of interest are often composed of one another. In the GENIA corpus (Ohta et al., 2002) , which is labeled with entity types such as protein and DNA, roughly 17% of entities are embedded within another entity. In the AnCora corpus of Spanish and Catalan newspaper text (Mart\u00ed et al., 2007) , nearly half of the entities are embedded. However, work on named entity recognition (NER) has almost entirely ignored nested entities and instead chosen to focus on the outermost entities. We believe this has largely been for practical, not ideological, reasons. Most corpus designers have chosen to skirt the issue entirely, and have annotated only the topmost entities. The widely used CoNLL (Sang and Meulder, 2003) , MUC-6, and MUC-7 NER corpora, composed of American and British newswire, are all flatly annotated. The GENIA corpus contains nested entities, but the JNLPBA 2004 shared task (Collier et al., 2004) , which utilized the corpus, removed all embedded entities for the evaluation. To our knowledge, the only shared task which has included nested entities is the SemEval 2007 Task 9 (M\u00e1rquez et al., 2007b) , which used a subset of the AnCora corpus. However, in that task all entities corresponded to particular parts of speech or noun phrases in the provided syntactic structure, and no participant directly addressed the nested nature of the data. Another reason for the lack of focus on nested NER is technological. The NER task arose in the context of the MUC workshops, as small chunks which could be identified by finite state models or gazetteers. This then led to the widespread use of sequence models, first hidden Markov models, then conditional Markov models (Borthwick, 1999) , and, more recently, linear chain conditional random fields (CRFs) (Lafferty et al., 2001) . All of these models suffer from an inability to model nested entities. In this paper we present a novel solution to the problem of nested named entity recognition. Our model explicitly represents the nested structure, allowing entities to be influenced not just by the labels of the words surrounding them, as in a CRF, but also by the entities contained in them, and in which they are contained. We represent each sentence as a parse tree, with the words as leaves, and with phrases corresponding to each entity (and a node which joins the entire sentence). Our trees look just like syntactic constituency trees, such as those in the Penn TreeBank (Marcus et al., 1993) ,  but they tend to be much flatter. This model allows us to include parts of speech in the tree, and therefore to jointly model the named entities and the part of speech tags. Once we have converted our sentences into parse trees, we train a discriminative constituency parser similar to that of (Finkel et al., 2008) . We found that on top-level entities, our model does just as well as more conventional methods. When evaluating on all entities our model does well, with F-scores ranging from slightly worse than performance on top-level only, to substantially better than top-level only. Related Work There is a large body of work on named entity recognition, but very little of it addresses nested entities. Early work on the GENIA corpus (Kazama et al., 2002; Tsuruoka and Tsujii, 2003) only worked on the innermost entities. This was soon followed by several attempts at nested NER in GENIA (Shen et al., 2003; Zhang et al., 2004; Zhou et al., 2004) which built hidden Markov models over the innermost named entities, and then used a rule-based post-processing step to identify the named entities containing the innermost entities. Zhou (2006) used a more elaborate model for the innermost entities, but then used the same rule-based post-processing method on the output to identify non-innermost entities. Gu (2006) focused only on proteins and DNA, by building separate binary SVM classifiers for innermost and outermost entities for those two classes. Several techniques for nested NER in GENIA where presented in (Alex et al., 2007) . Their first approach was to layer CRFs, using the output of one as the input to the next. For inside-out layering, the first CRF would identify the innermost entities, the next layer would be over the words and the innermost entities to identify second-level entities, etc. For outside-in layering the first CRF would identify outermost entities, and then successive CRFs would identify increasingly nested entities. They also tried a cascaded approach, with separate CRFs for each entity type. The CRFs would be applied in a specified order, and then each CRF could utilize features derived from the output of previously applied CRFs. This technique has the problem that it cannot identify nested entities of the same type; this happens frequently in the data, such as the nested proteins at the beginning of the sentence in Figure 1 . They also tried a joint labeling approach, where they trained a single CRF, but the label set was significantly expanded so that a single label would include all of the entities for a particular word. Their best results where from the cascaded approach. Byrne (2007) took a different approach, on historical archive text. She modified the data by concatenating adjacent tokens (up to length six) into potential entities, and then labeled each concatenated string using the C&C tagger (Curran and Clark, 1999) . When labeling a string, the \"previous\" string was the one-token-shorter string containing all but the last token of the current string. For single tokens the \"previous\" token was the longest concatenation starting one token earlier. SemEval 2007 Task 9 (M\u00e1rquez et al., 2007b) included a nested NER component, as well as noun sense disambiguation and semantic role labeling. However, the parts of speech and syntactic tree were given as part of the input, and named entities were specified as corresponding to noun phrases in the tree, or particular parts of speech. This restriction substantially changes the task. Two groups participated in the shared task, but only one (M\u00e1rquez et al., 2007a) parse tree which, based on their labels, could potentially be entities. Finally, McDonald et al. (2005) presented a technique for labeling potentially overlapping segments of text, based on a large margin, multilabel classification algorithm. Their method could be used for nested named entity recognition, but the experiments they performed were on joint (flat) NER and noun phrase chunking. Nested Named Entity Recognition as Parsing Our model is quite simple -we represent each sentence as a constituency tree, with each named entity corresponding to a phrase in the tree, along with a root node which connects the entire sentence. No additional syntactic structure is represented. We also model the parts of speech as preterminals, and the words themselves as the leaves. See Figure 1 for an example of a named entity tree. Each node is then annotated with both its parent and grandparent labels, which allows the model to learn how entities nest. We binarize our trees in a right-branching manner, and then build features over the labels, unary rules, and binary rules. We also use first-order horizontal Markovization, which allows us to retain some information about the previous node in the binarized rule. See Figure 2 for an example of an annotated and binarized subtree. Once each sentence has been converted into a tree, we train a discriminative constituency parser, based on (Finkel et al., 2008) . It is worth noting that if you use our model on data which does not have any nested entities, then it is precisely equivalent to a semi-CRF (Sarawagi and Cohen, 2004; Andrew, 2006) , but with no length restriction on entities. Like a semi-CRF, we are able to define features over entire entities of arbitrary length, instead of just over a small, fixed window of words like a regular linear chain CRF. We model part of speech tags jointly with the named entities, though the model also works without them. We determine the possible part of speech tags based on distributional similarity clusters. We used Alexander Clarke's software, 1 based on (Clark, 2003) , to cluster the words, and then allow each word to be labeled with any part of speech tag seen in the data with any other word in the same cluster. Because the parts of speech are annotated with the parent (and grandparent) labels, they determine what, if any, entity types a word can be labeled with. Many words, such as verbs, cannot be labeled with any entities. We also limit our grammar based on the rules observed in the data. The rules whose children include part of speech tags restrict the possible pairs of adjacent tags. Interestingly, the restrictions imposed by this joint modeling (both observed word/tag pairs and observed rules) actually result in much faster inference (and therefore faster train and test times) than a model over named entities alone. This is different from most work on joint modeling of multiple levels of annotation, which usually results in significantly slower inference. Discriminative Constituency Parsing We train our nested NER model using the same technique as the discriminatively trained, conditional random field-based, CRF-CFG parser of (Finkel et al., 2008) . The parser is similar to a Training on all of GENIA took approximately 23 hours for the nested model and 16 hours for the semi-CRF. A semi-CRF with an entity length restriction, or a regular CRF, would both have been faster. At runtime, the nested model for GENIA tagged about 38 words per second, while the semi-CRF tagged 45 words per second. For comparison, a first-order linear chain CRF trained with similar features on the same data can tag about 4,000 words per second. Local Features Pairwise Features label i distsim i + distsim i\u22121 + label i label i\u22121 + label i word i + label i shape i + shape i+1 + label i word i + label i\u22121 + label i word i\u22121 + label i shape i\u22121 + shape i + label i word i\u22121 + label i\u22121 + label i word i+1 + label i word i\u22121 + shape i + label i word i+1 + label i\u22121 + label i distsim i + label i shape i + word i+1 + label i distsim i + label i\u22121 + label i distsim i\u22121 + label i words in a 5 word window distsim i\u22121 + label i\u22121 + label i distsim i+1 + label i prefixes up to length 6 distsim i+1 + label i\u22121 + label i shape i + label i suffixes up to length 6 distsim i\u22121 + distsim i + label i\u22121 + label i shape i\u22121 + label i shape i + label i\u22121 + label i shape i+1 + label i shape i\u22121 + label i\u22121 + label i shape i+1 + label i\u22121 + label i shape i\u22121 + shape i + label i\u22121 + label i shape i\u22121 + shape i+1 + label i\u22121 + label i Features When designing features, we first made ones similar to the features typically designed for a firstorder CRF, and then added features which are not possible in a CRF, but are possible in our enhanced representation. This includes features over entire entities, features which directly model nested entities, and joint features over entities and parts of speech. When features are computed over each label, unary rule, and binary rule, the feature function is aware of the rule span and split. Each word is labeled with its distributional sim-ilarity cluster (distsim), and a string indicating orthographic information (shape) (Finkel et al., 2005) . Subscripts represent word position in the sentence. In addition to those below, we include features for each fully annotated label and rule. Local named entity features. 1 . Embedded named entity features. Embedded named entity features occur in binary rules where one entity is the child of another entity. For our embedded features, we replicated the pairwise features, except that the embedded named entity was treated as one of the words, where the \"word\" (and other annotations) were indicative of the type of entity, and not the actual string that is the entity. For instance, in the subtree in Figure 2 , we would compute word i +label i\u22121 +label i as PROT-DNA-DNA for i = 18 (the index of the word GM-CSF). The normal pairwise feature at the same po- sition would be GM-CSF-DNA-DNA. Whole entity features. We had four whole entity features: the entire phrase; the preceding and following word; the preceding and following distributional similarity tags; and the preceding distributional similarity tag with the following word. Local part of speech features. We used the same POS features as (Finkel et al., 2008) . Joint named entity and part of speech features. For the joint features we replicated the POS features, but included the parent of the POS, which either is the innermost entity type, or would indicate that the word is not in any entities. Experiments We performed two sets of experiments, the first set over biomedical data, and the second over Spanish and Catalan newspaper text. We designed our experiments to show that our model works just as well on outermost entities, the typical NER task, and also works well on nested entities. GENIA Experiments Data We performed experiments on the GENIA v.3.02 corpus (Ohta et al., 2002) . This corpus contains 2000 Medline abstracts (\u2248500k words), annotated with 36 different kinds of biological entities, and with parts of speech. Previous NER work using this corpus has employed 10-fold cross-validation for evaluation. We wanted to explore different model variations (e.g., level of Markovization, and different sets of distributional similarity clusterings) and feature sets, so we needed to set aside a development set. We split the data by putting the first 90% of sentences into the training set, and the remaining 10% into the test set. This is the exact same split used to evaluate part of speech tagging in (Tsuruoka et al., 2005) . For development we used the first half of the data to train, and the next quarter of the data to test. 2 We made the same modifications to the label set as the organizers of the JNLPBA 2004 shared task (Collier et al., 2004) . They collapsed all DNA subtypes into DNA; all RNA subtypes into RNA; all protein subtypes into protein; kept cell line and cell type; and removed all other entities. However, they also removed all embedded entities, while we kept them. As discussed in Section 3, we annotated each word with a distributional similarity cluster. We used 200 clusters, trained using 200 million words from PubMed abstracts. During development, we found that fewer clusters resulted in slower infer- Table 4 : Named entity results on the JNLPBA 2004 shared task data. Zhou and Su (2004) was the best system at the shared task, and is still state-of-the-art on the dataset.  ence with no improvement in performance. Experimental Setup We ran several sets of experiments, varying between all entities, or just top-level entities, for training and testing. As discussed in Section 3, if we train on just top-level entities then the model is equivalent to a semi-CRF. Semi-CRFs are stateof-the-art and provide a good baseline for performance on just the top-level entities. Semi-CRFs are strictly better than regular, linear chain CRFs, because they can use all of the features and strucutre of a linear chain CRF, but also utilize whole-entity features (Andrew, 2006) . We also evaluated the semi-CRF model on all entities. This may seem like an unfair evaluation, because the semi-CRF has no way of recovering the nested entities, but we wanted to illustrate just how much information is lost when using a flat representation. Results Our named entity results when evaluating on all entities are shown in Table 2 and when evaluating on only top-level entities are shown in Table 3 . Our nested model outperforms the flat semi-CRF on both top-level entities and all entities. While not our main focus, we also evaluated our models on parts of speech. The model trained on just top level entities achieved POS accuracy of 97.37%, and the one trained on all entities achieved 97.25% accuracy. The GENIA tagger (Tsuruoka et al., 2005) achieves 98.49% accuracy using the same train/test split. Additional JNLPBA 2004 Experiments Because we could not compare our results on the NER portion of the GENIA corpus with any other work, we also evaluated on the JNLPBA corpus. This corpus was used in a shared task for the BioNLP workshop at Coling in 2004 (Collier et al., 2004) . They used the entire GENIA corpus for training, and modified the label set as discussed in Section 5.1.1. They also removed all embedded entities, and kept only the top-level ones. They then annotated new data for the test set. This dataset has no nested entities, but because the training data is GENIA we can still train our model on the data annotated with nested entities, and then evaluate on their test data by ignoring all embedded entities found by our named entity recognizer. This experiment allows us to show that our named entity recognizer works well on top-level entities, by comparing it with prior work. Our model also produces part of speech tags, but the test data is not annotated with POS tags, so we cannot show POS tagging results on this dataset. One difficulty we had with the JNLPBA experiments was with tokenization. The version of GE-NIA distributed for the shared task is tokenized differently from the original GENIA corpus, but we needed to train on the original corpus as it is the only version with nested entities. We tried our best to retokenize the original corpus to match the distributed data, but did not have complete success. It is worth noting that the data is actually tokenized in a manner which allows a small amount of \"cheating.\" Normally, hyphenated words, such as LPS-induced, are tokenized as one word. However, if the portion of the word before the hyphen is in an entity, and the part after is not, such as BCR-induced, then the word is split into two tokens: BCR and -induced. Therefore, when a word starts with a hyphen it is a strong indicator that the prior word and it span the right boundary of an entity. Because the train and test data for the shared task do not contain nested entities, fewer words are split in this manner than in the original data. We did not intentionally exploit this fact in our feature design, but it is probable that some of our orthographic features \"learned\" this fact anyway. This probably harmed our results overall, because some hyphenated words, which straddled boundaries in nested entities and would have been split in the original corpus (and were split in our training data), were not split in the test data, prohibiting our model from properly identifying them. For this experiment, we retrained our model on the entire, retokenized, GENIA corpus. We also retrained the distributional similarity model on the retokenized data. Once again, we trained one model on the nested data, and one on just the toplevel entities, so that we can compare performance of both models on the top-level entities. Our full results are shown in Table 4 , along with the current state-of-the-art (Zhou and Su, 2004) . Besides the tokenization issues harming our performance, Zhou and Su (2004) also employed clever postprocessing to improve their results. AnCora Experiments Data We performed experiments on the NER portion of AnCora (Mart\u00ed et al., 2007) . This corpus has Spanish and Catalan portions, and we evaluated on both. The data is also annotated with parts of speech, parse trees, semantic roles and word Table 8 : Named entity results on the Catalan portion of AnCora, evaluating on only top-level entities. senses. The corpus annotators made a distinction between strong and weak entities. They define strong named entities as \"a word, a number, a date, or a string of words that refer to a single individual entity in the real world.\" If a strong NE contains multiple words, it is collapsed into a single token. Weak named entities, \"consist of a noun phrase, being it simple or complex\" and must contain a strong entity. Figure 3 shows an example from the corpus with both strong and weak entities. The entity types present are person, location, organization, date, number, and other. Weak entities are very prevalent; 47.1% of entities are embedded. For Spanish, files starting with 7-9 were the test set, 5-6 were the development test set, and the remainder were the development train set. For Catalan, files starting with 8-9 were the test set, 6-7 were the development test set, and the remainder were the development train set. For both, the development train and test sets were combined to form the final train set. We removed sentences longer than 80 words. Spanish has 15,591 training sentences, and Catalan has 14,906. Experimental Setup The parts of speech provided in the data include detailed morphological information, using a similar annotation scheme to the Prague TreeBank (Hana and Hanov\u00e1, 2002) . There are around 250 possible tags, and experiments on the development data with the full tagset where unsuccessful. We removed all but the first two characters of each POS tag, resulting in a set of 57 tags which more closely resembles that of the Penn TreeBank (Marcus et al., 1993) . All reported results use our modified version of the POS tag set. We took only the words as input, none of the extra annotations. For both languages we trained a 200 cluster distributional similarity model over the words in the corpus. We performed the same set of experiments on AnCora as we did on GENIA. Results and Discussion The full results for Spanish when testing on all entities are shown in Table 5 , and for only top-level entities are shown in Table 6 . For part of speech tagging, the nested model achieved 95.93% accuracy, compared with 95.60% for the flatly trained model. The full results for Catalan when testing on all entities are shown in Table 7 , and for only toplevel entities are shown in Table 8 . POS tagging results were even closer on Catalan: 96.62% for the nested model, and 96.59% for the flat model. It is not surprising that the models trained on all entities do significantly better than the flatly trained models when testing on all entities. The story is a little less clear when testing on just toplevel entities. In this case, the nested model does 4.38% better than the flat model on the Spanish data, but 2.45% worse on the Catalan data. The overall picture is the same as for GENIA: modeling the nested entities does not, on average, reduce performance on the top-level entities, but a nested entity model does substantially better when evaluated on all entities. Conclusions We presented a discriminative parsing-based method for nested named entity recognition, which does well on both top-level and nested entities. The only real drawback to our method is that it is slower than common flat techniques. While most NER corpus designers have defenestrated embedded entities, we hope that in the future this will not continue, as large amounts of information are lost due to this design decision. Acknowledgements Thanks to Mihai Surdeanu for help with the An-Cora data. The first author was supported by a Stanford Graduate Fellowship. This paper is based on work funded in part by the Defense Advanced Research Projects Agency through IBM. The content does not necessarily reflect the views of the U.S. Government, and no official endorsement should be inferred. ",
    "abstract": "Many named entities contain other named entities inside them. Despite this fact, the field of named entity recognition has almost entirely ignored nested named entity recognition, but due to technological, rather than ideological reasons. In this paper, we present a new technique for recognizing nested named entities, by using a discriminative constituency parser. To train the model, we transform each sentence into a tree, with constituents for each named entity (and no other syntactic structure). We present results on both newspaper and biomedical corpora which contain nested named entities. In three out of four sets of experiments, our model outperforms a standard semi-CRF on the more traditional top-level entities. At the same time, we improve the overall F-score by up to 30% over the flat model, which is unable to recover any nested entities.",
    "countries": [
        "United States"
    ],
    "languages": [
        "Catalan",
        "Spanish"
    ],
    "numcitedby": "250",
    "year": "2009",
    "month": "August",
    "title": "Nested Named Entity Recognition"
}