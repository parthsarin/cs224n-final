{
    "article": "A major benefit of using natural language to access the information in a database is that it shifts onto the system the burden of mediating between two views of the data: the way in which the data is stored (the \"database view\"), and the way in which an end-user thinks about it (the \"user*s view\"). Database information is recorded in terms of files, records, and fields, while natural-language expressions refer to the same information in terms of entities and relationships in the world. A major problem in constructing a natural-language interface is determining how to encode and use the information needed to bridge these two views. Current natural-language interface systems require extensive efforts by specialists in natural-language processing to provide them with the information they need to do the bridging. The systems are, in effect, handtallored to provide access to particular databases. This paper focuses on the problem of constructing transportable natural-language interfaces, i.e., systems that can be adapted to provide access to databases for which they were not specifically handtailored. It describes an initial version of a transportable system, called TEAM (for ~ransportable E_ngllsh A_ccess Data manager). The hypothesis underlying the research described in this paper is that the information required for the adaptation can be obtained through an Lnteractlve dialogue with database management personnel who are not familiar with natural-language processing techniques. B. Issues of Transportability The insistence on transportability distinguishes TEAM from previous systems such as LADDER [Hendrlx ec al., [978] LUNAR [Woods, Kaplan, and Webber, 1972] , PLANES [Waltz, 1975] , REL [Thompson, [975] , and has affected ~he design of the natural-language processln~ system in several ways. Most previously built naturallanguage interface systems have used techniques that make them inherently difficult to transfer to new domains and databases. The internal representations [n these systems typically intermix (in their data structures and procedures) information about language with information about the domain and the database. In The decision to provide transportability to existing conventional databases (which distinguishes TEAM from CHAT [Warren, 1981] ) means that the database cannot be restructured to make the way in which it stores data more compatible with the way in which a user may ask about the data. Although many problems can be avoided if one is allowed to design the database as well as the natural-language system, given the prevalence of existing conventional databases, approaches which make this assumption are likely to have limited applicability in the near-term. The TEAM system has three major components: (1) an acquZsttion component, (2) the DIALOGIC language system [Grosz, et al., 1982] , and (3) a data-access ccaponent. Section C descrlbes how the language and data-access components were designed to accommodate the needs of transportability. Sectioo D describes the design of the acquisition component to allow flexible interaction ~rlth a database expert and discusses acquisition problems caused by the differences between the database view and user view. Section E shows how end-user queries are interpreted after an acquisition has been completed. Section F describes the current state of development of TEAM and lists several problems currently under investigation. C. System Design In TEAM, the translation of an English query into a database query takes place in two steps. First, the DIALOGIC system constructs a representation of the literal meaning or \"logical form\" of the query [Moore, 1981] . Second, the data-access component translates the logical form into a formal database query. Each of these steps requires a combination of some information that is dependent on the domain or the database wlth some information that is not. To provide for transportability, the TEAM system carefully separates these two kinds of information. I. Domain-and Database-Dependent Information To adapt TEAM to a new database three kinds of information must be acquired: information about words, about concepts, and about the structure of the database. The data structures that encode this information--and the language processing and data-access procedures that use them--are designed to allow for acquiring new information automatically. A database schema encodes information about how concepts in the conceptual schena map onto the structures of a particular database. In particular, it links conceptual-schema representations of entities and relationships in the domain to their realization in a particular database. TEAM currently assumes a relational database with a number of files. (No languageprocesslng-related problems are entailed in moving TEAM to other database models.) Each file is about some kind of object (e.g., employees, students, ships, processor chips); the fields of the file record properties of the object (e.g., department, age, length). Domain-lndependent Information The language executive [Grosz, etal., 1982; Walker, 1978|, DIALOGIC, coordinates syntactic, semantic, and basic pragmatic rules in translating an English query into logical form. DIALOGIC's syntactic rules provide a general grammar of English [Robinson, 1982] . A semantic \"translation\" rule associated with each syntactic phrase rule specifies how the constituents of the phrase are to be interpreted. Basic pragmatic functions take local context into account in providing the interpretation of such things as noun-noun combinations. DIALOGIC also includes a quantlfler-scoping algorithm. To provide access to the informa=,on in a particular database, each of the components of DIALOG~C must access domain-speciflc information about the words and concepts relevant to that database. The information required by the syntactic rules is found in the lexicon. Information required by the semantic and pragmatic rules is found in the lexicon or the conceptual schema. The rules themselves however do not include such domain-dependent information and therefore do not need to be changed for different databases. In a similar manner, the data-access component separates general rules for translating logical forms into database queries from information about a particular database. The rules access information in the conceptual and database schemata to interpret queries for a particular database. D. Acquisition TEAM is designed to interact with two kinds of users: a database expert (DBE) and an end-user. The DBE provides information about the files and fields in the database through a system-dlrected acquisition dialogue. As a result of this dlaloEue, the language-processlng and data-access components are extended so that the end-user may query the new database in natural-language. i. Acquisition Questions Because the DBE is assumed to be familiar with database structures, but not with language-processlng techniques, the acquisition dialogue is oriented around database structures. That is, the questions are about the kinds of things in the files and fields of the database, rather than about lexlcal entries, sort hierarchies, and predicates. The disparity between the database view of the data and the end-user's view make the acquisition process nontrlvlal. For instance, consider a database of information about students in a university. From the perspective of an enduser \"sophomore\" refers to a subset of all of the students, those who are in their second year at the university. The fact that a particular student is a sophomore might be recorded in the database in a number of ways, including: (l) in a separate file containing information about the sophomore students; (2) by a special value in a symbolic field (e.g., a CLASS field [n which the value SOPH indicates \"sophomore\"); (3) by a \"true\" value in a Boolean field (e.g., a * in an [S-$O?H field). For natural-language querying to be useful, the end-user must be protected from having to know which type of representation was chosen. The questions posed to the DBE for each kind of database construct must be sufficient to allow DIALOGIC to handle approximately the same range of linguistic expressions (e.g., for referring to \"students in the sophomore class') regardless of the particular database implementation chosen. In all cases, TEAM will create a lexical entry for \"sophomore\" and an entry in the conceptual schema to represent the concept of sophomores. The database attachment for thls concept will depend on the particular database structure, as will the kinds of predicates for which it can be an argument. In designing TEAM we found it important to distinguish three differanc kinds of fields N arlthmeCic, feature (Boolean), and symbollc--on the basis of the range of linguistic expressions to which each gives rise. AriChmetic Inltial levels to different users (depending, for example, on their previous experience wlth the system). Acquisition Is easier if each new piece of information is immediately integrated into the underlying knowledge structures of the program. 8owever, we also wanted Co allow the DSE to change answers to previous questions (this has turned out to be an essential feature of TEAM). Some questions (e.g., those about irregular plural forms and synonyms) affect only a single part of TEAM (the lexicon). Other questions (e.g., those about feature fields) affect all components of the system. Because of the complex interaction between acquisition questions and components of the system to be updated, immediate integration of new information is not possible. As a result, updating of the lexicon, conceptual schema, and database schema Is not done until an acqulsition dialogue is completed. Example of Acquisition Queeclons To 6 ) and ( 7 )], how to identify individual objects in the database (4), and how to specify individual objects to the user (5). These responses result in the words \"chip\" and \"processor\" being added to the lexicon, a new sort added to the taxonomy (providing the interpretation for these words), and a link made in the database schema between this sort and records in the file CHIP. Figure 2 gives the short-form of the most central questions asked about symbolic fields, using the field MAKER (chip manufacturers) as exemplar. These questions are used to determine the kinds of properties represented, how these relate to properties in other fields, and the kinds of linguistic expressions the field values can give rise to. Question (4) allows TEAM to determine that individual field values refer to manufacturers rather than chips. The long-form of Question (7) is: Will you want to ask, for example, \"How many MOTOROLA processors are there?\" to get a count of the number of PROCESSORS with CHIP-MAKER-MOTOROLA? Question (8) expands to: Will you want to ask, for example, \"How many HOTOROLAS are there?\" to get a count of the number of PROCESSORS with CHIP-MAKER-MOTOROLA? In this ease, the answer to question (7) Is \"yes\" and to question (8) \"no\"; the field has values that can be used as explicit, but not implicit, classifiers. Contrast this wlth a symbolic field in a file about students that contains the class of a student; in this case the answer to both auesclons would be affirmative because, for example, the phrases \"sophomore woman\" and \"sophomores\" can be used to refer to refer to STUDENTS with CLASS=SOPHOMORE. In other cases, the values may serve neither as explicit nor as implicit classifiers. For example, one cannot say *\"the shoe employees\" or *\"the shoes\" to mean \"employees in the SHOE department\". For both questions ( 7 ) and ( 8 )  Because dates, measures, and count quantities are all handled differently, TEAM must first determine which kind of arithmetic object is in the field (2). a In this case we have a unit of \"worth\" (6) measured in \"dollars\" (4). Questions ( 8 ) and ( 9 ) supply information needed for interpreting expressions Involvlng comparatives (e.g., \"What chips are more expensive than the Z8080?\") and superlatives (e--~7, \"What is the cheapest chip?\"). Figure 4 gives the expanded version of these questions. As a result of thls acquisition, a new subsort of the (measure) sort WORTH is added to the taxonomy for PRICE, and is noted as measured in dollars. In addition, lexlcal entries are created for adjectives indicating positive (\"expensive\") and negative (\"cheap\") degrees of price and are linked to a binary predicate that relates a chip to its price. Feature fields are the most difficult fields to handle. They represent a single (arbitrary) property of an entity, with values that indicate whether or not the entity has the property, and they give rise to a wide range of linguistic expresslons--adJectlvals, nouns, phrases. The short-form of the questions asked about feature fields are given in Figure 5 , using the field EXP; the value YES indicates there is an export license for a given processor, and NO indicates there is not. Figures 6, 7 , and 8 give the expanded form of questions (4), (6), and (B) respectively. The expanded form illustrates the kinds of end-user queries that TEAM can handle after the DBE has answered these questions (see also Figure 9 ). Providing thls kind of illustration has turned out to be essential for getting these questions answered correctly. Each of these types of expression leads to new lexlcal, conceptual schema, and database schema entries. In general in the conceptual schema, feature field adJectlvals and abstract nouns result in the creation of new predicates (see Section E for an example); count nouns result in the creation of new subsorts of the file subject sort. The database schema contains informatlon about which field to access and what field value is required. TEAM also includes a limlted capability for acqulrln8 verbs. At present, only transitive verbs can be acquired. One of the arguments to the predicate cozTespondlng to a verb must be of the same sort as the file subject. The other argument must correspond to the sort of one of the fields. For the CHIP database, the DBE could specify that the verb \"make\" (and/or \"manufacture\") takes a CHIP as one argument and a MAKER as the second argument. E. Sample Queries and Their [nterpretatlons After the DBE has completed an acquisition session for a file, TEAM can interpret and respond Co end-user queries. Figure 9 lists some sample end-user queries for the file illustrated in the previous section. The role of the different kinds of informatlon acquired above can be seen by considering the logical forms produced for several queries and the database attachments for the sorts and predicates that appear in them. Who makes the faatest exportable chip. ~ Does Zilog make a chip that is faster than every chip that Intel makes? Are there any 8 bit Ziiog chipe? is some exportable chip faster than 12 mhz? Is every Ziiog chip that is f~ter than 5 mhz exportable? How faat is the faate~t exportable chip? How expensive is the f~stest ~'~MOS chipt Acknowledgments The conceptual schema encodes the relationship between the predicates CHEAP and PRICE-OF (again, both concepts created as a result of acquisition), wlCh the following information  CHEAP and (LOW PRICED), which designate the lower range of the PRICE scale, are negative adjectives. Please enter any such adjectives you will want to ~ in querying the database.",
    "abstract": "A major benefit of using natural language to access the information in a database is that it shifts onto the system the burden of mediating between two views of the data: the way in which the data is stored (the \"database view\"), and the way in which an end-user thinks about it (the \"user*s view\"). Database information is recorded in terms of files, records, and fields, while natural-language expressions refer to the same information in terms of entities and relationships in the world. A major problem in constructing a natural-language interface is determining how to encode and use the information needed to bridge these two views. Current natural-language interface systems require extensive efforts by specialists in natural-language processing to provide them with the information they need to do the bridging. The systems are, in effect, handtallored to provide access to particular databases.",
    "countries": [
        "United States"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "105",
    "year": "1983",
    "month": "February",
    "title": "{TEAM}: A Transportable Natural-Language Interface System"
}