{
    "framing_question": "If this paper introduces a task or benchmark, what benefits of the task or benchmark does it state, if any?",
    "response": "The paper does not introduce a task or benchmark.",
    "article": "Linear Context-Free Rewriting Systems (LCFRSs) are a grammar formalism capable of modeling discontinuous phrases. Many parsing applications use LCFRSs where the fan-out (a measure of the discontinuity of phrases) does not exceed 2. We present an efficient algorithm for optimal reduction of the length of production right-hand side in LCFRSs with fan-out at most 2. This results in asymptotical running time improvement for known parsing algorithms for this class. Introduction Linear Context-Free Rewriting Systems (LCFRSs) have been introduced by Vijay-Shanker et al. (1987) for modeling the syntax of natural language. The formalism extends the generative capacity of context-free grammars, still remaining far below the class of context-sensitive grammars. An important feature of LCFRSs is their ability to generate discontinuous phrases. This has been recently exploited for modeling phrase structure treebanks with discontinuous constituents (Maier and S\u00f8gaard, 2008) , as well as non-projective dependency treebanks (Kuhlmann and Satta, 2009) . The maximum number f of tuple components that can be generated by an LCFRS G is called the fan-out of G, and the maximum number r of nonterminals in the right-hand side of a production is called the rank of G. As an example, contextfree grammars are LCFRSs with f = 1 and r given by the maximum length of a production right-hand side. Tree adjoining grammars (Joshi and Levy, 1977) can also be viewed as a special kind of LCFRS with f = 2, since each auxiliary tree generates two strings, and with r given by the maximum number of adjunction and substitution sites in an elementary tree. Beyond tree adjoining languages, LCFRSs with f = 2 can also generate languages in which pair of strings derived from different nonterminals appear in socalled crossing configurations. It has recently been observed that, in this way, LCFRSs with f = 2 can model the vast majority of data in discontinuous phrase structure treebanks and non-projective dependency treebanks (Maier and Lichte, 2009; Kuhlmann and Satta, 2009) . Under a theoretical perspective, the parsing problem for LCFRSs with f = 2 is NP-complete (Satta, 1992) , and in known parsing algorithms the running time is exponentially affected by the rank r of the grammar. Nonetheless, in natural language parsing applications, it is possible to achieve efficient, polynomial parsing if we succeed in reducing the rank r (number of nonterminals in the right-hand side) of individual LCFRSs' productions (Kuhlmann and Satta, 2009) . This process is called production factorization. Production factorization is very similar to the reduction of a context-free grammar production into Chomsky normal form. However, in the LCFRS case some productions might not be reducible to r = 2, and the process stops at some larger value for r, which in the worst case might as well be the rank of the source production (Rambow and Satta, 1999) . Motivated by parsing efficiency, the factorization problem for LCFRSs with f = 2 has attracted the attention of many researchers in recent years. Most of the literature has been focusing on binarization algorithms, which attempt to find a reduction to r = 2 and return a failure if this is not possible. G\u00f3mez-Rodr\u00edguez et al. (2009) report a general binarization algorithm for LCFRS which, in the case of f = 2, works in time O(|p| 7 ), where |p| is the size of the input production. A more efficient binarization algorithm for the case f = 2 is presented in (G\u00f3mez-Rodr\u00edguez and Satta, 2009) , working in time O(|p|). In this paper we are interested in general factorization algorithms, i.e., algorithms that find factorizations with the smallest possible rank (not necessarily r = 2). We present a novel technique that solves the general factorization problem in time O(|p| 2 ) for LCFRSs with f = 2. Strong generative equivalence results between LCFRS and other finite copying parallel rewriting systems have been discussed in (Weir, 1992) and in (Rambow and Satta, 1999) . Through these equivalence results, we can transfer the factorization techniques presented in this article to other finite copying parallel rewriting systems. LCFRSs In this section we introduce the basic notation for LCFRS and the notion of production factorization. Definitions Let \u03a3 T be a finite alphabet of terminal symbols. As usual, \u03a3 * T denotes the set of all finite strings over \u03a3 T , including the empty string \u03b5. For in- teger k \u2265 1, (\u03a3 * T ) k denotes the set of all tuples (w 1 , . . . , w k ) of strings w i \u2208 \u03a3 * T . In what follows we are interested in functions mapping several tuples of strings in \u03a3 * T into tuples of strings in \u03a3 * T . Let r and f be two integers, r \u2265 0 and f \u2265 1. We say that a function g has rank r if there exist integers f i \u2265 1, 1 \u2264 i \u2264 r, such that g is defined on (\u03a3 * T ) f 1 \u00d7 (\u03a3 * T ) f 2 \u00d7 \u2022 \u2022 \u2022 \u00d7 (\u03a3 * T ) fr . We also say that g has fan-out f if the range of g is a subset of (\u03a3 * T ) f . Let y h , x ij , 1 \u2264 h \u2264 f , 1 \u2264 i \u2264 r and 1 \u2264 j \u2264 f i , be string-valued variables. A function g as above is said to be linear regular if it is defined by an equation of the form g( x 11 , . . . , x 1f 1 , . . . , x r1 , . . . , x rfr ) = = y 1 , . . . , y f , (1) where y 1 , . . . , y f represents some grouping into f sequences of all and only the variables appearing in the left-hand side of (1) (without repetitions) along with some additional terminal symbols (with possible repetitions). For a mathematical definition of LCFRS we refer the reader to (Weir, 1992, p. 137) . Informally, in a LCFRS every nonterminal symbol A is associated with an integer \u03d5(A) \u2265 1, called its fan-out, and it generates tuples in (\u03a3 * T ) \u03d5 (A) . Productions in a LCFRS have the form p : A \u2192 g(B 1 , B 2 , . . . , B \u03c1(p) ), where \u03c1(p) \u2265 0, A and B i , 1 \u2264 i \u2264 \u03c1(p), are nonterminal symbols, and g is a linear regular function having rank \u03c1(p) and fan-out \u03d5(A), defined on (\u03a3 * T ) \u03d5(B 1 ) \u00d7 \u2022 \u2022 \u2022 \u00d7 (\u03a3 * T ) \u03d5(B \u03c1(p) ) and taking values in (\u03a3 * T ) \u03d5(A) . The basic idea underlying the rewriting relation associated with LCFRS is that production p applies to any sequence of string tuples generated by the B i 's, and provides a new string tuple in (\u03a3 * T ) \u03d5(A) obtained through function g. We say that \u03d5(p) = \u03d5(A) is the fan-out of p, and \u03c1(p) is the rank of p. Example 1 Let L be the language L = {a n b n a m b m a n b n a m b m | n, m \u2265 1}. A LCFRS generating L is defined by means of the nonterminals S, \u03d5(S) = 1, and A, \u03d5(A) = 2, and the productions in figure 1 . Observe that nonterminal A generates all tuples of the form a n b n , a n b n . 2 Recognition and parsing for a given LCFRS can be carried out in polynomial time on the length of the input string. This is usually done by exploiting standard dynamic programming techniques; see for instance (Seki et al., 1991) . 1 However, the polynomial degree in the running time is a monotonically strictly increasing function that depends on both the rank and the fan-out of the productions in the grammar. To optimize running time, one can then recast the source grammar in such a way that the value of the above function is kept to a minimum. One way to achieve this is by factorizing the productions of a LCFRS, as we now explain. Factorization Consider a LCFRS production of the form p : A \u2192 g(B 1 , B 2 , . . . , B \u03c1(p) ), where g is specified as in (1). Let also C be a subset of {B 1 , B 2 , . . . , B \u03c1(p) } such that |C| = 0 and |C| = \u03c1(p). We let \u03a3 C be the alphabet of all variables x ij defined as in (1), for all values of i and j such that B i \u2208 C and 1 \u2264 j \u2264 f i . For each i with 1 \u2264 i \u2264 f , we rewrite each string y i in (1) in a form y i = y \u2032 i0 z i1 y \u2032 i1 \u2022 \u2022 \u2022 y \u2032 id i\u22121 z id i y \u2032 id i , with d i \u2265 0, such that the following conditions are all met: \u2022 each z ij , 1 \u2264 j \u2264 d i , is a string with one or more occurrences of variables, all in \u03a3 C ; \u2022 each y \u2032 ij , 1 \u2264 j \u2264 d i \u2212 1, : C \u2192 g 1 (B h 1 , . . . , B hc ) and p 2 : A \u2192 g 2 (C, B h \u2032 1 , . . . , B h \u2032 c ). Functions g 1 and g 2 are defined as: g 1 ( x h 1 1 , . . . , x h 1 f h 1 , . . . , x hc1 , . . . , x hcf hc ) = z 11 , \u2022 \u2022 \u2022 , z 1d 1 , z 21 , \u2022 \u2022 \u2022 , z f d f ; g 2 ( x h \u2032 1 1 , . . . , x h \u2032 1 f h \u2032 1 , . . . , x h \u2032 c 1 , . . . , x h \u2032 c f h \u2032 c ) = y \u2032 10 , . . . , y \u2032 1d 1 , y \u2032 20 , . . . , y \u2032 f d f . Note that productions p 1 and p 2 have rank strictly smaller than the source production p. Furthermore, if it is possible to choose set C in such a way that f i=0 d i \u2264 f , then the fan-out of p 1 and p 2 will be no greater than the fan-out of p. We can iterate the procedure above as many times as possible, under the condition that the fanout of the productions does not increase. Example 2 Let us consider the following production with rank 4: A \u2192 g S (B, C, D, E), g A ( x 11 , x 12 , x 21 , x 22 , x 31 , x 32 , x 41 , x 42 ) = x 11 x 21 x 31 x 41 x 12 x 42 , x 22 x 32 . Applyng the above procedure twice, we obtain a factorization consisting of three productions with rank 2 (variables have been renamed to reflect our conventions): A \u2192 g A (A 1 , A 2 ), g A ( x 11 , x 12 , x 21 , x 22 ) = x 11 x 21 x 12 , x 22 ; A 1 \u2192 g A 1 (B, E), g A 1 ( x 11 , x 12 , x 21 , x 22 ) = x 11 , x 21 x 12 x 22 ; A 2 \u2192 g A 2 (C, D), g A 2 ( x 11 , x 12 , x 21 , x 22 ) = x 11 x 21 , x 12 x 22 . 2 The factorization procedure above should be applied to all productions of a LCFRS with rank larger than two. This might result in an asymptotic improvement of the running time of existing dynamic programming algorithms for parsing based on LCFRS. The factorization technique we have discussed can also be viewed as a generalization of wellknown techniques for casting context-free grammars into binary forms. These are forms where no more than two nonterminal symbols are found in the right-hand side of productions of the grammar; see for instance (Harrison, 1978) . One important difference is that, while production factorization into binary form is always possible in the contextfree case, for LCFRS there are worst case grammars in which rank reduction is not possible at all, as shown in (Rambow and Satta, 1999) . A graph-based representation for LCFRS productions Rather than factorizing LCFRS productions directly, in this article we work with a more abstract representation of productions based on graphs. From now on we focus on LCFRS whose nonterminals and productions all have fan-out smaller than or equal to 2. Consider then a production p : A \u2192 g(B 1 , B 2 , . . . , B \u03c1(p) ), with \u03d5(A), \u03d5(B i ) \u2264 2, 1 \u2264 i \u2264 \u03c1(p) , and with g defined as g( x 11 , . . . , x 1\u03d5(B 1 ) , . . . . . . , x \u03c1(p)1 , . . . , x \u03c1(p)\u03d5(B \u03c1(p) ) ) = y 1 , . . . , y \u03d5(A) . In what follows, if \u03d5(A) = 1 then y 1 , . . . , y \u03d5(A) should be read as y 1 and y 1 \u2022 \u2022 \u2022 y \u03d5(A) should be read as y 1 . The same convention applies to all other nonterminals and tuples. We now introduce a special kind of undirected graph that is associated with a linear order defined over the set of its vertices. The p-graph associated with production p is a triple (V p , E p , \u227a p ) such that \u2022 V p = {x ij | 1 \u2264 i \u2264 \u03c1(p), \u03d5(B i ) = 2, 1 \u2264 j \u2264 \u03d5(B i )} is a set of vertices; 2 \u2022 E p = {(x i1 , x i2 ) | x i1 , x i2 \u2208 V p } is a set of undirected edges; \u2022 for x, x \u2032 \u2208 V p , x \u227a p x \u2032 if x = x \u2032 and the (unique) occurrence of x in y 1 \u2022 \u2022 \u2022 y \u03d5(A) pre- cedes the (unique) occurrence of x \u2032 . Note that in the above definition we are ignoring all string-valued variables x ij associated with nonterminals B i with \u03d5(B i ) = 1. This is because nonterminals with fan-out one can always be treated as in the context-free grammar case, as it will be explained later.  We close this section by introducing some additional notation related to p-graphs that will be used throughout this paper. Let E \u2286 E p be some set of edges. The cover set for E is defined as V (E) = {x | (x, x \u2032 ) \u2208 E} (recall that our edges are unordered pairs, so (x, x \u2032 ) and (x \u2032 , x) denote the same edge). Conversely, let V \u2286 V p be some set of vertices. The incident set for V is defined as E(V ) = {(x, x \u2032 ) | (x, x \u2032 ) \u2208 E p , x \u2208 V }. Assume \u03d5(p) = 2, and let x 1 , x 2 \u2208 V p . If x 1 and x 2 do not occur both in the same string y 1 or y 2 , then we say that there is a gap between x 1 and x 2 . If x 1 \u227a p x 2 and there is no gap between x 1 and x 2 , then we write [x 1 , x 2 ] to denote the set {x 1 , x 2 } \u222a {x | x \u2208 V p , x 1 \u227a p x \u227a p x 2 }. For x \u2208 V p we also let [x, x] = {x}. A set [x, x \u2032 ] is called a range. Let r and r \u2032 be two ranges. The pair (r, r \u2032 ) is called a tandem if the following conditions are both satisfied: (i) r\u222ar \u2032 is not a range, and (ii) there exists some edge (x, x \u2032 ) \u2208 E p with x \u2208 r and x \u2032 \u2208 r \u2032 . Note that the first condition means that r and r \u2032 are disjoint sets and, for any pair of vertices x \u2208 r and x \u2032 \u2208 r \u2032 , either there is a gap between x and x \u2032 or else there exists some x g \u2208 V p such that x \u227a p x g \u227a p x \u2032 and x g \u2208 r \u222a r \u2032 . A set of edges E \u2286 E p is called a bundle with fan-out one if V (E) = [x 1 , x 2 ] for some x 1 , x 2 \u2208 V p , i.e., V (E) is a range. Set E is called a bundle with fan-out two if V (E) = [x 1 , x 2 ] \u222a [x 3 , x 4 ] for some x 1 , x 2 , x 3 , x 4 \u2208 V p , and ([x 1 , x 2 ], [x 3 , x 4 ]) is a tandem. Note that if E is a bundle with fan-out two with V (E) = [x 1 , x 2 ] \u222a [x 3 , x 4 ], then neither E([x 1 , x 2 ]) nor E([x 3 , x 4 ] ) are bundles with fanout one, since there is at least one edge incident upon a vertex in [x 1 , x 2 ] and a vertex in [x 3 , x 4 ]. We also use the term bundle to denote a bundle with fan-out either one or two. Intuitively, in a p-graph associated with a LCFRS production p, a bundle E with fan-out f and with |E| > 1 identifies a set of nonterminals C in the right-hand side of p that can be factorized into a new production. The nonterminals in C are then replaced in p by a fresh nonterminal C with fan-out f , as already explained. Our factorization algorithm is based on efficient methods for the detection of bundles with fan-out one and two. The algorithm In this section we provide an efficient, recursive algorithm for the decomposition of a p-graph into bundles, which corresponds to factorizing the represented LCFRS production. Overview of the algorithm The basic idea underlying our graph-based algorithm can be described as follows. We want to compute an optimal hierarchical decomposition of an input bundle with fan-out 1 or 2. This decomposition can be represented by a tree, in which each node N corresponds to a bundle (the root node corresponds to the input bundle) and the daughters of N represent the bundles in which N is immediately decomposed. The decomposition is optimal in so far as the maximum arity of the decomposition tree is as small as possible. As already explained above, this decomposition represents a factorization of some production p of a LCFRS, resulting in optimal rank reduction. All the internal nodes in the decomposition represent fresh nonterminals that will be created during the factorization process. The construction of the decomposition tree is carried out recursively. For a given bundle with fan-out 1 or 2, we apply a procedure for decomposing this bundle in its immediate sub-bundles with fan-out 1 or 2, in an optimal way. Then, we recursively apply our procedure to the obtained sub-bundles. Recursion stops when we reach bundles containing only one edge (which correspond to the nonterminals in the right-hand side of the input production). We shall prove that the result is an optimal decomposition. The procedure for computing an optimal decomposition of a bundle F into its immediate subbundles, which we describe in the first part of this section, can be sketched as follows. First, we identify and temporarily remove all maximal bundles with fan-out 1 (Section 4.3). The result is a new bundle F \u2032 which is a subset of the original bundle, and has the same fan-out. Next, we identify all sub-bundles with fan-out 2 in F \u2032 (Section 4.4). We compute the optimal decomposition of F \u2032 , resting on the hypothesis that there are no sub-bundles with fan-out 1. Each resulting sub-bundle is later expanded with the maximal sub-bundles with fanout 1 that have been previously removed. This results in a \"first level\" decomposition of the original bundle F . We then recursively decompose all individual sub-bundles of F , including the bundles with fan-out 1 that have been later attached. Backward and forward quantities For a set V \u2286 V p of vertices, we write max(V ) (resp. min(V )) the maximum (resp. minimum) vertex in V w.r.t. the \u227a p total order. Let r = [x 1 , x 2 ] be a range. We write r.left = x 1 and r.right = x 2 . The set of backward edges for r is defined as B r = {(x, x \u2032 ) | (x, x \u2032 ) \u2208 E r , x \u227a p r.left, x \u2032 \u2208 r}. The set of forward edges for r is defined symmetrically as F r = {(x, x \u2032 ) | (x, x \u2032 ) \u2208 E r , x \u2208 r, r.right \u227a p x \u2032 }. For E \u2208 {B r , F r } we also define L(E) = {x | (x, x \u2032 ) \u2208 E, x \u227a p x \u2032 } and R(E) = {x \u2032 | (x, x \u2032 ) \u2208 E, x \u227a p x \u2032 }. Let us assume B r = \u2205. We write r.b.left = min(L(B r )). Intuitively, r.b.left is the leftmost vertex of the p-graph that is located at the left of range r and that is connected to some vertex in r through some edge. Similarly, we write We also introduce local backward quantities, defined as follows. We write r.lb.left = min(R(B r )). Intuitively, r.lb.left is the leftmost vertex among all those vertices in r that are connected to some vertex to the left of r. Similarly, we write r.lb.right = max(R(B r )). If B r = \u2205, then we set r.lb.left = r.lb.right = \u22a5. We define forward and local forward quantities in a symmetrical way. The backward quantities r.b.left and r.b.right and the local backward quantities r.lb.left and r.lb.right for all ranges r in the p-graph can be computed efficiently as follows. We process ranges in increasing order of size, expanding each range r by one unit at a time by adding a new vertex at its right. Backward and local backward quantities for the expanded range can be expressed as a function of the same quantities for r. Therefore if we store our quantities for previously processed ranges, each new range can be annotated with the desired quantities in constant time. This algorithm runs in time O(n 2 ), where n is the number of vertices in V p . This is an optimal result, since O(n 2 ) is also the size of the output. We compute in a similar way the forward quantities r.f .left and r.f .right and the local forward quantities r.lf .left and r.lf .right , this time expanding each range by one unit at its left. Bundles with fan-out one The detection of bundles with fan-out 1 within the p-graph can be easily performed in O(n 2 ), where n is the number of its vertices. Indeed, the incident set E(r) of a range r is a bundle with fan-out one if and only if r.b.left = r.f .left = \u22a5. This immediately follows from the definitions given in Section 4.2. It is therefore possible to check all ranges the one after the other, once the backward and forward properties have been computed. These checks take constant time for each of the \u0398(n 2 ) ranges, hence the quadratic complexity. We now remove from F all bundles with fan-out 1 from the original bundle F . The result is the new bundle F \u2032 , that has no sub-bundles with fan-out 1. Bundles with fan-out two Efficient detection of bundles with fan-out two in F \u2032 is considerably more challenging. A direct generalization of the technique proposed for detecting bundles with fan-out 1 would use the following property, that is also a direct corollary of the definitions in Section 4.2: the incident set E(r \u222a r \u2032 ) of a tandem (r, r \u2032 ) is a bundle with fan-out two if and only if all of the following conditions hold: (i) r.b.left = r \u2032 .f .left = \u22a5, (ii) r.f .left \u2208 r \u2032 , r.f .right \u2208 r \u2032 , (iii) r \u2032 .b.left \u2208 r, r \u2032 .b.right \u2208 r. However, checking all O(n 4 ) tandems the one after the other would require time O(n 4 ). Therefore, preserving the quadratic complexity of the overall algorithm requires a more complex representation. From now on, we assume that V p = {x 1 , . . . , x n }, and we write [i, j] as a shorthand for the range [x i , x j ]. First, we need to compute an additional data structure that will store local backward figures in a convenient way. Let us define the expansion table T as follows: for a given range r \u2032 = [i \u2032 , j \u2032 ], T (r \u2032 ) is the set of all ranges r = [i, j] such that r.lb.lef t = i \u2032 and r.lb.right = j \u2032 , ordered by increasing left boundary i. It turns out that the construction of such a table can be achieved in time O(n 2 ). Moreover, it is possible to compute in O(n 2 ) an auxiliary table T \u2032 that associates with r the first range r \u2032\u2032 in T ([r.f.lef t, r.f.right]) such that r \u2032\u2032 .b.right \u2265 r. Therefore, either (r, T \u2032 (r)) anchors a valid bundle, or there is no bundle E such that the first component of V (E) is r. We now have all the pieces to extract bundles with fan-out 2 in time O(n 2 ). We proceed as follows. For each range r = [i, j]: \u2022 We first retrieve r \u2032 = [r.f.lef t, r.f.right] in constant time. \u2022 Then, we check in constant time whether r \u2032 .b.lef t lies within r. If it doesn't, r is not the first part of a valid bundle with fan-out 2, and we move on to the next range r. \u2022 Finally, for each r \u2032\u2032 in the ordered set T (r \u2032 ), starting with T \u2032 (r), we check whether r \u2032\u2032 .b.right is inside r. If it is not, we stop and move on to the next range r. If it is, we output the valid bundle (r, r \u2032\u2032 ) and move on to the next element in T (r \u2032 ). Indeed, in case of a failure, the backward edge that relates a vertex in r \u2032\u2032 with a vertex outside r will still be included in all further elements in T (r \u2032 ) since T (r \u2032 ) is ordered by increasing left boundary. This step costs a constant time for each success, and a constant time for the unique failure, if any. This algorithm spends a constant time on each range plus a constant time on each bundle with fan-out 2. We shall prove in Section 5 that there are O(n 2 ) bundles with fan-out 2. Therefore, this algorithm runs in time O(n 2 ). Now that we have extracted all bundles, we need to extract an optimal decomposition of the input bundle F \u2032 , i.e., a minimal size partition of all n elements (edges) in the input bundle such that each of these partition is a bundle (with fan-out 2, since bundles with fan-out 1 are excluded, except for the input bundle). By definition, a partition has minimal size if there is no other partition it is a refinment of. 3 Extracting an optimal decomposition We have constructed the set of all (fan-out 2) subbundles of F \u2032 . We now need to build one optimal decomposition of F \u2032 into sub-bundles. We need some more theoretical results on the properties of bundles. Lemma 1 Let E 1 and E 2 be two sub-bundles of F \u2032 (with fan-out 2) that have non-empty intersection, but that are not included the one in the other. Then E 1 \u222a E 2 is a bundle (with fan-out 2). PROOF This lemma can be proved by considering all possible respective positions of the covers of E 1 and E 2 , and discarding all situations that would lead to the existence of a fan-out 1 sub-bundle. Theorem 1 For any bundle E, either it has at least one binary decomposition, or all its decompositions are refinements of a unique optimal one. PROOF Let us suppose that E has no binary decomposition. Its cover corresponds to the tandem (r, r \u2032 ) = ([i, j], [i \u2032 , j \u2032 ]). Let us consider two different decompositions of E, that correspond respectively to decompositions of the range r in two sets of sub-ranges of the form [i, k 1 ], [k 1 + 1, k 2 ], . . . , [k m , j] and [i, k \u2032 1 ], [k \u2032 1 + 1, k \u2032 2 ], . . . , [k \u2032 m \u2032 , j]. For simplifying the notations, we write k 0 = k \u2032 0 = i and k m+1 = k m \u2032 +1 = j. Since k 0 = k \u2032 0 , there exist an in- dex p > 0 such that for any l < p, k l = k \u2032 l , but k p = k \u2032 p : p is the index that identifies the first discrepancy between both decomposition. Since k m+1 = k m \u2032 +1 , there must exist q \u2264 m and q \u2032 \u2264 m \u2032 such that q and q \u2032 are strictly greater than p and that are the minimal indexes such that k q = k \u2032 q \u2032 . By definition, all bundles of the form E [k l\u22121 ,k l ] (p \u2264 l \u2264 q) have a non-empty intersec- tion with at least one bundle of the form E [k \u2032 (p \u2264 l \u2264 q \u2032 ). The reverse is true as well. Applying Lemma 1, this shows that E([k p+1 , k q ]) is a bundle with fan-out 2. Therefore, by replacing all ranges involved in this union in one decomposition or the other, we get a third decomposition for which the two initial ones are strict refinements. This is a contradiction, which concludes the proof. Lemma 2 Let E = V (r \u222a r \u2032 ) be a bundle, with r = [i, j]. We suppose it has a unique (non-binary) optimal decomposition, which decomposes [i, j] into [i, k 1 ], [k 1 + 1, k 2 ], . . . , [k m , j]. There exist no range r \u2032\u2032 \u2282 r such that (i) E r \u2032\u2032 is a bundle and (ii) \u2203l, 1 \u2264 l \u2264 m such that [k l , k l+1 ] \u2282 r \u2032\u2032 . PROOF Let us consider a range r \u2032\u2032 that would contradict the lemma. The union of r \u2032\u2032 and of the ranges in the optimal decomposition that have a non-empty intersection with r \u2032\u2032 is a fan-out 2 bundle that includes at least two elements of the optimal decomposition, but that is strictly included in E because the decomposition is not binary. This is a contradiction. Lemma 3 Let E = V (r, r \u2032 ) be a bundle, with r = [i, j]. We suppose it has a (optimal) decomposition (not necessarily unique). Let r \u2032\u2032 = [i, k] be the largest range starting in i such that k < j and such that it anchors a bundle, namely E(r \u2032\u2032 ). Then E(r \u2032\u2032 ) and E([k + 1, j]) form a binary decomposition of E. PROOF We need to prove that E([k + 1, j]) is a bundle. Each (optimal) binary decomposition of E decomposes r in 1, 2 or 3 sub-ranges. If no optimal decomposition decomposes r in at least 2 subranges, then the proof given here can be adapted by reasoning on r \u2032 instead of r. We now suppose that at least one of them decomposes r in at least 2 sub-ranges. Therefore, it decomposes r in [i, k 1 ] and [k 1 + 1, j] or in [i, k 1 ], [k 1 + 1, k 2 ] and [k 2 + 1, j]. We select one of these optimal decomposition by taking one such that k 1 is maximal. We shall now distinguish between two cases. First, let us suppose that r is decomposed into two sub-ranges [i, k 1 ] and [k 1 + 1, j] by the selected optimal decomposition. Obviously, E([i, k 1 ]) is a \"crossing\" bundle, i.e., the right component of its cover is is a sub-range of r \u2032 . Since r is decomposed in two sub-ranges, it is necessarily the same for r \u2032 . Therefore, E([i, k 1 ]) has a cover of the form [i, k 1 ] \u222a [i \u2032 , k \u2032 1 ] or [i, k 1 ] \u222a [k \u2032 1 + 1, j]. Since r \u2032\u2032 includes [i, k 1 ], E(r \u2032\u2032 ) has a cover of the form [i, k]\u222a[i \u2032 , k \u2032 ] or [i, k]\u222a[k \u2032 + 1, j]. , k = k 1 . Second, let us suppose that r is decomposed into 3 sub-ranges by the selected original decomposition (therefore, r \u2032 is not decomposed by this decomposition). This means that this decomposition involves a bundle with a cover of the form [i, k 1 ]\u222a[k 2 + 1, j] and another bundle with a cover of the form [k 1 + 1, k 2 ] \u222a r \u2032 (this bundle is in fact E(r \u2032 )). If k \u2265 k 2 , then the left range of both members of the original decomposition are included in r \u2032\u2032 , which means that E(r \u2032\u2032 ) = E, and therefore r \u2032\u2032 = r which is excluded. Note that k is at least as large as k 1 (since [i, k 1 ] is a valid \"range starting in i such that k < j and such that it anchors a bundle\"). Therefore, we have k 1 \u2264 k < k 2 . Therefore, E([i, k 1 ]) \u2282 E(r \u2032\u2032 ), which means that all edges anchored inside [k 2 + 1, j]) are included in E(r \u2032\u2032 ). Hence, E(r \u2032\u2032 ) can not be a crossing bundle without having a left component that is [i, j], which is excluded (it would mean E(r \u2032\u2032 ) = E). This means that E(r \u2032\u2032 ) is a bundle with a cover of the form [i, k] \u222a [k \u2032 + 1, j]. Which means that E(r \u2032 ) is in fact the bundle whose cover is [k + 1, k \u2032 + 1] \u222a r \u2032 . Hence, E(r \u2032\u2032 ) and E(r \u2032 ) form a binary decomposition of E. Hence, by definition of k 1 , k = k 1 . As an immediate consequence of Lemmas 2 and 3, our algorithm for extracting the optimal decomposition for F \u2032 consists in applying the following procedure recursively, starting with F \u2032 , and repeating it on each constructed sub-bundle E, until sub-bundles with only one edge are reached. Let E = E(r, r \u2032 ) be a bundle, with r = [i, j]. One optimal decomposition of E can be obtained as follows. One selects the bundle with a left component starting in i and with the maximum length, and iterating this selection process until r is covered. The same is done with r \u2032 . We retain the optimal among both resulting decompositions (or one of them if they are both optimal). Note that this decomposition is unique if and only if it has four components or more; it can not be ternary; it may be binary, and in this case it may be non-unique. This algorithm gives us a way to extract an optimal decomposition of F \u2032 in linear time w.r.t. the number of sub-bundles in this optimal decomposition. The only required data structure is, for each i (resp. k), the list of bundles with a cover of the form [i, j] \u222a [k, l] ordered by decreasing j (resp. l). This can trivially be constructed in time O(n 2 ) from the list of all bundles we built in time O(n 2 ) in the previous section. Since the number of bundles is bounded by O(n 2 ) (as mentioned above and proved in Section 5), this means we can extract an optimal decomposition for F \u2032 in O(n 2 ). Similar ideas apply to the simpler case of the decomposition of bundles with fan-out 1. The main decomposition algorithm We now have to generalize our algorithm in order to handle the possible existence of fan-out 1 bundles. We achieve this by using the fan-out 2 algorithm recursively. First, we extract and remove (maximal) bundles with fan-out 1 from F , and recursively apply to each of them the complete algorithm. What remains is F \u2032 , which is a set of bundles with no sub-bundles with fan-out 1. This means we can apply the algorithm presented above. Then, for each bundle with fan-out 1, we group it with a randomly chosen adjacent bundle with fan-out 2, which builds an expanded bundle with fan-out 2, which has a binary decomposition into the original bundle with fan-out 2 and the bundle with fan-out 1. Time complexity analysis In Section 4, we claimed that there are no more than O(n 2 ) bundles. In this section we sketch the proof of this result, which will prove the quadratic time complexity of our algorithm. Let us compute an upper bound on the number of bundles with fan-out two that can be found within the p-graph processed in Section 4.5, i.e., a p-graph with no fan-out 1 sub-bundle. Let E, E \u2032 \u2286 E p be bundles with fan-out two. If E \u2282 E \u2032 , then we say that E \u2032 expands E. E \u2032 is said to immediately expand E, written E \u2192 E \u2032 , if E \u2032 expands E and there is no bundle E \u2032\u2032 such that E \u2032\u2032 expands E and E \u2032 expands E \u2032\u2032 . Let us represent bundles and the associated immediate expansion relation by means of a graph. Let E denote the set of all bundles (with fan-out two) in our p-graph. The e-graph associated with our LCFRS production p is the directed graph with vertices E and edges defined by the relation \u2192 . For E \u2208 E, we let out(E) = {E \u2032 | E \u2192 E \u2032 } and in(E) = {E \u2032 | E \u2032 \u2192 E}. Lack of space prevents us from providing the proof of the following property. For any E \u2208 E that contains more than one edge, |out(E)| \u2264 2 and |in(E)| \u2265 2. This allows us to prove our upper bound on the size of E. Theorem 2 The e-graph associated with an LCFRS production p has at most n 2 vertices, where n is the rank of p. PROOF Consider the e-graph associated with production p, with set of vertices E. For a vertex E \u2208 E, we define the level of E as the number |E| of edges in the corresponding bundle from the p-graph associated with p. Let d be the maximum level of a vertex in E. We thus have 1 \u2264 d \u2264 n. We now prove the following claim. For any integer k with 1 \u2264 k \u2264 d, the set of vertices in E with level k has no more than n elements. For k = 1, since there are no more than n edges in such a p-graph, the statement holds. We can now consider all vertices in E with level k > 1 (k \u2264 d). Let E (k\u22121) be the set of all vertices in E with level smaller than or equal to k \u2212 1, and let us call T (k\u22121) the set of all edges in the egraph that are leaving from some vertex in E (k\u22121) . Since for each bundle E in E (k\u22121) we know that |out(E)| \u2264 2, we have |T (k\u22121) | \u2264 2|E (k\u22121) |. The number of vertices in E (k) with level larger than one is at least |E (k\u22121) | \u2212 n. Since for each E \u2208 E (k\u22121) we know that |in(E)| \u2265 2, we conclude that at least 2(|E (k\u22121) | \u2212 n) edges in T (k\u22121) must end up at some vertex in E (k) . Let T be the set of edges in T (k\u22121) that impinge on some vertex in E \\ E (k) . Thus we have |T | \u2264 2|E (k\u22121) | \u2212 2(|E (k\u22121) | \u2212 n) = 2n. Since the vertices of level k in E must have incoming edges from set T , and because each of them have at least 2 incoming edges, there cannot be more than n such vertices. This concludes the proof of our claim. Since the the level of a vertex in E is necessarily lower than n, this completes the proof. The overall complexity of the complete algorithm can be computed by induction. Our induction hypothesis is that for m < n, the time complexity is in O(m 2 ). This is obviously true for n = 1 and n = 2. Extracting the bundles Conclusion We have introduced an efficient algorithm for optimal reduction of the rank of LCFRSs with fan-out at most 2, that runs in quadratic time w.r.t. the rank of the input grammar. Given the fact that fan-out 1 bundles can be attached to any adjacent bundle in our factorization, we can show that our algorithm also optimizes time complexity for known tabular parsing algorithms for LCFRSs with fan-out 2. As for general LCFRS, it has been shown by Gildea (2010) that rank optimization and time complexity optimization are not equivalent. Furthermore, all known algorithms for rank or time complexity optimization have an exponential time complexity (G\u00f3mez-Rodr\u00edguez et al., 2009) . Acknowledgments Part of this work was done while the second author was a visiting scientist at Alpage (INRIA Paris-Rocquencourt and Universit\u00e9 Paris 7), and was financially supported by the hosting institutions.",
    "funding": {
        "military": 0.0,
        "corporate": 1.9361263126072004e-07,
        "research agency": 0.0008980778364906516,
        "foundation": 0.0003103885595010514,
        "none": 1.0
    }
}