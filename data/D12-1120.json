{
    "article": "Representation learning is a promising technique for discovering features that allow supervised classifiers to generalize from a source domain dataset to arbitrary new domains. We present a novel, formal statement of the representation learning task. We argue that because the task is computationally intractable in general, it is important for a representation learner to be able to incorporate expert knowledge during its search for helpful features. Leveraging the Posterior Regularization framework, we develop an architecture for incorporating biases into representation learning. We investigate three types of biases, and experiments on two domain adaptation tasks show that our biased learners identify significantly better sets of features than unbiased learners, resulting in a relative reduction in error of more than 16% for both tasks, with respect to existing state-of-the-art representation learning techniques. Introduction Supervised natural language processing (NLP) systems have been widely used and have achieved impressive performance on many NLP tasks. However, they exhibit a significant drop-off in performance when tested on domains that differ from their training domains. (Gildea, 2001; Sekine, 1997; Pradhan et al., 2007) One major cause for poor performance on out of-domain texts is the traditional representation used by supervised NLP systems (Ben-David et al., 2007) . Most systems depend on lexical features, which can differ greatly between domains, so that important words in the test data may never be seen in the training data. The connection between words and labels may also change across domains. For instance, \"signaling\" appears only as a present participle (VBG) in WSJ text (as in, \"signaling that...\"), but predominantly as a noun (as in \"signaling pathway\") in biomedical text. Recently, several authors have found that learning new features based on distributional similarity can significantly improve domain adaptation (Blitzer et al., 2006; Huang and Yates, 2009; Turian et al., 2010; Dhillon et al., 2011) . This framework is attractive for several reasons: experimentally, learned features can yield significant improvements over standard supervised models on out-of-domain tests. Moreover, since the representation-learning techniques are unsupervised, they can easily be applied to arbitrary new domains. There is no need to supply additional labeled examples for each new domain. Traditional representations still hold one significant advantage over representation-learning, however: because features are hand-crafted, these representations can readily incorporate the linguistic or domain expert knowledge that leads to state-ofthe-art in-domain performance. In contrast, the only guide for existing representation-learning techniques is a corpus of unlabeled text. To address this shortcoming, we introduce representation-learning techniques that incorporate a domain expert's preferences over the learned features. For example, out of the set of all possible distributional-similarity features, we might prefer those that help predict the labels in a labeled training data set. To capture this preference, we might bias a representation-learning algorithm towards features with low joint entropy with the labels in the training data. This particular biased form of representation learning is a type of semi-supervised learning that allows our system to learn task-specific representations from a source domain's training data, rather than the single representation for all tasks produced by current, unsupervised representationlearning techniques. We present a novel formal statement of representation learning, and demonstrate that it is computationally intractable in general. It is therefore critical for representation learning to be flexible enough to incorporate the intuitions and knowledge of human experts, to guide the search for representations efficiently and effectively. Leveraging the Posterior Regularization framework (Ganchev et al., 2010) , we present an architecture for learning representations for sequence-labeling tasks that allows for biases. In addition to a bias towards task-specific representations, we investigate a bias towards representations that have similar features across domains, to improve domain-independence; and a bias towards multi-dimensional representations, where different dimensions are independent of one another. In this paper, we focus on incorporating the biases with HMM-type representations (Hidden Markov Model). However, this technique can also be applied to other graphical model-based representations with little modification. Our experiments show that on two different domain-adaptation tasks, our biased representations improve significantly over unbiased ones. In a part-of-speech tagging experiment, our best model provides a 25% relative reduction in error over a state-of-the-art Chinese POS tagger, and a 19% relative reduction in error over an unbiased representation from previous work. The next section describes background and previous work. Section 3 introduces our framework for learning biased representations. Section 4 describes how we estimate parameters for the biased objective functions efficiently. Section 5 details our experiments and results, and section 6 concludes and outlines directions for future work. Background and Previous Work Terminology and Notation A representation is a set of features that describe data points. Formally, given an instance set X , it is a function R : X \u2192 Y for some suitable space Y (of-ten R d ), which is then used as the input space for a classifier. For instance, a traditional representation for POS tagging over vocabulary V would include (in part) |V | dimensions, and would map a word to a binary vector with a 1 in only one of the dimensions. By a structured representation, we mean a function R that incorporates some form of joint inference. In this paper, we use Viterbi decoding of variants of Hidden Markov Models (HMMs) for our structured representations, although our techniques are applicable to arbitrary (Dynamic) Bayes Nets. A domain is a probability distribution D over the instance set X ; R(D) denotes the induced distribution over Y. In domain adaptation tasks, a learner is given samples from a source domain D S , and is evaluated on samples from a target domain D T . -David et al. (2010) give a theoretical analysis of domain adaptation which shows that the choice of representation is crucial. A good choice is one that minimizes error on the training data, but equally important is that the representation must make data from the two domains look similar. Ben-David et al. Theoretical Background Ben show that for every hypothesis h, we can provably bound the error of h on the target domain by its error on the source domain plus a measure of the distance between D S and D T : E x\u223cD T L(x, R, f, h) \u2264 E x\u223cD S L(x, R, f, h) + d 1 (R(D S ), R(D T )) where L is a loss function, f is the target function, and the variation divergence d 1 is given by d 1 (D, D ) = 2 sup B\u2208B |P r D [B] \u2212 P r D [B]| (1) where B is the set of measurable sets under D, D . Problem Formulation Ben-David et al.'s theory provides learning bounds for domain adaptation under a fixed R. We now reformulate this theory to define the task of representation learning for domain adaptation as the following optimization problem: given a set of unlabeled instances U S drawn from the source domain and unlabeled instances U T from the target domain, as well as a set of labeled instances L S drawn from the source domain, identify a function R * from the space of possible representations R: R * = argmin R\u2208R { min h\u2208H (E x\u223cD S L(x, R, f, h)) + d 1 (R(D S ), R(D T ))} (2) Unlike most learning problems, where the representation R is fixed, this problem formulation involves a search over the space of representations and hypotheses. The equation also highlights an important underlying tension: the best representation for the source domain would naturally include domain-specific features, and allow a hypothesis to learn domain-specific patterns. We are aiming, however, for the best general classifier, that happens to be trained on training data from one or a few domains. Domain-specific features would contribute to distance between domains, and to classifier errors on data taken from unseen domains. By optimizing for this combined objective function, we allow the optimization method to trade off between features that are best for classifying source-domain data and features that allow generalization to new domains. Naturally, the objective function in Equation 2 is completely intractable. Just finding the optimal hypothesis for a fixed representation of the training data is intractable for many hypothesis classes. And the d 1 metric is intractable to compute from samples of a distribution, although Ben-David et al. propose some tractable bounds (2007; 2010) . We view Equation 2 as a high-level goal rather than a computable objective. We leverage prior knowledge to bias the representation learner towards attractive regions of the representations space R, and we develop efficient, greedy optimization techniques for learning effective representations. Previous Work There is a long tradition of research on representations for NLP, mostly falling into one of three categories: 1) vector space models and dimensionality reduction techniques (Salton and McGill, 1983; Turney and Pantel, 2010; Sahlgren, 2005; Deerwester et al., 1990; Honkela, 1997) 2) using structured representations to identify clusters based on distributional similarity, and using those clusters as features (Lin and Wu, 2009; Candito and Crabb\u00e9, 2009; Huang and Yates, 2009; Ahuja and Downey, 2010; Turian et al., 2010; Huang et al., 2011) ; 3) and structured representations that induce multi-dimensional real-valued features (Dhillon et al., 2011; Emami et al., 2003; Morin and Bengio, 2005) . Our work falls into the second category, but builds on the previous work by demonstrating how to improve the distributional-similarity clusters with prior knowledge. To our knowledge, we are the first to apply semi-supervised representation learning techniques for structured NLP tasks. Most previous work on domain adaptation has focused on the case where some labeled data is available in both the source and target domains (Daum\u00e9 III, 2007; Jiang and Zhai, 2007; Daum\u00e9 III et al., 2010) . Learning bounds are known (Blitzer et al., 2007; Mansour et al., 2009) . A few authors have considered domain adaptation with no labeled data from the target domain (Blitzer et al., 2006; Huang et al., 2011) by using features based on distributional similarity. We demonstrate empirically that incorporating biases into this type of representation-learning process can significantly improve results. Biased Representation Learning As before, let U S and U T be unlabeled data, and L S be labeled data from the source domain only. Previous work on representation learning with Hidden Markov Models (HMMs) (Huang and Yates, 2009) has estimated parameters \u03b8 for the HMM from unlabeled data alone, and then determined the Viterbioptimal latent states for training and test data to produce new features for a supervised classifier. The objective function for HMM learning in this case is marginal log-likelihood, optimized using the Baum-Welch algorithm: L(\u03b8) = x\u2208U S \u222aU T log y p(x, Y = y|\u03b8) (3) where x is a sentence, Y is the sequence of latent random variables for the sentence, and y is an instance of the latent sequence. The joint distribution in an HMM factors into observation and transition distributions, typically mixtures of multinomials: p(x, y|\u03b8) = P (y 1 )P (x 1 |y 1 ) i\u22652 P (y i |y i\u22121 )P (x i |y i ) P(Y) p 1 p 2 p 3 p m p n KL( p m || p n ) Figure 1 : Illustration of how the entropy bias is incorporated into HMM learning. The dotted oval shows the space of desired distributions in the hidden space, which have small or zero entropy with the real labels. The learning algorithm aims to maximize the log-likelihood of the unlabeled data, and to minimize the KL divergence between the real distribution, p m , and the closest desired distribution, p n . Intuitively, this form of representation learning identifies clusters of distributionally-similar words: those words with the same Viterbi-optimal latent state. The Viterbi-optimal latent states are then used as features for the supervised classifier. Our previous work (2009) has shown that the features from the learned HMM significantly improve the accuracy of POS taggers and chunkers on benchmark domain adaptation datasets. We use the HMM model from our previous work (2009) as our baseline. Our techniques follow the same general setup, as it provides an efficient and empirically-proven starting point for exploring (one part of) the space of possible representations. Note, however, that the HMM on its own does not provide even an approximate solution to the objective function in our problem formulation (Eqn. 2), since it makes no attempt to find the representation that minimizes loss on labeled data. To address this and other concerns, we modify the objective function for HM-M training. Specifically, we encode biases for representation learning by defining a set of properties \u03c6 that we believe a good representation function would minimize. One possible bias is that the HMM states should be predictive of the labels in labeled training data. We can encode this as a property that computes the entropy between the HMM states and the labels. For example, in Figure 1 , we want to learn the best HMM distribution for the sentence \"Innocent bystanders are often the victims\" for POS tagging task. The hidden sequence y 1 , y 2 , y 3 , y 4 , y 5 , y 6 can have any distribution p 1 , p 2 , p 3 , ..., p m , ..., p n from the latent space Y. Since we are doing POS tagging, we want the distribution to learn the information encoded in the original POS labels \"JJ NNS RB VBP DT NNS\". Therefore, by calculating the entropy between the hidden sequence and real labels, we can identify a subset of desired distributions that have low entropy, shown in the dotted oval. By minimizing the KL divergence between the learned distribution and the set of desired distributions, we can find the best distribution which is the closest to our desire. The following subsections describe the specific properties we investigate; here we show how to incorporate them into the objective function. Let z be the sequence of labels in L S , and let \u03c6(x, y, z) be a property of the completed data that we wish the learned representation to minimize, based on our prior beliefs. Let Q be the subspace of the possible distributions over Y that have a small expected value for \u03c6: Q = {q(Y)|E Y\u223cq [\u03c6(x, Y, z)] \u2264 \u03be}, for some constant \u03be. We then add penalty terms to the objective function (3) for the divergence between the HMM distribution p and the \"good\" distributions q, as well as for \u03be: L(\u03b8) \u2212 min q,\u03be [KL(q(Y)||p(Y|x, \u03b8)) + \u03c3|\u03be|] (4) s.t. E Y\u223cq [\u03c6(x, Y, z)] \u2264 \u03be (5) where KL is the Kullback-Leibler divergence, and \u03c3 is a free parameter indicating how important the bias is compared with the marginal log likelihood. To incorporate multiple biases, we define a vector of properties \u03c6, and we constrain each property \u03c6 i \u2264 \u03be i . Everything else remains the same, except that in the penalty term \u03c3|\u03be|, the absolute value is replaced with a suitable norm: \u03c3 \u03be . To allow ourselves to place weights on the relative importance of the different biases, we use a norm of the form x A = (x t Ax), where A is a diagonal matrix whose diagonal entries A ii are free parameters that provide weights on the different properties. For our experiments, we set the free parameters \u03c3 and A ii using a grid search over development data, as described in Section 5. 1 A Bias for Task-specific Representations Current representation learning techniques are unsupervised, so they will generate the exact same representation for different tasks. Yet it is exceedingly rare that two state-of-the-art NLP systems for different tasks share the same feature set, even if they do tend to share some core set of lexical features. Traditional non-learned (i.e., manuallyengineered) representations essentially always include task-specific features. In response, we propose to bias our representation learning such that the learned representations are optimized for a specific task. In particular, we propose a property that measures how difficult it is to predict the labels in training data, given the learned latent states. Our entropy property uses conditional entropy of the labels given the latent state as the measure of unpredictability: \u03c6 entropy (y, z) = \u2212 i P (y i , z i ) log P (z i |y i ) (6) where P is the empirical probability and i indicates the ith position in the data. We can plug this feature into Equation 5 to obtain a new version of Equation 4 as an objective function for task-specific representations. We refer to this model as HMM+E. Unlike previous formulations for supervised and semisupervised dimensionality reduction (Zhang et al., 2007; Yang et al., 2006) , our framework works efficiently for structured representations. A Bias for Domain-Independent Features Following the theory in Section 2.2, we devise a biased objective to provide an explicit mechanism for minimizing the distance between the source and target domain. As before, we construct a property of the completed data: \u03c6 distance (y) = d 1 ( PS , PT ) where PS (Y ) is the empirical distribution over latent state values estimated from source-domain latent states, and similarly for PT (Y ). Essentially, minimizing this property will bias the the representation towards features that appear approximately as often in the source domain as the target domain. We refer to the model trained with a bias of minimizing \u03c6 distance as HMM+D, and the model with both \u03c6 distance and \u03c6 entropy biases as HMM+D+E. A Bias for Multi-Dimensional Representations Words are multidimensional objects. In English, words can be nouns or verbs, singular or plural, count or mass, just to name a few dimensions along which they may vary. Factorial HMMs (FHMMs) (Ghahramani and Jordan, 1997) can learn multidimensional models, but inference and learning are complex and computationally expensive even in supervised settings. Our previous work (2010) created a multi-dimensional representation called an \"I-HMM\" by training several HMM layers independently; we showed that by finding several latent categories for each word, this representation can provide useful and domain-independent features for supervised learners. In this work, we also learn a similar multi-dimensional model (I-HMM+D+E), but within each layer we add in the two biases described above. While more efficient than FHMMs, the drawback of these I-HMM-based models is that there is no mechanism to encourage the different HMM models to learn different things. As a result, the layers may produce similar or equivalent features describing the dominant aspect of distributional similarity in the data, but miss features that are less strong, but still important, in the data. To encourage learning a truly multi-dimensional representation, we add a bias towards I-HMM models in which each layer is different from all previous layers. We define an entropy-based predictability property that measures how predictable each previous layer is, given the current one. Formally, let y l i denote the hidden state at the ith position in layer l of the model. For a given layer l, this property measures the conditional entropy of y m given y l , summed over layers m < l, and subtracts this from the maximum possible entropy: \u03c6 predict l (y) = M AX+ i;m<l P (y l i , y m i ) log P (y m i |y l i ) The entropy between layer l and the previous layer-s m measures how unpredictable the previous layers are, given layer l. By biasing the model such that M AX minus the entropy approaches zero, we encourage layer l towards completely different features from previous layers. We call the model with this bias P-HMM+D+E. Efficient Parameter Estimation Several machine learning paradigms have been developed recently for incorporating biases and constraints into parameter estimation (Liang et al., 2009; Chang et al., 2007; Mann and McCallum, 2007) . We leverage the Posterior Regularization (PR) framework for our problem because of its flexibility in handling different kinds of biases; we provide a brief overview of the technique here, but see (Ganchev et al., 2010) for full details. Overview of PR PR introduces a modified EM algorithm to handle constrained objectives, like Equation 4 . The modified E-step estimates a distribution q(Y) that is close to the current estimate of p(Y|x, \u03b8), but also close to the ideal set of distributions that (in expectation) have \u03c6 = 0 for each property \u03c6. The M step remains the same, except that it re-estimates parameters with respect to expected latent states computed with q rather than p. E step: q t+1 = arg min q min \u03be KL(q(Y)||p(Y|x, \u03b8 t )) + \u03c3 \u03be s.t. E q [\u03c6(x, Y, z)] \u2264 \u03be M step: \u03b8 t+1 = argmax \u03b8 E q t+1 [log p(x, Y|\u03b8 t ))] To make the optimization task in the E-step more tractable, PR transforms it to a dual problem: max \u03bb\u22650, \u03bb * \u2264\u03c3 \u2212 log Y p(Y|x, \u03b8) exp{\u2212\u03bb\u2022\u03c6(x, Y, z)} where \u2022 * is the dual norm of \u2022 . The gradient of this dual objective is \u2212E q [\u03c6(x, Y, z)]. A projected subgradient descent algorithm is used to perform the optimization. Modifying \u03c6 for Tractability In unstructured settings, this optimization problem is relatively straightforward. However, for structured representations, we need to ensure that the dynamic programming algorithms needed for inference remain tractable for the biased objectives. For efficient PR over structured models, the properties \u03c6 need to be decomposed as a sum over the cliques in the structured model. Unfortunately, the properties we mention above do not decompose so nicely, so we must resort to approximations. In order to efficiently compute the expected value of the entropy property with respect to Y \u223c q, we need to be able to compute each component E Y i \u223cq [\u03c6 entropy (Y i , z i )] separately. Yet P depends on the setting of other latent states Y j in the corpus. To avoid this problem, we pre-compute the expected empirical distributions over the completed data. For each specific value y and z: Pq (y, z) = 1 |L S | x |x| i=1 1[z i = z]q(Y i = y) Pq (y) = 1 |L S | x |x| i=1 q(Y i = y) These expected empirical distributions Pq can be computed efficiently using standard inference algorithms, such as the forward algorithm for HMMs. Note that Pq depends on q, but unlike the original P from Equation 6 , they do not depend on the data completions y. Thus we can compute Pq once for each q t , and then substitute it for P for all values of Y in the computation of E Y\u223cq \u03c6 entropy (Y, z), making this computation tractable. For the entropybased predictability properties, the calculation is similar, but instead of using the label z, we use the decoded states y l i from previous layers. For the distance property, Ben-David et al.'s analysis depends on a particular notion of distance (Eqn. 1) that is computationally intractable. They also propose more tractable lower bounds, but these are again incompatible with the PR framework. Since no computationally feasible exact algorithm exists for this distance feature, we resort to a crude but efficient approximation of this measure: for each pos-sible value y of the latent states, we define: \u03c6 dist y (y) = i|x i \u2208U S 1[y i = y]q(Y i = y) |U S | \u2212 i|x i \u2208U T 1[y i = y]q(Y i = y) |U T | Each of these individual properties is tractable for structured models. Combining these properties using the \u2022 A norm results in a Euclidean distance (weighted by A) between the frequencies of features in each domain, rather than d 1 distance. Experiments We tested the structured representations with biases on two NLP tasks: Chinese POS tagging and English NER. In both cases, we use a domain adaptation setting where no labeled data is available for the target domain -a particularly difficult setting, but one that provides a strong test for an NLP system's ability to generalize . In our work (Huang and Yates, 2009) , we used a plain HMM for domain adaptation tasks in which there is labeled source data and unlabeled source and target data, but no labeled target data for training. Therefore, here, we use the HMM technique as a baseline, and build on it by including biases. Chinese POS tagging We use the UCLA Corpus of Written Chinese, which is a part of The Lancaster Corpus of Mandarin Chinese (LCMC). The UCLA Corpus consists of 11,192 sentences of word-segmented and POStagged text in 13 genres. We use gold-standard word segmentation labels during training and testing. The LCMC tagset consists of 50 Chinese POS tags. Each genre averages 5284 word tokens, for a total of 68,695 tokens among all genres. We use the 'news' genre as our source domain and randomly select 20% of every other genre as labeled test data. To train our representation models, we use the 'news' text, plus the remaining 80% of the texts from the other genres. We use 90% of the labeled news text for training, and 10% for development. We replace hapax legomena in the unlabeled data with the special symbol *UNKNOWN*, and also do the same for word types in the labeled test sets that never appear in our unlabeled training texts. Following our previous HMM setup in (Huang and Yates, 2009) for consistency, we use an HMM with 80 latent states. For our multi-layer models, we use 7 layers of HMMs. We tuned the free parameters \u03c3 and A on development data. We varied \u03c3 from 0.1 to 1000. To tune A, we start by setting the diagonal entry for \u03c6 entropy to 1, without loss of generality. We then tie all the entries in A for \u03c6 dist y to a single parameter \u03b1, and tie all of the entries for \u03c6 predict y to a parameter \u03b2. We vary \u03b1 and \u03b2 over the set {0.01,0.1,1,10,100}. Figure 2 shows our results for \u03c3 and \u03b1 on news development data. A setting of \u03b1 = 0.01 and \u03c3 = 100 performs best, with all \u03c3 = 100 doing reasonably well. Results for each of these models on the general fiction test text confirm the general trends seen on development dataa comforting sign, since this indicates we can optimize the free parameters on in-domain development data, rather than requiring labeled data from the target domain. Our models tended to perform better with increasing \u03b2 on development data, though with diminishing returns. We pick the largest setting tested, \u03b2 = 100, for our final models. We use a linear-chain Conditional Random Field (CRF) for our supervised classifier. To incorporate the learned representations, we use the Viterbi Algorithm to find the optimal latent state sequence from each HMM-based model and then use the optimal states as features in the CRF. Table 1 presents the full list of features in the CRF. To handle Chinese, we add in two features introduced in previous work (Wang et al., 2009) : radical features and repeated characters. A radical is a portion of a Chinese character that consists of a small number of pen or brush strokes in a regular pattern. Transition \u2200 z 1[z j = z] \u2200 z,z 1[z j = z and z j\u22121 = z ] Word \u2200 w,z 1[x j = w and z j = z] Radical \u2200 z,r 1[\u2203 c\u2208x j radical(c) = r and z j = z] Repeated Words \u2200 A,B,z 1[x j = AABB and z j = z] \u2200 A,z 1[(x j = AA or x j = AA/) and z j = z] \u2200 A,B,z 1[x j = ABAB and z j = z] Features from Representation Learning \u2200 y,l,z 1[y l j = y and z j = z] Table 2 shows our results. We compare against the Baseline CRF without any additional representations and the unbiased HMM, a state-of-the-art domain adaptation technique from previous work, over all 13 domains (source and target). We also compare against a state-of-the-art Chinese POS tagger for in-domain text, the CRF-based Stanford tagger (Tseng et al., 2005) , retrained for this corpus. H-MM+D+E outperforms the Stanford tagger on 10 out of 12 target domains and the unbiased HMM on all domains, while the P-HMM+D+E outperforms the Stanford tagger (2.6% average improvement) and HMM (1.7%) on all 12 target domains. The I-HMM+D+E is slightly better than the HMM+D+E (.3%), but incorporating the multi-dimensional bias (P-HMM+D+E) adds an additional 0.6% improvement. Our interpretation for the success of I-HMM+D+E and P-HMM+D+E is that the increase in the state space of the models yields improved performance. Because P-HMM+D+E biases against redundant states found in I-HMM+D+E, it effectively increases the state space beyond I-HMM+D+E. Ahuja and Downey (2010) and our own work with HMMs as representations ( 2010 ) have previously shown that increasing the state space of the HMM can significantly improve the representation, but memory constraints eventually prevent further progress this way. The I-HMM+D+E and P-HMM+D+E models can provide similar benefits, but because they split parameters across multiple HMMs, they can accommodate much greater state spaces in the same amount of memory. We also tested the entropy and distance biases separately. Figure 4 shows the result of the distancebiased HMM+D on the general-fiction test text, as we vary \u03c3 over the set {0.1,1,10,100,1000} (we observed similar results for other domains). For all values of \u03c3, the biased representation outperforms the unbiased HMM. There is also a strong negative correlation between the expected value of \u03c6 distance and the resulting accuracy, as expected from Ben-David et al.'s theoretical analysis. The HMM+E model outperforms the HMM on the (source) news domain by 0.3%, but actually performs worse for most target domains. We suspect that the entropy feature, which is learned only from labeled sourcedomain data, makes the representation biased towards features that are important in the source domain only. However, after we add in the distance bias and a parameter to balance the weights from both biases, the representation is able to capture the label information as well as the target domain features. Thus, the representation won't solely depend on source data. HMM+D+E, which combines both biases, outperforms HMM+D, suggesting that taskspecific features for domain adaptation can be helpful, but only if there is some control for the domainindependence of the features. English Named Entity Recognition To evaluate on a second task, we turn to Named Entity Recognition. We use the training data from the  CoNLL 2003 shared task for our labeled training set, consisting of 204k tokens from the newswire domain. We tested the system on the MUC7 formal run test data, consisting of 59k tokens of stories on the telecommunications and aerospace industries. To train our representations, we use the CoNL-L training data and the MUC7 training data without labels. We again use a CRF, with features introduced by Zhang and Johnson (2003) for our baseline. We use the same setting of free parameters from our POS tagging experiments. Results are shown in Table 3 . Our best biased representation P-HMM+D+E outperformed the unbiased HMM representation by 3.6%, and beats the I-HMM+D+E by 1.6%. The domain-distance and multi-dimensional biases help most, while the taskspecific bias helps somewhat, but only when the domain-distance bias is included. et al., 2010; Huang et al., 2011) have performed a detailed comparison between these types of systems, so we concentrate on comparisons between biased and unbiased representations here. Does the task-specific bias actually help? In this section, we test whether the task-specific bias (entropy bias) actually learns something taskspecific. We learn the entropy-biased representations for two tasks on the same set of sentences, labeled differently for the two tasks: English POS tagging and Named Entity Recognition. Then we switch the representations to see whether they will help or hurt the performance on the other task. We randomly picked 500 sentences from WSJ section 0-18 as our labeled training data and 500 sentences from WSJ section 20-23 as testing data. Because WSJ data does not have gold standard NER tags, we manually labeled these sentences with NER tags. For simplicity, we only use three types of NER tags: person, organization and location. The result is shown in Table 4 . When the entropy bias uses labels from the same task as the classifier, the performance is improved: about 1.2% in accuracy on POS tagging and 1.7% in F1 score on NER. Switching the representations for the tasks actually hurts the performance compared with the unbiased representation. The results suggest that the entropy bias does indeed yield a task-specific representation. Conclusion and Future Work We introduce three types of biases into representation learning for sequence labeling using the PR framework. Our experiments on POS tagging and NER indicate domain-independent biases and multidimensional biases significantly improve the representations, while the task-specific bias improves performance on out-of-domain data if it is combined with the domain-independent bias. Our results indicate the power of representation learning in building domain-agnostic classifiers, but also the complexity of the task and the limitations of current techniques, as even the best models still fall significantly short of in-domain performance. Important considerations for future work include identifying further effective and tractable biases, and extending beyond sequence-labeling to other types of NLP tasks. Acknowledgments This research was supported in part by NSF grant IIS-1065397. ",
    "abstract": "Representation learning is a promising technique for discovering features that allow supervised classifiers to generalize from a source domain dataset to arbitrary new domains. We present a novel, formal statement of the representation learning task. We argue that because the task is computationally intractable in general, it is important for a representation learner to be able to incorporate expert knowledge during its search for helpful features. Leveraging the Posterior Regularization framework, we develop an architecture for incorporating biases into representation learning. We investigate three types of biases, and experiments on two domain adaptation tasks show that our biased learners identify significantly better sets of features than unbiased learners, resulting in a relative reduction in error of more than 16% for both tasks, with respect to existing state-of-the-art representation learning techniques.",
    "countries": [
        "United States"
    ],
    "languages": [
        "Mandarin",
        "Chinese",
        "English"
    ],
    "numcitedby": "21",
    "year": "2012",
    "month": "July",
    "title": "Biased Representation Learning for Domain Adaptation"
}