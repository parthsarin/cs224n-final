{
    "article": "This paper reports on the task of Native Language Identification (NLI). We developed a machine learning system to identify the native language of authors of English texts written by non-native English speakers. Our system is based on the language modeling approach and employs crossentropy scores as features for supervised learning, which leads to a significantly reduced feature space. Our method uses the SVM learner and achieves the accuracy of 82.4 % with only 55 features. We compare our results with the previous similar work by Tetreault et al. (2012) and analyze more details about the use of language modeling for NLI. We experiment with the TOEFL11 corpus (Blanchard et al., 2013)   and provide an exact comparison with results achieved in the First Shared Task in NLI (Tetreault et al., 2013). Introduction We present a system for identifying the native language (L1) of a writer based solely on a sample of their writing in a second language (L2). In this work we focus on English as the second language. According to the weak Contrastive Analysis Hypothesis (Lado, 1957) , speakers and writers of the same L1 can sometimes be identified by similar L2 errors. These errors may be a result of linguistic interference. Common tendencies of a speaker's L1 are superimposed onto their L2. Native Language Identification (NLI) is an attempt to exploit these errors in order to identify the L1 of the speaker from texts written in L2. In the present study we approach NLI exclusively as a classification task where the set of the L1 languages is known a priori. Motivation and Possible Applications The NLI task is a quickly growing subfield in NLP. The task is motivated by two types of questions: 1. questions about the native language influence in non-native speakers' speech or writing, and 2. questions about the accuracy of the NLI classification that is achievable, which also includes the technical details of the classification systems. Native Language Identification can be used in educational settings. It can provide useful feedback to language learners about their errors. Smith and Swan (2001) showed that speakers of different languages make different kinds of errors when learning a foreign language. A system which can detect the L1 of the learner will be able to provide more targetted feedback about the error and contrast it with common properties of the learner's L1. The knowledge of the native language can be used as a feature for authorship analysis (Stamatatos, 2009) . The plethora of available electronic texts (e.g., e-mail messages, online forum messages, blogs, source code, etc.) presents the potential of authorship analysis in various applications including criminal law (e.g., identifying writers of harassing messages, verifying the authenticity of suicide notes), civil law (e.g., copyright disputes), and forensic linguistics. In the end, it includes the traditional applications to literary research (e.g., attributing anonymous or disputed literary works to known authors). Bergsma et al. (2012) consider the NLI task as a sub-task of the authorship analysis task. Relatively similar to NLI is the task of Language Variety Identification. It has been recently addressed by the research community (Zampieri and Gebre, 2012; Sadat et al., 2014; Maier and G\u00f3mez-Rodr\u00edguez, 2014) . Related Work Known Approaches to the Task Most researchers use a system involving the Support Vector Machines (SVM) trained on n-gram based features. The most common features include character n-grams, function words, parts of speech, spelling errors, and features of writing quality, such as grammatical errors, style markers, and so forth. In contrast, Swanson and Charniak (2012) introduced the Tree Substitution (TSG) structures, learned by Bayesian inference. Bykh et al. (2013) used recurring n-grams, inspired by the variation n-gram approach to corpus error annotation detection (Dickinson and Meurers, 2003) . Ionescu et al. (2014) propose a combination of several string kernels and use multiple kernel learning. Malmasi and Cahill (2015) provide a systematic study of feature interaction and propose a function to measure feature independence effectiveness. The most important related work is the recent paper by Tetreault et al. (2012) , which was, to our best knowledge, the first extensive study involving the use of language modeling and entropy-based features for the sake of NLI. The comparison with our work is summarized in Sections 5.4 and 6. Results Achieved on the ICLE Corpus Studies before 2012 experimented with the texts included in the International Corpus of Learner English (ICLE) (Granger et al., 2002) . Since the ICLE corpus was not designed with the task of NLI in mind, the usability of the corpus for this task is further compromised by idiosyncrasies in the data such as topic bias. The highest NLI accuracy was 90.1%, which was reported by Tetreault et al. (2012) . The authors used a system involving SVM with the L1regularized logistic regression solver and default parameters. The system reported in the study by Tetreault et al. (2012) classified between seven L1s. The reported accuracy is higher than any of the previous NLI studies that examined the same number (Bykh et al., 2013) or even a smaller number of L1s in the ICLE. The ensemble method used by Tetreault et al. (2012) involved the creation of separate classifier models for each category of features; the L1 affiliations of individual texts were later predicted by the combined probabilities produced by the different classifier models. The authors pointed out that combining all features into a single classifier gave them an NLI accuracy of only 82.6%, which falls far short of the 90.1 % they achieved through the ensemble method. The study by Jarvis and Paquot (2012) presents a system that examines 12 L1s in the ICLE. Their system uses a combination of features that includes only lexical n-grams (1-grams, 2-grams, 3grams, and 4-grams). The system provides the highest classification accuracy of only 53.6 %. The First NLI Shared Task (2013) The First Native Language Identification Shared Task (Tetreault et al., 2013) , henceforth the Shared Task, was intended to unify the community and help the field progress. Tetreault et al. (2013) report the methods most participants used, the data they evaluated their systems on, the results achieved by the different teams, and some suggestions and ideas about what we can do for the next iteration of the NLI shared task. The Shared Task used the new corpus TOEFL11 (Blanchard et al., 2013) designed specifically for the NLI task and provided a common set of L1s as well as evaluation standards for this competition. This allows a direct comparison of approaches. The corpus was published by the Linguistic Data Consortium 1 in 2014. The Shared Task consisted of three sub-tasks. We consider our system to be a part of the Closed sub-task, which is the 11-way classification task using only the TOEFL11 data for training. Although we use English texts from the Wikipedia to build the language model of general English, this common data are not connected with the task. In total, 29 teams competed in the Shared Task competition. The majority of teams used Support Vector Machines. The teams used ensemble methods for combining their classifiers. There were a few other teams that tried different methods, such as Maximum Entropy, Discriminant Function Analysis, and K-Nearest Neighbors. The most successful approaches are reported and compared with our system in Table 5 . In this work we experiment with exactly the same data, using the same cross-validation splits as the participants of the Shared Task, so we can provide the exact comparison with the published results. 3 Development Data Basic Characteristics of the TOEFL11 The TOEFL11 corpus (Blanchard et al., 2013) contains 12,100 essays uniformly balanced between 11 target L1 languages. In addition, it is sampled as evenly as possible from 8 topics (prompts) along with 3 proficiency levels (low, medium, high) for each essay. The proficiency level has been determined by assessment experts using a consistent rating procedure for the entire corpus. The 11 target L1 languages covered by the corpus are: Arabic (ARA), Chinese (CHI), French (FRE), German (GER), Hindi (HIN), Italian (ITA), Japanese (JAP), Korean (KOR), Spanish (SPA), Telugu (TEL), and Turkish (TUR). The number of essays per target L1 language is perfectly balanced. It is also almost perfectly balanced in relation to the prompts written about. All eight prompts are reflected in all target L1 languages. For 4 target languages (ARA, CHI, JAP, KOR), all prompts are almost equally represented with a proportion of approximately 12.5% per prompt. In other L1s, there is more variability. The distribution of the proficiency levels is even more variable. In conclusion, the TOEFL11 is not a perfectly balanced corpus, but it is much larger than the ICLE and involves fewer prompts, which are more evenly distributed across the L1 groups. Experiment Settings For the purposes of the Shared Task, the corpus was split into three sets: training (TOEFL11-TRAIN), development (TOEFL11-DEV), and test (TOEFL11-TEST). The training corpus consisted of 900 essays per L1, the development set consisted of 100 essays per L1, and the test set consisted of another 100 essays per L1. The Shared Task organizers asked the participants to perform 10-fold cross-validation on a data set consisting of the union of TOEFL11-TRAIN and TOEFL11-DEV. For a direct comparison with the Shared Task participants, we experiment with the same folds as in the competition. Feature Engineering We define a small set of cross-entropy based features computed over different language models, which leads to significant reduction of the usual feature space based on n-grams. The features are then used by a SVM classifier. Use of Language Modeling Our system is inspired by Moore and Lewis (2010) . They show how to select a good subset of the available data as a training portion for a language model that improves the match between the language model from that data source and the desired application output. In their work they score text segments by the difference of the cross-entropy of a text segment according to the in-domain language model compared to the crossentropy of the text segment according to a language model trained on a random sample of the data source from which the text segment is drawn. The introduced cross-entropy difference selection method produces language models that are both a better match to texts in a restricted domain and require less data for training than any of the other data selection methods tested. Moreover, Axelrod et al. (2011) reported an improvement of their end-to-end machine translation system using domain adaptation based on extracting sentences from a large general-domain parallel corpus that are most relevant to the target domain selected with simple cross-entropy based methods. Cross-entropy Scoring We apply the idea of scoring texts by the difference in cross-entropy and developed the system for classifying target L1 languages. We built 11 special language models of English, each based on the texts with the same L1 language available in the training data. To compare these special language models with general English, we have built a general language model of English, using Wikipedia. Then we use cross-entropy to measure the similarity between a given test instance and target L1 languages. These cross-entropy scores then serve as features for the SVM classifier. Formally, the cross-entropy of text t with empirical n-gram distribution p given a language model M with distribution q is H(t, M ) = \u2212 x p(x) log q(x). For each L1 to be classified (L 1 , . . . , L 11 ) we built a language model M i . We also built a model of general English M G . Then we define the normalized cross-entropy score: D G (t, M i ) = H(t, M i ) \u2212 H(t, M G ). In the subsequent machine learning process, the scores D G (t, M i ), for i = 1, . . . , 11, are used as elements of the feature vector describing text t. The usage of the language model of general English is motivated by the idea that we are interested only in text features which distinguish author's L2 language (i.e. his or her specific English) from other authors with different L1 languages. Correct language constructions typically occurring in general English are removed from the comparison. Computing the L1 Language Models To build the L1 language models M i with as many training data as possible, we used the leave-oneout method. Let t i be the i-th training instance and gs(t i ) is the true L1 of text t i . To calculate the crossentropy for the instance t i , using the language model for language L j = gs(t i ), we built the model M j using all available training instances t k such that gs(t k ) = L j . To calculate the cross-entropy for the instance t i , using the language model for language L j = gs(t i ), we built M j using all available training instances t k except the instance t i itself: t k , L j = gs(t i ), k = i. Because of this approach, the cross-entropy scores proposed in Section 4.2, are only approximate. Each cross-entropy was computed with respect to a slightly different vocabulary, resulting in a different out-of-vocabulary (OOV) rate. OOV tokens in the scoring text were excluded from the computation, so the measurements are not strictly comparable. We believe that this drawback is reasonable: (1) it allows us to compute scores for all training instances, and (2) we do not have to split the training data into two parts -one for building the language model and the other for the cross-entropy calculation. Language Model of General English We built a language model of general English M G using Wikipedia. The official Wikipedia dumps contain a lot of technical pages and it is not straightforward to extract meaningful sentences and portions useful for language modeling. In order to avoid the duplication of the laborious efforts, we gratefully used the project TC Wikipedia 2 provided by Artiles and Sekine (2009) . 2 http://nlp.cs.nyu.edu/wikipedia-data/ Cross-entropy Based Features We adopted and experimented with all successful feature families used in the previous works reported in Section 2. For each feature family, we defined 11 crossentropy scores derived from the 11 language models coresponding to the 11 target L1 languages. \u2022 Tokens (T). Token based language model. \u2022 Characters (C). Character based language model. \u2022 Suffixes (S n ). Language models built on token suffixes of the length n \u2208 {2, ..., 6}. \u2022 POS tags (P). Language model built on POS tags. We tagged the TOEFL11 corpus as well as the whole Wikipedia by the Stanford tagger (Toutanova et al., 2003) . For each feature family we built and compared the performance of two language models: one from the original text, and the other using the same, but lower-cased text. Moreover, we experimented with and compared different smoothing methods, as described in details in Section 5.2. Other features To complete the list of feature families, we added 9 statistical (ST) and two categorical (PR) features: Text length characteristics include the number of sentences, number of tokens and number of characters for the given instance. It also includes the average sentence length (# of tokens / # of sentences) and average token length (# of characters / # of tokens). Lexical variety family includes the number of unique tokens (in the original as well as the lowercased text) and the so called lexical variety. It is defined as the ratio between a unique number of tokens and the overall number of tokens in the classified instance. We provide two features for both the original and the lower-cased text. Prompt and proficiency (PR) are two categorical features available for each TOEFL11 instance, which encode the topic of the essay and the proficiency level of the writer, respectively. Results and Discussion The experiments presented in this paper represent the results of exploring a range of various features and machine learning approaches. We describe SVM Settings Our most successful system uses a linear SVM multiclass classifier. In our experiments, we did not observe any gain from using either polynomial or RBF kernels. This observation is exactly in line with previous research (see Section 2). The parameter Cost was optimized through cross validation. In this work, the SVM implementation of the R package e1071 3 is applied, which is based on the LIBSVM library (Chang and Lin, 2011) . To provide a multiclass classifier, we experimented with two common strategies: (i) one-vs-one and (ii) one-vs-all. The first strategy yields consistently better results. Best Smoothing Method We used the SRILM software 4 (Stolcke, 2002) to build langauge models (LM) as well as to calculate cross-entropy based features. This software offers several smoothing algorithms. Experiments showed that selecting an appropriate smoothing method is essential for model quality. Table 1 presents averaged accuracies from the cross validation over TOEFL11-TRAIN. The token-based LMs are built with different smoothing strategies. Witten-Bell (Witten and Bell, 1991) and Kneser-Ney smoothing (Kneser and Ney, 1995) currently support interpolation. This option causes the discounted n-gram probability estimates at the specified order n to be interpolated with lower-order estimates. This sometimes yields better models with some smoothing methods. In Table 1 , interpolated smoothing methods are marked with *. According to the results from Table 1 , we selected the Kneser and Ney (1995) Table 3 : Accuracy of the system using background language models built on original texts compared with language models built on lower-cased texts. gorithm and we used it in all next experiments. Individual Feature Families The results presented in this section are averaged accuracies over the 10-fold cross-validation on the combined TOEFL11-TRAIN and TOEFL11-DEV sets. The cross-validation folds were exactly defined by the organizers of the Shared Task. Statistical significance was computed using the corrected resampled (two tailed) t-Test (Nadeau and Bengio, 2003) , which is suitable for crossvalidation based experiments. The test significance was 0.05. We experimented with almost all types of ngram features used by the participants of the Shared Task. For each feature family we built 6 different LMs based on a different n-gram range (from [1, 3] to [1, 8] ). Table 2 shows the classifier performance using different feature families individually. For each family we selected the most successful ngram range. We noticed that a higher n-gram order improves only character based features. For other feature families the differences in performance were not statistically significant. In such cases we selected the lowest n-gram order to keep the model as simple as possible. The accuracies presented in Table 2 were obtained using language models built from the lowercased texts. Table 3 shows the accuracy improvement based on the lower-case transformation. We consider language models built on original training data to be too sparse. Transformation to lowercase makes the data less sparse and language models more expressive. Each model in Table 3 Feature Families Combinations To obtain the best performance we tried to find out the most successful combination of the proposed feature families. Table 4 shows several interesting combinations. The individual suffix model achieved best performance with the length of 6 (see Table 2 ). However, in combination with other families, it finally appeared that the best performance was achieved with the suffixes with the length of 4, which was found using the cross-validation on the training data set. Our hypothesis is that the suffix models with the length greater than 4 are rather similar to the token models, since many tokens have less than 5 characters, which implies that the gain from their combination is quite poor. Therefore the choice of S 4 does not seem to be dependent on the training data set. The full combination of the feature families consists of 55 features. We wanted to examine whether we could reduce this amount even more. According to Table 4 , the most important family is the token feature family. Its removal from the model causes a large decrease in accuracy. On the other hand, the removal of the statistical feature family (ST) and POS tags feature family (P) leads to almost the same system performance. Our models based only on token-or charactern-grams language models significatly outperform the system reported by Tetreault et al. (2012) . Their model based on 5-gram language models reaches 73.9 % accuracy (see paper), while our models with the accuracy between 78 % and 81.3 % are significantly better. Since we do not know all details of their implementation, we can only hypothesize that the big difference in accuracy is mainly due to different smoothing methods used, or perharps due to different computation of the entropic scores. Best Shared Task Systems -Comparison Our experiment settings are perfectly in line with the Shared Task guidelines, so we can directly compare the performance of our system with the best participants of the Shared Task, see Table 5 . All the best systems used n-grams of tokens, characters, and POS tags. Two systems (Malmasi et al., 2013; Bykh et al., 2013) used also syntactically based n-grams and function words. The systems differ in the value type provided for n-gram feature vectors. The most successful systems (Gebre et al., 2013; Lynum, 2013) used TF-IDF. Other systems used binary values as well as absolute and relative frequencies. In fact, all compared systems work with hundreds of thousands of n-gram features. Training models with such a huge number of features requires specific hardware and could be time consuming. Of course, our model also deals with a huge number of n-grams, but are hidden in the language models consisting of smoothed linear combinations of n-grams. All the statistical information extracted and collected when the 11 language models are learned from the training data is finally comprised in a small number of features. The resulting benefit is that the SVM learner then works only with a few already trained and smoothed linear n-gram combinations and in contrast to the other compared models it does not need to learn a huge number of parameters/weights for all n-gram features. Conclusion We described our system for identifying the native language (L1) of a non-native English writer. Our research was focused on the use of a significantly reduced feature space. The language modeling approach and using cross-entropy scores led to an enormous decrease in the feature space dimension: from hundreds of thousands to 55 features. In comparison with the recent work by Tetreault et al. (2012) , who also examined the use of language models in a similar way, we obtained a better result when using only the features based on language modeling, which is probably due to the fact that (1) we used a different (and for our purpose significantly better) smoothing method, and (2) we succesfully combined several approches to language modeling using different types of n-grams. Another difference is in using our \"normalized cross-entropy scores\" as features in contrast to their \"perplexity scores\", the exact effect of which, however, is not known. We experimented with and combined several feature families and a number of different language models. Cross-validation testing on the TOEFL11 corpus revealed that our best model accuracy is 82.4 % in categorizing essays into 11 L1 languages, which is a result comparable to the state-of-the-art. Acknowledgements This research work has been supported by the Czech Science Foundation, grant project no. P103/12/G084, and partially also by SVV project number 260 224. We gratefully thank to our colleagues Barbora Hladk\u00e1 for her useful feedback, and Silvie Cinkov\u00e1 for her English corrections. Last but not least, we thank to all anonymous reviewers for their valuable comments.",
    "abstract": "This paper reports on the task of Native Language Identification (NLI). We developed a machine learning system to identify the native language of authors of English texts written by non-native English speakers. Our system is based on the language modeling approach and employs crossentropy scores as features for supervised learning, which leads to a significantly reduced feature space. Our method uses the SVM learner and achieves the accuracy of 82.4 % with only 55 features. We compare our results with the previous similar work by Tetreault et al. (2012) and analyze more details about the use of language modeling for NLI. We experiment with the TOEFL11 corpus (Blanchard et al., 2013)   and provide an exact comparison with results achieved in the First Shared Task in NLI (Tetreault et al., 2013).",
    "countries": [
        "Czech Republic"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "5",
    "year": "2015",
    "month": "September",
    "title": "Feature Extraction for Native Language Identification Using Language Modeling"
}