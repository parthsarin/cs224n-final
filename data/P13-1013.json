{
    "article": "Characters play an important role in the Chinese language, yet computational processing of Chinese has been dominated by word-based approaches, with leaves in syntax trees being words. We investigate Chinese parsing from the character-level, extending the notion of phrase-structure trees by annotating internal structures of words. We demonstrate the importance of character-level information to Chinese processing by building a joint segmentation, part-of-speech (POS) tagging and phrase-structure parsing system that integrates character-structure features. Our joint system significantly outperforms a state-of-the-art word-based baseline on the standard CTB5 test, and gives the best published results for Chinese parsing. Introduction Characters play an important role in the Chinese language. They act as basic phonetic, morphosyntactic and semantic units in a Chinese sentence. Frequently-occurring character sequences that express certain meanings can be treated as words, while most Chinese words have syntactic structures. For example, Figure 1 (b) shows the structure of the word \"\u5efa\u7b51\u4e1a (construction and building industry)\", where the characters \"\u5efa (construction)\" and \"\u7b51 (building)\" form a coordination, and modify the character \"\u4e1a (industry)\". However, computational processing of Chinese is typically based on words. Words are treated as the atomic units in syntactic parsing, machine translation, question answering and other NLP tasks. Manually annotated corpora, such as the Chinese Treebank (CTB) (Xue et al., 2005) , usually have words as the basic syntactic elements * Email correspondence. Figure 1 : Word-based and character-level phrasestructure trees for the sentence \"\u4e2d\u56fd\u5efa\u7b51\u4e1a\u5448\u73b0 \u65b0\u683c\u5c40 (China's architecture industry shows new patterns)\", where \"l\", \"r\", \"c\" denote the directions of head characters (see section 2). (Figure 1(a) ). This form of annotation does not give character-level syntactic structures for words, a source of linguistic information that is more fundamental and less sparse than atomic words. In this paper, we investigate Chinese syntactic parsing with character-level information by extending the notation of phrase-structure (constituent) trees, adding recursive structures of characters for words. We manually annotate the structures of 37,382 words, which cover the entire CTB5. Using these annotations, we transform CTB-style constituent trees into character-level trees (Figure 1 (b)). Our word structure corpus, together with a set of tools to transform CTB-style trees into character-level trees, is released at https://github.com/zhangmeishan/wordstructures. Our annotation work is in line with the work of Vadas and Curran (2007) and Li (2011) , which provide extended annotations of Penn Treebank (PTB) noun phrases and CTB words (on the morphological level), respectively. We build a character-based Chinese parsing model to parse the character-level syntax trees. Given an input Chinese sentence, our parser produces its character-level syntax trees (Figure 1(b) ). With richer information than word-level trees, this form of parse trees can be useful for all the aforementioned Chinese NLP applications. With regard to task of parsing itself, an important advantage of the character-level syntax trees is that they allow word segmentation, part-of-speech (POS) tagging and parsing to be performed jointly, using an efficient CKY-style or shift-reduce algorithm. Luo (2003) exploited this advantage by adding flat word structures without manually annotation to CTB trees, and building a generative character-based parser. Compared to a pipeline system, the advantages of a joint system include reduction of error propagation, and the integration of segmentation, POS tagging and syntax features. With hierarchical structures and head character information, our annotated words are more informative than flat word structures, and hence can bring further improvements to phrase-structure parsing. To analyze word structures in addition to phrase structures, our character-based parser naturally performs joint word segmentation, POS tagging and parsing jointly. Our model is based on the discriminative shift-reduce parser of Zhang and Clark (2009; 2011) , which is a state-of-the-art word-based phrase-structure parser for Chinese. We extend their shift-reduce framework, adding more transition actions for word segmentation and POS tagging, and defining novel features that capture character information. Even when trained using character-level syntax trees with flat word structures, our joint parser outperforms a strong pipelined baseline that consists of a state-of-the- NN-c NN-i NN-b \u79d1 (science) \u6280 (technology) V VV-b \u70e7 (burn) NN-r NN-i NN-b \u5e93 (repository) \u5b58 (saving) NN-l VV-i VV-b \u8003 (investigate) \u53e4 (ancient) NN-r NN-i NN-b \u8d25 (bad) \u7c7b (kind) A AD-b \u5f92 (vain) (a) subject-predicate. NN-c NN-i NN-b \u79d1 (science) \u6280 (technology) VV-l VV-b \u70e7 (burn) NN-r NN-i NN-b \u5e93 (repository) \u5b58 (saving) NN-l VV-i VV-b \u8003 (investigate) \u53e4 (ancient) NN-r NN-i NN-b \u8d25 (bad) \u7c7b (kind) AD-l AD-b \u5f92 (vain) (b) verb-object. NN-c NN-i NN-b \u79d1 (science) \u6280 (technology) VV-b \u70e7 (burn) NN-r NN-i NN-b \u5e93 (repository) \u5b58 (saving) NN-l VV-i VV-b \u8003 (investigate) \u53e4 (ancient) NN-r NN-i NN-b \u8d25 (bad) \u7c7b (kind) AD-b \u5f92 (vain) (c) coordination. NN-c NN-i NN-b \u79d1 (science) \u6280 (technology) VV-l VV-b \u70e7 (burn) NN-r NN-i NN-b \u5e93 (repository) \u5b58 (saving) NN-l VV-i VV-b \u8003 (investigate) \u53e4 (ancient) NN-r NN-i NN-b \u8d25 (bad) \u7c7b (kind) AD-l AD-b \u5f92 (vain) (d) modifier-noun. Figure 2 : Inner word structures of \"\u5e93\u5b58 (repertory)\",\"\u8003\u53e4 (archaeology)\", \"\u79d1\u6280 (science and technology)\" and \"\u8d25\u7c7b (degenerate)\". art joint segmenter and POS tagger, and our baseline word-based parser. Our word annotations lead to further improvements to the joint system, especially for phrase-structure parsing accuracy. Our parser work falls in line with recent work of joint segmentation, POS tagging and parsing (Hatori et al., 2012; Li and Zhou, 2012; Qian and Liu, 2012) . Compared with related work, our model gives the best published results for joint segmentation and POS tagging, as well as joint phrase-structure parsing on standard CTB5 evaluations. With linear-time complexity, our parser is highly efficient, processing over 30 sentences per second with a beam size of 16. An open release of the parser is freely available at http://sourceforge.net/projects/zpar/, version 0.6. Word Structures and Syntax Trees The Chinese language is a character-based language. Unlike alphabetical languages, Chinese characters convey meanings, and the meaning of most Chinese words takes roots in their character. For example, the word \"\u8ba1\u7b97\u673a (computer)\" is composed of the characters \"\u8ba1 (count)\", \"\u7b97 (calculate)\" and \"\u673a (machine)\". An informal name of \"computer\" is \"\u7535\u8111\", which is composed of \"\u7535 (electronic)\" and \"\u8111 (brain)\". Chinese words have internal structures (Xue, 2001; Ma et al., 2012) . The way characters interact within words can be similar to the way words interact within phrases. Figure 2 shows the structures of the four words \"\u5e93\u5b58 (repertory)\", \" \u8003\u53e4 V-l VV-i \u5b8c (up) AD-l AD-i \u7136 (so) NN-r NN-i NN-b \u5367 (crouching) \u864e (tiger) NN-r NN-i NN-i \u85cf (hidden) \u9f99 (dragon) NN-c VV-i VV-b \u6a2a (fiercely) \u626b (sweep) VV-i VV-i \u5343 (thousands) \u519b (troops) NN-c NN-i NN-b \u6559 (teach) \u80b2 (education) NN-i \u754c (field) NN NN-f NN-f \u6559\u80b2 (education) \u754c (field) NN-c NN-i NN-b \u670b (friend) \u53cb (friend) NN-i \u4eec (plural) NN NN-f NN-f \u670b\u53cb (friend) \u4eec (plural) Figure 3 : Character-level word structure of \"\u5367\u864e \u85cf\u9f99 (crouching tiger hidden dragon)\". (archaeology)\", \"\u79d1\u6280 (science and technology)\" and \"\u8d25 \u7c7b (degenerate)\", which demonstrate four typical syntactic structures of two-character words, including subject-predicate, verb-object, coordination and modifier-noun structures. Multicharacter words can also have recursive syntactic structures. Figure 3 illustrates the structure of the word \"\u5367\u864e\u85cf\u9f99 (crouching tiger hidden dragon)\", which is composed of two subwords \"\u5367 \u864e (crouching tiger)\" and \"\u85cf\u9f99 (hidden dragon)\", both having a modifier-noun structure. The meaning of characters can be a useful source of information for computational processing of Chinese, and some recent work has started to exploit this information. Zhang and Clark (2010) found that the first character in a Chinese word is a useful indicator of the word's POS. They made use of this information to help joint word segmentation and POS tagging. Li (2011) studied the morphological structures of Chinese words, showing that 35% percent of the words in CTB5 can be treated as having morphemes. Figure 4 (a) illustrates the morphological structures of the words \" \u670b\u53cb\u4eec (friends)\" and \"\u6559\u80b2\u754c (educational world)\", in which the characters \"\u4eec (plural)\" and \"\u754c (field)\" can be treated as suffix morphemes. They studied the influence of such morphology to Chinese dependency parsing (Li and Zhou, 2012) . The aforementioned work explores the influence of particular types of characters to Chinese processing, yet not the full potentials of complete word structures. We take one step further in this line of work, annotating the full syntactic structures of 37,382 Chinese words in the form of Figure 2 and Figure 3 . Our annotation covers the entire vocabulary of CTB5. In addition to difference in coverage (100% vs 35%), our annotation is structurally more informative than that of Li (2011) , as illustrated in Figure 4(b) . Our annotations are binarized recursive word -l VV-i \u5b8c (up) D-l AD-i \u7136 (so) NN-r NN-i NN-b \u5367 (crouching) \u864e (tiger) NN-r NN-i NN-i \u85cf (hidden) \u9f99 (dragon) NN-c \u6a2a (fiercely) \u626b (sweep) \u5343 (thousands) \u519b (troops) NN-i NN-b \u6559 (teach) \u80b2 (education) \u754c (field) NN NN-f NN-f \u6559\u80b2 (education) \u754c (field) NN-i NN-b \u670b (friend) \u53cb (friend) \u4eec (plural) NN NN-f NN-f \u670b\u53cb (friend) \u4eec (plural) (a) morphological-level word structures, where \"f\" denotes a special mark for fine-grained words. structures. For each word or subword, we specify its POS and head direction. We use \"l\", \"r\" and \"c\" to indicate the \"left\", \"right\" and \"coordination\" head directions, respectively. The \"coordination\" direction is mostly used in coordination structures, while a very small number of transliteration words, such as \"\u5965\u5df4\u9a6c (Obama)\" and \"\u6d1b \u6749\u77f6 (Los Angeles)\", have flat structures, and we use \"coordination\" for their left binarization. For leaf characters, we follow previous work on word segmentation (Xue, 2003; Ng and Low, 2004) , and use \"b\" and \"i\" to indicate the beginning and nonbeginning characters of a word, respectively. VV-l VV-i VV-b \u70e7 (burn) \u5b8c (up) AD-l AD-i AD-b \u5f92 (vain) \u7136 (so) NN-r NN-i NN-b \u5367 (crouching) \u864e (tiger) NN-r NN-i NN-i \u85cf (hidden) \u9f99 (dragon) NN-c VV-r VV-i VV-b \u6a2a (fiercely) \u626b (sweep) VV-r VV-i VV-i \u5343 (thousands) \u519b (troops) VV-l NN-c NN-i NN-b \u6559 (teach) \u80b2 (education) NN-i \u754c (field) NN-r NN NN-f NN-f \u6559\u80b2 (education) \u754c (field) NN-c NN-i NN-b \u670b (friend) \u53cb (friend) NN-i \u4eec (plural) NN-l NN NN-f NN-f \u670b\u53cb (friend) \u4eec (plural) (b) character-level word structures. The vast majority of words do not have structural ambiguities. However, the structures of some words may vary according to different POS. For example, \"\u5236 \u670d\" means \"dominate\" when it is tagged as a verb, of which the head is the left character; the same word means \"uniform dress\" when tagged as a noun, of which the head is the right character. Thus the input of the word structure annotation is a word together with its POS. The annotation work was conducted by three persons, with one person annotating the entire corpus, and the other two checking the annotations. Using our annotations, we can extend CTBstyle syntax trees (Figure 1(a) ) into characterlevel trees (Figure 1(b) ). In particular, we mark the original nodes that represent POS tags in CTBstyle trees with \"-t\", and insert our word structures as unary subnodes of the \"-t\" nodes. For the rest of the paper, we refer to the \"-t\" nodes as full-word nodes, all nodes above full-word nodes as phrase nodes, and all nodes below full-word nodes as subword nodes. Our character-level trees contain additional syntactic information, which are potentially useful to Chinese processing. For example, the head characters of words can be populated up to phraselevel nodes, and serve as an additional source of information that is less sparse than head words. In this paper, we build a parser that yields characterlevel trees from raw character sequences. In addition, we use this parser to study the effects of our annotations to character-based statistical Chinese parsing, showing that they are useful in improving parsing accuracies. Character-based Chinese Parsing To produce character-level trees for Chinese NLP tasks, we develop a character-based parsing model, which can jointly perform word segmentation, POS tagging and phrase-structure parsing. To our knowledge, this is the first work to develop a transition-based system that jointly performs the above three tasks. Trained using annotated word structures, our parser also analyzes the internal structures of Chinese words. Our character-based Chinese parsing model is based on the work of Zhang and Clark (2009) , which is a transition-based model for lexicalized constituent parsing. They use a beam-search decoder so that the transition action sequence can be globally optimized. The averaged perceptron with early-update (Collins and Roark, 2004 ) is used to train the model parameters. Their transition system contains four kinds of actions: (1) SHIFT, (2) REDUCE-UNARY, (3) REDUCE-BINARY and (4) TERMINATE. The system can provide binarzied CFG trees in Chomsky Norm Form, and they present a reversible conversion procedure to map arbitrary CFG trees into binarized trees. In this work, we remain consistent with their work, using the head-finding rules of Zhang and Clark (2008) , and the same binarization algorithm. 1 We apply the same beam-search algorithm for decoding, and employ the averaged perceptron with early-update to train our model. We make two extensions to their work to enable joint segmentation, POS tagging and phrasestructure parsing from the character level. First, we modify the actions of the transition system for  parsing the inner structures of words. Second, we extend the feature set for our parsing problem. The Transition System In a transition-based system, an input sentence is processed in a linear left-to-right pass, and the output is constructed by a state-transition process. We learn a model for scoring the transition A i from one state ST i to the next ST i+1 . As shown in Figure 5 , a state ST consists of a stack S and a queue Q, where S = (\u2022 \u2022 \u2022 , S 1 , S 0 ) contains partially constructed parse trees, and Q = (Q 0 , Q 1 , \u2022 \u2022 \u2022 , Q n\u2212j ) = (c j , c j+1 , \u2022 \u2022 \u2022 , c n ) is the sequence of input characters that have not been processed. The candidate transition action A at each step is defined as follows: \u2022 SHIFT-SEPARATE(t): remove the head character c j from Q, pushing a subword node S c j 2 onto S, assigning S .t = t. Note that the parse tree S 0 must correspond to a full-word or a phrase node, and the character c j is the first character of the next word. The argument t denotes the POS of S . \u2022 SHIFT-APPEND: remove the head character c j from Q, pushing a subword node S c j onto S. c j will eventually be combined with all the subword nodes on top of S to form a word, and thus we must have S .t = S 0 .t. \u2022 REDUCE-SUBWORD(d): pop the top two nodes S 0 and S 1 off S, pushing a new subword node S S 1 S 0 onto S. The argument d denotes the head direction of S , of which the value can be \"left\", \"right\" or \"coordination\". 3 Both S 0 and S 1 must be subword nodes and S .t = S 0 .t = S 1 .t. Category Feature templates When to Apply Structure S0ntl S0nwl S1ntl S1nwl S2ntl S2nwl S3ntl S3nwl, All features Q0c Q1c Q2c Q3c Q0c \u2022 Q1c Q1c \u2022 Q2c Q2c \u2022 Q3c, S 0l twl S0rtwl S0utwl S 1l twl S1rtwl S1utwl, S0nw \u2022 S1nw S0nw \u2022 S1nl S0nl \u2022 S1nw S0nl \u2022 S1nl, S0nw \u2022 Q0c S0nl \u2022 Q0c S1nw \u2022 Q0c S1nlQ0c, S0nl \u2022 S1nl \u2022 S2nl S0nw \u2022 S1nl \u2022 S2nl S0nl \u2022 S1nw \u2022 S2nl S0nl \u2022 S1nl \u2022 S2nw, S0nw \u2022 S1nl \u2022 Q0c S0nl \u2022 S1nw \u2022 Q0c S0nl \u2022 S1nl \u2022 Q0c, S0ncl S0nct S0nctl S1ncl S1nct S1nctl, S2ncl S2nct S2nctl S3ncl S3nct S3nctl, S0nc \u2022 S1nc S0ncl \u2022 S1nl S0nl \u2022 S1ncl S0ncl \u2022 S1ncl, S0nc \u2022 Q0c S0nl \u2022 Q0c S1nc \u2022 Q0c S1nl \u2022 Q0c, S0nc \u2022 S1nc \u2022 Q0c S0nc \u2022 S1nc \u2022 Q0c \u2022 Q1c start(S0w) \u2022 start(S1w) start(S0w) \u2022 end(S1w), REDUCE-SUBWORD indict(S1wS0w) \u2022 len(S1wS0w) indict(S1wS0w, S0t) \u2022 len(S1wS0w) String t\u22121 \u2022 t0 t\u22122 \u2022 t\u22121t0 w\u22121 \u2022 t0 c0 \u2022 t0 start(w\u22121) \u2022 t0 c\u22121 \u2022 c0 \u2022 t\u22121 \u2022 t0, SHIFT-SEPARATE features w\u22121 w\u22122 \u2022 w\u22121 w\u22121, where len(w\u22121) = 1 end(w\u22121) \u2022 c0, REDUCE-WORD start(w\u22121) \u2022 len(w\u22121) end(w\u22121) \u2022 len(w\u22121) start(w\u22121) \u2022 end(w\u22121), w\u22121 \u2022 c0 end(w\u22122) \u2022 w\u22121 start(w\u22121) \u2022 c0 end(w\u22122) \u2022 end(w\u22121), w\u22121 \u2022 len(w\u22122) w\u22122 \u2022 len(w\u22121) w\u22121 \u2022 t\u22121 w\u22121 \u2022 t\u22122 w\u22121 \u2022 t\u22121 \u2022 c0, w\u22121 \u2022 t\u22121 \u2022 end(w\u22122) c\u22122 \u2022 c\u22121 \u2022 c0 \u2022 t\u22121, where len(w\u22121) = 1 end(w\u22121) \u2022 t\u22121, c \u2022 t\u22121 \u2022 end(w\u22121), where c \u2208 w\u22121 and c = end(w\u22121) c0 \u2022 t\u22121 c\u22121 \u2022 c0 start(w\u22121) \u2022 c0t\u22121 c\u22121 \u2022 c0 \u2022 t\u22121 SHIFT-APPEND Table 1 : Feature templates for the character-level parser. The function start(\u2022), end(\u2022) and len(\u2022) denote the first character, the last character and the length of a word, respectively. \u2022 REDUCE-WORD: pop the top node S 0 off S, pushing a full-word node S S 0 onto S. This reduce action generates a full-word node from S 0 , which must be a subword node. \u2022 REDUCE-BINARY(d, l): pop the top two nodes S 0 and S 1 off S, pushing a binary phrase node S S 1 S 0 onto S. The argument l denotes the constituent label of S , and the argument d specifies the lexical head direction of S , which can be either \"left\" or \"right\". Both S 0 and S 1 must be a full-word node or a phrase node. \u2022 REDUCE-UNARY(l): pop the top node S 0 off S, pushing a unary phrase node S S 0 onto S. l denotes the constituent label of S . \u2022 TERMINATE: mark parsing complete. Compared to set of actions in our baseline transition-based phrase-structure parser, we have made three major changes. First, we split the original SHIFT action into SHIFT-SEPARATE(t) and SHIFT-APPEND, which jointly perform the word segmentation and POS tagging tasks. Second, we add an extra REDUCE-SUBWORD(d) operation, which is used for parsing the inner struc-tures of words. Third, we add REDUCE-WORD, which applies a unary rule to mark a completed subword node as a full-word node. The new node corresponds to a unary \"-t\" node in Figure 1(b) . Features Table 1 shows the feature templates of our model. The feature set consists of two categories: (1) structure features, which encode the structural information of subwords, full-words and phrases. (2) string features, which encode the information of neighboring characters and words. For the structure features, the symbols S 0 , S 1 , S 2 , S 3 represent the top four nodes on the stack; Q 0 , Q 1 , Q 2 , Q 3 denote the first four characters in the queue; S 0l , S 0r , S 0u represent the left, right child for a binary branching S 0 , and the single child for a unary branching S 0 , respectively; S 1l , S 1r , S 1u represent the left, right child for a binary branching S 1 , and the single child for a unary branching S 1 , respectively; n represents the type for a node; it is a binary value that indicates whether the node is a subword node; c, w, t and l represent the head character, word (or subword), POS tag and constituent label of a node, respectively. The structure features are mostly taken from the work of Zhang and Clark (2009) . The feature templates in bold are novel, are designed to encode head character information. In particular, the indict function denotes whether a word is in a tag dictionary, which is collected by extracting all multi-character subwords that occur more than five times in the training corpus. For string features, c 0 , c \u22121 and c \u22122 represent the current character and its previous two characters, respectively; w \u22121 and w \u22122 represent the previous two words to the current character, respectively; t 0 , t \u22121 and t \u22122 represent the POS tags of the current word and the previous two words, respectively. The string features are used for word segmentation and POS tagging, and are adapted from a state-of-the-art joint segmentation and tagging model (Zhang and Clark, 2010) . In summary, our character-based parser contains the word-based features of constituent parser presented in Zhang and Clark (2009) , the wordbased and shallow character-based features of joint word segmentation and POS tagging presented in Zhang and Clark (2010) , and additionally the deep character-based features that encode word structure information, which are the first presented by this paper. Experiments Setting We conduct our experiments on the CTB5 corpus, using the standard split of data, with sections 1-270,400-931 and 1001-1151 for training, sections 301-325 for system development, and sections 271-300 for testing. We apply the same preprocessing step as Harper and Huang (2011) , so that the non-terminal yield unary chains are collapsed to single unary rules. Since our model can jointly process word segmentation, POS tagging and phrase-structure parsing, we evaluate our model for the three tasks, respectively. For word segmentation and POS tagging, standard metrics of word precision, recall and F-score are used, where the tagging accuracy is the joint accuracy of word segmentation and POS tagging. For phrase-structure parsing, we use the standard parseval evaluation metrics on bracketing precision, recall and F-score. As our constituent trees are based on characters, we follow previous work and redefine the boundary of a constituent span by its start and end characters. In addition, we evaluate the performance of word  structures, using the word precision, recall and Fscore metrics. A word structure is correct only if the word and its internal structure are both correct. Development Results Figure 6 shows the accuracies of our model using different beam sizes with respect to the training epoch. The performance of our model increases as the beam size increases. The amount of increases becomes smaller as the size of the beam grows larger. Tested using gcc 4.7.2 and Fedora 17 on an Intel Core i5-3470 CPU (3.20GHz), the decoding speeds are 318.2, 98.0, 30.3 and 7.9 sentences per second with beam size 1, 4, 16 and 64, respectively. Based on this experiment, we set the beam size 64 for the rest of our experiments. The character-level parsing model has the advantage that deep character information can be extracted as features for parsing. For example, the head character of a word is exploited in our model. We conduct feature ablation experiments to evaluate the effectiveness of these features. We find that the parsing accuracy decreases about 0.6% when the head character related features (the bold feature templates in Table 1 ) are removed, which demonstrates the usefulness of these features. Final Results In this section, we present the final results of our model, and compare it to two baseline systems, a pipelined system and a joint system that is trained with automatically generated flat words structures. The baseline pipelined system consists of the joint segmentation and tagging model proposed by Zhang and Clark (2010), and the phrase-structure parsing model of Zhang and Clark (2009) . Both models give state-of-the-art performances, and are freely available. 4 The model for joint segmentation and POS tagging is trained with a 16beam, since it achieves the best performance. The phrase-structure parsing model is trained with a 64-beam. We train the parsing model using the automatically generated POS tags by 10-way jackknifing, which gives about 1.5% increases in parsing accuracy when tested on automatic segmented and POS tagged inputs. The joint system trained with flat word structures serves to test the effectiveness of our joint parsing system over the pipelined baseline, since flat word structures do not contain additional sources of information over the baseline. It is also used to test the usefulness of our annotation in improving parsing accuracy. Table 2 shows the final results of our model and the two baseline systems on the test data. We can see that both character-level joint models outperform the pipelined system; our model with annotated word structures gives an improvement of 0.97% in tagging accuracy and 2.17% in phrase-structure parsing accuracy. The results also demonstrate that the annotated word structures are highly effective for syntactic parsing, giving an absolute improvement of 0.82% in phrase-structure parsing accuracy over the joint model with flat word structures. Row \"WS\" in Table 2 shows the accuracy of hierarchical word-structure recovery of our joint system. This figure can be useful for high-level applications that make use of character-level trees by Comparison with Previous Work In this section, we compare our model to previous systems on the performance of joint word segmentation and POS tagging, and the performance of joint phrase-structure parsing. Table 3 shows the results. Kruengkrai+ '09 denotes the results of Kruengkrai et al. (2009) , which is a lattice-based joint word segmentation and POS tagging model; Sun '11 denotes a subword based stacking model for joint segmentation and POS tagging (Sun, 2011) , which uses a dictionary of idioms; Wang+ '11 denotes a semisupervised model proposed by Wang et al. (2011) , which additionally uses the Chinese Gigaword Corpus; Li '11 denotes a generative model that can perform word segmentation, POS tagging and phrase-structure parsing jointly (Li, 2011) ; Li+ '12 denotes a unified dependency parsing model that can perform joint word segmentation, POS tagging and dependency parsing (Li and Zhou, 2012) ; Li '11 and Li+ '12 exploited annotated morphological-level word structures for Chinese; Hatori+ '12 denotes an incremental joint model for word segmentation, POS tagging and dependency parsing (Hatori et al., 2012) ; they use external dictionary resources including HowNet Word List and page names from the Chinese Wikipedia; Qian+ '12 denotes a joint segmentation, POS tagging and parsing system using a unified framework for decoding, incorporating a word segmentation model, a POS tagging model and a phrasestructure parsing model together (Qian and Liu, 2012) ; their word segmentation model is a combination of character-based model and word-based model. Our model achieved the best performance on both joint segmentation and tagging as well as joint phrase-structure parsing. Our final performance on constituent parsing is by far the best that we are aware of for the Chinese data, and even better than some state-of-the-art models with gold segmentation. For example, the un-lexicalized PCFG model of Petrov Related Work Recent work on using the internal structure of words to help Chinese processing gives important motivations to our work. Zhao (2009) studied character-level dependencies for Chinese word segmentation by formalizing segmentsion task in a dependency parsing framework. Their results demonstrate that annotated word dependencies can be helpful for word segmentation. Li (2011) pointed out that the word's internal structure is very important for Chinese NLP. They annotated morphological-level word structures, and a unified generative model was proposed to parse the Chinese morphological and phrase-structures. Li and Zhou (2012) also exploited the morphologicallevel word structures for Chinese dependency parsing. They proposed a unified transition-based model to parse the morphological and dependency structures of a Chinese sentence in a unified framework. The morphological-level word struc-tures concern only prefixes and suffixes, which cover only 35% of entire words in CTB. According to their results, the final performances of their model on word segmentation and POS tagging are below the state-of-the-art joint segmentation and POS tagging models. Compared to their work, we consider the character-level word structures for Chinese parsing, presenting a unified framework for segmentation, POS tagging and phrasestructure parsing. We can achieve improved segmentation and tagging performance. Our character-level parsing model is inspired by the work of Zhang and Clark (2009) , which is a transition-based model with a beam-search decoder for word-based constituent parsing. Our work is based on the shift-reduce operations of their work, while we introduce additional operations for segmentation and POS tagging. By such an extension, our model can include all the features in their work, together with the features for segmentation and POS tagging. In addition, we propose novel features related to word structures and interactions between word segmentation, POS tagging and word-based constituent parsing. Luo (2003) was the first work to introduce the character-based syntax parsing. They use it as a joint framework to perform Chinese word segmentation, POS tagging and syntax parsing. They exploit a generative maximum entropy model for character-based constituent parsing, and find that POS information is very useful for Chinese word segmentation, but high-level syntactic information seems to have little effect on segmentation. Compared to their work, we use a transition-based discriminative model, which can benefit from large amounts of flexible features. In addition, instead of using flat structures, we manually annotate hierarchal tree structures of Chinese words for converting word-based constituent trees into character-based constituent trees. Hatori et al. (2012) proposed the first joint work for the word segmentation, POS tagging and dependency parsing. They used a single transitionbased model to perform the three tasks. Their work demonstrates that a joint model can improve the performance of the three tasks, particularly for POS tagging and dependency parsing. Qian and Liu (2012) proposed a joint decoder for word segmentation, POS tagging and word-based constituent parsing, although they trained models for the three tasks separately. They reported better performances when using a joint decoder. In our work, we employ a single character-based discriminative model to perform segmentation, POS tagging and phrase-structure parsing jointly, and study the influence of annotated word structures. Conclusions and Future Work We studied the internal structures of more than 37,382 Chinese words, analyzing their structures as the recursive combinations of characters. Using these word structures, we extended the CTB into character-level trees, and developed a characterbased parser that builds such trees from raw character sequences. Our character-based parser performs segmentation, POS tagging and parsing simultaneously, and significantly outperforms a pipelined baseline. We make both our annotations and our parser available online. In summary, our contributions include: \u2022 We annotated the internal structures of Chinese words, which are potentially useful to character-based studies of Chinese NLP. We extend CTB-style constituent trees into character-level trees using our annotations. \u2022 We developed a character-based parsing model that can produce our character-level constituent trees. Our parser jointly performs word segmentation, POS tagging and syntactic parsing. \u2022 We investigated the effectiveness of our joint parser over pipelined baseline, and the effectiveness of our annotated word structures in improving parsing accuracies. Future work includes investigations of our parser and annotations on Chinese NLP tasks. Acknowledgments This work was supported by National Natural Science Foundation of China (NSFC) via grant 61133012, the National \"863\" Major Projects via grant 2011AA01A207, the National \"863\" Leading Technology Research Project via grant 2012AA011102, and SRG ISTD 2012 038 from Singapore University of Technology and Design.",
    "abstract": "Characters play an important role in the Chinese language, yet computational processing of Chinese has been dominated by word-based approaches, with leaves in syntax trees being words. We investigate Chinese parsing from the character-level, extending the notion of phrase-structure trees by annotating internal structures of words. We demonstrate the importance of character-level information to Chinese processing by building a joint segmentation, part-of-speech (POS) tagging and phrase-structure parsing system that integrates character-structure features. Our joint system significantly outperforms a state-of-the-art word-based baseline on the standard CTB5 test, and gives the best published results for Chinese parsing.",
    "countries": [
        "China",
        "Singapore"
    ],
    "languages": [
        "Chinese"
    ],
    "numcitedby": "73",
    "year": "2013",
    "month": "August",
    "title": "{C}hinese Parsing Exploiting Characters"
}