{
    "framing_question": "If this paper introduces a task or benchmark, how does the paper propose that performance be measured, if at all?",
    "response": "I'm sorry, but the provided paper does not introduce a task or benchmark, so it does not propose any method for measuring performance. Therefore, I cannot answer your question.",
    "article": "In this paper we proceed with a systematic gathering of design requirements for wordnet browsers that permit to consult the content of wordnets. This is undertaken together with a review of the functionalities of existing browsers. On the basis of this analysis, we present a new wordnet browser we developed that meets these requirements and thus complies with the most ample range of design features. This is an open source browser that is freely distributed and can be reused by anyone interested in doing research on or just using wordnets. We also introduce the notion of a pluricentric global wordnet, for whose undertaking this new advanced browser appears as an important instrument and motivation. This is a promising operative conception for a bootstrapped yet effective process towards the ultimate global wordnet, where all individual wordnets from all languages are meant to eventually converge together, in spite of the plurality of their formats, licenses, depth, etc. that is intrinsic to an inherently plural endeavor undertaken by multiple actors under multiple constraints across the world. Introduction This paper reports on the results of the work initially motivated by the aim of making available an online service that would permit to consult and browse a wordnet we have been developing. Our work started by looking for and trying to reuse some pre-existing browser that could be adopted with as little adaptation effort as possible. As we proceeded, we found ourselves pondering on the needs and design requirements that such an application should satisfy and the work eventually took the unanticipated route that would lead to the building of a new browser from scratch. This had yet further unanticipated consequences, beyond the instrumental goal that triggered this implementation of a new wordnet browser. The analysis of the requirements on how wordnets should better be presented set us on the path to ponder on how this could serve a wider purpose of an as much inclusive support as possible for wordnets and for their flexible integration with each other. That is what we are trying to capture with the notion of a pluricentric global wordnet. In the next Section 2., we present the list of design requirements that guided the development of the browser eventually implemented, which we collected after the analysis of existing browsers, briefly described in Section 3.. In Sections 4. and 5., the first version of the browser is presented in its functional and technical aspects, respectively. A second version is described in Section 6., which motivates the notion of a pluricentric global wordnet, whose browsing it can support. Sections 7. and 8. close the paper, respectively, with indication of the resources being distributed, and with some concluding remarks and notes on future work. Browser requirements In our initial quest for finding a reusable wordnet browser, we end up coming across a number of browsers (addressed in the next section) that had some features that others were lacking and vice-versa. As a result of this exercise, we eventually drew a list of all those should-have requirements, which was further extended with possible other features that a general purpose browser should have. It is that list of requirements that we present now: + Detached from any editor In order to maximize its re-usability, the browser should be detached from any particular wordnet editor so that it allows to peruse wordnets built with the help any editing application or approach. + Detached from any online service Likewise, the browser should be detachable from any particular online service or website, so that it can be reused locally or to support other online sites or services. + Detached from any wordnet The browser should allow to be associated with any wordnet, modulo possible format adaptation or conversion needed, to allow for its perusal. + Compatible with any license The licensing terms of the browser should make its usage compatible with wordnets distributed under any license, and permit it to be distributed together with the wordnets if convenient. + Peruses one or several wordnets The browser can be used to permit the consultation of one wordnet in isolation, or the perusal of several wordnets accessible to the user in the same working space and connected to each other. + Displays translations into selected languages In case several wordnets are accessible for browsing, it should be possible to select the subset of the ones from which results should be displayed that are the translations of the lemma searched. + Performs multilingual search Also when several wordnets are available for browsing in the same working space, it should be possible to perform multilingual searches, that is search by entering a lemma in any of those languages without the need of any previous selection of the intended language. + Peruses wordnets aligned with any pivot language It should allow to peruse any set of wordnets that happen to be aligned pairwise or with the help of any pivot languages, and not only those aligned with English. + Adheres to a de facto standard format To maximize its re-usability, the browser is compliant with a de facto standard wordnet format, and should be equipped with as many converters to that format as possible. + Searches by input lemma The browser should allow to have access to a given concept/synset by retrieving it on the basis of a search triggered by one of its lemmas. + Displays lemmas targeted by selected relations It should be possible to have lemmas displayed that are the target of relations outgoing from a source lemma, and have the possibility to select the relations of interest for that to happen. + Displays lemmas transitively targeted The lemmas transitively targeted by outgoing relations should also be possible to be displayed. + Displays definitions, examples, etc Besides lemmas, displaying definitions and examples should be possible. + Multilingual user interface The browser should ensure a multilingual interface where the menu and instruction can be displayed in different languages, with the inclusion of further languages being possible. + Web-based platform independent In order to be accessible by the largest possible type or number of potential users (irrespective of the operative systems or platforms they may be using), in the largest number of possible locations, the wordnet browser should be web-based and independent of the web-browsing application at use. + Code open to reuse and extension The browser should be cost-free and openly reusable, distributed with a permissive license. Reusable browsers There is a variety of applications and browsers for wordnets, most of which work as a dictionary providing the user with the \"synonyms\" (e.g WordVis (Vercruysse, 2012) ) or in some cases \"synonyms\" as well as \"antonyms\" (e.g. Synonym-net (Network, 2017) ) of the searched word. Bearing in mind that a wordnet includes many informative relations, and not only synonymy and antonymy, we focused on applications and browsers with a more extensive data coverage. Among the wordnet browsers, most are to be used online while the rest can be downloaded to be installed and run locally. Some are originally designed for the special wordnet under development in the respective research team while the others are more general and compatible with other wordnets. In what follows, a brief overview of major wordnet browsers is presented. \u2022 DEBVisDic (Hor\u00e1k et al., 2006) is one of the most common tools for developing and browsing wordnets. It is widely used since it is not developed for a particular wordnet. The user interface is in English and there is a converter available to change the data in Princeton format into the XML format accepted by DEBVisDic. It allows to search in multiple wordnets. A major limitation of this system is that it does not support further installations given all the data must be uploaded and saved in its supporting server. \u2022 WordNetLoom (Piasecki et al., 2013) , designed and developed as part of the Polish WordNet project (Derwojedowa et al., 2008) , is a tool for editing and browsing wordnets. It offers a variety of useful features specially for editing a wordnet. As a browser, it has a dynamic graphical view of the search results which supports connections among various wordnets. It provides the user with several search options from the lemma to POS and relation types. It is accessible both online and offline. However, this browser is compatible with the database created by the polish editor, which makes it not independent from this editor. It must be mentioned the current online version only includes English and Polish WordNet. \u2022 SloWTool (Fi\u0161er and Novak, 2011) is also a well known tool for browsing, editing and visualizing wordnets. It is independent of any particular web browser and can be used online or in a local installation. Although it provides the user with several interesting search options, it does not support the mapping among wordnets of different languages. \u2022 English Princeton Browser, as a part of the English Princeton wordnet (Fellbaum, 1998) , is publicly available to be reused. It is designed to browse through synsets and senses in any wordnet compatible with the Princeton format. However, like the previous example, it does not support connections among wordnets of different languages. \u2022 Visuwords (Critchfield, 2017 ) is an online graphical wordnet browser that employs colors and shapes to distinguish between synsets in various parts of speeches and types of semantic relations. Although very user friendly, this browser does not support multilingual wordnet browsing either. \u2022 Open Multilingual Wordnet (Bond and Foster, 2013) connects a large number of wordnets from different languages while using the English Princeton wordnet as the pivot one. The wordnets it resorts to have permissive licences for derivatives and redistribution and searching through the browser shows results in all their languages. However the source code of the browser itself is not available to be reused, and it is a browser that in any case offers no options to peruse wordnets on the basis of, direct or transitive, semantic relations. \u2022 Multi-WordNet (Pianta et al., 2002) is a well-known project aiming at aligning wordnets of different languages. Currently, it covers seven different languages -English, Hebrew, Italian, Latin, Portuguese, Romanian and Spanish. Its browser is accessible online and provides the users with the possibility of navigating through the wordnet graph in addition to showing the aligned data in all included wordnets. As in the previous case, this browser is also among the non-reusable ones in different installation given its source code is not distributed. \u2022 Wnbroswer is the browser for the Romanian wordnet (Tufis \u00b8et al., 2008) . This system receives data in the Princeton format and is freely available to be reused. It contains several useful options for search and presents a graphical representation of the search result. Even though it has many good features, the static search result makes it impossible to navigate through the wordnet graph. Two other limitations, considering the items listed in 2., are the need to run it in a local installation and the lack of connections among wordnets of different languages. \u2022 GermaNet-Explorer (Finthammer et al., 2008) Browser: Functional matters While aiming at responding to concrete needs and constraints from their specific contexts of development, the different publicly available browsers briefly reviewed in Section 3. contributed to the advancement of the state of the art in this respect by introducing novel functionalities. To a very large extent, the set of requirements in Section 2. results from gathering all such nice design features from previous browsers. As it turns out from the analysis in Section 3., every existing browser happens not to meet one or other of the requirements lined up in Section 2.. This provided the motivation for our development of a new browser that seeks to meet all these requirements, to whose presentation we turn now. The user interface is rendered in a web page that is depicted in Figure 1 . There is a second page listing the wordnets that may be at use in a given installation of the browser and respective references, which can be accessed by pressing the button on the right of the search button. An installation of this browser 1 can be experimented with here: http://194.117.45.198:9001. At the start, the user has two fields he can fill in. In one of these fields, he can type the lemma to search for, and press the button to enter that query. Right below that field, in the second field the user can select, or deselect, the languages to which the retrieved lemma should be translated and whose translations should be displayed with the outcome of the search. Multiple languages are supported at the same time. When entering a lemma to be searched for, if that lemma is included in the wordnet being browsed, all concepts/synsets that include that word are displayed, one per line. The search can be continued from these results that are shown. Each of the synsets is prefixed by the string 'rels', standing for 'related concepts', which if pressed, permits to toggle a menu containing links to all types of the semantic relations available for that synset. That menu also includes a link for a translation of that synset to be displayed, if such translation exists. 1 While many more wordnets are being prepared to be included, at the moment of submitting this paper, the current installation of this browser makes use of the following ones: Finn Wordnet (Lind\u00e9n and Carlson, 2010) , Arabic Wordnet (Elkateb et al., 2006) , Portuguese Wordnet (Branco et al., 2009) , Catalan, Basque, Galician and Spanish Wordnet (Gonzalez-Agirre et al., 2012), Chinese Wordnet (Wang and Bond, 2013) , Danish Wordnet (Pedersen et al., 2009) , Farsi Wordnet (Montazery and Faili, 2010) , Hebrew Wordnet (Ordan and Wintner, 2007) , Indonesian and Malaysian Wordnet (Noor et al., 2011) , Japanese Wordnet (Isahara and Kanzaki, 2008) , Nynorsk and Bokm\u00e5l Wordnet (Fjeld and Nygaard, 2009) , Polish Wordnet (Piasecki et al., 2009) , Slovene Wordnet (Fi\u0161er et al., 2012) , Swedish Wordnet (Borin et al., 2013) , Thai Wordnet (Thoongsup et al., 2009) . By clicking on a given type of semantic relation, the synsets that are the target of that relation are displayed (or hidden) below the respective source synset. Indentation is used to represent the successive directed arcs on the semantic graph. By clicking on the translation link, in turn, translations are showed (or hidden) on the right side of the page, with each translation in a separate box, and with boxes stacking as a column if multiple languages are selected. The language name is included in the header of each box, with a Wikipedia link to know more about it. The current pilot installation of the wordnet browser used for testing and debugging (depicted in Figure 1 ) resorts to the Princeton wordnet for the semantic network that is to be searched for. And for the translation functionality, it resorts to several wordnets of other languages, whose list can be found by opening a menu through the button to the left of the search button. This pilot installation is online only for demo purposes. The head picture with \"MY WORDNET\" is just a placeholder where the logo of the wordnet being offered to be browsed can be inserted, together with the link to the web page of that wordnet. The code of the browser can be downloaded from here: https://github.com/nlx-group/LX-WordNetBrowser. It is being distributed under as open source as an MIT License. The development of an installation of the browser based on a particular wordnet is quite straightforward. With respect to the wordnet to be browsed, it only needs that the files of the Princeton Wordnet used in the pilot installation above be replaced by the respective files of that wordnet of interest. Similar procedure is needed with respect to the files for the translations desired. Concerning the language of the user interface, all that is required is that the few English words of the menu be linked (by straightforwardly editing the code) to their translation equivalents in the language chosen for the user interface, if such translation is not already existent in the current set of user interface supported languages. We will return to the issues of the support for multilinguality and of the multilingual interface below in Section 6.. Browser: Technical matters The browser runs on a client-server architecture based on Apache and Django framework, and is implemented by resorting to Python, JavaScript and some complementary libraries, viz. jQuery, Select2 and Bootstrap. Looking from the side of the web page that acts as the user interface, the interactions with the server are handled using JavaScript and its libraries. As the information is received from the user session, the DOM (Document Object Model) is processed, which in turns changes the HTML displayed on the screen. Together with Django, Apache HTTP web server is used to exchange the files (javascript, html, css and assets) with the client as it takes care of the in-and out-going traffic. While Apache is acting as the web server, the information retrieval is done with the help of Python. The request is analyzed through Django's request API and the appropri-ate Python script is run, whose outcome is sent over to the client for the JavaScript code to handle and display. Concerning wordnet data, two formats are used. One of them is the Princeton wordnet format. 2 This is the format needed to support the search of the information regarding the semantic relations between the words that are relevant to the lemma entered in the query. The other format concerns the mapping of a lemma in some language to their counterpart synset in English, and is used for finding the translations of the input lemma. In this format, there is one lemma per line, which is tab-separated from its translational equivalent. 3  In our current implementation, the tab files resort to English as the pivot language. This does not hamper to opt for other languages to function as a pivot language by simply replacing the tab-separated files with the ones suited for that purpose. In order to minimize the time spent accessing the data, the result of each previous search has its offsets cached. If the user wishes to explore a given synset that was retrieved, its cached offset helps to perform a direct lookup. These caches are kept in the lines of the list with the search results: Each line of the list contains a lemma, and has its 'Class' set as the offset of the respective wordnet. The wordnet data is kept in memory in native Python data structures, such as dictionaries, to speed up retrieval of information in each request. The data is kept separate from the browser service by running in parallel through a local and private XML-RPC server. The queries are submitted to this server, and their outcome are used to proceed with the handling of client requests. To fully support multilinguality, the possibility of integrating as many languages as needed is vital. The queries, the data processed and the information displayed to the user must be able to encode any character featured in the alphabets of the languages currently supported by the pilot installation of the browser and any future ones. This is achieved by having all the processes encoded in UTF-8, allowing to encode Latin alphabets and other more logo-graphic alphabets and scripts. Due to a simpler code base that the first installation features, it is a good choice for development and usage with a single language system, compared to the extended code base in the second installation, that supports multilinguality. Towards a pluricentric global wordnet By allowing to look also for the translations of the lemma searched for in the wordnet of interest, the browser presented in Section 4. permits the perusing of any wordnet, on which it is based, in a multilingual setting. However, this still offers a quite limited compliance with a truly multilingual browser. 2 This format is described in http://wordnet.princeton.edu/man/wndb.5WN.html 3 This format is described in http://compling.hss.ntu.edu.sg/omw/. The files in this format used in the pilot installation of the browser were obtained from http://compling.hss.ntu.edu.sg/omw/summx.html. This motivated another browser that, in addition to all design features of the one previously presented, has an enhanced multilingual design. Its interface page is depicted in Figure 2 . An installation of this browser can be experimented with here: http: //194.117.45.198:9002. First, it accepts that the lemma entered to be searched is from any language, and ensures that the language of that query is automatically identified and the respective synset(s) is retrieved from the respective wordnet. Second, this other version of the browser also allows for the customization on the fly of the user interface. Above the logo at the top of the page, there is a menu that permits to chose the language in which the interface should be displayed. 4  Third, it should also be noted that by its very own design, this browser (as well as the previous one) further supports multilinguality by permitting to peruse sets of wordnets from different languages that happen to be assembled and linked with each other around a pivot language other than English. Importantly, it permits the perusal of wordnets that are not linked to the Princeton wordnet 5 or to any other wordnet in other language. And it permits to search and display synsets that are not linked to synsets in the Princeton wordnet (even if other synsets of the same wordnet are). This is the kind of browser that is closer than any other before to be fit and useful to peruse the ultimate Global Wordnet -eventually encompassing all wordnets of all languages -one day when it comes into existence. While that day has not arrived, this browser is a most useful instrument to peruse ensembles of wordnets whose different composition respond to diverse interests, needs, constraints or limitations. For instance, there may be the interest of gathering just the set of wordnets of the languages belonging to the same language family; or the wordnets built around a given pivot language, etc. And there certainly exists the need to allow the browsing, in a multilingual setting, of a given wordnet with some licensing restrictions concerning its distribution. In a counterfactual setting that imposes that all wordnets must be redistributed under the same license to be displayed online all together, that would not be feasible. While the conditions are being prepared but not yet fulfilled to eventually there being a Global Wordnet with all world wordnets connected among themselves, the present browser is an important instrument for there being multiple installations and sites of multilingual wordnets of multiple sizes and compositions, in what we would designate as an interim pluricentric global wordnet. Importantly, this browser is also a novel instrument to help to browse and support any new multilingual wordnet that will be set up as an alternative to an eventual multilingual wordnet whose authors, based on their authorship of that derivative work, may have it accessible for perusal behind a non detachable browser that cannot receive further independent installations by other research teams -or may decide to lock that derivative work in some restrictive license; or even not to distribute it at all (even though the individual wordnets they are based on have permissive licenses, and may be not even conspicuously cited). 6  Pluricentric global wordnet appears thus as a promising operative conception for a bootstrapped yet effective process towards an ultimate global wordnet, where all wordnets from all languages are meant to eventually converge together. It allows to progress in this direction in spite of the plurality of formats, licenses, maturity, volume, coverage, depth, etc. of individual wordnets, thus supporting an effective way to cope with the lack of their harmonization -in the present days and in the foreseeable future -that it is intrinsic to an inherently plural endeavor undertaken by multiple actors in multiple circumstances under multiple motivations and constraints across the world. Pluricentric global wordnet allows also to circumvent the illusory appeal of a monolithic derivative endeavor that gathers as much wordnets as possible under some harmonized ensemble that ends up however trapped behind the wall of some non permissive license or even of non allowed redistribution. Resources Distributed The software whose development is reported in the present paper is distributed at https://github.com/nlx-group/LX-WordNetBrowser under an MIT license. This application is termed as LX-WordNetBrowser and users of this resource should refer it by citing the present paper. Conclusions and Future Work This paper presented a new wordnet browser that satisfies the ample design requirements that were systematically gathered after an analysis of the publicly available wordnet browsers. This is an open source browser that is freely distributed and can be reused by anyone interested in doing research on or using wordnets. In one of its versions, this software is distributed under an open source license to support the installations of independent web based browsers for any wordnet. In another version, distributed under identical license, this software supports fully-fledged multilingual installations of wordnet browsers, and it is thus contributing to the advancement of a pluricentric global wordnet. The distribution under an open source license meets the requirement Code open to reuse and extension. Both versions, successfully follow the requirements set forth in Section 2., as described in Section 4. and 5.. As of now, it can be applied to the multiple existing wordnets in the Princeton wordnet format, the de facto standard format it is based on. By using this format, and given the many tools that exist to convert from other formats into it, it is possible to detach the browser from the wordnet editors. Its full potential will be deployed when there will be more converters from any wordnet format to that format, than those that already exist today. Important future work will thus consist in developing more converters of this sort, further detaching the browser from any wordnet. In a more ambitious and long term perspective, it would be interesting to connect different installations of this browser through web services such that the content of every wordnet available to be searched in some of its installations would be available to be searched from any other installation thus connected. This will help to move from the browsing of an interim pluricentric global wordnet to the browsing of a fully global wordnet. A pluricentric global wordnet appears as an operative conception for a bootstrapped yet effective process towards the ultimate global wordnet, where all individual wordnets from all languages are meant to eventually converge together, despite their plurality that is inherent to a multifarious endeavor undertaken by multiple actors under multiple constraints across the world. Acknowledgment The present research was partly supported by the Infrastructure for the Science and Technology of the Portuguese Language (CLARIN L\u00edngua Portuguesa), and by the ANI/3279/2016 grant. Annex Figure 1 : \"My Wordnet\" installation of the wordnet browser: example with Princeton Wordnet as the wordnet to be browsed. Figure 2 : \"Pluricentric\" installation of the wordnet browser: example with Portuguese selected to be browsed, and with English for the user interface.",
    "funding": {
        "military": 0.0,
        "corporate": 0.0,
        "research agency": 0.5078065352815831,
        "foundation": 0.020332340703871465,
        "none": 0.000179567995737151
    }
}