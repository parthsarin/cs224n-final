{
    "article": "This paper describes the conversion of a Hidden Markov Model into a finite state transducer that closely approximates the behavior of the stochastic model. In some cases the transducer is equivalent to the HMM. This conversion is especially advantageous for partof-speech tagging because the resulting transducer can be composed with other transducers that encode correction rules for the most frequent tagging errors. The speed of tagging is also improved. The described methods have been implemented and successfully tested. Kempe 29 Look-Back and Look-Ahead in the Conversion of HMMs Andr~ Kempe (1998) Look-Back and Look-Ahead in the Conversion of Hidden Markov Models into Finite State Transducers. In D.M.W. Powers (ed. Introduction This paper presents an algorithm 1 which approximates a Hidden Markov Model (HMM) by a finitestate transducer (FST). We describe one application, namely part-of-speech tagging. Other potential applications may be found in areas where both HMMs and finite-state technology are applied, such as speech recognition, etc. The algorithm has been fully implemented. An HMM used for tagging encodes, like a transducer, a relation between two languages. One language contains sequences of ambiguity classes obtained by looking up in a lexicon all words of a sentence. The other language contains sequences of tags obtained by statistically disambiguating the class sequences. From the outside, an HMM tagger behaves like a sequential transducer that deterministically maps every class sequence to a tag sequence, e.g.: aThere are other (dillerent) algorithms for HMM to FST conversion: An unpublished one by Julian M. Kupiec and John T. Maxwell (p.c.) , and n-type and stype approximation by Kempe (1997) . The main advantage of transforming an HMM is that the resulting transducer can be handled by finite state calculus. Among others, it can be composed with transducers that encode: \u2022 correction rules for the most frequent tagging errors which are automatically generated (Brill, 1992; Roche and Schabes, 1995) or manually written (Chanod and Tapanainen, 1995) , in order to significantly improve tagging accuracy -9 . These rules may include long-distance dependencies not handled by ttMM taggers, and can conveniently be expressed by the replace operator (Kaplan and Kay, 1994; Karttunen, 1995; Kempe and Karttunen, 1996) . \u2022 further steps of text analysis, e.g. light parsing or extraction of noun phrases or other phrases (Ait-Mokhtar and Chanod, 1997) . These compositions enable complex text analysis to be performed by a single transducer. The speed of tagging by an FST is up to six times higher than with the original HMM. The motivation for deriving the FST from an HMM is that the tIMM can be trained and converted with little manual effort. An HMM transducer builds on the data (probability matrices) of the underlying HMM. The accuracy of this data has an impact on the tagging accuracy of both the HMM itself and the derived transducer. The training of the HMM can be done on either a tagged or untagged corpus, and is not a topic of this paper since it is exhaustively described in the literature (Bahl and Mercer, 1976; Church, 1988) . An HMM can be identically represented by a weighted FST in a straightforward way. We are, however, interested in non-weighted transducers. 2Automatically derived rules require less work than manually written ones but are unlikely to yield better results because they would consider relatively limited context and simple relations only. b-Type Approximation This section presents a method that approximates a (first order) Hidden Markov Model (HMM) by a finite-state transducer (FST), called b-type approximation s. Regular expression operators used in this section are explained in the annex. Looking up, in a lexicon the word sequence of a sentence produces a unique sequence of ambiguity classes. Tagging the sentence by means of a (first order) ttMM consists of finding the most probable tag sequence T given this class sequence C (eq. 1, fig. 1 ). The joint probability of the sequences C and T can be estimated by: p(C, T) = p(ci .... c.,tz .... tn) = 11 , r(t,) b(c~ Its). ]-I a(t~ Iti-~) b(c~ Its) i=2 (2) 2.1 Basic Idea The determination of a tag of a particular word cannot be made separately from the other tags. Tags can influence each other over a long distance via transition probabilities. In this approach, an ambiguity class is disambiguated with respect to a context. A context consists of a sequence of ambiguity classes limited at both ends by some selected tag 4. For the left context of length/3 we use the term look-back, and for the right context of length a we use the term lookahead. Lt~.lJ'~ t~.z t 3 i-3 Figure 1 : Disambiguation of classes between two selected tags a look-ahead distance of a = 2. Actually, the two selected tags t~_ 2 and t~+ 2 allow not only the disambiguation of the class ci but of all classes inbetween, i.e. ci-t, ci and ci+l. We approximate the tagging of a whole sentence by tagging subsequences with selected tags at both ends (fig. 1 ), and then overlapping them. The most probable paths in the tag space of a sentence, i.e. valid paths according to this approach, can be found as sketched in figure 2 . w I w z w 3 w 4 w s w~ w 7 w~ words  A valid path consists of an ordered set of overlapping sequences .in which each member overlaps with its neighbour except for the first or last tag. There can be more than one valid path in the tag space of a sentence (fig. 2 ). Sets of sequences that do not overlap in such a way are incompatible according to this model, and do not constitute valid paths (fig. 3 ). # c i c 2 C 3 c 4 c 5 c In figure 1 , the tag t~ can be selected from the class ci because it is between two selected tags d which are t~_ 2 at a look-back distance of fl = 2 and t~2+2 at ZName given by the author, to distinguish the algorithm from n-type and s-type approximation (Kempe, 1997) . 4The algorithm is explained for a first order HMM. In the case of a second order HMM, b-type sequences must begin and end with two selected tags rather than one. b-Type Sequences Given a length ~ of look-back and a length a of lookahead, we generate for every class co, every lookback sequence t_~ c-a+1 ... c-z, and every lookahead sequence ci .. Each such original b-type sequence (eq. 3,4; fig. 4 ) is disambiguated based on a first order HMM. Here we use the Viterbi algorithm (Viterbi, 1967; Rabiner, 1990) for efficiency.  for boundary ~ ( 8 ) P, ta~ = 1 for ~3=0 (9) with prniddle being a-1 Prniaate = b(c-a+z It-z+1)\" H a(tilti_i) b(cilti) i=-Z+2 for a+#> 0 (10) PmiddZe = b(colto) for a+/~=0 (11) and with Pend being Pe,~a =a(ta[t.a-z) for selected tag ta (12) Pend = 1 for boundary # or a=0 (13) When the most likely tag sequence is found for an original b-type sequence, the class co in the middle position (eq. 3) is associated with its most likely tag to. We formulate constraints for the other tags t_ z and ta and classes c_z+1...c_ z and Cl...ca_ I of the original b-type sequence. Thus we obtain a tagged b-type sequence s. \" (14) -c_/~+l .-.C_ 2 C0:~0 C2-'\"~a-1 ta stating that to is the most probable tag in the class co if it is preceded by t B~ cS(Z-z)...cB2 c m and followed by c al cA:.. .c A(~-I) ta% In expression 14 the subscripts --/3 -B+I.. Boundaries are denoted by a particular symbol and can occur at the edge of the look-back and lookahead sequence: t B~ c s(t~-l) ...c B2 c B1 c:t c Ax c A1 ...c A(a-1) #An (16) t s# c ~(~-l) ...c ~ c B1 c:t c A1 c A1 ...#A(~--Z) (17) #Be C~(~-Z) ...CB2 cBZ c:t #AZ (18) #BZ c:t #AZ (19) #B2 cBl c:t c A' c ~I ...cA(\u00b0-I) t a~ (20) For example: ~-B2 [DET, PRONI-B1 [ADJ, NOUN, V~B]: ADJ ( 21 ) SRegular expression operators used in this article are explained in the annex. C0NJ---B2 [DET, PRON]-B1 [ADJ, NOON, VF23] : NOUN #-A~ (22) Note that look-back of length ,3 and look-ahead of length a also include all sequences shorter than 3 or ~, respectively, that are limited by #. For a given length 3 of look-back and a length a of look-ahead, we generate every possible original btype sequence (eq. 3), disambiguate it statistically (eq. 5-13), and encode the tagged b-type sequence Bi (eq. 14) as an FST. All sequences Bi are then unioned \u00b0B = U B; (23) { and we generate a preliminary tagger model B\" B\" = lOB ]. ( 24 ) where all sequences Bi can occur in any order and number (including zero times) because no constraints have yet been applied. Concatenation Constraints To ensure a correct concatenation of sequences Bi, we have to make sure that every Bi We create constraints for preceding and following tags, classes and sentence boundaries. For the lookback, a particular tag ti or class cj is required for a particular distance of 6 < -1, byS: R'(ti) ='[-[?* tl [\\ut]* ~t [\\ut].]'(-$-1}] t/B(-~) ?.] (25) R'(cj) ='['[% cj [\\%]* [% [\\%],]'(-$-I)] ci(-~) ?.] (26) for 6 < -1 with \u00b0t and \u00b0c being the union of all tags and all classes respectively. A sentence beginning, #, is required for a particular look-back distance of 6<-1, on the side of the tags, by: R'(#) =-[ \"[ [\\~t], [~t [\\~t],]'(-~-1)] #8(-~ ?,] (2r) for J < -1 In the case of look-ahead we require for a particular distance of 6 > 1, a particular tag ti or class cj or a sentence end, #, on the side of the tags, in a similar way by: All constraints are enforced by composition with the preliminary tagger model B\" (eq. 24). The class constraint Rc is composed on the upper side of B\" which is the side of the classes (eq. 14), and both the tag constraint Rt and the boundary constraint 6 R# are composed on the lower side of B', which is the side of the tagsS: n~(t,) =-[?, t, ~s -{ [\\\u00b0t], ~t [\\~t],]-(~-ll t~ ?,]] (2s B'\" = Rc .o. B\" .o. Rt .o. R# (34) Having ensured correct concatenation, we delete all symbols r that have served to constrain tags, classes or boundaries, using Dr: 6The boundary constraint R# could alternatively be computed for and composed on the side of the classes. The transducer which encodes R# would then, however, be bigger because the number of classes is bigger than the number of tags. Properties of b-Type Transducers There are two groups of b-type transducers with different properties: FSTs without look-back and/or without look-ahead (19-a = 0) and FSTs with both look-back and look-ahead (8\"a > 0). Both accept any sequence of ambiguity classes. b-Type FSTs with $.cr =0 are always sequential. They map a class sequence that corresponds to the word sequence of a sentence, always to exactly one tag sequence. Their tagging accuracy and similarity with the underlying HMM increases with growing fl + or. A b-type FST with $ = 0 and a = 0 is equivalent to an nO-type FST, and with $ = 1 and a = 0 it is equivalent to an nl-type FST (Kempe, 1997) . b-Type FSTs with $.a > 0 are in general not sequential. For a class sequence they deliver a set of different tag sequences, which means that the tagging results are ambiguous. This set is never empty, and the most probable tag sequence according to the underlying HMM is always in this set. The longer the look-back distance $ and the look-ahead distance a are, the larger the FST and the smaller the set of resulting tag sequences. For sufficiently large $+a, this set may contain always only one tag sequence. In this case the FST is equivalent to the underlying HMM. For reasons of size however, this FST may not be computable for particular HMMs (see. 4). 3 An Implemented Finite-State Tagger The implemented tagger requires three transducers which represent a lexicon, a guesser and an approximation of an HMM mentioned above. Both the lexicon and guesser are sequential, i.e. deterministic on the input side. They both unambiguously map a surface form of any word that they accept to the corresponding ambiguity class (fig. 5 , col. 1 and 2): First of all, the word is looked for in the rFor efficiency reasons, we actually do not delete the constraint symbols r by composition. We rather traverse the network, and overwrite every symbol r with the empty string symbol e. In the following determinization of the network, all ~ are eliminated. lexicon. If this fails, it is looked for in the guesser. If this equally fails, it gets the label [UNKNOWN] which denotes the ambiguity class of unknown words. Tag probabilities in this class are approximated by tags of words that appear only once in the training corpus. As soon as an input token gets labeled with the tag class of sentence end symbols (fig. 5: [SENT] ), the tagger stops reading words from the input. At this point, the tagger has read and stored the words of a whole sentence (fig. 5 , col. 1) and generated the corresponding sequence of classes (fig. 5 , col. 2). The class sequence is now mapped to a tag sequence (fig. 5 , col. 3) using the HMM transducer. A b-type FST is not sequential in general (sec. 2.4), so to obtain a unique tagging result, the finite-state tagger can be run in a special mode, where only the first, result found is retained, and the tagger does not look for other results s. Since paths through an FST have no particular order, the result retained is random. The tagger outputs the stored word and tag sequence of the sentence, and continues in the same way with the remaining sentences of the corpus. The tagger can be run in a statistical mode ,, here the number of tag sequences found per sentence is counted. These numbers give an overview of the degree of non-sequentiality of the concerned b-type transducer (sec. 2.4). 8This mode of retaining the first result only is not necessary with n-type and s-type transducers which are both sequential (Kempe, 1997) . Experiments and Results This section compares different FSTs with each other and with the original ttMM. As expected, the FSTs perform tagging faster than the HMM. Since all FSTs are approximations of HMMs, they show lower tagging accuracy than the ttMMs. In the case of FSTs with fl > 1 and a = 1, this difference in accuracy is negligible. Improvement in accuracy can be expected since these FSTs can be composed with FSTs encoding correction rules for frequent errors (sec. 1). For all tests below an English corpus, lexicon and guesser were used, which were originally annotated with 74 different tags. We automatically recoded the tags in order to reduce their number, i.e. in some cases more than one of the original tags were recoded into one and the same new tag. We applied different recodings, thus obtaining English corpora, lexicons and guessers with reduced tag sets of 45, 36, 27, 18 and 9 tags respectively. FSTs with fl= 2 and ~ = 1 and with fl= 1 and a = 2 were equivalent, in all cases where they could be computed. The b-type FST with no look-back and no lookahead which is equivalent to an n0-type FST (Kempe, 1997) , shows the lowest tagging accuracy (b-FST ()3=0, a=0): 87.21%). It is also the smallest transducer (1 state and 181 arcs, as many as tag classes) and can be created faster than the other FSTs (6 sec.). The highest accuracy is obtained with a b-type FST with fl= 2 and a = 1 (b-FST (/3=2,~=1): 97.34 %) and with an s-type FST (Kempe, 1997) trained on 1 000 000 words (s+nl-FST (1M, F1): 97.33 %). In these two cases the difference in accuracy with respect to the underlying ttMM (97.35 %) is negligible. In this particular test, the s-type FST comes out ahead because it is considerably smaller than the b-type FST. The size of a b-type FST increases with the size of the tag set and with the length of look-back plus look-ahead, ~+c~. Accuracy improves with growing b-Type FSTs may produce ambiguous tagging resuits (sec. 2.4)'. In such instances only the first result was retained (see. 3). \"95.78 \"96.78 \"96.59 \"95.36 \"98.11 \u00b099.58 \"99.72 *99.26 \"97.34 \u00b097.06 \"96.73 Table 2 shows the tagging accuracy and the agreement of the tagging results with the results of the underlying HMM for different FSTs and tag sets of different sizes. To get results that are almost equivalent to those of an HMM, a b-type FST needs at least a look-back of/5 = 2 and a look-ahead of a = 1 or vice versa. For reasons of size, this kind of FST could only be computed for tag sets with 36 tags or less. A b-type FST with/5 = 3 and a = 1 could only be computed for the tag set with 9 tags. This FST gave exactly the same tagging results as the underlying HMM. Table 3 illustrates which of the b-type FSTs are sequential, i.e. always produce exactly one tagging result, and which of the FSTs are non-sequential. For all tag sets, the FSTs with no look-back (/5 = 0) and/or no look-ahead (a = 0) behaved sequentially. Here 100 % of the tagged sentences had only one result. Most of the other FSTs (/5. o~ > 0) behaved non-sequentially. For example, in the case of 27 tags withl3=l anda=l, 90.08%of the tagged sentences had one result, 9.46 % had two results, 0.23 % had tree results, etc. Non-sequentiality decreases with growing lookback and look-ahead,/5+c~, and should completely disappear with sufficiently large/5+~. Such b-type FSTs can, however, only be computed for small tag sets. We could compute this kind of FST only for the case of 9 tags with/5=3 and a=l. The set of alternative tag sequences for a sentence, produced by a b-type FST with/5, a > 0, always contains the tag sequence that corresponds with the result of the underlying HMM.  The algorithm presented in this paper describes the construction of a finite-state transducer (FST) that approximates the behaviour of a Hidden Markov Model (HMM) in part-of-speech tagging. The algorithm, called b-type approximation, uses look-back and look-ahead of freely selectable length. The size of the FSTs grows with both the size of the tag set and the length of the look-back plus lookahead. Therefore, to keep the FST at a computable size, an increase in the length of the look-back or look-ahead, requires a reduction of the number of tags. In the case of small tag sets (e.g. 36 tags), the look-back and look-ahead can be sufficiently large to obtain an FST that is almost equivalent to the original HMM. In some tests s-type FSTs (Kempe, 1997 ) and b-type FSTs reached equal tagging accuracy. In these cases s-type FSTs are smaller because they encode the most frequent ambiguity class sequences of a training corpus very accurately and all other sequences less accurately, b-Type FSTs encode all sequences with the same accuracy. Therefore, a b-type FST can reach equivalence with the original HMM, but an s-type FST cannot. The algorithms of both conversion and tagging are fully implemented. The main advantage of transforming an HMM is that the resulting FST can be handled by finite state calculus ~ and thus be directly composed with other FSTs. The tagging speed of the FSTs is up to six times higher than the speed of the original HMM. Future research will include the composition of HMM transducers with, among others: \u2022 FSTs that encode correction rules for the most frequent tagging errors in order to significantly improve tagging accuracy (above the accuracy of the underlying HMM). These rules can either be extracted automatically from a corpus (Brill, 1992) or written manually (Chanod and Tapanalnen, 1995) . * FSTs for light parsing, phrase extraction and other text analysis (Ait-Mokhtar and Chanod, 1997 ). An HMM transducer can be composed with one or more of these FSTs in order to perform complex text analysis by a single FST. Any symbol in the known alphabet and its extensions ",
    "abstract": "This paper describes the conversion of a Hidden Markov Model into a finite state transducer that closely approximates the behavior of the stochastic model. In some cases the transducer is equivalent to the HMM. This conversion is especially advantageous for partof-speech tagging because the resulting transducer can be composed with other transducers that encode correction rules for the most frequent tagging errors. The speed of tagging is also improved. The described methods have been implemented and successfully tested. Kempe 29 Look-Back and Look-Ahead in the Conversion of HMMs Andr~ Kempe (1998) Look-Back and Look-Ahead in the Conversion of Hidden Markov Models into Finite State Transducers. In D.M.W. Powers (ed.",
    "countries": [
        "France"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "2",
    "year": "1998",
    "month": "",
    "title": "Look-Back and Look-Ahead in the Conversion of Hidden {M}arkov Models into Finite State Transducers"
}