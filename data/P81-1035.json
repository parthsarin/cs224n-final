{
    "article": "INTRODUCTION Over the last few years a number of application systems have been constructed that allow users to access databases by posing questions in natural languages, such as English. When used in the restricted domains for which they have been especially designed, these systems have achieved reasonably high levels of performance. Such systems as LADDER [2] , PLANES [10] , ROBOT [1] , and REL [9] require the encoding of knowledge about the domain of application in such constructs as database schemata, lexlcons, pragnmtic grammars, and the llke. The creation of these data structures typically requires considerable effort on the part of a computer professional who has had special training in computational linguistics and the use of databases. Thus, the utility of these systems is severely limited by the high cost involved in developing an interface to any particular database. This paper describes initial work on a methodology for creating natural-language processing capabilities for new domains without the need for intervention by specially trained experts. Our approach is to acquire logical schemata and lexical information through simple interactive dialogues with someone who is familiar with the form and content of the database, but unfamiliar with the technology of natural-language interfaces. To test our approach in an actual computer environment, we have developed a prototype system called TED (Transportable English Datamanager). As a result of our experience with TED. the NL group at SRI is now undertaking the develop=ant of a ~ch more ambitious system based on the sane philosophy [4] . II RESEARCH PROBLEMS Given the demonstrated feasibility of language-access systems, such as LADDER, major research issues to be dealt with in achieving transportable database interfaces include the following: * Information used by transportable systems must be cleanly divided into databaseindependent and database-dependent portions. * Knowledge representations must be established for the database-dependent part in such a way that their form is fixed and applicable to all databases and their content readily acquirable. * Mechanisms must be developed to enable the system to acquire information about a particular applicationfrom nonlinguists. III THE TED PROTOTYPE We have developed our prototype system (TED) to explore one possible approach to chase problems. In essence, TED is a LADDER-like natural-language processing system for accessing databases, combined with an \"automated interface expert\" that interviews users to learn the language and logical structure associated with a particular database and that automatically tailors the system for use with the particular application. TED allows users to create, populate, and edit ~heir own new local databases, to describe existing local databases, or even to describe and subsequently access heterogeneous (as in [5] ) distributed databases. Most of TED is based on and built from components of LADDER. In particular, TED uses the LIFER parser and its associated support packages [3], the SODA data access planner [5] , and the FAM file access manager [6] . All of these support packages are independent of the particular database used. In LADDER, the data structures used by these components ~re hand-generated for s particular database by computer scientists. In TED, however, they are created by TED's automated interface expert. Like LADDER, TED uses a pragmatic granmar; but TED's pragmatic gramemr does not make any asstmptlons about the particular database being accessed. It assumes only that interactions with the system will concern data access or update, and that information regarding the particular database will be encoded in data structures of a prescribed form, which are created by the automated interface expert. The executive level of TED accepts three kinds of input: questions stated in English about the data in files that have been previously described to the system; questions posed in the SODA query language; single-~ord commands that ~nltlaCe dialogues with the automated interface expert. The heading name of a symbolic column tends to he the generic name for the class of objects referred to by the values of that column. zv Heading names for Boolean columns tend co be the names of properties that database objects can possess. T.f a column contains numbers, thls suggests that there may be some scale wlth associated adjectives of degree. To allow the system to answer questions requiring the integration of information from multiple files, the user is also asked about the interconnections between the file currently being defined and other files described previously. C. Examples from a Transcript In the sample transcript at the end of this paper, the user initiates a NEW dialogue at Point A. The automated interface expert then takes the initiative in the conversation, asking first for the name of the new file, then for the names of the file's fields. The file name wlll be used to dlstlngulsh the new file from others during the acquisition process. The field names are entered into the lexicon as the names of attributes and are put on an agenda so that further questions about the fields may be asked subsequently of the user. At this point, TED still does not know what type of objects the data in the new file concern. Thus, as its next task, TED asks for words that might be used as generic names for the subjects of the file. These pragmatic Era-mar rules are very much like the ones used in LADDER [2], but they differ from those of LADDER in two critical ways. (1) They capture the pragmatics of accessing databases without forcibly \u00a3ncludin8 information about the praSmatics of any one particular set of data. (2) They use s~tsct4~/semantic categories that support the processes of accessln8 databases, but that are domsinindependent and easily acquirable. It is worth noting that, even when a psrClcular application requires the introduction of Specialpurpose rules, the basic pragmatlc grmamar used by TED provides a starting point from whlch domainspecific features can be added. VI DIRECTIONS FOR FURTHER WORK The TED system represents a first step toward truly portable natural-language interfaces to database systems. TED is only a prototype, however, and --,ch additional work will be required to provide adequate syntactic and conceptual coverage, as well as to increase the ease with which systems may be adapted to new databases. A severe limitation of the current TED system is its restricted range of syntactic coverage. For example, TED deals only with the verbs BE and HAVE, and does not know about units (e.g., the Waddel's age is 15.5, not 15.5 YEARS). To remove this limitation, the SRI NL group is currently adapting Jane Robinson's extensive DIAGRAM grammar {7] for use in a successor Co TED. In preparation for the latter, we are experimenting with verb acquisition dialogues such as the following: > VERB 5. The greatest challenge to extending systems like TED is to increase their conceptual coverage. As pointed out by Tennant [8] , umers who are accorded natural-language access co a database 6. expect not only to retrieve information directly stored there, but also co compute \"reasonable\" derivative information. For example, if a database has the location of two ships, users will expect the system to be able to provide the distance between them--an item of information not directly 7. recorded in the database, but easily computed from the existing data. In general, any system that is tO be widely accepted by users must not only provide access to primary information, but uast also enhance the latter with procedures that 8. calculate secondary attributes from the data actually stored. Data enhancement procedures are currently provided by LADDER and a few other handbuilt systems, but work is needed now to devise means for allowing system users to specify their own database enhancement functions and to couple 9. these wlth the natural-language component. A second issue associated with conceptual coverage is the ability to access information extrinsic to the database per se, such as where the data are stored and how the fields are defined, as 10. well as information about the status of the query system itself.",
    "abstract": "",
    "countries": [
        "United States"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "26",
    "year": "1981",
    "month": "June",
    "title": "Transportable Natural-Language Interfaces to Databases"
}