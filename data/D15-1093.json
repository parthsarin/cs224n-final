{
    "article": "This paper addresses text categorization problem that training data may derive from a different time period from the test data. We present a learning framework which extends a boosting technique to learn accurate model for timeline adaptation. The results showed that the method was comparable to the current state-of-theart biased-SVM method, especially the method is effective when the creation time period of the test data differs greatly from the training data. Introduction Text categorization supports and improves several tasks such as creating digital libraries, information retrieval, and even helping users to interact with search engines (Mourao et al., 2008) . A growing number of machine learning (ML) techniques have been applied to the text categorization task (Xue et al., 2008; Gopal and Yang, 2010) . Each document is represented using a vector of features/terms (Yang and Pedersen, 1997; Hassan et al., 2007) . Then, the documents with category label are used to train classifiers. Once category models are trained, each test document is classified by using these models. A basic assumption in the categorization task is that the distributions of terms between training and test documents are identical. When the assumption does not hold, the classification accuracy is worse. However, it is often the case that the term distribution in the training data is different from that of the test data when the training data may drive from a different time period from the test data. Manual annotation of tagged new data is very expensive and timeconsuming. The methodology for accurate classification of the new test data by making the maximum use of tagged old data is needed in learning techniques. In this paper, we present a method for text categorization that minimizes the impact of temporal effects. Our approach extends a boosting technique to learn accurate model for timeline adaptation. We used two types of labeled training data: One is the same creation time period with the test data. Another is different creation time period with the test data. We call the former sameperiod training, and the latter diff-period training data. For the same-period training data, the learner shows the same behavior as the boosting. In contrast, for diff-period training data, once they are wrongly predicted by the learned model, these data would be useless to classify test data. We decreased the weights of these data by applying Gaussian function in order to weaken their impacts. Related Work The analysis of temporal aspects is a practical problem as well as the process of large-scale heterogeneous data since the World-Wide Web (WWW) is widely used by various sorts of people. It is widely studied in many text processing tasks. One attempt is concept or topic drift dealing with temporal effects (Klinkenberg and Joachims, 2000; Kleinberg, 2002; Lazarescu et al., 2004; Folino et al., 2007; Song et al., 2014) . Wang et al. developed the continuous time dynamic topic model (cDTM) (Wang et al., 2008) . He et al. proposed a method to find bursts, periods of elevated occurrence of events as a dynamic phenomenon instead of focusing on arrival rates (He and Parker, 2010) . They used Moving Average Convergence/Divergence (MACD) histogram which was used in technical stock market analysis (Murphy, 1999) to detect bursts. Another attempt is domain adaptation. The goal of this attempt is to develop learning algorithms that can be easily ported from one domain to another (Daum\u00e9 III, 2007; Sparinnapakorn and Ku-bat, 2007; Glorot et al., 2011; Siao and Guo, 2013) . Domain adaptation is particularly interesting in Natural Language Processing (NLP) because it is often the case that we have a collection of labeled data in one domain but truly desire a model that can work well for another domain. Lots of studies addressed domain adaptation in NLP tasks such as part-of-speech tagging (Siao and Guo, 2013) , named-entity (Daum\u00e9 III, 2007) , and sentiment classification (Glorot et al., 2011) are presented. One approach to domain adaptation is to use transfer learning. The transfer learning is a learning technique that retains and applies the knowledge learned in one or more tasks to efficiently develop an effective hypothesis for a new task. The earliest discussion is done by ML community in a NIPS-95 workshop 1 , and more recently, transfer learning techniques have been successfully applied in many applications. Blitzer et al. proposed a method for sentiment classification using structural correspondence learning that makes use of the unlabeled data from the target domain to extract some relevant features that may reduce the difference between the domains (Blitzer et al., 2006) . Several authors have attempted to learn classifiers across domains using transfer learning in the text classification task (Raina et al., 2006; Dai et al., 2007; Sparinnapakorn and Kubat, 2007) . Raina et al. proposed a transfer learning algorithm that constructs an informative Bayesian prior for a given text classification task (Raina et al., 2006) . They reported that a 20 to 40% test error reduction over a commonly used prior in the binary text classification task. Dai et al. presented a method called TrAd-aBoost which extends boosting-based learning algorithms (Dai et al., 2007) . Their experimental results show that TrAdaBoost allows knowledge to be effectively transferred from the old data to the new one. All of these approaches aimed at utilizing a small amount of newly labeled data to leverage the old data to construct a high-quality classification model for the new data. However, the temporal effects are not explicitly incorporated into their models. To our knowledge, there have been only a few previous work on temporal-based text categorization. Mourao et al. investigated the impact of temporal evolution of document collections on 1 http://socrates.acadiau.ca/courses/comp/dsilver/ NIPS95 LTL/transfer.workshop.1995.html. the document classification (Mourao et al., 2008) . Salles et al. presented an approach to classify documents in scenarios where the method uses information about both the past and the future, and this information may change over time (Salles et al., 2010) . They address the drawbacks of which instances to select by approximating the Temporal Weighting Function (TWF) using a mixture of two Gaussians. However, their method needs tagged training data across full temporal range of training documents to construct TWF. There are three novel aspects in our method. Firstly, we propose a method for text categorization that minimizes the impact of temporal effects in a learning technique. Secondly, from manual annotation of data perspective, the method allows users to annotate only a limited number of newly training data. Finally, from the perspective of robustness, the method is automated, and can be applied easily to a new domain, or different languages, given sufficient old labeled documents. Learning Timeline Difference Our learning model, Timeline Adaptation by Boosting (TABoost) is based on AdaBoost (Freund and Schapire, 1997). AdaBoost aims to boost the accuracy of a weak learner by adjusting the weights of training instances and learn a classifier accordingly. The TABoost uses two types of training data, same-period and diff-period training data. The assumption is that the quantity of the same-period data is limited, while diff-period training data is abundant. The TABoost aims at utilizing the diff-period training data to make up the deficit of a small amount of the same-period to construct a high-quality classification model for the test data. Similar to the TrAdaBoost presented by (Dai et al., 2007) , TABoost is the same behavior as boosting for the same-period training data. In contrast, once diff-period training instances are wrongly predicted, we assume that these instances do not contribute to the accurate test data classification, and the weights of these instances decrease in order to weaken their impacts. The difference between TrAdaBoost and TABoost is a weighting manner, i.e. TABoost is a continuous timeline model, and it weights these instances by applying Gaussian function in order to weaken their impacts. TABoost is illustrated in Figure 1 . The training data set T r is partitioned into two labeled sets T r dp , and T r sp . T r dp in Figure 1 Input { The diff-period data T r dp , the sameperiod data T r sp , and the maximum number of iterations N . } Output { h f (x) = N t=1 \u03b1 t h t (x i ). } Initialization { w 1 = (w 1 1 , \u2022 \u2022 \u2022 , w 1 n+m ). } TABoost { For t = 1,\u2022 \u2022 \u2022,N 1. Set P t = t = n+m i=1 w t i \u2022|ht(x i )\u2212c(x i )| n+m i=1 w t i . 4. Chose \u03b1 t = 1 2 In( 1\u2212 t t ) 5. Update the new weight vector: w t+1 i = \u23a7 \u23aa \u23aa \u23aa \u23aa \u23aa \u23a8 \u23aa \u23aa \u23aa \u23aa \u23aa \u23a9 w t i exp F (\u03b4)\u03b1t|ht(x i )\u2212c(x i )|, 1 \u2264 i \u2264 n w t i exp \u2212\u03b1t|ht(x i )\u2212c(x i )|, n + 1 \u2264 i \u2264 n + m } Figure 1: Flow of the algorithm shows the diff-period training data that T r dp = {(x dp i , c(x dp i ))}, where x dp i \u2208 X dp (i = 1, \u2022 \u2022 \u2022, n) , and X dp refers to the diff-period instance space. Similarly, T r sp represents the same-period training data that T r sp = {(x sp i , c(x sp i ))}, where x sp i \u2208 X sp (i = 1, \u2022 \u2022 \u2022, m), and X sp refers to the sameperiod instance space. n and m are the number of documents in T r dp and T r sp , respectively. c(x i ) returns a label for the input instance x i . The combined training set T r = {(x i ,c(x i ))} is given by: x i = x dp i i = 1, \u2022 \u2022 \u2022 , n x sp i i = n + 1, \u2022 \u2022 \u2022 , n + m In each iteration round shown in Figure 1 , if a diff-period training instance is wrongly predicted, the instance may be useless to classify test data correctly. We decrease its training weight to reduce the effect. To do this, we assume a standard lognormal distribution (Crow, 1988) , i.e. F (\u03b4) = 1 \u221a 2\u03c0 exp(\u2212 \u03b4 2 2 ). \u03b4 in F (\u03b4) represents time difference between diff-period training and test data. For instance, if the training data is 1999, and test data is 2000, \u03b4 equals to 1. Similarly, if the training data is 2000, and test data is 1999, \u03b4 is \u22121. The greater the time difference value, the smaller the training weight. We fit the model according to the temporal range of the data. As shown in Figure 1 , we decrease its training weight w t i to reduce its effect through multiplying its weight by exp F (\u03b4)\u03b1t|ht(x i )\u2212c(x i )| . We used the Support Vector Machines (SVM) as a learner. We represented each training and test document as a vector, each dimension of a vector is a noun word appeared in the document, and each element of the dimension is a term frequency. We applied the algorithm shown in Figure 1 . After several iterations, a learner model is created by linearly combining weak learners, and a test document is classified by using a learner. Experiments We evaluated our TABoost by using the Mainichi Japanese newspaper documents. Experimental setup We choose the Mainichi Japanese newspaper corpus from 1991 to 2012. The corpus consists of 2,883,623 documents organized into 16 categories. We selected 8 categories, \"International(Int)\", \"Economy(Eco)\", \"Home\", \"Culture\", \"Reading\", \"Arts\", \"Sports\", and \"Local news(Local)\", each of which has sufficient number of documents. All documents were tagged by using a morphological analyzer Chasen (Matsumoto et al., 2000) and selected noun words. The total number of documents assigned to these categories are 787,518. For each category within each year, we divided documents into three folds: 2% of documents are used as the same-period training data, 50% of documents are the diff-period training data, and the remains are used to test our classification method. 2 We used LIBLINEAR (Fan et al., 2008) as a basic learner in the experiments. We compared our method, TABoost with four baselines: (1) TABoost with the same-period training data only (TAB s), (2) SVM, (3) TrAdaBoost (Dai et al., 2007) , and (4) biased-SVM (Liu et al., 2003) by SVM-light (Joachims, 1998) . TAB s is the same behavior as boosting. TrAdaBoost (TrAdaB) is presented by (Dai et al., 2007) . Biased-SVM (b-SVM) is known as the state-of-the-art SVMs method, and often used for comparison (Elkan and Noto, 2008) . Similar to SVM, for biased-SVM, we used the first two folds as a training data, and classified test documents directly, i.e. we used closed data. We empirically selected values of two parameters, \"c\" (trade-off between training error and margin) and \"j\", i.e. cost (cost-factor, by which training errors on positive instances) that optimized result obtained by classification of test documents. Similar to (Liu et al., 2003) , \"c\" is searched in steps of 0.02 from 0.01 to 0.61. \"j\" is searched in steps of 5 from 1 to 200. As a result, we set c and j to 0.01 and 10, respectively. To make comparisons fair, all five methods including our method are based on linear kernel. Throughout the experiments, the number of iterations is set to 100. We used error rate as an evaluation measure (Dai et al., 2007) . Results Categorization results for 8 categories (48% of the test documents, i.e. 378,008 documents) are shown in Table 1 . Each value in Table 1 shows macro-averaged error rate across 22 years. \"M-Avg\" refers to macro-averaged error rate across categories. The results obtained by biased-SVM show minimum error rate obtained by varying the parameters, \"c\" and \"j\". As can be seen clearly from Figure 2 illustrates error rate against the temporal difference between diff-period training and test data. Both training and test data are the documents from 1991 to 2012. For instance, \"10\" of the xaxis in Figure 2 indicates that the test documents are created 10 years later than the training documents. We can see from Figure 2 that the result obtained by TAB was the best in all of the temporal distances. There are no significant differences among three methods, bSVM, TrAdaB, and TAB when the test and training data are the same time period. The performance of these methods including SVM drops when the creation time of the test data differs greatly from the diff-period training data. However, the performance of TAB was still better to those obtained by other methods. This demonstrates that the algorithm with continuous timeline model works well for categorization. Figure 3 shows the error rate against the number of iterations. Each curve shows averaged error rate under time period between same-period and diff- period training data. For example, \"diff 10\" indicates that the difference time period between same and diff training data is \u00b1 10 years. We can see from Figure 3 that all curves except for \"diff 20\" drop rapidly and converge around 10 iterations. \"diff 20\" converges around 20 iterations. This was the same behaviour as TrAdaBoost, i.e. TrAd-aBoost converges around 20 iterations. The fast convergence is not particularly surprising because we used a small number of same-period (2%) and a large number of diff-period (50%) training data. It is necessary to examine how the ratio between same-period and diff-period training data affects overall performance for further quantitative evaluation, although a main contribution of TAB is in situations using by both of a small amount of labeled new data which is not sufficient to train a model alone, and a large amount of old data. Conclusion We have presented a method for text categorizaiton that minimizes the impact of temporal effects. The results using Japanese Mainichi Newspaper corpus show that it works well for categorization, especially when the creation time of the test data differs greatly from the training data. There are a number of interesting directions for future work. The rate of convergence of TAB Inn/N )) is slow which can also be found in (Dai et al., 2007) . Here, n is the number of training data, and N is the number of iterations. In the future, we will try to extend the framework to address this issue. We used Japanese newspaper documents in the experiments. For quantitative evaluation, we need to apply our mehtod to other data such as ACM-DL and a large, heterogeneous collection of web content in addition to the experiment to examine the performance agasint the ratio between same-period and diff-period training data.",
    "abstract": "This paper addresses text categorization problem that training data may derive from a different time period from the test data. We present a learning framework which extends a boosting technique to learn accurate model for timeline adaptation. The results showed that the method was comparable to the current state-of-theart biased-SVM method, especially the method is effective when the creation time period of the test data differs greatly from the training data.",
    "countries": [
        "Japan"
    ],
    "languages": [
        "Japanese"
    ],
    "numcitedby": "0",
    "year": "2015",
    "month": "September",
    "title": "Learning Timeline Difference for Text Categorization"
}