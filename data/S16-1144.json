{
    "article": "This paper presents our system submitted for SemEval 2016 Task 10: Detecting Minimal Semantic Units and their Meanings (DiM-SUM; Schneider, Hovy, et al., 2016) . We extend AMALGrAM (Schneider and Smith, 2015) by tapping two additional information sources. The first information source uses a semantic knowledge base (YAGO3; Suchanek et al., 2007) to improve supersense tagging (SST) for named entities. The second information source employs word embeddings (GloVe; Pennington et al., 2014) to capture fine-grained latent semantics and therefore improving the supersense identification for both nouns and verbs. We conduct a detailed evaluation and error analysis for our features and come to the conclusion that both our extensions lead to an improved detection for SST. Introduction The SemEval 2016 Task 10 on Detecting Minimal Semantic Units of Meaning (DiMSUM) is concerned with the identification of semantic classes called supersenses for single words as well as multiword expressions (MWEs). Identifying supersenses in text allows for abstractions that characterize word meanings beyond superficial orthography (Schneider and Smith, 2015) as well as inferring representations that move towards language independence (Schneider, Mohit, et al., 2013) . It has been used to extend named entity recognition (Ciaramita and Johnson, 2003) and to support supervised word sense disambiguation as it provides partial disambiguation (Ciaramita and Altun, 2006; Ciaramita and Johnson, 2003) as well as in syntactic parse re-ranking (Koo et al., 2005) as latent semantic features. The addition of MWEs -idiosyncratic interpretations that cross word boundaries (Sag et al., 2002) takes into account that the supersense of a MWE is usually not predictable from the meaning of the individual lexemes. The Task moreover distinguishes between continuous MWEs like \"high school n.group \" and discontinuous (gappy) MWEs like \"track people down v.social \". The inventory of supersenses used for the task -41 supersense classes, consisting of 26 noun and 15 verb supersenses -is derived from WordNet's top-level hypernyms in the taxonomy. They are designed to be broad enough to encompass all nouns and verbs (Miller, 1990; Fellbaum, 1990) . 2 Related Work Schneider and Smith (2015) are the first to approach SST and MWE detection jointly with a discriminative model. Most of the previous work focuses on each of the tasks in separate. Sag et al. (2002) tried to raise attention for the issue of MWEs in general and analyzed different types of MWE. Baldwin et al. (2003) employed latent semantic analysis to determine the decomposability of MWEs. Finally many MWE lexicons have been built for different purposes which is why Schneider et al. picked up the issue to address MWE annotation for general purposes (Schneider, Danchik, et al., 2014; Schneider, Onuffer, et al., 2014) . Ciaramita and Johnson (2003) first trained and tested a discriminative model for SST of unambigu-ous nouns on data extracted from different versions of WordNet and achieved an accuracy of slightly over 52%. Curran (2005) applied an unsupervised approach based on vector-space word similarity and achieved 63% accuracy on the same data used by Ciaramita and Johnson (2003) . When revisiting the task Ciaramita and Altun (2006) achieved between 70% and 77% F-score using a HMM sequence tagger. 3 System Description Baseline System We use AMALGrAM 2.0 (Schneider and Smith, 2015) as our baseline system. The model uses a firstorder structured perceptron (Collins, 2002) with averaging. It involves a linear scoring function, a Viterbi algorithm that chooses the highest-scoring valid output tag sequence and an online learning algorithm that determines the best tagging given the current model. We contrast four feature sets for full SST: Schneider and Smith (2015) most effective feature set which is further described in section 3.2, those baseline features plus YAGO feature (3.3), baseline features plus GloVe word embeddings (3.4), and finally a feature set that combines all the above mentioned. Baseline Features The feature set incorporates three components: the first is Schneider, Danchik, et al. (2014) basic MWE features, second is Brown clusters and the last component is WordNet synset features (Schneider and Smith, 2015) . Basic MWE features analyze word ngrams, character pre-and suffixes, and POS tags, as well as lexicon entries that match lemmas of MWE in the sentence. We use four of the ten available lookup lexicons: semcor mwes including all MWEs in SemCor (Miller et al., 1993) , WordNet mwes containing all MWEs from WordNet (Fellbaum, 1998) , phrases dot net which is a phrase idiom lexicon 1 , wikimwe which is mined from English Wikipedia (Hartmann et al., 2012) , and enwikt consisting of all MWE entries in English Wiktionary. The second component of the baseline feature set provides unsupervised distributional word clusters in the form 1 http://www.phrases.net/ of Brown clusters (Brown et al., 1992) . Those clusters reflect lexical generalizations that are useful for syntactic and semantic analysis tasks and are therefore suitable for our task. The last component of the feature set helps predicting supersenses by creating possible supersense candidates from WordNet synsets. YAGO Feature We implement a YAGO lookup component that provides semantic information as an additional feature for the AMALGrAM system with the purpose of improving SST for named entities. YAGO (Yet Another Great Anthology; Suchanek et al., 2007) is a knowledge resource that combines the structural benefits from the WordNet taxonomy with the richness of Wikipedia's categories system. This renders it ideal for our task by enabling us to retrieve Word-Net hypernyms for many different named entities. The following part describes how we look up potential concepts in YAGO, how we find potential names of YAGO concepts within the text and how we encode the returned results as a feature for AMAL-GrAM. There is no guarantee that the named entities contained in training or test data appear in the same surface form as they are stored in YAGO (e.g. \"Elvis\" vs. \"Elvis Presley\"). We apply some heuristics should an initial query with a potential named entity not yield a result: 1. Capitalize the initial character of each token 2 2. Try to retrieve the exact entry via Wikipedias \"redirectedFrom\" links that are included in YAGO (e.g. Elvis P resley , redirectedF rom , \"Elvis\"@eng ) 3. Drop all tokens except the first and repeat the previous steps (only applicable for sequences) For the detection of named entities during feature extraction we rely on the gold POS tag annotation in the provided data. Whenever a token appears with a \"PROPN\" tag (e.g. Germany PROPN ) we query it on YAGO. If the token is followed by a continuous sequence of further \"PROPN\" tagged tokens (e.g. FC PROPN Bayern PROPN Munich PROPN ) the whole sequence linked with underscores is used as the search query. The feature extraction is done in the following way: In a first step we iterate over all supersense bearing singleton and MWE nouns in our training data and try to query them in YAGO. If we have a match we extract the WordNet hypernyms for the found entity. An example for a successful query can be seen in Table 1 . We accumulate a count of observed WordNet hypernyms for each supersense. From the count we calculate a tf-idf whereby the supersenses are seen as the \"documents\" and the WordNet hypernyms as \"words\". What we obtain from this procedure is a tf-idf index that tells us the significance of a WordNet hypernym for a given supersense based on our training data. We require that a WordNet hypernym has to appear at least three times with a supersense otherwise its tf-idf is set to zero for this supersense. During feature extraction we provide the information from extracted WordNet hypernyms in two ways: The straightforward way is to provide each WordNet hypernym as is. With the second feature we make use of our precomputed tfidf index by calculating a supersense ranking whenever we find a candidate entity in YAGO. For each supersense we add up the tf-idf values of the Word-Net hypernyms found with the current candidate entity. If the entity is linked to many WordNet hypernyms with high tf-idf values for a certain supersense the respective supersense will receive a high rank. 3 GloVe Feature The second novel feature we provide is based on word embeddings which are representations of the meaning of words in terms of real-valued vectors in a low-dimensional vector space. Because such embeddings provide generalizations over the meaning of words, including words that do not occur in the training data, they are often used as a general way to improve accuracy in the form of extra word features (Turian et al., 2010) . Two of the most popular methods to create such a mapping include: global matrix factorization and the local context window method. Pennington et al. (2014) combine both methods in the GloVe word embeddings. The available word vectors are derived from a 2014 Wikipedia 4 dump and the Gigaword 5 corpus 5 . Both sources together comprise 400,000 word types and there are four versions available that differ in the size of their dimensions: 50, 100, 200 and 300. GloVe word embeddings capture fine-grained semantic and syntactic regularities using a global log-bilinear regression model with a weighted least-squares objective. The training objective of GloVe is to learn word vectors such that their dot product equals the logarithm of the words' probability of co-occurrence. We incorporate our feature set using a similar method to the lookup lexicons. GloVe word embeddings are essentially a dictionary where each entry consists of a word type and their word vector. If a given lowercase token matches a GloVe lexicon entry then we extend the feature vector of that token with its corresponding word embeddings. Turian et al. (2010) mention that the weights in word embeddings are not necessarily in a bounded range. If the range of the word embeddings is too large, they will exert more influence than the remaining features. To prevent the word embeddings from exerting too much influence on the prediction when they consist of an unbounded range of real numbers we adopt Turian et al.'s (2010) method of scaling the word vectors. Assuming that all word embeddings are represented in a matrix E: Each row E i contains the word embeddings of a token, each column E j represents one dimension of the word embeddings and each cell contains a word embedding E ij . We scale each word vector dimension by a scaling constant \u03c3 and the inverse of the standard deviation over the values across all words: w new = \u03c3 * E ij stdev(E j ) (1) 4 Experiments In the following section we present the data we used, then the tools and parameters and finally the results of our experiments. Data Our training and test data consists of the data made available for SemEval 2016 Task 10. The training data includes three harmonized data-sets: STREUSLE 2.1 (Schneider and Smith, 2015) , Ritter and Lowlands Twitter dataset (Johannsen et al., 2014) . The test set also consists of three sources: online reviews from the TrustPilot corpus (Hovy et al., 2015) , tweets from the Tweebank corpus (Kong et al., 2014) and TED talk transcripts (Cettolo et al., 2012; Neubig et al., 2014) . All datasets use the 17 Universal POS categories and the extended BIO scheme from Schneider and Smith, 2015. For feature development we used a shuffled held-out portion of the train set. Experimental Setup We conduct the experiments on the aforementioned DiMSUM data sets. We use the AMALGrAM 2.0 tagger as baseline system with the following parameters: 6 four training iterations, features that appeared less than five times were cutoff, a constraint for the decoding process that asserts that the \"O\" label is never followed by an \"I\", including loss term and a cost penalty of 100 for errors against recall. Furthermore we use brown clusters and five MWE lexica mentioned in section 3.2. Additionally we create a new tagset that suits the DiMSUM tags. We only consider tags occurring in the DiMSUM training set, yielding |Y | = 170 tags. |{BbOo}| 4 \u00d7 (|N | + |V | + |\u2205|) 26+15+1 + |{Ii}| 2 = 170 All evaluation scores where obtained using the evaluation script for SemEval 2016 Task 10. 6 We have been orienting ourselves towards the parameters used in Schneider and Smith (2015) . YAGO Feature Experiments The effects of the YAGO feature on AMALGrAM can be seen in Table 5 . Compared to the baseline (BL) the WordNet hypernyms have almost no effect on MWE detection (+0.02) while improving SST (+0.64). The supersense rankings improve MWE detection (+0.49) as well as SST (+0.62). Combining the features further improves the detection for MWEs (+0.59) and SST (+1.13). GloVe Feature Experiments The first experiment involves the evaluation of different word embedding dimensions. Figure 1 shows a comparison between the baseline system (BL) which uses no word embeddings and our system adopting GloVe word embeddings with four dimension sizes: 50, 100, 200 and 300. This experiment uses word embeddings in their given real-valued form without scaling them. All systems using word embeddings show improved performance and are approximately one percent higher than the baseline. In this experiment the system performs best with 50 dimensional word embeddings, after which the performance shows a slight decrease with growing vector dimensionality. The second experiment evaluates the influence of unscaled versus scaled word embeddings using the method of Turian et al. (2010) which we described in section 3.4. Table 2 compares the F1-scores of four systems: the first -Glove50 -uses unscaled word embedding whereas the remaining three systems scale those word embeddings with varying \u03c3values (0.01, 0.1 and 1). According to Turian et al. (2010) that value is \u03c3 = 0.1. However our results contradict Turian et al. (2010) as our experiment shows that \u03c3 = 0.01 is more successful in predicting MWEs whereas \u03c3 = 1 is more suitable for the detection of supersenses as well as both combined. The third experiment evolves around the interaction between Brown clusters and word embeddings. As both methods have a similar aim -capturing the semantic representation of words -it is of interest to distinguish their influence on the system performance. To accomplish this we train the baseline system (BL) and our most successful system (Glove50, \u03c3 = 1) with (+brown) and without using Brown clusters (-brown). Table 3 represents the resulting F1-scores. Our system profits from the Brown clusters as the F1-scores for all categories (MWE, SST and combined) improves. Final System Comparison Finally we evaluate the combined impact of our features on the performance of the baseline system. Table 5 compares the baseline system plus YAGO, baseline plus GloVe and our combined system using both YAGO and GloVe features (final) 7 with var- ious measurements. Our GloVe feature produces the overall best results except for the detection of MWEs due to a decrease in recall. In this case the YAGO feature improves all measures which leads to the highest performance. Although the combination of both features (final) results in an improvement of the baseline the performance mostly ranges in between the results for the individual GloVe and YAGO features. Feature Analysis To get a deeper understanding of the impact and benefit of our features we conduct the following analyzes. First we compare the coverage of our YAGO lookup with NLTK's WordNet component and examine the accuracy of our ranking feature. Then we analyze the coverage of GloVe on the provided data set and give a detailed recall analysis for each tag. YAGO coverage For the coverage comparison we extract all supersense bearing nouns from the whole gold annotated DiMSUM data set. We query the extracted nouns and count the ones that are found exclusively with the lookup component of the YAGO feature and not by NLTK-WordNet. Figure 2 (see Appendix A) displays the results for each supersense that has at GloVe100 features. The results of our submitted system were slightly better (combined F1-score 57.77%), but could not be reproduced after revising our system. least 100 associated nouns. Looking at the results we observe a decreased coverage of the WordNet lookup for nouns associated to supersenses that tend to have an increased proportion of named entities, e.g. \"n.location\", \"n.group\" or \"n.person\". For the YAGO lookup this correlation is inverted resulting in an increased amount of additionally found supersense bearing nouns for the previously described supersenses. BL We also investigate the YAGO feature's ranking component. First we extract a tf-idf index from the DiMSUM training data set. We use the index to generate a ranking for each expression that we are able to detect with our YAGO feature on the test data set. Figure 3 (see Appendix A) shows the relative distribution of gold supersenses for the first five ranking positions. In this evaluation, the correct supersense is present in the first two ranks for the majority of cases. This experiment also indicates how well the detection of supersense bearing nouns performs. E.g. out of 413 nouns in the DiMSUM test set that are marked with the \"n.person\" supersense, 146 were detected and received a rank. GloVe errors We conduct two experiments to assess our GloVe feature: The first experiment examines the number of tokens for both the train and test set for which there is a GloVe word vector. As described in section 3.4 we use lowercase tokens and match them to their corresponding GloVe word embeddings if possible. With this method we get a coverage of 97.35% for the train set and 94.32% for the test set. Which means that almost every word of the DiMSUM data set is represented by GloVe word embeddings. To fully assess our GloVe feature we investigate the improvement and deterioration of each tag with our second experiment. To accomplish this we compare the difference between the F1-score of our system and the F1-score of the baseline (F1-score discrepancy) for each tag. Since there are two types of tags -MWE and supersenses -we conduct an analysis for each type. We provide separate evaluations for tokens that have already been seen in the training set (seen) and tokens that have never been seen before (unseen). Firstly we examine the F1score discrepancy for all supersenses. Figure 4 (see Appendix A) shows the result for all supersenses that occur more than 50 times in the test data set having a F1-score discrepancy that is higher than |0.5|. Most supersenses -whether they have been previously seen in the training set or not -improve with the use of the GloVe feature. An exception is \"n.event\" -a supersense whose F1-score decreases by -8.2% for seen tokens. The average F1-score discrepancy of all noun and verb supersense tags is +0.59; this further confirms our claim that the majority of the supersenses improve with the adoption of the GloVe feature. Lastly we examine the F1-score discrepancy for all MWE tags that occur more than 50 times in the test set. The results can be seen in Figure 5 (see Appendix A). The detection of \"I\" on seen tokens decreases by 13.2%, whereas the detection of \"B\" improves for unseen tokens by +8.2%. Overall the GloVe feature has a slightly positive influence on MWE detection. Conclusion Both YAGO and GloVe are effective in improving the performance for SST and MWE detection. Our experiments show that the GloVe word embeddings provide information in addition to Brown clusters that help the system further distinguish between tags. Unfortunately the benefits of our features don't add up but instead balance each other out. Learning the reason for this could be subject to future work. One could also replace the heuristics we employed for the detection of named entities in the text with more sophisticated named entity resolution techniques. Another possibility would be the comparison of the effect of different word embeddings on the performance. It might also be advantageous to further research the scaling of word embeddings. ",
    "abstract": "This paper presents our system submitted for SemEval 2016 Task 10: Detecting Minimal Semantic Units and their Meanings (DiM-SUM; Schneider, Hovy, et al., 2016) . We extend AMALGrAM (Schneider and Smith, 2015) by tapping two additional information sources. The first information source uses a semantic knowledge base (YAGO3; Suchanek et al., 2007) to improve supersense tagging (SST) for named entities. The second information source employs word embeddings (GloVe; Pennington et al., 2014) to capture fine-grained latent semantics and therefore improving the supersense identification for both nouns and verbs. We conduct a detailed evaluation and error analysis for our features and come to the conclusion that both our extensions lead to an improved detection for SST.",
    "countries": [
        "Germany"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "6",
    "year": "2016",
    "month": "June",
    "title": "{ICL}-{HD} at {S}em{E}val-2016 Task 10: Improving the Detection of Minimal Semantic Units and their Meanings with an Ontology and Word Embeddings"
}