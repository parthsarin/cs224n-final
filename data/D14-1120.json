{
    "article": "In this paper we first exploit cash-tags (\"$\" followed by stocks' ticker symbols) in Twitter to build a stock network, where nodes are stocks connected by edges when two stocks co-occur frequently in tweets. We then employ a labeled topic model to jointly model both the tweets and the network structure to assign each node and each edge a topic respectively. This Semantic Stock Network (SSN) summarizes discussion topics about stocks and stock relations. We further show that social sentiment about stock (node) topics and stock relationship (edge) topics are predictive of each stock's market. For prediction, we propose to regress the topic-sentiment time-series and the stock's price time series. Experimental results demonstrate that topic sentiments from close neighbors are able to help improve the prediction of a stock markedly. Introduction Existing research has shown the usefulness of public sentiment in social media across a wide range of applications. Several works showed social media as a promising tool for stock market prediction (Bollen et al., 2011; Ruiz et al., 2012; Si et al., 2013) . However, the semantic relationships between stocks have not yet been explored. In this paper, we show that the latent semantic relations among stocks and the associated social sentiment can yield a better prediction model. On Twitter, cash-tags (e.g., $aapl for Apple Inc.) are used in a tweet to indicate that the tweet talks about the stocks or some other related information about the companies. For example, one tweet containing cash-tags: $aapl and $goog (Google Inc.), is \"$AAPL is loosing customers. everybody is buying android phones! $GOOG\". Such joint mentions directly reflect some kind of latent relationship between the involved stocks, which motivates us to exploit such information for the stock prediction. We propose a notion of Semantic Stock Network (SSN) and use it to summarize the latent semantics of stocks from social discussions. To our knowledge, this is the first work that uses cash-tags in Twitter for mining stock semantic relations. Our stock network is constructed based on the co-occurrences of cash-tags in tweets. With the SSN, we employ a labeled topic model to jointly model both the tweets and the network structure to assign each node and each edge a topic respectively. Then, a lexicon-based sentiment analysis method is used to compute a sentiment score for each node and each edge topic. To predict each stock's performance (i.e., the up/down movement of the stock's closing price), we use the sentiment time-series over the SSN and the price time series in a vector autoregression (VAR) framework. We will show that the neighbor relationships in SSN give very useful insights into the dynamics of the stock market. Our experimental results demonstrate that topic sentiments from close neighbors of a stock can help improve the prediction of the stock market markedly. Related work Social Media & Economic Indices Many algorithms have been proposed to produce meaningful insights from massive social media data. Related works include detecting and summarizing events (Weng and Lee, 2011; Weng et al., 2011; Baldwin et al., 2012; Gao et al., 2012) and analyzing sentiments about them (Pang and Lee, 2008; Liu, 2012) , etc. Some recent literature also used Twitter as a sentiment source for stock market prediction (Bollen et al., 2011; Si et al., 2013) . This paper extends beyond the correlation between social media and stock market, but fur-ther exploits the social relations between stocks from the social media context. Topic modeling has been widely used in social media. Various extensions of the traditional LDA model (Blei et al., 2003) has been proposed for modeling social media data (Wang et al., 2011, Jo and Oh, 2011; Liu et al., 2007; Mei et al., 2007; Diao et al., 2012) . Ramage et al. (2009; 2011) presented a partially supervised learning model called Labeled LDA to utilize supervision signal in topic modeling. Ma et al. (2013) predicted the topic popularity based on hash-tags on Twitter in a classification framework. Financial Networks for Stock Financial network models study the correlations of stocks in a graph-based view (Tse et al., 2010; Mantegna, 1999; Vandewalle et al., 2001; Onnela et al., 2003; Bonanno et al., 2001) . The usual approach is to measure the pairwise correlation of stocks' historical price series and then connect the stocks based on correlation strengths to build a correlation stock network (CSN). However, our approach leverages social media posts on stock tickers. The rationale behind is that micro-blogging activities have been shown to be highly correlated with the stock market (Ruiz et al., 2012; Mao et al., 2012) . It is more informative, granular to incorporate latest developments of the market as reflected in social media instead of relying on stocks' historical price. Semantic Stock Network (SSN) Construction of SSN We collected five months (Nov. 2 2012 -Apr. 3 2013) of English tweets for a set of stocks in the Standard & Poor's 100 list via Twitter's REST API, using cash-tags as query keywords. For preprocessing, we removed tweets mentioning more than five continuous stock tickers as such tweets usually do not convey much meaning for our task. Finally, we obtained 629,977 tweets in total. Table 1 shows the top five most frequent stocks jointly mentioned with Apple Inc. in our dataset. Formally, we define the stock network as an undirected graph \ud835\udc3a = {\ud835\udc49 , \ud835\udc38}. The node set \ud835\udc49 comprises of stocks, \ud835\udc52 \ud835\udc62,\ud835\udc63 \u2208 \ud835\udc38 stands for the edge between stock nodes \ud835\udc62 and \ud835\udc63 and the edge weight is the number of co-occurrences. On exploring the co-occurrence statistics in pilot studies, we set a minimum weight threshold of 400 to filter most non-informative edges. Figure 1 demonstrates a segment of the stock network constructed from our dataset. Semantic Topics over the Network Figure 2 illustrates our annotation for each tweet. For a tweet, \ud835\udc51 with three cash-tags: {\ud835\udc63 1 , \ud835\udc63 2 , \ud835\udc63 3 }, we annotate with the label set, \ud835\udc3f \ud835\udc51 = {\ud835\udc63 1 , \ud835\udc63 2 , \ud835\udc63 3 , \ud835\udc52 1,2 , \ud835\udc52 1,3 , \ud835\udc52 2,3 }. (\ud835\udc52 1,2 is \"aapl_goog\" if \ud835\udc63 1 is \"aapl\" and \ud835\udc63 2 is \"goog\"). Then, the topic assignments of words in \ud835\udc51 are constrained to topics indexed by its label set, \ud835\udc3f \ud835\udc51 . Given the annotations as labels, we use the Labeled LDA model (Ramage et al., 2009) to jointly learn the topics over nodes and edges. Labeled-LDA assumes that the set of topics are the distinct labels in a labeled set of documents, and each label corresponds to a unique topic. Similar to LDA (Blei et al., 2003) , Labeled-LDA models each document as an admixture of latent topics and generates each word from a chosen topic. Moreover, Labeled-LDA incorporates supervision by simply constraining the model to use only those topics that correspond to a document's observed label set (Ramage et al., 2009) . For model inference, we use collapsed Gibbs sampling (Bishop, 2006) and the symmetric Dirichlet Priors are set to: \ud835\udf02 = 0.01, \ud835\udefc = 0.01 as suggested in (Ramage et al., 2010) . The Gibbs Sampler is given as: \ud835\udc5d(\ud835\udc67 \ud835\udc56 = \ud835\udc58|\ud835\udc67 \u2212\ud835\udc56 )~ \ud835\udc41(\ud835\udc51 \ud835\udc56 ,\ud835\udc58) \u22121 + \ud835\udefc \ud835\udc41(\ud835\udc51 \ud835\udc56 , * ) \u22121 + |\ud835\udc3f \ud835\udc51 \ud835\udc56 | * \ud835\udefc * \ud835\udc41(\ud835\udc58,\ud835\udc64 \ud835\udc56 ) \u22121 +\ud835\udf02 \ud835\udc41(\ud835\udc58, * ) \u22121 + |\ud835\udc49 | * \ud835\udf02 (1) where \ud835\udc41(\ud835\udc51 \ud835\udc56 , \ud835\udc58) is the number of words in \ud835\udc51 \ud835\udc56 assigned to topic \ud835\udc58, while \ud835\udc41(\ud835\udc51 \ud835\udc56 , * ) is the marginalized sum. |\ud835\udc3f \ud835\udc51 \ud835\udc56 | is the size of label subset of \ud835\udc51 \ud835\udc56 .  (3) Later, parameters {\ud835\udefd \ud835\udc58,\ud835\udc64 } will be used to compute the sentiment score for topics. Leveraging Sentiment over SSN for Stock Prediction We define a lexicon based sentiment score in the form of opinion polarity for each node-indexed and edge-indexed topic as follows: \ud835\udc46(\ud835\udc58) = \u2211 \ud835\udefd \ud835\udc58,\ud835\udc64 |\ud835\udc49 | \ud835\udc64=1 \ud835\udc59(\ud835\udc64), \ud835\udc46(\ud835\udc58) \u2208 [\u22121,1] (4) where \ud835\udc59(\ud835\udc64) denotes the opinion polarity of word \ud835\udc64. \ud835\udefd \ud835\udc58,\ud835\udc64 is the word probability of \ud835\udc64 in topic \ud835\udc58 (Eq.3). Based on an opinion lexicon \ud835\udc42, \ud835\udc59(\ud835\udc64) = +1 if \ud835\udc64 \u2208 \ud835\udc42 \ud835\udc5d\ud835\udc5c\ud835\udc60 , \ud835\udc59(\ud835\udc64) = -1 if \ud835\udc64 \u2208 \ud835\udc42 \ud835\udc5b\ud835\udc52\ud835\udc54 and \ud835\udc59(\ud835\udc64) = 0 otherwise. We use the opinion English lexicon contributed by Hu and Liu (2004) . Considering the inherent dynamics of both the stock markets and social sentiment, we organize the tweets into daily based sub-sets according to their timestamps to construct one \ud835\udc46\ud835\udc46\ud835\udc41 \ud835\udc61 ( \ud835\udc61 \u2208 [1, \ud835\udc47 ]) for each day. Then, we apply a Labeled LDA for each \ud835\udc46\ud835\udc46\ud835\udc41 \ud835\udc61 and compute the sentiment scores for each \ud835\udc46\ud835\udc46\ud835\udc41 \ud835\udc61 's nodes and edges. This yields a sentiment time series for the node, \ud835\udc63, {\ud835\udc46(\ud835\udc63) 1 , \ud835\udc46(\ud835\udc63) 2 , \u2026 , \ud835\udc46(\ud835\udc63) \ud835\udc47 } and for the edge, \ud835\udc52 \ud835\udc62,\ud835\udc63 , {\ud835\udc46(\ud835\udc52 \ud835\udc62,\ud835\udc63 ) 1 , \ud835\udc46(\ud835\udc52 \ud835\udc62,\ud835\udc63 ) 2 , \u2026 , \ud835\udc46(\ud835\udc52 \ud835\udc62,\ud835\udc63 ) \ud835\udc47 } . We introduce a vector autoregression model (VAR) (Shumway and Stoffer, 2011) + \ud835\udf00 \ud835\udc61 (5) where {\ud835\udf00} are white noises, {\ud835\udf17} are model parameters, and notes the time steps of historical information to use. In our experiment, {\ud835\udc66 \ud835\udc61 } is the target stock's price time series, {\ud835\udc65 \ud835\udc61 } is the covariate sentiment/price time series, and we will try \u2208 2,3 . We use the \"dse\" library in R language to fit our VAR model based on least square regression. Experiments Tweets in Relation to the Stock Market Micro-blogging activities are well correlated with the stock market. Figure 3 shows us how the Twitter activities response to a report announcement of $aapl (Jan. 23 2013). The report was made public soon after the market closed at 4:00pm, while the tweets volume rose about two hours earlier and reached the peak at the time of announcement, then it arrived the second peak at the time near the market's next opening (9:30am). By further accumulating all days' tweet volume in our dataset as hourly based statistics, we plot the volume distribution in Figure 4 . Again, we note that trading activities are well reflected by tweet activities. The volume starts to rise drastically two or three hours before the market opens, and then reaches a peak at 9:00pm. It drops during the lunch time and reaches the second peak around 2:00pm (after lunch). Above observations clearly show that market dynamics are discussed in tweets and the content in tweets' discussion very well reflects the fine-grained aspects of stock market trading, opening and closing. Stock Prediction This section demonstrates the effectiveness of our SSN based approach for stock prediction. We leverage the sentiment time-series on two kinds of topics from SSN: 1). Node topic from the target stock itself, 2). Neighbor node/edge topics. We note that the price correlation stock network (CSN) (e.g., Bonanno et al., 2001; Mantegna, 1999 ) also defines neighbor relationships based on the Pearson's correlation coefficient (Tse et al., 2010) between pair of past price series (We get the stock dataset from Yahoo! Finance, between Nov. 2 2012 and Apr. 3 2013). We build a two variables VAR model to predict the movement of a stock's daily closing price. One variable is the price time series of the target stock ({\ud835\udc66 \ud835\udc61 } in Eq.5); another is the covariate sentiment/price time series ( {\ud835\udc65 \ud835\udc61 } in Eq.5). We setup two baselines according to the sources of the covariate time series as follows: 1. Covariate price time series from CSN, we try the price time series from the target stock's closest neighbor which takes the maximum historical price correlation in CSN. 2. With no covariate time series, we try the target stock's price only based on the univariate autoregression (AR) model. To summarize, we try different covariate sentiment (\ud835\udc46(. )) or price (\ud835\udc43 (. )) time series from SSN or CSN together with the target stock's price time series (\ud835\udc43 * ) to predict the movement of one day ahead price (\ud835\udc43 * * ). The accuracy is computed based on the correctness of the predicted directions as follows, i.e., if the prediction * * takes the same direction as the actual price value, we increment #(\ud835\udc5d\ud835\udc5c\ud835\udc60\ud835\udc43\ud835\udc5f\ud835\udc52\ud835\udc51) by 1, #(\ud835\udc61\ud835\udc5c\ud835\udc61\ud835\udc4e\ud835\udc59\ud835\udc47\ud835\udc52\ud835\udc60\ud835\udc61) is the total number of test. \ud835\udc34\ud835\udc50\ud835\udc50\ud835\udc62\ud835\udc5f\ud835\udc4e\ud835\udc50\ud835\udc66 = #(\ud835\udc5d\ud835\udc5c\ud835\udc60\ud835\udc43\ud835\udc5f\ud835\udc52\ud835\udc51) #(\ud835\udc61\ud835\udc5c\ud835\udc61\ud835\udc4e\ud835\udc59\ud835\udc47\ud835\udc52\ud835\udc60\ud835\udc61) (6) Figure 5 details the prediction of $aapl on different training window sizes of [15, 60] and lags. {\ud835\udc46(\ud835\udc4e\ud835\udc4e\ud835\udc5d\ud835\udc59), \ud835\udc46(\ud835\udc54\ud835\udc5c\ud835\udc5c\ud835\udc54), \ud835\udc46(\ud835\udc5a\ud835\udc60\ud835\udc53\ud835\udc61), \ud835\udc46(\ud835\udc4e\ud835\udc4e\ud835\udc5d\ud835\udc59_\ud835\udc54\ud835\udc5c\ud835\udc5c\ud835\udc54)} are from SSN, \ud835\udc43 (\ud835\udc51\ud835\udc52\ud835\udc59\ud835\udc59) is from CSN ($dell (Dell Inc.) takes the maximum price correlation score of 0.92 with $aapl), and \ud835\udc43 * = \ud835\udc43 (\ud835\udc4e\ud835\udc4e\ud835\udc5d\ud835\udc59) is the univariate AR model, using the target stock's price time series only. Table 2 further summarizes the performance comparison of different approaches reporting the average (and best) prediction accuracies over all time windows and different lag settings. Comparing to the univariate AR model (\ud835\udc43 * only), we see that the sentiment based time-series improve performances significantly. Among SSN sentiment based approaches, the \ud835\udc46(\ud835\udc54\ud835\udc5c\ud835\udc5c\ud835\udc54) helps improve the performance mostly and gets the best accuracy of 0.78 on 2 and training window size of 53. On average, \ud835\udc46(\ud835\udc54\ud835\udc5c\ud835\udc5c\ud835\udc54) achieves a net gain over \ud835\udc46(\ud835\udc4e\ud835\udc4e\ud835\udc5d\ud835\udc59) in the range of 29% with lag 2 (0.62 = 1.29 x 0.48) and 14% with lag 3 (0.57 = 1.14 x 0.50). Also, \ud835\udc46(\ud835\udc4e\ud835\udc4e\ud835\udc5d\ud835\udc59_\ud835\udc54\ud835\udc5c\ud835\udc5c\ud835\udc54) performs better than \ud835\udc46(\ud835\udc4e\ud835\udc4e\ud835\udc5d\ud835\udc59) . The result indicates that $aapl's stock performance is highly influenced by its competitor. \ud835\udc43 (\ud835\udc51\ud835\udc52\ud835\udc59\ud835\udc59) also performs well, but we will see relationships from CSN may not be so reliable. We further summarize some other prediction cases in Table 3 to show how different covariate sentiment sources ( \ud835\udc46(. ) ) and price sources (\ud835\udc43 (. )) from their closest neighbor nodes help predict their stocks, which gives consistent conclusions. We compute the \ud835\udc61-test for SSN based prediction accuracies against that of CSN or price only based approaches among all testing  window sizes ([15, 60] ), and find that SSN based approaches are significantly (\ud835\udc5d -value < 0.001) better than others. We note that tweet volumes of most S&P100 stocks are too small for effective model building, as tweets discuss only popular stocks, other stocks are not included due to their deficient tweet volume. We make the following observations: 1. CSN may find some correlated stock pairs like $ebay and $amzn, $wmt and $tgt, but sometimes, it also produces pairs without real-world relationships like $tgt and $vz, $qcom and $pfe, etc. In contrast, SSN is built on large statistics of human recognition in social media, which is likely to be more reliable as shown. 2. Sentiment based approaches {\ud835\udc46(\u22c5)} consistently perform better than all price based ones { \ud835\udc43 * , \ud835\udc43(\u22c5)}. For \ud835\udc46(\u22c5) based predictions, sentiment discovered from the target stock's closest neighbors in SSN performs best in general. This empirical finding dovetails with qualitative results in the financial analysis community (Mizik & Jacobson, 2003; Porter, 2008) , where companies' market performances are more likely to be influenced by their competitors. But for Google, its stock market is not so much influenced by other companies (it gets the best prediction accuracy on \ud835\udc46(\ud835\udc54\ud835\udc5c\ud835\udc5c\ud835\udc54), i.e., the internal factor). It can be explained by Google Inc.'s relatively stable revenue structure, which is well supported by its leading position in the search engine market. 3. The business of offline companies like Target Corp. ($tgt) and Wal-Mart Stores Inc. ($wmt) are highly affected by online companies like $amzn. Although competition exists between $tag and $wmt, their performances seem to be affected more by a third-party like $amzn (In Table 3 , predicts the best for both). Not surprisingly, these offline companies have already been trying to establish their own online stores and markets. Conclusion This paper proposed to build a stock network from co-occurrences of ticker symbols in tweets. The properties of SSN reveal some close relationships between involved stocks, which provide good information for predicting stocks based on social sentiment. Our experiments show that SSN is more robust than CSN in capturing the neighbor relationships, and topic sentiments from close neighbors of a stock significantly improve the prediction of the stock market. [15, 60] ) of some other cases with different covariates, cell of dis(0.96) means \"$dis\" takes the maximum price correlation strength of 0.96 with \"$goog\" (similar for others in column CSN). The best performances are highlighted in bold. Target Acknowledgments This work was supported in part by a grant from the National Science Foundation (NSF) under grant no. IIS-1111092).",
    "abstract": "In this paper we first exploit cash-tags (\"$\" followed by stocks' ticker symbols) in Twitter to build a stock network, where nodes are stocks connected by edges when two stocks co-occur frequently in tweets. We then employ a labeled topic model to jointly model both the tweets and the network structure to assign each node and each edge a topic respectively. This Semantic Stock Network (SSN) summarizes discussion topics about stocks and stock relations. We further show that social sentiment about stock (node) topics and stock relationship (edge) topics are predictive of each stock's market. For prediction, we propose to regress the topic-sentiment time-series and the stock's price time series. Experimental results demonstrate that topic sentiments from close neighbors are able to help improve the prediction of a stock markedly.",
    "countries": [
        "Hong Kong",
        "Singapore",
        "United States"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "78",
    "year": "2014",
    "month": "October",
    "title": "Exploiting Social Relations and Sentiment for Stock Prediction"
}