{
    "article": "In this paper, we want to describe a tagger/lemmatiser for Dutch medical vocabulary, which consists of a full-form dictionary and a morphological recogniser for unknown vocabulary coupled to an expert system-like disambiguation module. Attention is also paid to the main datastructures: a lexical database and feature bundles implemented as directed acyclic graphs. Some evaluation results are presented as well. The tagger/lemmatiser currently functions as a lexical front-end for a syntactic parser. For pure tagging/lemmatising purposes, a reduced tagset (not suited for sentence analysis) can be used as well. Introduction Medical patient reports consist mainly of free text, combined with results of various laboratories. While nmnerical data can easily be stored and processed for archiving and research purposes, free text is rather difficult to be processed by a computer, although it contains the most relevant information. IIowever, only a few NLP-driven systems have actually been implemented (lfi'iedman and Johnson, 1992) . For Dutch, a prototype covering a larger part of the Dutch grammar and medical vocabulary is under development. This paper focuses on a spin-off--c.q. a contextual tagger/lemmatiser (T/L) -of the lexical component of the Dutch Medical Language Processor (DMLP) (Spyns and De Moor, 1996) . A T/L is quite valuable for several kinds of corpus studies concerning the medical vocabulary (co-occurrence patterns, statistical data, . .. ). For efficient sentence analysis in particular, it is necessary to disambiguate the results of morphological ana-lysis before they can be passed oil the parser. In the following sections, we will describe in detail the different knowledge bases (cf. section 2) and the implementation of tile major data structures (cf. section 3). Each section is illustrated by an cxaInple or some implementation details. The subsequent section (4) is devoted to the evaluation. The paper ends with a discussion (section 5). Linguistic Knowledge In essence, the T/L is a generate-andtest engine. All possible morphological analyses of a word are provided (by the database or tile word recogniser cf. section 2.1), (generator), and the contextual disambiguator (cf. section 2.2), (test engine), must reduce as much as possible tile potentially valid analyses to the one(s) effectively applicable in the context of the given input sentence 1 Lexlcal Front-end The dictionary is conceived as a full form dictionary in order to speed up the tagging process. Experiments (Dehaspe, 1993b) have shown that full form retrieval is in most of the cases significantly faster than canonical form computation and retrieval. (cf. also (Ritehie et al., 1992, p.201) ). The lexical database for Dutch was built using several resources: an existing electronic valency dictionary 2 and a list of words extracted from a medical corpus (cardiology patient discharge summaries). The already existing electronic dictionary and 1Before the actual linguistic analysis takes place, some preprocessing (marking of sentence boundaries, etc.) is done. 2This resulted from the K.U. Leuvcn PROTONproject (Dehaspe and Van Langendonck, 1991) the newly coded entries were converted and merged into a common representation in a relational database (Dehaspe, 1993a) . A Relational DataBase Management System (RDBMS) can handle very large amounts of data while guaranteeing flexibility and speed of execution. Currently, there are some 100.000 full forms in the lexical database (which is some 8000 non inflected forms). For the moment, the database contains for the major part simple wordforms. Complex wordforms nor idiomatic expressions are yet handled in a conclusive manner. Itowevcr, since an exhaustive dictionary is an unrealistic assumption, an intelligent word recognlser tries to cope with all the unknown word forms (Spyns, 1994) . The morphological recogniser tries to identify the unknown form by computing its potential linguistic characteristics (including its canonical form). For this purpose, a set of heuristics that combine morphological (inflection, derivation and compounding) as well as non morphological (lists of endstrings coupled to their syntactic category) knowledge. When these knowledge sources do not permit to identify the unknown forms, they are marked as guesses and receive the noun category. Actually, a difference is made between the regular full form database dictionary and a much smaller canonical form dictionary. The latter consist of automatically generated entries. Those entries are asserted as temporary canonical form lexicon entries and do not need to be calculated again by the recogniser part of the T/L when encountered a second time in the submitted text. A substantial speedup can be gained that way. The Disambiguator The contextual 3 disambiguator of the DMLP is implemented as an \"expertlike system\" (Spyns, 1995) , which does not only take the immediate left and/or right neighbour of a word in the sentence into account, but also the entire left or right part of the sentence, depending on the rule. E.g. if a simple form of the verb 'hebben' [have] appears, the auxilL ary reading is kept only if a past particL ple is present in the context 4 aWe only consider the syntactic context. 4Unlike in English, the past participle in Dutch does not need to occupy a position adjacent to the auxiliary. The rule base can be subdivided into 21 i.ndependent rule sets. A specific mechanism selects the appropriate ruleset to be triggered. Some rulesets are internally ordered. Iit that case, if the most specific rule is fired, the triggering of the more general rules is prevented. In other cases, all the rules of a ruleset are triggered sequentially. Some rules are mutually exclusive. The rules are implemented as Prolog clauses, which guarantees a declarative style of the rules (at !east to a large extent). The control mechanism works with an agenda that contains the position of the words ill the input sentence. The position in the sentence uniquely identifies a word (and thus its corresponding (group of different) morphological reading(s)). Every position in the agenda is sequentially checked whether it can be disambi~ guated or not. If an ambiguous word is encountered, its position is kept on the agenda. For every clement of the agenda, all possible binary combinations of the syntactic categories are tried (failure driven loop). 1'o avoid infinite loops (repeatedly firing the same rule that is not able to alter the current set of morphological readings), the same ruleset can only be fired once for the word on the same position during the same pass. As long as the disambiguator can reducc the number of readings and the agenda is not empty, a new pass is performed. Software Engineering In order to preserve the reusability of the dictionary, an extra software layer hides the database. This layer transforms the information from the database into a feature bundle containing the application specific features. The software layer restricts and adapts the \"view\" (just like the SQL-views) the programs have on the information of a lexical entry . This methods allows that all sorts of information can be coupled to a lexical entry in the database while only the information relevant for a specific NLP-application passes \"the software filter\". Besides the qualitative aspect, the filter can also affect the quantitative aspect by collapsing or expanding certain entries (e.g. the 1st and 2nd person singular of many verbs constitute the same entry in the database but are differentiated afterwards) or excluding specific combinations after examination of the input. The feature bundles constitute the main datastructure of the T/L.Atself. They arc conceived as Directed Aeyclic Graphs, which are implemented as open ended Prolog lists (Gazdar and Mellish, 1989) . This \"low level\" implementation is only known by the predicates that make up the interface. Graphunification provides a neat and easy way to impose various restrictions. A linguistic restriction can be exl)rcssed in terms of feature value pairs, which in turn can be represented as a l)AG. This DAG acts as filter towards other DAGs. The DAGs that are unifyable with the \"filter DAG\" meet the imposed restriction. The only thing to do is to define the appropriate filters. The contextual rules mainly consist of such filter DAGs. The T/L, able to analyse words lacking from the dictionary, is intended to fimction primarily as a lexical front-end for the DMIA ) syntactic analyser (Spyns and Adriaens, 1992) . Itowever, as the result of the tagging and lemmatising process consists of feature bundh's implemented as DAGs, the output format can be adapted very easily if required (by defining various \"format filters\"). The output format can be transduced to the format required by the \"SAC-tools\" o1' the System Management 'lbols of the Menelasproject (Ogonowski, 1993) . Another fib ter transforms the output to the format of the Multi-TMe semantic tagger (Ceusters, 1994) . Evaluation In order to assess the performance of the T/L, several data sets were used. A learning set of 1314 tokens (5 reports) from the cardiology department (cardio) should eliminate as much as possible errors due to unknown vocabulary. A new large test set of 3167 tokens of 35 neurosurgical reports was fed to the T/L to see how robust it is when confronted with the vocabulary of a comt)letely new domain. The t)roblem with an application of this type is the trade-olr between overkill (a good analysis is injustly discarded) and undershoot (an invalid analysis is kept). The extensive tagset (tagsetl) provides all the morphosyntaetic information as required by the DMLP parser for sentence analysis, while the reduced tagset (tagset2) consists of 15 ('ategories and 25 speciliers (which gives 43 meaningfifl combinations). This simplifi- All the results were manually examined and synthesised (of. table 1). As soon as even one feature of the complete feature bundle with linguistic information is wrong, the analysis as a whole is considered to be incorrect. All the words that have wrong, lacking, doubtful or more than 2 competing analyses are considered as bad. Sometimes, two competing readings could not be disambiguated without sernantico-pragmatic knowledge. In addition, we deliberately left some ambiguities pending for the syntactic parser to avoid the danger of overkill (el. also (Jaeobs and l:[au, 1993, pp.166--167) on this matter). These eases of \"double analysis\" are grouped in the \"class 2''. The question whether these cases should be considered as bad or correct is left open \"~ The difference between the results is mainly due to the amount of unknown vocabulary (around 9 % for the cardio set VS. around 18% for the neuro set which results in a difference of 82.42 % vs. 73.63 % and 91.32 % vs. 83 .04 %) and the nature of the tagsets (82.42 % vs. 91.32 % and 73.63 % vs. 8'.1.0/1%). Discussion As tar as we know, only one T/L for medical English exists (Paulussen and Martin, 1992) , which has recently been adapted to medical Dutch and extended with semantic lal)elling (Maks and Martin, 1996) . Most of ttle T/Ls 6 attain a 5Probably, the ~mswer will be different depending on tile task of tile T/L: \"pure\" tagging or auxiliary function for the parser. ~Cf. (l'aulussen, 1992) for a detailed overview and discussion of some T/l,s -including CGC, Tag-95% -97% score, although for ENGCG a 99.7 % succes rate is claimed (Tapanainen and Jiirvinen, 1994) . All these taggers use a rather restricted tagset. Therefore, we consider it fair to compare only our results on tagset2 with the scores of the mentioned T/Ls. It must be mentioned as well that word order in medical Dutch can be rather free. Moreover, medical sublanguage sometimes deviates considerably from the standard grammar rules. E.g. determiners can be easily skipped, which enhances the ditIiculty to distinguish a noun from certain conjugated verbal forms. As a conclusion, we believe that, our T/L performs relatively well and still has potentialities for improvement. Acknowledgements Parts of this work were supported by the MENELAS (AIM #2023) (Zweigenbaum, 1995)  and DOME (MLAP #63-221) projects (S~roussi, 1995)  of the E.U. We also would like to thank Luc Dehaspe for his work on the lexical database (Dehaspe, 1993a).",
    "abstract": "In this paper, we want to describe a tagger/lemmatiser for Dutch medical vocabulary, which consists of a full-form dictionary and a morphological recogniser for unknown vocabulary coupled to an expert system-like disambiguation module. Attention is also paid to the main datastructures: a lexical database and feature bundles implemented as directed acyclic graphs. Some evaluation results are presented as well. The tagger/lemmatiser currently functions as a lexical front-end for a syntactic parser. For pure tagging/lemmatising purposes, a reduced tagset (not suited for sentence analysis) can be used as well.",
    "countries": [
        "Belgium"
    ],
    "languages": [
        "Dutch",
        "English"
    ],
    "numcitedby": "2",
    "year": "1996",
    "month": "",
    "title": "A tagger/lemmatiser for {D}utch medical language"
}