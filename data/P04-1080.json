{
    "article": "This paper presents an unsupervised word sense learning algorithm, which induces senses of target word by grouping its occurrences into a \"natural\" number of clusters based on the similarity of their contexts. For removing noisy words in feature set, feature selection is conducted by optimizing a cluster validation criterion subject to some constraint in an unsupervised manner. Gaussian mixture model and Minimum Description Length criterion are used to estimate cluster structure and cluster number. Experimental results show that our algorithm can find important feature subset, estimate model order (cluster number) and achieve better performance than another algorithm which requires cluster number to be provided. Introduction Sense disambiguation is essential for many language applications such as machine translation, information retrieval, and speech processing (Ide and V\u00e9ronis, 1998) . Almost all of sense disambiguation methods are heavily dependant on manually compiled lexical resources. However these lexical resources often miss domain specific word senses, even many new words are not included inside. Learning word senses from free text will help us dispense of outside knowledge source for defining sense by only discriminating senses of words. Another application of word sense learning is to help enriching or even constructing semantic lexicons (Widdows, 2003) . The solution of word sense learning is closely related to the interpretation of word senses. Different interpretations of word senses result in different solutions to word sense learning. One interpretation strategy is to treat a word sense as a set of synonyms like synset in WordNet. The committee based word sense discovery algorithm (Pantel and Lin, 2002) followed this strategy, which treated senses as clusters of words occurring in similar contexts. Their algorithm initially discovered tight clusters called committees by grouping top n words similar with target word using average-link clustering. Then the target word was assigned to committees if the similarity between them was above a given threshold. Each committee that the target word belonged to was interpreted as one of its senses. There are two difficulties with this committee based sense learning. The first difficulty is about derivation of feature vectors. A feature for target word here consists of a contextual content word and its grammatical relationship with target word. Acquisition of grammatical relationship depends on the output of a syntactic parser. But for some languages, ex. Chinese, the performance of syntactic parsing is still a problem. The second difficulty with this solution is that two parameters are required to be provided, which control the number of committees and the number of senses of target word. Another interpretation strategy is to treat a word sense as a group of similar contexts of target word. The context group discrimination (CGD) algorithm presented in (Sch\u00fctze, 1998) adopted this strategy. Firstly, their algorithm selected important contextual words using \u03c7 2 or local frequency criterion. With the \u03c7 2 based criterion, those contextual words whose occurrence depended on whether the ambiguous word occurred were chosen as features. When using local frequency criterion, their algorithm selected top n most frequent contextual words as features. Then each context of occurrences of target word was represented by second order cooccurrence based context vector. Singular value decomposition (SVD) was conducted to reduce the dimensionality of context vectors. Then the reduced context vectors were grouped into a pre-defined number of clusters whose centroids corresponded to senses of target word. Some observations can be made about their feature selection and clustering procedure. One observation is that their feature selection uses only first order information although the second order cooccurrence data is available. The other observation is about their clustering procedure. Similar with committee based sense discovery algorithm, their clustering procedure also requires the predefinition of cluster number. Their method can capture both coarse-gained and fine-grained sense distinction as the predefined cluster number varies. But from a point of statistical view, there should exist a partitioning of data at which the most reliable, \"natural\" sense clusters appear. In this paper, we follow the second order representation method for contexts of target word, since it is supposed to be less sparse and more robust than first order information (Sch\u00fctze, 1998) . We introduce a cluster validation based unsupervised feature wrapper to remove noises in contextual words, which works by measuring the consistency between cluster structures estimated from disjoint data subsets in selected feature space. It is based on the assumption that if selected feature subset is important and complete, cluster structure estimated from data subset in this feature space should be stable and robust against random sampling. After determination of important contextual words, we use a Gaussian mixture model (GMM) based clustering algorithm (Bouman et al., 1998) to estimate cluster structure and cluster number by minimizing Minimum Description Length (MDL) criterion (Rissanen, 1978) . We construct several subsets from widely used benchmark corpus as test data. Experimental results show that our algorithm (F SGM M ) can find important feature subset, estimate cluster number and achieve better performance compared with CGD algorithm. This paper is organized as follows. In section 2 we will introduce our word sense learning algorithm, which incorporates unsupervised feature selection and model order identification technique. Then we will give out the experimental results of our algorithm and discuss some findings from these results in section 3. Section 4 will be devoted to a brief review of related efforts on word sense discrimination. In section 5 we will conclude our work and suggest some possible improvements. Learning Procedure Feature selection Feature selection for word sense learning is to find important contextual words which help to discriminate senses of target word without using class labels in data set. This problem can be generalized as selecting important feature subset in an unsupervised manner. Many unsupervised feature selection algorithms have been presented, which can be categorized as feature filter (Dash et al., 2002; Talavera, 1999) and feature wrapper (Dy and Brodley, 2000; Law et al., 2002; Mitra et al., 2002; Modha and Spangler, 2003) . In this paper we propose a cluster validation based unsupervised feature subset evaluation method. Cluster validation has been used to solve model order identification problem (Lange et al., 2002; Levine and Domany, 2001) . Table 1 gives out our feature subset evaluation algorithm. If some features in feature subset are noises, the estimated cluster structure on data subset in selected feature space is not stable, which is more likely to be the artifact of random splitting. Then the consistency between cluster structures estimated from disjoint data subsets will be lower. Otherwise the estimated cluster structures should be more consistent. Here we assume that splitting does not eliminate some of the underlying modes in data set. For comparison of different clustering structures, predictors are constructed based on these clustering solutions, then we use these predictors to classify the same data subset. The agreement between class memberships computed by different predictors can be used as the measure of consistency between cluster structures. We use the stability measure (Lange et al., 2002) (given in Table 1 ) to assess the agreement between class memberships. For each occurrence, one strategy is to construct its second order context vector by summing the vectors of contextual words, then let the feature selection procedure start to work on these second order contextual vectors to select features. However, since the sense associated with a word's occurrence is always determined by very few feature words in its contexts, it is always the case that there exist more noisy words than the real features in the contexts. So, simply summing the contextual word's vectors together may result in noise-dominated second order context vectors. To deal with this problem, we extend the feature selection procedure further to the construction of second order context vectors: to select better feature words in contexts to construct better second order context vectors enabling better feature selection. Since the sense associated with a word's occurrence is always determined by some feature words in its contexts, it is reasonable to suppose that the selected features should cover most of occurrences. Formally, let coverage(D, T ) be the coverage rate of the feature set T with respect to a set of contexts D, i.e., the ratio of the number of the occurrences with at least one feature in their local contexts against the total number of occurrences, then we assume that coverage(D, T ) \u2265 \u03c4 . In practice, we set \u03c4 = 0.9. This assumption also helps to avoid the bias toward the selection of fewer features, since with fewer features, there are more occurrences without features in contexts, and their context vectors will be zero valued, which tends to result in more stable cluster structure. Let D be a set of local contexts of occurrences of target word, then D = {d i } N i=1 , where d i represents local context of the i-th occurrence, and N is the total number of this word's occurrences. W is used to denote bag of words occurring in context set D, then W = {w i } M i=1 , where w i denotes a word occurring in D, and M is the total number of different contextual words. Let V denote a M \u00d7 M second-order cooccurrence symmetric matrix. Suppose that the i-th , 1 \u2264 i \u2264 M , row in the second order matrix corresponds to word w i and the j-th , 1 \u2264 j \u2264 M , column corresponds to word w j , then the entry specified by i-th row and j-th column records the number of times that word w i occurs close to w j in corpus. We use v(w i ) to represent the word vector of contextual word w i , which is the i-th row in matrix V . H T is a weight matrix of contextual word subset T , T \u2286 W . Then each entry h i,j represents the weight of word w j in d i , w j \u2208 T , 1 \u2264 i \u2264 N . We use binary term weighting method to derive context vectors: h i,j = 1 if word w j occurs in d i , otherwise zero. Let C T = {c T i } N i=1 be a set of context vectors in feature space T , where c T i is the context vector of the i-th occurrence. c T i is defined as: c T i = j (hi,jv(wj)), wj \u2208 T, 1 \u2264 i \u2264 N. ( 1 ) The feature subset selection in word set W can be formulated as: T = arg max T {criterion(T, H, V, q)}, T \u2286 W, (2) subject to coverage(D, T ) \u2265 \u03c4 , where T is the optimal feature subset, criterion is the cluster validation based evaluation function (the function in Table 1), q is the resampling frequency for estimate of stability, and coverage(D, T ) is the proportion of contexts with occurrences of features in T . This constrained optimization results in a solution which maximizes the criterion and meets the given constraint at the same time. In this paper we use sequential greedy forward floating search (Pudil et al., 1994) in sorted word list based on \u03c7 2 or local frequency criterion. We set l = 1, m = 1, where l is plus step, and m is take-away step. Clustering with order identification After feature selection, we employ a Gaussian mixture modelling algorithm, Cluster (Bouman et al., Intuitively, for a given feature subset T , we iteratively split data set into disjoint halves, and compute the agreement of clustering solutions estimated from these sets using stability measure. The average of stability over q resampling is the estimation of the score of T . Function criterion(T , H, V , q) Input parameter: feature subset T , weight matrix H, second order co-occurrence matrix V , resampling frequency q; (1) ST = 0; (2) For i = 1 to q do (2.1) Randomly split C T into disjoint halves, denoted as C T A and C T B ; (2.2) Estimate GMM parameter and cluster number on C T A using Cluster, and the parameter set is denoted as \u03b8A; The solution \u03b8A can be used to construct a predictor \u03c1A; (2.3) Estimate GMM parameter and cluster number on C T B using Cluster, and the parameter set is denoted as \u03b8B, The solution \u03b8B can be used to construct a predictor \u03c1B; (2.4) Classify C T B using \u03c1A and \u03c1B; The class labels assigned by \u03c1A and \u03c1B are denoted as LA and LB; (2.5) ST + = max\u03c0 1 |C T B | i 1{\u03c0(LA(c T Bi )) = LB(c T Bi )} , where \u03c0 denotes possible permutation relating indices between LA and LB, and c T Bi \u2208 C T B ; (3) ST = 1 q ST ; (4) Return ST ; 1998), to estimate cluster structure and cluster number. Let Y = {y n } N n=1 be a set of M dimensional vectors to be modelled by GMM. Assuming that this model has K subclasses, let \u03c0 k denote the prior probability of subclass k, \u00b5 k denote the M dimensional mean vector for subclass k, R k denote the M \u00d7 M dimensional covariance matrix for subclass k, 1 \u2264 k \u2264 K. The subclass label for pixel y n is represented by x n . MDL criterion is used for GMM parameter estimation and order identification, which is given by: M DL(K, \u03b8) = \u2212 N n=1 log (p yn|xn (yn|\u0398)) + 1 2 L log (N M ), (3) p yn|xn (yn|\u0398) = K k=1 p yn|xn (yn|k, \u03b8)\u03c0 k , ( 4 ) L = K(1 + M + (M + 1)M 2 ) \u2212 1, (5) The log likelihood measures the goodness of fit of a model to data sample, while the second term penalizes complex model. This estimator works by attempting to find a model order with minimum code length to describe the data sample Y and parameter set \u0398. If the cluster number is fixed, the estimation of GMM parameter can be solved using EM algorithm to address this type of incomplete data problem (Dempster et al., 1977) . The initialization of mixture parameter \u03b8 (1) is given by: \u03c0 (1) k = 1 Ko (6) \u00b5 (1) k = yn, where n = (k \u2212 1)(N \u2212 1)/(Ko \u2212 1) + 1 (7) R (1) k = 1 N \u03a3 N n=1 yny t n (8) K o is a given initial subclass number. Then EM algorithm is used to estimate model parameters by minimizing MDL: E-step: re-estimate the expectations based on previous iteration: p xn|yn (k|yn, \u03b8 (i) ) = p yn|xn (yn|k, \u03b8 (i) )\u03c0 k K l=1 (p yn|xn (yn|l, \u03b8 (i) )\u03c0 l ) , (9) M-step: estimate the model parameter \u03b8 (i) to maximize the log-likelihood in MDL: N k = N n=1 p xn|yn (k|yn, \u03b8 (i) ) (10) \u03c0 k = N k N (11) \u00b5 k = 1 N k N n=1 ynp xn|yn (k|yn, \u03b8 (i) ) (12) R k = 1 N k N n=1 (yn \u2212 \u00b5 k )(yn \u2212 \u00b5 k ) t p xn|yn (k|yn, \u03b8 (i) ) (13) p yn|xn (yn|k, \u03b8 (i) ) = 1 (2\u03c0) M/2 |R k | \u22121/2 exp{\u03bb} (14) \u03bb = \u2212 1 2 (yn \u2212 \u00b5 k ) t R \u22121 k (yn \u2212 \u00b5 k ) (15) The EM iteration is terminated when the change of M DL(K, \u03b8) is less than : = 1 100 (1 + M + (M + 1)M 2 )log(N M ) (16) For inferring the cluster number, EM algorithm is applied for each value of K, 1 \u2264 K \u2264 K o , and the value K which minimizes the value of MDL is chosen as the correct cluster number. To make this process more efficient, two cluster pair l and m are selected to minimize the change in MDL criteria when reducing K to K \u2212 1. These two clusters l and m are then merged. The resulting parameter set is chosen as an initial condition for EM iteration with K \u2212 1 subclasses. This operation will avoid a complete minimization with respect to \u03c0, \u00b5, and R for each value of K. 3 Experiments and Evaluation Test data We constructed four datasets from hand-tagged corpus 1 by randomly selecting 500 instances for each ambiguous word -\"hard\", \"interest\", \"line\", and \"serve\". The details of these datasets are given in Table 2 . Our preprocessing included lowering the upper case characters, ignoring all words that contain digits or non alpha-numeric characters, removing words from a stop word list, and filtering out low frequency words which appeared only once in entire set. We did not use stemming procedure. The sense tags were removed when they were used by F SGM M and CGD. In evaluation procedure, these sense tags were used as ground truth classes. A second order co-occurrence matrix for English words was constructed using English version of Xinhua News (Jan. 1998 -Dec. 1999 ). The window size for counting second order co-occurrence was 50 words. Evaluation method for feature selection For evaluation of feature selection, we used mutual information between feature subset and class label set to assess the importance of selected feature subset. Our assessment measure is defined as: M (T ) = 1 |T | w\u2208T l\u2208L p(w, l)log p(w, l) p(w)p(l) , ( 17 ) where T is the feature subset to be evaluated, T \u2286 W , L is class label set, p(w, l) is the joint distribution of two variables w and l, p(w) and p(l) are marginal probabilities. p(w, l) is estimated based on contingency table of contextual word set W and class label set L. Intuitively, if M (T 1 ) > M (T 2 ), T 1 is more important than T 2 since T 1 contains more information about L. Evaluation method for clustering result When assessing the agreement between clustering result and hand-tagged senses (ground truth classes) in benchmark data, we encountered the difficulty that there was no sense tag for each cluster. In (Lange et al., 2002) , they defined a permutation procedure for calculating the agreement between two cluster memberships assigned by different unsupervised learners. In this paper, we applied their method to assign different sense tags to only min(|U |, |C|) clusters by maximizing the accuracy, where |U | is the number of clusters, and |C| is the number of ground truth classes. The underlying assumption here is that each cluster is considered as a class, and for any two clusters, they do not share same class labels. At most |C| clusters are assigned sense tags, since there are only |C| classes in benchmark data. Given the contingency table Q between clusters and ground truth classes, each entry Q i,j gives the number of occurrences which fall into both the ith cluster and the j-th ground truth class. If |U | < |C|, we constructed empty clusters so that |U | = |C|. Let \u2126 represent a one-to-one mapping function from C to U . It means that \u2126(j 1 ) = \u2126(j 2 ) if j 1 = j 2 and vice versa, 1 \u2264 j 1 , j 2 \u2264 |C|. Then \u2126(j) is the index of the cluster associated with the j-th class. Searching a mapping function to maximize the accuracy of U can be formulated as: \u03a9 = arg max \u2126 |C| j=1 Q \u2126(j),j . ( 18 ) Then the accuracy of solution U is given by Accuracy(U ) = j Q \u03a9(j),j i,j Qi,j . ( 19 ) In fact, i,j Q i,j is equal to N , the number of occurrences of target word in test set. Experiments and results For each dataset, we tested following procedures: CGD term :We implemented the context group discrimination algorithm. Top max(|W | \u00d7 20%, 100) words in contextual word list was selected as features using frequency or \u03c7 2 based ranking. Then k-means clustering 2 was performed on context vector matrix using normalized Euclidean distance. K-means clustering was repeated 5 times 2 We used k-means function in statistics toolbox of Matlab. and the partition with best quality was chosen as final result. The number of clusters used by k-means was set to be identical with the number of ground truth classes. We tested CGD term using various word vector weighting methods when deriving context vectors, ex. binary, idf , tf \u2022 idf . CGD SV D : The context vector matrix was derived using same method in CGD term . Then kmeans clustering was conducted on latent semantic space transformed from context vector matrix, using normalized Euclidean distance. Specifically, context vectors were reduced to 100 dimensions using SVD. If the dimension of context vector was less than 100, all of latent semantic vectors with non-zero eigenvalue were used for subsequent clustering. We also tested it using different weighting methods, ex. binary, idf , tf \u2022 idf . F SGM M : We performed cluster validation based feature selection in feature set used by CGD. Then Cluster algorithm was used to group target word's instances using Euclidean distance measure. \u03c4 was set as 0.90 in feature subset search procedure. The random splitting frequency is set as 10 for estimation of the score of feature subset. The initial subclass number was 20 and full covariance matrix was used for parameter estimation of each subclass. For investigating the effect of different context window size on the performance of three procedures, we tested these procedures using various context window sizes: \u00b11, \u00b15, \u00b115, \u00b125, and all of contextual words. The average length of sentences in 4 datasets is 32 words before preprocessing. Performance on each dataset was assessed by equation 19. The scores of feature subsets selected by F SGM M and CGD are listed in Table 3 and  4 . The average accuracy of three procedures with different feature ranking and weighting method is given in Table 5 . Each figure is the average over 5 different context window size and 4 datasets. We give out the detailed results of these three procedures in Figure 1 . Several results should be noted specifically: From Table 3 and 4, we can find that F SGM M achieved better score on mutual information (MI) measure than CGD over 35 out of total 40 cases. This is the evidence that our feature selection procedure can remove noise and retain important features. As it was shown in Table 5 , with both \u03c7 2 and f req based feature ranking, F SGM M algorithm performed better than CGD term and CGD SV D if we used average accuracy to evaluate their performance. Specifically, with \u03c7 2 based feature ranking, F SGM M attained 55.4% average accuracy, while the best average accuracy of CGD term and CGD SV D were 40.9% and 51.3% respectively. With f req based feature ranking, F SGM M achieved 51.2% average accuracy, while the best average accuracy of CGD term and CGD SV D were 45.1% and 50.2%. The automatically estimated cluster numbers by F SGM M over 4 datasets are given in Table 6 . The estimated cluster number was 2 \u223c 4 for \"hard\", 3 \u223c 6 for \"interest\", 3 \u223c 6 for \"line\", and 2 \u223c 4 for \"serve\". It is noted that the estimated cluster number was less than the number of ground truth classes in most cases. There are some reasons for this phenomenon. First, the data is not balanced, which may lead to that some important features cannot be retrieved. For example, the fourth sense of \"serve\", and the sixth sense of \"line\", their corresponding features are not up to the selection criteria. Second, some senses can not be distinguished using only bag-of-words information, and their difference lies in syntactic information held by features. For example, the third sense and the sixth sense of \"interest\" may be distinguished by syntactic relation of feature words, while the bag of feature words occurring in their context are similar. Third, some senses are determined by global topics, rather than local contexts. For example, according to global topics, it may be easier to distinguish the first and the second sense of \"interest\". Figure 2 shows the average accuracy over three procedures in Figure 1 as a function of context window size for 4 datasets. For \"hard\", the performance dropped as window size increased, and the best accuracy(77.0%) was achieved at window size 1. For \"interest\", sense discrimination did not benefit from large window size and the best accuracy(40.1%) was achieved at window size 5. For \"line\", accuracy dropped when increasing window size and the best accuracy(50.2%) was achieved at window size 1. For \"serve\", the performance benefitted from large window size and the best accuracy(46.8%) was achieved at window size 15. In (Leacock et al., 1998) , they used Bayesian approach for sense disambiguation of three ambiguous words, \"hard\", \"line\", and \"serve\", based on cues from topical and local context. They observed that local context was more reliable than topical context as an indicator of senses for this verb and adjective, but slightly less reliable for this noun. Compared with their conclusion, we can find that our result is consistent with it for \"hard\". But there is some differences for verb \"serve\" and noun \"line\". For \"serve\", the possible reason is that we do not use position of local word and part of speech information, which may deteriorate the performance when local context(\u2264 5 words) is used. For \"line\", the reason might come from the feature subset, which is not good enough to provide improvement when context window size is no less than 5. Related Work Besides the two works (Pantel and Lin, 2002; Sch\u00fctze, 1998) , there are other related efforts on word sense discrimination (Dorow and Widdows, 2003; Fukumoto and Suzuki, 1999; Pedersen and Bruce, 1997) . In (Pedersen and Bruce, 1997) , they described an experimental comparison of three clustering algorithms for word sense discrimination. Their feature sets included morphology of target word, part of speech of contextual words, absence or presence of particular contextual words, and collocation of fre- quent words. Then occurrences of target word were grouped into a pre-defined number of clusters. Similar with many other algorithms, their algorithm also required the cluster number to be provided. In (Fukumoto and Suzuki, 1999) , a term weight learning algorithm was proposed for verb sense disambiguation, which can automatically extract nouns co-occurring with verbs and identify the number of senses of an ambiguous verb. The weakness of their method is to assume that nouns co-occurring with verbs are disambiguated in advance and the number of senses of target verb is no less than two. The algorithm in (Dorow and Widdows, 2003) represented target noun word, its neighbors and their relationships using a graph in which each node denoted a noun and two nodes had an edge between them if they co-occurred with more than a given number of times. Then senses of target word were iteratively learned by clustering the local graph of similar words around target word. Their algorithm required a threshold as input, which controlled the number of senses. Conclusion and Future Work Our word sense learning algorithm combined two novel ingredients: feature selection and order identification. Feature selection was formalized as a constrained optimization problem, the output of which was a set of important features to determine word senses. Both cluster structure and cluster number were estimated by minimizing a MDL criterion. Experimental results showed that our algorithm can retrieve important features, estimate cluster number automatically, and achieve better performance in terms of average accuracy than CGD algorithm which required cluster number as input. Our word sense learning algorithm is unsupervised in two folds: no requirement of sense tagged data, and no requirement of predefinition of sense number, which enables the automatic discovery of word senses from free text. In our algorithm, we treat bag of words in local contexts as features. It has been shown that local collocations and morphology of target word play important roles in word sense disambiguation or discrimination (Leacock et al., 1998; Widdows, 2003) . It is necessary to incorporate these more structural information to improve the performance of word sense learning.",
    "funding": {
        "defense": 0.0,
        "corporate": 0.0,
        "research agency": 0.0,
        "foundation": 7.896306882804183e-07,
        "none": 1.0
    },
    "reasoning": "Reasoning: The provided text does not mention any specific funding sources, including defense, corporate, research agencies, foundations, or any other type of financial support for the research conducted or the writing of the article. Without explicit mention of funding, it is not possible to determine the presence of any specific funding source based on the information given.",
    "abstract": "This paper presents an unsupervised word sense learning algorithm, which induces senses of target word by grouping its occurrences into a \"natural\" number of clusters based on the similarity of their contexts. For removing noisy words in feature set, feature selection is conducted by optimizing a cluster validation criterion subject to some constraint in an unsupervised manner. Gaussian mixture model and Minimum Description Length criterion are used to estimate cluster structure and cluster number. Experimental results show that our algorithm can find important feature subset, estimate model order (cluster number) and achieve better performance than another algorithm which requires cluster number to be provided.",
    "countries": [
        "Singapore"
    ],
    "languages": [
        "Chinese",
        "English"
    ],
    "numcitedby": 6,
    "year": 2004,
    "month": "July",
    "title": "Learning Word Sense With Feature Selection and Order Identification Capabilities"
}