{
    "article": "We present experiments in incrementally learning a dependency parser. The parser will be used in the WordsEye Linguistics Tools (WELT) (Ulinski et al., 2014a; Ulinski et al., 2014b) which supports field linguists documenting a language's syntax and semantics. Our goal is to make syntactic annotation faster for field linguists. We have created a new parallel corpus of descriptions of spatial relations and motion events, based on pictures and video clips used by field linguists for elicitation of language from native speaker informants. We collected descriptions for each picture and video from native speakers in English, Spanish, German, and Egyptian Arabic. We compare the performance of MSTParser (McDonald et al., 2006)  and MaltParser (Nivre et al.,  2006)  when trained on small amounts of this data. We find that MaltParser achieves the best performance. We also present the results of experiments using the parser to assist with annotation. We find that even when the parser is trained on a single sentence from the corpus, annotation time significantly decreases. Introduction Although languages have appeared and disappeared throughout history, today languages are facing extinction at an unprecedented pace. Over 40% of the estimated 7,000 languages in the world are at risk of disappearing (Alliance for Linguistic Diversity, 2013) . Efforts to document languages become even more important with the increasing rate of extinction. Bird (2009) emphasizes a particular need to make use of computational linguistics during fieldwork. One way the WordsEye Linguistics Tools will address this issue is by providing field linguists with the means to easily document syntax, something that is largely missing from existing documentation tools. We model our tools for documenting syntax on the tools for documenting morphology in SIL FieldWorks Language Explorer (FLEx) (SIL FieldWorks, 2014) , one of the most widely-used toolkits for field linguists. An important part of FLEx is its \"linguist-friendly\" morphological parser (Black and Simons, 2006) , which is fully integrated into lexicon development and interlinear text analysis. The parser is constructed \"stealthily,\" in the background, and can help a linguist by predicting glosses and morphological analyses for interlinear texts. In the same way, WELT will provide tools for specifying the syntax of sentences in the form of dependency structures and use them to train a parser in the background. The parser will provide predictions for new sentences, and, as these are corrected and approved by the linguist, they are added to the training data and the parser is incrementally improved. This paper makes three contributions. First, we introduce a new corpus of English, Spanish, German, and Egyptian Arabic descriptions of spatial relations and motion events, which we have annotated with dependency structures and other linguistic information. We focused on spatial relations and motion because one of the other functions of WELT will be to assist field linguists with elicitation of spatial language and documentation of spatial and motion semantics. We are making the corpus available to the public. Second, we compare the performance of two existing dependency parsing packages, MSTParser (McDonald et al., 2006) and MaltParser (Nivre et al., 2006) , using incrementally increasing amounts of this training data. Third, we show that using a parser trained on small amounts of data can assist with dependency annotation. In Section 2, we discuss related work. In Section 3, we describe the new publicly available corpus. In Section 4, we describe the parsing experiments and discuss the results. Section 5 discusses initial experiments with nonlexical models. We discuss the annotation experiments and results in Section 6. We conclude in Section 7. Related Work There have been a number of investigations into multilingual dependency parsing. For example, Nivre et al. (2007b) presents detailed results for 11 languages using the arc-eager deterministic parsing algorithm included in MaltParser. However, results are reported only for the parser trained on the full training set and would not generalize to situations where training data is limited. Likewise, the 2006 and 2007 CoNLL shared tasks of multilingual dependency parsing (Buchholz and Marsi, 2006; Nivre et al., 2007a) relied on the existence of ample training data for the languages being investigated. Our work differs in that we are interested in the performance of a dependency parser trained on very little data. Duong et al. (2015) approach dependency parsing for a low-resource language as a domain adaptation task; a treebank in a high-resource language is considered out-of-domain, and a much smaller treebank in a low-resource language is considered in-domain. They jointly train a neural network dependency parser to model the syntax of both the high-resource and the low-resource language. In this paper, we focus on the alternate approach of training directly on small amounts of data. Guo et al. (2015) also investigate inducing dependency parsers for low-resource languages using training data from high-resource languages. They focus on lexical features, which are not directly transferable among languages, and propose the use of distributed feature representations instead of discrete lexical features. Lacroix et al. (2016) describe a method for transferring dependency parsers across languages by projecting annotations across word alignments and learning from the partially annotated data. However, both of these methods rely on large amounts of (unannotated) data in the target language in order to learn the word embeddings and alignments. It is unclear how well these approaches would work in the context of an endangered language where large amounts of unannotated text will not be available. Our work also differs from the above because our goal is to incorporate a parser into tools for field linguists studying endangered languages. Currently, there are limited options for creating a syntactic parser for an endangered language. The ParGram project (ParGram, 2013) aims to produce wide coverage grammars for a variety of languages, but doing so requires knowledge both of the LFG formalism and the XLE development platform (Crouch et al., 2011) . It is unlikely that a field linguist would have the grammar engineering skills necessary to create a grammar in this way. Similarly, the LinGO Grammar Matrix (Bender et al., 2002) is a framework for creating broad-coverage HPSG grammars. The Grammar Matrix facilitates grammar engineering by generating \"starter grammars\" for a language from the answers to a typological questionnaire. Extending a grammar beyond the prototype, however, does require extensive knowledge of HPSG, making this tool more feasibly used by computational linguists than by field linguists. Our work differs from both ParGram and the Grammar Matrix because we do not require the field linguist to master a particular grammar formalism. Instead, linguists will create a syntactic parser simply by labeling individual sentences, a procedure that builds easily upon an existing workflow that already includes annotating sentences with morphological information. Corpus To obtain a corpus that is similar to sentences that field linguists would probably analyze using WELT, we started with two stimulus kits used by field linguists to study spatial and motion language: the Picture Series for Positional Verbs (Ameka et al., 1999) and the Motion Verb Stimulus Kit (Levinson, 2001) . For each picture and video clip, we elicited a one-sentence description from native speakers of English, Spanish, German, and Egyptian Arabic. We chose languages covering a range of linguistic phenomena. For example, German uses morphological case, and Spanish and Arabic both use clitics. In future work, we hope to add languages from other language families, including Chinese and Korean. Our languages are high-resource languages because we needed to have access to linguistically trained native speakers in order to create the gold standard; however, we did not actually use any additional resources for these languages in our experiments, and we believe they can therefore stand in for low-resource languages.  We start out by tokenizing each sentence; for Spanish and Arabic, this step includes splitting off the clitics. We then annotated each token with its lemma, morphological information, part of speech, syntactic head, and dependency label. For consistency across languages, we used part of speech tags, morphological features, and dependency labels from the Universal Dependencies project (Nivre et al., 2016) and attempted to follow the universal guidelines as closely as possible. The total number of sentences, aver-age sentence length, and number of unique words, lemmas, part of speech tags, morphological features, and dependency labels for each language is shown in Table 1 . Note the sentence count varies slightly for each language; this is because for some of the pictures and videos, the native informant gave us several possible descriptions. English and German have very similar average sentence lengths; average lengths in Spanish and Arabic are higher. German had the largest vocabulary; English had the smallest vocabulary. All languages used similar numbers of part of speech tags and dependency labels, except Arabic which used fewer of both. Arabic had the largest number of morphological features, and English the smallest. Some example sentences with dependency labels are shown in Figure 1 . # sents Parsing Experiments and Results We used four methods of training a dependency parser on our data: MSTParser (McDonald et al., 2006) , two configurations of MaltParser (Nivre et al., 2006) , and a baseline. All experiments used 5-fold cross validation. For each of the four training methods, we trained on a subset of the train fold ranging from 1 sentence to 100 sentences. We tested on the full test fold, and then averaged the accuracy across the five folds. Results are shown in Table 2 . Arc accuracy requires selecting the correct head for a token; Lbl accuracy requires selecting the correct dependency label; Both requires that both head and dependency label are correct. The highest accuracy in each row for each metric (Arc, Lbl, Both) is shown in bold. The baseline is determined by assigning the majority dependency label from the train data. Heads are selected using left or right attachment, whichever is more common in the train data. For most of the training sets, we did left attachment and assigned det as the dependency label, and the baseline usually remained constant across all train sizes. For German with train size = 2, one of the folds had a majority of right attachment, which resulted in a slight decrease in baseline accuracy. Likewise, for Arabic with train size = 1 and train size = 2, one fold used right attachment, resulting in a decrease in arc accuracy for those rows. The Arabic label accuracy was much more variable, since nmod was the majority label about half of the time. The Arabic baseline used for each train size and train fold is shown in Table 3 . The first parser we tested was MST-Parser (McDonald et al., 2006; McDonald et al., 2005) , which uses a two-stage approach to parsing: an unlabeled parser and a separate edge labeler. The parser works by finding a maximum spanning tree; the label sequence is then found using Viterbi's algorithm. MSTParser uses a combination of lexical, part of speech, and morphological features; we did not modify the default feature set. We next tested MaltParser (Nivre et al., 2006) , which implements a variety of deterministic parsing algorithms. A dependency structure is derived using features of the current parser state to predict the next action. Parser state is represented by a stack of partially processed tokens and a list of remaining input tokens. We tested two algorithms: Nivre arc-eager and Nivre arc-standard. The arc-eager algorithm adds arcs to the dependency tree as soon as the head and dependent are available; the arc-standard algorithm requires that the dependent already be complete with respect to its own dependents. We used the default feature sets for each of the algorithms. Like MSTParser, the feature set includes a combination of lexical, part of speech, and morphological features; MaltParser also adds dependency features (arcs and labels) from the current parser state. Even with only one training sentence, both MSTParser and MaltParser performed well above the baseline. MaltParser consistently achieved higher accuracy than MSTParser for all languages and train sizes, especially when predicting the dependency labels. The performance of the arc-eager algorithm vs. the arc-standard algorithm seems to vary by language and train size. For English, Spanish, and German, the arc-standard algorithm has higher performance on small training sets, while the arc-eager algorithm becomes superior as more training data is available. Results are more mixed for the Arabic data. Initial Experiments with Nonlexical Models One of the goals of WELT will be to encourage sharing of data and analyses among field linguists. Since stimulus packs (such as the picture series and video series that we used to create our corpus) are commonly reused across many languages, it would be helpful if a parser trained on a fully-annotated version of the data for one language could be used by a field linguist just starting out with another, potentially similar, language. To that end, we performed an initial experiment to see whether a parser trained on one language could be applied successfully to the other languages in our corpus. To test this, we used MaltParser (arc-eager algorithm) to train a parser on English data, using only nonlexical features: part of speech, morphological tags, and dependency labels/arcs. We then applied this model to the other three languages. Results are shown in Table 4 . For this experiment, we used all 163 sentences from the English corpus. Comparing these results to those in Table 2 , we see that, for Spanish, the English nonlexical model performs similarly to MaltParser trained on 5 Spanish sentences. For German, the English nonlexical model performs similarly to MaltParser trained on 5-10 German sentences. For Arabic, the English nonlexical model has lower accuracy than MaltParser trained on a single Arabic sentence. This suggests that a simple nonlexical model such as this one may only be useful for linguists using WELT if an annotated corpus in a related language is available. Arc Annotation Experiments and Results To test whether our parser would help with annotation, we performed annotation experiments using the English data. We timed how long it took an annotator to label a sentence, when the sentence is preprocessed in one of four ways. In the first method, a baseline assigns a flat structure and the dependency label det to all nodes. The other methods use MaltParser (Nivre arc-eager algorithm) trained on 1, 5, or 25 sentences to provide an initial parse for the annotator to correct. Annotators labeled 5 trees for each parsing method, for a total of 20 trees. To ensure each of the four sets of 5 contained sentences with similar syntactic complexity, the sentences were chosen as follows. Each parsing method was assigned 1 sentence of each of 5 lengths: 7 words, 8 words, 9 words, 10-11 words, and 12-14 words. These were randomly selected from among all sentences of the required length. The 20 sentences were then presented to the annotator in random order. To keep the experiment consistent, all annotators labeled the same 20 sentences, in the same order. Three annotators participated in the experiment. The first was the first author of this paper. She is an expert annotator, very familiar with the universal guidelines for dependency annotation and the annotation software. The other two annotators were undergraduate students who participated in a brief training session to familiarize them with the desired analysis and the software. They were given ref-erence materials showing sample trees covering a variety of syntactic phenomena including: auxiliaries, copulas, coordination, secondary predication, and subordinate clauses. They were permitted to refer to this material throughout the annotation task. Before participating in the annotation task, they annotated 10 additional trees for practice. The software used for annotation was Tree Editor (TrEd) (Pajas and \u0160t\u011bp\u00e1nek, 2008) with a simple Java wrapper that handled opening files in TrEd and keeping track of annotation time. A screenshot of the setup is shown in Figure 2 . Upon pressing the Next button, the annotator was shown the next tree in TrEd and the program recorded the start time. When the annotator finished labeling a tree, they saved the file in TrEd and pressed the Done button. The wrapper program closed the current file in TrEd and recorded the end time. A graph showing the average time (across all sentence lengths) it took each annotator to label a tree for each of the four parsing types is shown in Figure 3 . A detailed listing of the time each annotator took for each sentence size is shown in Table 5 . A graph showing the average time (across annotators) for each sentence size is shown in Figure 4(a) . All times are given in seconds. The accuracy of MaltParser (arc-eager) on sentences of different lengths is shown in Figure 4(b) . Results vary slightly across annotators, but it is clear that, even when training on a single sentence, annotation time is improved. Average annotation time decreases from 104.5 seconds for the baseline parse to 79.9 seconds for the parser trained on one sentence. Using the parser trained on 5 sentences, average annotation time decreases again to 69.6 seconds. Using the parser trained 25 sentences, we see a decrease in annotation time to an average of 45 seconds. Statistical significance testing was done with a paired t-test. Significant decreases in annotation time are: between the baseline and 1 training sentence (p = 0.034), between the baseline and 5 training sentences (p = 0.015), between the baseline There are several reasons to account for the fact that training on a single sentence significantly decreases annotation time. MaltParser works by predicting steps in a derivation, so one sentence actually translates into more than one data point. With only one sentence, the parser can learn that a determiner should be the left child of a noun, or that a noun should be the left child of the root predicate. Having these dependencies already attached reduces the work the annotator must do compared to a completely flat structure. In addition, our corpus consists only of descriptions of spatial relations and motion events, so we expect a much more limited range of grammatical constructs than one finds in other treebanks. Sent. size Baseline For very short sentences (length 7), the graph in Figure 4 (b) shows a clear downward trend as the amount of training data increases. For sentences of length 8-9, we do not see improvement with one training sentence, but annotation time begins to decrease substantially when there are 5 training sentences. For longer sentences, the downward trend is less clear. This makes sense, since we can expect to find a wider range of syntactic structures in a longer sentence, and parser performance on these will require that a similar structure was seen in the train set. For sentences length 10-11, there is a substantial drop in annotation time from baseline to 1 training sentence, at which point it seems to plateau. For sentences length 12-14, average annotation time does not decrease until we have 25 training sentences. Parser Student1 Student2 Expert Arc Lbl Both Arc Lbl Both Arc Lbl Both Baseline 0.951 1.000 0.951 1.000 1.000 1.000 1.000 1.000 1.000 Malt-1 0.971 1.000 0.971 1.000 1.000 1.000 1.000 1.000 1.000 Malt-5 0.930 0.950 0.905 0.980 1.000 0.980 0.980 1.000 0.980 Malt-25 0.962 0.982 0.962 1.000 1.000 1.000 1.000 1.000 1.000 Table 6 : Annotation accuracy One concern with using a parser to assist with annotation is whether there will be any effect on overall accuracy. When presented with a mostly-correct parse, will annotators be able to see all the errors and fix them? The accuracy of the annotators for each of the four parsing types is shown in Table 6 . We do see a drop in accuracy for all annotators when training on 5 sentences, especially for Student1. However, this decrease is very slight for both Student2 and Expert. We suspect there may have been several difficult sentences in this set; all annotators made errors on the sentence of length 10, and Student1 had particularly low accuracy (0.625) on the sentence of length 8. Summary and Future Work We have reported results for incrementally training a dependency parser across four languages. Our results show that such a parser can improve on baseline performance even when trained on a single sentence, making our method particularly useful in the documentation of endangered and low-resource languages. We found that MaltParser achieved the highest accuracy overall; the arc-standard algorithm seems preferable for very small training sizes and arc-eager for slightly larger training sizes. We found that using a parser to predict each sentence before annotation did significantly improve annotation time, without a substantial decrease in accuracy. The results of our experiments demonstrate that it is possible to extend FieldWorks' \"stealthy\" approach to learning a morphological parser into the realm of syntax. By providing a way to assign dependency structures to sentences, WELT will allow field linguists to incorporate syntax into language documentation. The incrementally trained parser will reduce their workload by letting them correct errors in a dependency structure rather than starting from scratch. This method of syntactic documentation does not limit the field linguist to a particular syntactic theory. We chose to use the universal labels and analyses in our corpus, but WELT users will have complete control over assignment of heads and choice of dependency labels. The only requirement is that they are consistent across sentences. In future work, we will experiment with other parsers, such as TurboParser (Martins et al., 2010) , Mate (Bohnet, 2010) , and Easy-First (Goldberg and Elhadad, 2010) . Furthermore, we will continue to investigate methods of re-using existing parsers and dependency annotations with new languages (see Section 5); specifically, we will investigate more effective methods of adapting existing parsers to other languages. For example, we will investigate how to combine a non-lexical model with a lexical model obtained from a small number of target language sentences. We will also investigate ways for linguists to directly specify syntactic properties that can be used by the parser, similar to the way FLEx converts morphological properties specified by users into formal rules compatible with the underlying parser. Finally, we plan to try our WELT system in actual fieldwork. Acknowledgements We would like to thank Bob Coyne, Victor Soto, Daniel Bauer, and Heba Elfardy for their help creating and annotating the parallel corpus. We would like to thank the anonymous reviewers for their comments that helped us improve the paper.",
    "abstract": "We present experiments in incrementally learning a dependency parser. The parser will be used in the WordsEye Linguistics Tools (WELT) (Ulinski et al., 2014a; Ulinski et al., 2014b) which supports field linguists documenting a language's syntax and semantics. Our goal is to make syntactic annotation faster for field linguists. We have created a new parallel corpus of descriptions of spatial relations and motion events, based on pictures and video clips used by field linguists for elicitation of language from native speaker informants. We collected descriptions for each picture and video from native speakers in English, Spanish, German, and Egyptian Arabic. We compare the performance of MSTParser (McDonald et al., 2006)  and MaltParser (Nivre et al.,  2006)  when trained on small amounts of this data. We find that MaltParser achieves the best performance. We also present the results of experiments using the parser to assist with annotation. We find that even when the parser is trained on a single sentence from the corpus, annotation time significantly decreases.",
    "countries": [
        "United States"
    ],
    "languages": [
        "English",
        "Spanish",
        "Arabic",
        "German"
    ],
    "numcitedby": "5",
    "year": "2016",
    "month": "December",
    "title": "Incrementally Learning a Dependency Parser to Support Language Documentation in Field Linguistics"
}