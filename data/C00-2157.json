{
    "article": "This paper introduces a description language for syntactically annotated corpora which allows for encoding both the syntactic annotation to a corpus and the queries to a syntactically annotated corpus. In terms of descriptive adequacy and computational e ciency, the description language is a compromise between script-like corpus query languages and high-level, typed uni cation-based grammar formalisms. Introduction Syntactically annotated corpora like the Penn Treebank Marcus et al., 1993 , the NeGra corpus Skut et al., 1998 or the statistically disambiguated parses in Beil et al., 1999 provide a wealth of information, which can only be exploited with an adequate query language. For example, one might w ant to retrieve verbs with their sentential complements, or speci c fronting or extraposition phenomena. So far, queries to a treebank have been formulated in scripting languages like tgrep, Perl or others. Recently, some powerful query languages have been developed: an example of a highlevel, constraint-based language is described in Duchier and Niehren, 1999. Bird et al., 2000 propose a query language for the general concept of annotation graphs. A graphical query notation for trees is under development i n t h e ICE project UCL, 2000. In the current paper, we present a proposal for a graph description language which is meant to ful ll two con icting requirements: On the one hand, the language should be close to traditional linguistic de-scriptions languages, i.e. to grammar formalisms, as a basis for modular, understandable code, even for complex corpus queries. On the other hand, the language should not preclude e cient query evaluation. Our answer is to pro t from the research on typed, feature-based constraintbased grammar formalisms e.g. Carpenter, 1992 , Copestake, 1999 , D rre and Dorna, 1993 , D rre et al., 1996 , Emele and Zajac, 1990 , H hfeld and Smolka, 1988 , and to pick those ingredients which are known to be computationally 'tractable' in some sense. 2 The Query Language The right kind of graphs If syntactic analysis is meant to provide for a basis of semantic interpretation, the predicate-argument structure of a sentence must berecoverable from its syntactic analysis. Nonlocal dependencies like topicalization, right extraposition, tell us that trees are not expressive enough. We need a way to connect an extraposed constituent with its syntactic resp. semantic head. This can be done either by i n troducing empty leaf nodes plus a means for node coreference like in the Penn Treebank or by admitting crossing edges. In our project, the latter solution has been chosen Skut et al., 1997, partly for the reason that it is simpler to annotate no decision on the right place of a trace has to be taken. We call this extension of trees with crossing edges syntax graphs. An example is shown in Fig. 1 . In order to discuss the details of the language, we will make reference to the simpler syntax graph in Fig. 2 . Syntactic phrases and lexical entries usually come with a bundle of morphosyntactic information like part-of-speech, case, gender, and number. In computational linguistics, feature structures are used for that purpose. Since we need only a way to represent morphosyntactic information not syntactic or semantic structures themselves, we restrict ourselves to feature records, i.e. at feature structures whose feature values are constants. We admit Boolean formulas, for the feature values, as well as for the featurevalue pairs themselves. For example, all proper nouns \"NE\" and nouns \"NN\" can be retrieved by pos= \"NE\" | \"NN\" As usual, structural identity can be expressed by the use of logical variables. However, variables must not occur in the scope of negation, since this would introduce the computational overhead of inequality constraints. The values of a feature with 'in nite' range like word or lemma can be referred to by regular expressions, e.g. the nouns \"NN\" with initial M can be retrieved by word = ^M.* & pos=\"NN\" The -symbols mark a regular expression. Node relations Since graphs are two-dimensional objects, we need one basic node relation for each dimension, direct precedence . for the horizontal dimension and direct dominance for the vertical dimension the precedence of two inner nodes is de ned as the precedence of their leftmost terminal successors Lezius and K nig, 2000a Some convenient derived node relations are the following: * dominance minimum path length 1 n dominance in n steps n 0 m,n dominance between m and n steps 0 m n @l leftmost terminal successor 'left corner' @r rightmost terminal successor 'right corner' .* precedence minimum number of intervals: 1 .n precedence with n intervals n 0 .m,n precedence between m and n intervals 0 m n $ siblings $.* siblings with precedence Graph descriptions We admit restricted Boolean expressions over node relations, i.e. conjunction and disjunction, but no negation. For example, the queries n1: word=\"ein\" & pos=\"ART\" & n2: word=\"Mann\" & pos=\"NN\" & n1 . n2 and n1: cat=\"NP\" \"NK\" pos=\"ART\" & n1 \"NK\" word=\"Mann\" are both satis ed by the NP-constituent in Fig. 2 . n1, n2 are variables. The symbol\"NK\" is an edge label. Edges can belabelled in order to indicate the syntactic relation between two nodes. Types For the purpose of conceptual clarity, the user can de ne type hierarchies. 'Subtypes' may also be constants e.g. like in the case of part-of-speech symbols. Here is an excerpt from the type hierarchy for the STTS tagset: nominal := noun,properNoun,pronoun. noun := \"NN\". properNoun := \"NE\". pronoun := \"PPPER\",\"PPOS\",\"PRELS\", ... . This hierarchy can be used to formulate queries in a more concise manner: pos=nominal .* pos=\"VVFIN\" 2.6 Templates E.g. for a concrete lexicon acquisition task, one might have to de ne a collection of interdependent, complex queries. In order to keep the resulting code tractable and reusable, queries can beorganised into templates or macros. Templates can take logical variables as arguments and may refer to other templates, as long as there is no embedded self-reference. Logically, templates are o -line-compilable Horn formula. Here are some examples for template definitions. A simple notion of VerbPhrase is being de ned with reference to a notion of Actually, the query language is rather a description language which can be used also for encoding the syntactic annotation of a corpus. In the current project, a syntactically disambiguated corpus is being produced. This means, that, for corpus annotation, only a sublanguage of the proposed language is admissible with the following restrictions: The graph constraints may only include the basic node relations , .. The only logical connective on all structural levels is the conjunction operator &. Regular expressions are not admitted. Types and templates are not admitted. The automatically generated corpus annotation code generated from the output of the graphical annotation interface for Fig. 2 looks as follows, with some additional markup for ease of processing. sentence id=\"1\" root=\"5\" \"1\": word=\"ein\" & pos=\"ART\" & \"2\": word=\"Mann\" & pos=\"NN\" & \"3\": word=\"l uft\" & pos=\"VVFIN\" \"4\": cat=\"NP\" & \"5\": cat=\"S\" & \"1\" . \"2\" & \"2\" . \"3\" & \"5\" \"SB\" \"4\" & \"5\" \"HD\" \"3\" & \"4\" \"NK\" \"1\" & \"4\" \"NK\" \"2\" An XML representation When designing the architecture of our system, we had to deal with the problem of various di erent formats for the representation of syntactically annotated corpora: Penn Treebank, NeGra Skut et al., 1997, Tipster, Susanne, several formats for chunked texts and the proposed description language. Thus, we h a ve developed an XML based format which guarantees maximum portability Mengel and Lezius, 2000. An online conversion tool NeGra, Penn Treebank ! XML is available on our project homepage. Formal Semantics Compared to most other corpus description and corpus query languages, our graph description language comes with a formal and a clear-cut operational semantics, which has been described in a technical report Lezius and K nig, 2000a . The semantics has been compiled from the corresponding parts of formal semantics of the typed, uni cationbased grammar formalisms and constraintbased logic programming languages which have been cited above. Due to the fact that the corpus and the query are represented in the same description language, one can de ne a consequence relation between the corpus and the query. Essentially, the annotated corpus corresponds to a Prolog database, and the corpus query to a Prolog query. A query result is a syntax graph from the corpus. Implementation One might argue that commercial and research implementations for structurally annotated texts are already available, i.e. XML-retrieval systems, c.f. LTG, 1999. However, we intend to solve problems which are speci c to natural language descriptions: non-embedding non-tree-like structural annotations -crossing edges, and, on the long-term, retrieval of coindexed substructures co-reference phenomena. A domain-speci c implementation of the search engine gives the basis for optimizations wrt. linguistic applications Lezius and K nig, 2000b. Before queries can beevaluated on a new corpus encoded in the NeGra, Penn Treebank or XML format, a preprocessing tool has to convert it into the format of the description language. Subsequently, the corpus is indexed in order to guarantee e cient lookups during the query evaluation. The query processor to date is capable of evaluating basic queries cf. Sect. 2.2-2.4. To support all popular platforms, the tool is implemented in Java. There is a servlet available on the project web page which illustrates the current stage of the implementation. Conclusion Syntactic corpus annotations, complex corpus queries and computational grammars have one common point: they are descriptions of natural language grammars. Our claim is that corpus query languages should be close to traditional grammar formalisms in order to make complicated information extraction tasks easier to encode. The level of processing e ciency of scripting languages can still be reached if one restricts oneself to 'o -line' compilable language elements only. ",
    "abstract": "This paper introduces a description language for syntactically annotated corpora which allows for encoding both the syntactic annotation to a corpus and the queries to a syntactically annotated corpus. In terms of descriptive adequacy and computational e ciency, the description language is a compromise between script-like corpus query languages and high-level, typed uni cation-based grammar formalisms.",
    "countries": [
        "Germany"
    ],
    "languages": [],
    "numcitedby": "37",
    "year": "2000",
    "month": "",
    "title": "A Description Language for Syntactically Annotated Corpora"
}