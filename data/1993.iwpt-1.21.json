{
    "article": "Head-Corner (HC) parsing has come up in computational linguistics a few years ago, motivated by linguistic arguments. This idea is a heuristic, rather than a fail-safe principle, hence it is relevant indeed to consider the worst-case behaviour of the HC parser. We define a novel predictive head-corner chart parser of cubic time complexity. We start with a left-corner (LC) chart parser, which is easier to understand. Subsequently, the LC chart parser is generalized to an HC chart parser. It is briefly sketched how the parser can be enhanced with feature structures. Head-driven or head-corner parsing has been addressed in several papers. Introduction \"Our Latin teachers were apparently right\" , Mar tin Kay remarks in (Kay, 1989). \"You should start [parsing] with the main verb. This will tell you what kinds of subjects and objects to look for and what cases they will be in. When you come to look for these, you should also start by trying to find the main word, because this will tell you most about what else to look for\". A chart parser is characterized by a domain of items, that can be added to the chart by the parser and some operators that specify how com binations of items on the chart can lead to recog-nition of other items . Furthermore, there is an initial chart and initial agenda. At each step some current item is selected from the agenda, and moved to the chart. If the chart contains items that, in combination with the current item, allow recognition of other items not yet present on the chart or on the agenda, these are added to the agenda. This continues until the agenda is empty. A context-free chart parser does not really construct parse trees . But a representation of all parse trees can easily be obtained when items in the chart are annotated with pointers to the items that caused their recognition. Various forms of sophistication can be added by structuring the chart or by providing a strategy to select the next item from the agenda . The Earley chart parser uses two types of items: [A --+ a.,B, i, j]: Earley items (for A--+ a,B E P and O \ufffd i \ufffd j \ufffd n), [ a, j -1, j] terminal items representing aj (1 \ufffd j \ufffd n) . The initial chart contains the terminal items rep resenting the string. When the j-th word belongs to different categories, say a and b, then both items [a,j-1,j] and [b, j-l,j] are present in the initial chart . An Earley item [A --+ a./3, i, j] is to be The initial agenda contains items [S --+ \u2022'Y, 0, OJ for all productions S --+ 'Y E P. The following operators are defined for the Ear ley chart parser: predict: for B --+ 'Y E P: Left-corner chart parsing We will now specify a Left-Corner (LC) parser as a chart parser, that is to be generalized to SIKKEL -OP DEN AKKER [A --+ a.B,B, i,j] I-[B --+ .,y, j, j]; scan:  7 [NP-+. *det *n , 3, 3] predict( 6 ) 8 [NP -+ *det. *n , 3, 4] scan( 7 ) 9 [NP -+ *det *n., 3, 5] scan( 8 ) 10 [VP-+ *v NP ., 2, 5]  complete(6,9) 11 [S -+ NP VP., 0, 5] complete( 4,10) [A --+ a.b,B, i,j] , The example grammar is 1 [NP \ufffd *det. *n, 0, 1] le( i) (0) 2 [NP \ufffd *det *n ., 0, 2] scan (1) 3 [S \ufffd NP. VP ,0,2] le( ii) (0,2) 4 [2, VP] predict (3) 5 [VP \ufffd *v .NP, 2, 3] lc( i) (4) 6 [ 3, NP] predict (5) 7 [NP \ufffd *det. *n, 3, 4] le( i ) (6) 8 [ [i, A], [a, i, i +l] I-[B \ufffd a./3, i , i +l], ,items: lc( ii): for A >1 B, B \ufffd C/3 E P: [i, A] predict items, [i, A], [C \ufffd ,. , i,j] 1--[B \ufffd C./3, i, j ], [B \ufffd a./3, i ,j]: Earley items (but only those lc(iii): for A >1 B, B \ufffd \u20ac E P: with a f. \u20ac or a = /3 = \u20ac ), [a,j-1,j] terminal items as usual. [i, A ] I-[B \ufffd ., i , i] ; The initial chart contains the terminal items rep-predict: our example sentence. For a proof of the correct ness of the algorithm we refer to a more extensive technical report (Sikkel and op den Akker, 1992). r-[B --+ o:a.{3, i ,j+l]; 4 Head-Corner Chart Parscomplete: [B --+ o:.C/3, i,j ] , [C --+ ,.,j, k] \ufffd [B --+ o:C.{3, i, k] . Thus we have characterized the LC chart parser by defining the initial chart and agenda and the operators. The reader may verify that these op erators produce the chart shown in Figure 4 for ing We introduce the head-corner chart parser by analogy to the left-corner parser. While the LC parser makes a left-to-right walk through a parse tree, the HC parser makes a head-first walk through a parse tree 2 , as shown in Figure 5 . With this very simple idea in mind we can fix the formal details. s . . ,6 7 // \u2022- .. \ufffd // 10 \u2022\u2022 \u2022 \u2022 \u2022 . /p \ufffd NP f\u2022 \ufffdN P i \u2022 \u2022 \u2022 \u2022 \\ \u2022 8 / 1 i . . . . \u2022 \u2022 \u2022 \u2022 \u2022 \\ \u2022 3 .. . 9 \u2022. . : .. \u2022 4 \u2022 . . . . . . . . . . . . *d *n *v *d *n Figure 5 : The head-corner tree walk A context-free head grammar is a 5-tuple (N, E, P, S, r), with r a function that assigns a natural number to each production in P. Let IPI denote the length of the right-hand side of p. Then r is constrained to r(p) = 0 for IPI = 0 and 1 \ufffd r(p) \ufffd IPI for IPI > 0. The head of a pro duction p is the r(p)-t h symbol of the right-hand side; an \u00a3-production has head c. In a practical notation, we give a head gram mar as a set of productions with the heads un derlined. The head grammar H for our running example is given by S--+ NP VP , VP --+ *v NP , NP --+ *det *n. The relation > h is defined by A > h U if there is a production p = A --+ o: E P with U the head of p; the transitive and reflexive closure of > h is denoted >ii-In the running example it holds that S > h *v . For the head-corner parser we distin guish the following kinds of items: [l, r, A] predict items [B --+ o:.{3.,, i, j): double dotted (DD) items, [ a, j -1, j) terminal i terns. A predict item [l, r, A] will be recognized if a con stituent A is being looked for that must be lo cated somewhere between l and r. Such a con stituent should either stretch from l to some j (if we are working to the right from the head of some production) or from r downto some j (if we are A>;: B, B--+ a .fry E P, l < j \ufffd r: [l, r, A] , [b, j-1, j) r [B --+ a.b.,, j-1, j working to the .l eft from the head of some pro duction), with l \ufffd j \ufffd r. A double dotted item [B --+ a.,B.,, i, j) is recognized if there is a goal [l, r, A] such that with A>;:B, l \ufffd i, j \ufffd r and ,B =>* ai+1 .. , aj has been established. In (Satta and Stock, 1992) it is remarked that, similar to the \"valid prefix property\" of the Earley and LC parser, our predictive head-corner parser satisfies a \"valid infix property\". As it is hard enough to get an understanding of what is going on, we will not concentrate on the mathematical details. The initial chart contains the terminal items that represent the string as usual; the agenda is initialized with .a single predict item [0, n, S]. If the string is correct, we will be able to derive an item [S --+ .,., 0, n] . The operators, are defined as follows. We distinguish three different head corner (he) operators for heads b, C and \u00a3. hc(i): for Head-corner analysis of the example sentence il lustrates how the chart parser may jump up and down the sentence. The completed HC chart is shown in Figure 6 . Each item corresponds to a step in the head-corner tree walk for the parse of our example sentence, cf. Figure 5 . recognized by initial 1 (VP--+. *v .NP, 2, 3) he( i) (0) 5 (3 ,5,NP] predict(!) 3 [NP --+ *det. *n., 4, 5] he( i) (2) 4 [NP --+ \u2022 *det *n., 3, 5] scan (3) 5 [VP--+. *v NP., 2, 5] complete (1,4) 6 [S --+ NP. VP., 2, 5] he( ii) (0,5) 7 [0, 2, NP) predict(6) 8 [NP --+ *det. *n., 1, 2) he( i) (7) 9 [NP --+ \u2022 *det *n., 0, 2] scan (8) 10 [S --+ .NP VP. , 0, 5] complete (6,9) Figure 6 : The HC chart Complexity analysis and fu rther optimizations current item is more than linear. The most prob lematic operation is complete ( with scan as a special sub-case) with 5 place markers involved. The number of items that can be recognized now is O(n 2 ), but the work involved for an arbitrary the sake of brevity we only state the results. For an optimal worst-case complexity we have to make a small change to the implementation and represent fully completed DD items [A --+ .(3., i, j] by CYK items [A, i, j] . An Earley chart parserusing the same optimization -has a time com plexity O(IGln 3 ), with IGI the number of produc tions multiplied by the average length of a pro duction. Without prediction the HC parser has a time complexity of O(IGlrn 3 ), with r the size of the longest production. This extra factor r is because we use double dotted, rather than sin gle dotted items. Prediction usually speeds up a parser but may slow it down in pathological cases. In the worst case it adds a factor INI, the number of nonterminal symbols, yielding a time complexity of O(INIIGlrn 3 ) . The space complex ity is O(IGlrn 2 ) for the chart and agenda, and O(INl 2 x INll\ufffdI) for storage of the >ii relation in tabular form. The obtained worst-case complexity is opti mal, in the sense that all complexity factors are properly accounted for (i.e., the factors r and INI in addition to an optimal Earley parser are ev idently necessary). Ye t, on a practical level, a large percentage of computing time can be saved by adding some more sophistication to the algo rithm. We will not formally introduce an opti mized algorithm, as the definitions grow rather complicated, but simply state some principles that can be implemented straightforwardly. \u2022 When an item [A --+ a.B.;, i,j] Related approaches The left-corner chart parser of Section 3, although rather different in style of presentation, is closely related to the predictive chart parsing framework introduced in (Kay, 1980). First ideas of general ized LC parsing, although not under that name; can be traced back to (Pratt, 1975). A left-corner style parser in Prolog was presented in_ (Mat sumoto et al, 1983). This BUP parser is iimited to acyclic, e-free grammars. In (Nederhof, 1992)a generalized LC parser is defined by analogy to Tomita's generalized LR parser (Tomita, 1985). Nederhof's parser is more efficient than our LC chart parser, but it doesn't generalize to HC. The head-driven parser in (Satta and Stock, 1989) is similar to ours, but does not make use SIKKEL -OP DEN AKKER of prediction. The use of a head-driven approach to enhance the efficiency of prediction was first suggested in (Kay, 1989). The context-free \ufffdead grammars in Section 4 should not be confused with Head Grammars as introduced in (Pollard, 1984) . that handle dis .: continuous constituents by means of \"head wrap ping\". (Van Noord, 1991) Conclusions work and future We have given a formal treatment of a predictive head-corner parser. The item-based description of (predictive) chart parsers is a useful formal ism for such a formal treatment. This is exem plified by the fact that we cover grammars with \u20ac-productions with hardly any additional effort, while these are usually left out for the sake of simplicity. Enhancing a head-corner chart parser with prediction is new. It cannot be stated in general that the head corner approach is more efficient than the (gener alized) left-corner approach or other parsers. It is indeed a heuristic, that can be expected to be ef fe ctive when most of the feature information of a constituent is located in the head. Hence, because it is a method based on a heuristic, rather than a fail-safe principle, it is important to consider what happens if the heuristic doesn't pay off. There fore we have made some effort to make sure that the worst-case behaviour conforms to the usual complexity bounds for context-free parsing algo rithms: O(n 3 ) time and 9(n 2 ) space. We have indicated how the algorithm can be extended with fe ature information. An im plementation of a head-corner chart parser for PATR-like unification grammars is (nearly) fin ished. It is currently being tested on a natu ral language grammar developed for a knowledge representation research project at our institute. We intend to make an extensive comparison of the efficiency of the head-corner and left-corner parser. Acknowledgements We are grateful to Anton Nijholt, Mark-Jan Ne derhof, Gertjan van Noord and Giorgio Satta for constructive comments on earlier drafts and Mar griet Verlinden for implementing the HC chart parser for PATR. Complete can be reduced to 3 place markers with some special extra bookkeeping. As a conse q uence, the number of place markers involved in scan and predict will drop from 4 to 3. We keep a goal table, in the form of a CYK table, for storage of the predicted goals. Whenever an item [l, r, A] is predicted, we write an A in goal table entry ( l, r). Furthermore, we write an A in every en try ( i, j) with l ::; i ::; j ::; r in which no A is present. A typical case is presented in Figure 7 . A goal [O, 5, A] is to be added, the entry (0,5) is indicated * in Figure 7 (a) . One adds A symbols column by column, stopping each time when an A is found. In Figure 7 (b) a * indicates the entries where an A is written and + indicates the entries that were inspected but already contained an A. During the course of the algorithm only O(n 2 ) A symbols are written, per A only 0( n) entries are inspected that already did contain A.",
    "abstract": "Head-Corner (HC) parsing has come up in computational linguistics a few years ago, motivated by linguistic arguments. This idea is a heuristic, rather than a fail-safe principle, hence it is relevant indeed to consider the worst-case behaviour of the HC parser. We define a novel predictive head-corner chart parser of cubic time complexity. We start with a left-corner (LC) chart parser, which is easier to understand. Subsequently, the LC chart parser is generalized to an HC chart parser. It is briefly sketched how the parser can be enhanced with feature structures. Head-driven or head-corner parsing has been addressed in several papers.",
    "countries": [
        "Netherlands"
    ],
    "languages": [
        "Latin"
    ],
    "numcitedby": "28",
    "year": "1993",
    "month": "August 10-13",
    "title": "Predictive Head-Corner Chart Parsing"
}