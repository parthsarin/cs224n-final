{
    "article": "This paper describes Apertium: a free/open-source machine translation platform (engine, toolbox and data), its history, its philosophy of design, its technology, the community of developers, the research and business based on it, and its prospects and challenges, now that it is five years old. Introduction This paper describes the Apertium free/opensource (FOS) machine translation (MT) platform: its history (Sec. 2), the philosophy behind its design (Sec. 3) its technology (Sec. 4), its community of users and developers (Sec. 5), research and business based on it (Sections 6 and 7), and its prospects and limitations (9). History 2.1 The inception One could say that the history of Apertium starts in April 2004, when Mikel L. Forcada sends around an e-mail message to a number of human language technology research groups in Spain on the possibility of lobbying the government agencies involved so that they fund the effort to build an FOS MT system for the languages of Spain. 1  Later on, in July 2004, the Spanish Ministry of Industry, Tourism and Commerce launched a call to fund consortia to develop linguistic technology for the languages of Spain. Some of the groups that answered yes to the above e-mail formed a consortium 2 and got funding for the development of two different MT systems: Matxin, 3 for Spanish (es) to Basque (eu), and Apertium, to translate between es and Catalan (ca) and es and Galician (gl). The MT engine and tools in Apertium were not built from scratch, but are rather the result of a complete FOS rewriting and extension of two existing MT systems developed by the Transducens group at the Universitat d'Alacant, namely inter-NOSTRUM 4 (Canals-Marote et al., 2001 ) (esca) and Traductor Universia 5 (Garrido-Alenda et al., 2004 ) (es-Portuguese (pt)),to provide a platform to build MT systems for related languages. Linguistic data for the initial language pairs were built combining in-house resources with FOS data such as the ones present in Freeling 6 (Carreras et al., 2004) . cian, Catalan (also called Valencian), and Occitan (Aranese). Other languages such as Asturian or Aragonese have a more limited legal status. 2 This consortium, which involved 4 universities (Universitat d'Alacant, Universitat Polit\u00e8cnica de Catalunya, Universidade de Vigo and Euskal Herriko Unibertsitatea) 2 companies (Eleka Ingeniaritza Linguistikoa, imaxin|software) and 1 Foundation (Elhuyar) adopted the name Opentrad during the project. Currently this name is used as a trademark by some of the companies in the original consortium to commercialize machine translation services based on Apertium (http://www.opentrad.com). Technology The initial shallow-transfer strategy used in the Apertium platform, briefly described in detail in sec. 4, was initially designed to treat pairs of closely related languages. The platform has been extended since version 2 to treat less closely related pairs, such as es-French (fr) (by enhancing the structural transfer); the results are far from satisfactory for some applications but we believe the possibilities offered by Apertium have not been thoroughly tested yet. To be able to deal with any written language in the world, Apertium was made Unicode-compliant as of version 3. A conservative design? However, most of the design of Apertium is very conservative in many respects: et al., 1978) , \"simple parts that are connected by clean interfaces\" (Raymond, 2004) and talk text to each other through pipes. Such a structure is very amenable to multiprocessing and takes full advantage of new hardware trends. It also facilitates diagnosis and insertion of new modules (e.g. constraint grammars (Karlsson, 1995) in the Welsh-English pair (Tyers and Donnelly, 2009) ), and even build frankensteins, 7 if need arise. 7 Systems made of Apertium modules and modules from Development of language pairs as a driving force for innovation Aside from the original two language pairs (esca and es-gl), a number of pairs have been built outside the initial consortium. These have been developed: with academia, as research projects by students (e.g. fr-ca, pt-ca and Welsh (cy)en) and research groups (en-ca, en-es, es-Romanian (ro)), by companies involved in development of Apertium (e.g. fr-es, pt-gl, Occitan (oc)-ca) and in within the Apertium community (en-Esperanto (eo), Norwegian Nynorsk (nn)-Norwegian Bokm\u00e5l (nb), Swedish (sv)-Danish (da), Breton (br)-fr). Figure 1 shows the development of the number of language pairs by year, from 2005 when the first pairs were published to the present day. Language-pair development has also motivated changes in the platform: three-level transfer was introduced to deal with en-ca, and multi-level transfer for eo-en. The integration of the VISL constraint grammar system 8 was largely motivated by FOS grammars for nb and the S\u00e1mi languages and their utility to deal with the morphology of Celtic languages. The Apertium philosophy Build on top of word-for-word translation: One of the basic design principles of Apertium was inherited from the previous works: to generate translations which are, on one hand, reasonably intelligible in their raw form and on the other hand, easy to correct (postedit) into publishable translations, between related languages , one can just augment word for word translation with robust lexical processing (including multi-word units), lexical categorial disambiguation (part-of-speech tagging), and local structural processing based on simple and well-formulated rules for frequent structural transformations (reordering, agreement). It should also be possible to generalize the main concepts of this model to deal with harder, not-sorelated language pairs, so that linguistic complexity is kept as low as possible. other systems. Clear and effective separation of translation engine and language-pair data: From the very beginning, the objective was that it should be possible to build a complete system for a specific language pair just by creating linguistic data specified in a declarative way. This information, i.e., language-independent rules to treat different document formats, the specification of the part-ofspeech tagger, morphological and bilingual dictionaries, dictionaries of orthographical transformation rules, and structural transfer rules, should be provided in an interoperable format. This naturally led us to choose formats based on XML. Therefore, it was thought to be crucial to have a single generic (language-independent) engine reading language-pair data (usually referred to as \"separation of algorithms and data\"). The human-editable version of the languagepair data in XML should be preprocessed so that the system is fast enough and compact; for example, lexical transformations are performed by minimized FSTs. Reasons for the use of copyleft: The word copyleft, a play on the word copyright, when added to a free licence, means that modifications have to be distributed with the same (copylefted) licence. When it was time to choose a FOS licence for Apertium, we immediately settled for copylefted licences, because copyleft secures the existence of a commons of MT technology. Now all of Apertium is licenced under the GNU General Public Licence or GPL. 9 Copyleft protects the Apertium commons from private aappropriation (incorporation into non-free software), ensures that all new developments would be also FOS, and enables programmers to build a shared body of MT resources while allowing for commercial uses (see sec. 7). Technology A very brief description of Apertium will be given here. Turn to existing descriptions (such as (Armentano-Oller et al., 2006 )) for details. The Apertium platform provides: (a) A FOS modular shallow-transfer MT engine with text format management, finite-state lexical processing, statistical lexical disambiguation, and shallow structural transfer based on finite-state pattern matching; (b) FOS linguistic data in wellspecified XML formats for a wide variety of language pairs; and (c) FOS tools such as compilers to turn linguistic data into a fast and compact form used by the engine and software to learn disambiguation or structural transfer rules. The Apertium engine is a pipeline or assembly line consisting of the following stages or modules: \u2022 A deformatter which encapsulates the format information in the input document. \u2022 A morphological analyser which segments the text in surface forms (\"words\") and delivers, for each surface form, one or more lexical forms consisting of lemma, lexical category and morphological inflection information. It reads a FST generated from a source-language (SL) morphological dictionary in XML. \u2022 A part-of-speech tagger which chooses, using a first-order hidden Markov model (HMM), the most likely lexical form corresponding to an ambiguous surface form, as trained using a corpus and a tagger definition file in XML. \u2022 A lexical transfer module which reads each SL lexical form and delivers the corresponding target-language (TL) lexical form by looking it up in a bilingual dictionary in XML using a FST generated from it. \u2022 A structural transfer, generally consisting of three sub-modules (some language pairs use only one module and some others more than three): -A chunker which, after invoking lexical transfer, performs local syntactic operations and segments the sequence of lexical units into chunks. A chunk is defined as a fixed-length sequence of lexical categories that corresponds to some syntactic feature such as a noun phrase or a prepositional phrase. -An interchunk module which performs more global operations with the chunks and between them. -A postchunk module which performs finishing operations on each chunk. Each of the modules reads rules from files written in XML. \u2022 A morphological generator which delivers a TL surface form for each TL lexical form, by suitably inflecting it. It reads a FST generated from a TL morphological dictionary in XML. \u2022 A post-generator which performs orthographic operations such as contractions (e.g. es del = de + el) and apostrophations (e.g. ca l'institut = el + institut), using a FST generated from a rule file written in XML. \u2022 A reformatter which de-encapsulates any format information. The Apertium community In addition to the original (publically-funded) developers, an active community of more than 100 developers, 10 most of them from outside the original group, has formed around the platform. Code, especially language-pair data, is updated very frequently: hundreds of monthly commits are made to the project's software configuration management (SCM) system. A collectively-maintained wiki 11 shows the current development and gives tips to build new language pairs or code. Developers and users gather and interact in the #apertium IRC channel (at irc.freenode.net). The strength of the Apertium community may also be measured by the large number of externally developed tools and code that add functionalities to Apertium, which include: a graphical user interface apertium-tolk and the related diagnostic tools apertium-view and apertium-viewer; plugins for OpenOffice.org 12 , Wordpress 13 , the Virtaal translation software, 14 and the Jubler film subtitling application 15 ; a stand-alone film subtitling application (apertium-subtitles), and dictionary lookup tools for mobile phones and handhelds (tinylex) 16 All of the stable Apertium packages have been packaged for Debian GNU/Linux 17 and as a result, Apertium is part of one of the most popular GNU/Linux distributions, Ubuntu. 18 Research Apertium is also a MT research platform. New code or data have often been released simultaneously to research publications. The research undertaken has even produced a PhD thesis (S\u00e1nchez-Mart\u00ednez, 2008) and four master's theses. 19 Here is a survey of published research: (2005, 2006, 2008) have explored use of TL information to train the SL part-of-speech disambiguator (package apertium-tagger-training-tools). \u2022 S\u00e1nchez- Mart\u00ednez and Forcada (2007, 2009) have studied the use of statistical methods to infer structural transfer rules from relatively small, sentence-aligned bilingual texts (package apertium-transfer-tools). \u2022 A number of papers describe the creation of data for new Apertium language pairs, using a variety of approaches, including the reuse of existing FOS resources: espt (Armentano-Oller et al., 2006) , ca-pt (Armentano-Oller and Forcada, 2008), eues (Ginest\u00ed-Rosell et al., 2009) , two S\u00e1mi languages (Tyers et al., 2009) , and cy-en (Tyers and Donnelly, 2009) . \u2022 Apertium resources have also been used to infer bilingual resources (dictionaries, rules) for other MT systems (Caseli and Nunes, 2006; Caseli et al., 2006) , to assist training in statistical MT (Tyers, 2009) , or in another transfer architecture (Alegria et al., 2005) . Access to FOS software (FOSS) like Apertium guarantees the reproducibility of all of the above experiments, and \"lowers the bar for entry to your project for new colleagues\" (Pedersen, 2008) . Business The companies involved in the project where the development of Apertium started 20 offer nowaversitat d'Alacant. 20 See footnote in p. 1 days services based on Apertium. Also Prompsit Language Engineering, started in 2006, works almost exclusively on Apertium and is currently one of the main developers of the platform. Companies holding the copyright of a certain component of Apertium could in principle also sell non-free/closed-source software (NFCSS) based on it following the usual licence-centred model in the software industry. However, most of the business around Apertium follows a different model: they offer services around the Apertium platform allowed by its GPL licence. Services that maybe offered include installing and supporting translation servers; maintaining, adapting and extending linguistic data for a particular purpose ; building new language pairs; integrating MT systems in multilingual documentation management systems, or developing new tools around Apertium. 21  There are indeed advantages for businesses using Apertium as a FOS MT solution, e.g.: \u2022 Customers may prefer an FOS MT solution to NFCSS. In the new setting, vendors are not providers to whom they have a technological dependency, but are instead technological partners, since customers may feel free to shop around for services around the FOS system and hire any other company offering them. \u2022 Companies get a positive social image by developing FOSS: they are not only offering a better service, but also benefiting the whole community, which may in turn choose them among other options in the market. \u2022 Contributions to the FOS project coming from the community around it benefit companies so that they can offer better services. The new business model is not free of vulnerabilities as, for instance, many companies may offer the same services on the same platform. However, companies heavily involved in the development of the platform may acquire a deeper know-21 Examples of commercial successes: the integration of Apertium to add gl to the online edition of a newspaper originally published only in es, http:// lavozdegalicia.es/ (imaxin|software, Universidade de Vigo), and the Catalan government's official es-oc and ca-oc translator: http://traductor.gencat. cat/ (Taller Digital, Prompsit). how that gives them an edge over their competitors. Recent developments Apertium was selected to participate as a mentoring organisation in the 2009 Google Summer of Code. 22 Of the successful projects, two new language pairs have been created (nn-nb and sv-da), a morphological analyser for Bengali has been created, and work has been done to improve the part-of-speech tagger and to create a web-service infrastructure for Apertium. Along with this, one project ported the finite-state toolkit lttoolbox to Java to facilitate reuse in applications using that language, and another worked on hybridising Apertium with other MT systems. Other projects are also ongoing. Teams at the Universid\u00e1 d'Uvi\u00e9u and the University of Reykjav\u00edk are working on language pairs for es-Asturian (ast) and Icelandic (is)-en respectively, and es-Italian (it) is also being worked on. 9 Lots of work ahead Known limitations The Apertium platform still shows a number of important limitations that have to be tackled to make it more apt to deal with all kinds of languages. Here are some of them: \u2022 The management of inflection paradigms is still not powerful enough to represent all relevant regularities. Various ad-hoc attempts at using metadix formats that are then converted to the standard XML dix format of Apertium are found in some packages, but a general scheme is yet to be defined. \u2022 Many languages, such as is write many compounds as single words and do so very productively. Apertium does not have a general mechanism to segment compounds into lexical units. \u2022 The Apertium architecture is a transfer architecture. Generating a new pair involves the creation of explicit bilingual resources. Tools like apertium-dixtools can alleviate the task of building data for language pair A-B when data for A-C and C-B are available (Armentano-Oller and Forcada ( 2008 )), but the task remains far from trivial. Acknowledgements: Apertium has been funded by the Ministries of Industry, Tourism and Commerce, of Education and Science, and of Science and Technology of Spain, the Government of Catalonia, the Ministry of Foreign Affairs of Romania, the Universitat d'Alacant, Ofis ar Brezhoneg and Google Summer of Code. Many companies have also invested in it: Prompsit Language Engineering, ABC Enciklopedioj, Eleka Ingeniaritza Linguistikoa, imaxin|software, etc. It is impossible to name all of the independent developers that have made substantial contributions, so we will not even try. Browsing the project's SCM 23 gives an idea.",
    "abstract": "This paper describes Apertium: a free/open-source machine translation platform (engine, toolbox and data), its history, its philosophy of design, its technology, the community of developers, the research and business based on it, and its prospects and challenges, now that it is five years old.",
    "countries": [
        "Ireland",
        "Spain"
    ],
    "languages": [
        "Esperanto",
        "English",
        "Aragonese",
        "Breton",
        "Occitan",
        "Welsh",
        "Romanian",
        "Swedish",
        "Danish",
        "Spanish",
        "Asturian"
    ],
    "numcitedby": "34",
    "year": "2009",
    "month": "November 2-3",
    "title": "The Apertium machine translation platform: Five years on"
}