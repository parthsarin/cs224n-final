{
    "article": "Selecting appropriate words to compose a sentence is one common problem faced by non-native Chinese learners. In this paper, we propose (bidirectional) LSTM sequence labeling models and explore various features to detect word usage errors in Chinese sentences. By combining CWIN-DOW word embedding features and POS information, the best bidirectional LSTM model achieves accuracy 0.5138 and MRR 0.6789 on the HSK dataset. For 80.79% of the test data, the model ranks the groundtruth within the top two at position level. Introduction Recently, more and more people around the world choose Chinese as their second language. That results in an increasing need for automatic grammatical error detection and correction (GEC) tools. To measure the performance of GEC systems in a standardized manner, several shared tasks have been conducted for English (Dale and Kilgarriff, 2011; Dale et al., 2012; Ng et al., 2013 Ng et al., , 2014) ) and Chinese (Yu et al., 2014; Lee et al., 2015 Lee et al., , 2016)) . In Chinese sentences, a word usage error (WUE) is a grammatically or semantically incorrect token which is written in a wrong form itself, or is an existent word but is improper for its context (refer to example (E1)). In fact, many Chinese WUEs result from subtle semantic unsuitability instead of violation of syntactic constraints. In example (E1), both \u6b0a\u529b (power) and \u6b0a\u5229 (right) are nouns in Chinese, and both versions are grammatically correct. It is difficult to formulate an explicit rule for recognizing this kind of errors. (E1) \u4eba\u5011 \u6709 (*\u6b0a\u529b,\u6b0a\u5229) \u5403 \u5b89\u5168 \u7684 \u98df\u54c1 \u3002 ( People have the (*power, right) to enjoy safe food. ) Shiue and Chen (2016) adopted the HSK corpus, a dynamic composition corpus built by Beijing Language and Culture University, to study the detection of WUEs. Instead of specific position information, their model only determines whether a sentence segment contains WUEs. Huang et al. (2016) used the HSK corpus to study the preposition selection problem. They proposed gated recurrent unit (GRU)-based models to select the most suitable one from a closed set of Chinese prepositions given the sentential context. Although their approach can be utilized to detect and correct preposition errors, it is still worth investigating how to recognize WUEs involving other types of words such as verbs and nouns. In the past few years, distributed word representations derived from neural network models (Mikolov et al., 2013a; Pennington et al., 2014) have become popular among various studies in natural language processing. Beyond surface forms, these low-dimensional vector representations can encode syntactic and semantic information implicitly (Mikolov et al., 2013b) . Because WUEs involve syntactic or semantic problems, vector representations could be promising for finding the erroneous tokens. One challenging aspect of dealing with grammatical errors is that the errors usually do not stand on their own, but are dependent on the context (Chollampatt et al., 2016) . Therefore, we need a model that considers the sequence of words in a sentence as a whole to determine which position needs correction. One possible model for this task is the Long Short-Term Memory (LSTM) model (Hochreiter and Schmidhuber, 1997) , which processes sequential data and generates the output based not only on the information of the current time step, but also on the past information stored in the memory layer. Rei and Yannakoudakis (2016) adopted neural network models, including LSTM, to detect errors in English learner writing. However, they mainly focused on comparing different composition architectures under the same word representation, so it remained unclear to what extent pre-trained word embeddings can help. Huang and Wang (2016) used LSTM for Chinese grammatical error diagnosis, but their models are trained only on learner data, without external well-formed text. That means the performance might be limited by the relatively small amount of annotated sentences written by foreign learners. This paper utilizes LSTM and its extension (Bidirectional LSTM) along with the information derived from external resources to deal with Chinese WUE detection. Several types of pre-trained word embeddings and additional token-level features are considered. Each token in a sentence will be labeled correct or incorrect. Experimental results show that our models can rank the groundtruth error position toward the top of the candidate list. WUE Detection Based on Bidirectional LSTM We formulate the Chinese WUE detection task as a sequence labeling problem. Each token, the fundamental unit after word segmentation, is labeled either correct (0) or incorrect (1). We utilize the LSTM model for labeling. LSTM models long sequences better than simple recurrent neural network (RNN) does, since it is equipped with input, output and forget gates to control how much information is used. The ability of LSTM to capture longer dependencies among time steps makes it suitable for modeling the complex dependencies of the erroneous token on the other parts of the sentence. We train the LSTM model with the Adam optimizer (Kingma and Ba, 2014) implemented in Keras (Chollet, 2015) . The loss function is binary cross entropy. The batch size and the initial learning rate is set to 32 and 0.001 respectively. The training process is stopped when the validation accuracy does not increase for two consecutive epochs. The model with the highest validation accuracy is selected as the final model. We apply a sigmoid activation function before the output layer, so the output score of each token, which is between 0 and 1, can be interpreted as the predicted level of incorrectness. With these scores, our system can output a ranked list of candidate error positions. The positions with the highest incorrectness scores will be marked as incorrect. In (E2) we show an example labeling result of our system. The tokens \u5dee (bad) and \u77e5\u8b58 (knowledge), with the highest scores, are most likely to be incorrect. (E2) \u5b78\u7fd2 \u7684 \u77e5 \u77e5 \u77e5\u8b58 \u8b58 \u8b58 \u4e5f \u5f88 \u5dee \u5dee \u5dee 0.056 0.035 0.153 0.039 0.030 0.429 ( The knowledge learned is also very bad. ) Bidirectional LSTM (Schuster and Paliwal, 1997 ) is an extension of LSTM which includes a backward LSTM layer. Both information before and after the current time step are taken into consideration. We need the \"future\" information to detect the error in example (E3). The incorrectness of the token \u7559\u5728 (left at) cannot be determined without considering its object \u6211\u5011 (us). (E3) \u5e97 \u662f \u7238\u7238 (*\u7559\u5728,\u7559\u7d66) \u6211\u5011 \u7684 \u3002 ( The store is our father left (*at,to) us. ) Sequence Embedding Features We consider the word sequence in a sentence and the corresponding POS tag sequence. They are mapped to sequences of real-valued vectors through an embedding layer. These vectors are also updated during the training process. Word Embeddings We set the word embedding size to 400. Besides randomly initialized embedding, we also tried several types of pre-trained word vectors. To train the word embeddings, we utilize the Chinese part of the ClueWeb09 dataset 1 . The Chinese part was extracted and segmented by Yu et al. (2012) . CBOW/Skip-gram Word Embeddings We trained word vectors with the two architectures included in the word2vec software (Mikolov et al., 2013a) . The continuous bag-of-words model (CBOW) uses the words in a context window to predict the target word, while the skipgram model (SG) uses the target word to predict every word in the context window. CWINDOW/Structured Skip-gram Word Embeddings Taking the order of the context words into consideration, we also employ the continuous window model (CWIN) and the structured skip-gram model (Struct-SG) (Ling et al., 2015) . The former replaces the summation of context word vectors in CBOW with a concatenation operation, and the latter applies different projection matrices for predicting context words in different relative position with the target word. POS Embeddings The POS embeddings are randomly initialized. We set the embedding size to 20, which is slightly smaller than the number of different POS tags (30) in our dataset. Token Features In addition to representing each token as a realvalued vector, we also incorporate some abstract features. These features are derived from the Google Chinese Web 5-gram corpus (Liu et al., 2010) and will be referred to as \"n-gram features\". Out-of-Vocabulary Indicator This feature is simply a bit indicating whether a word is an out-of-vocabulary word or not. If a token never appears in the Web 5-gram corpus, the bit is set to 1; otherwise it is set to 0. N-gram Probability Features We compute the n-gram probability of each token using the occurrence count in the Web 5-gram corpus. We consider only up to trigrams since the probabilities are mostly zero when n > 3. Given the limited amount of available learner data, these probabilities may serve as useful features indicating how likely an expression is valid in Chinese. Experiments Dataset We obtain the \"wrong\" part of the HSK dataset used in (Shiue and Chen, 2016) . Each sentence segment has exactly one token-level position that is erroneous. Word segmentation and POS tagging are performed with the Stanford CoreNLP toolkit (Manning et al., 2014) . We filter out any sentence segment whose corrected version differs from it by more than one token due to segmentation issue. That is, we only focus on the cases in which the error can be corrected by replacing one single token. After filtering, we end up with 10,510 sentence segments. We use 10% data for validation and testing respectively, and the remaining 80% data as the training set. Evaluation Accuracy We use the detection accuracy as our main evaluation metric. A test instance is regarded as correct only if our system gives the highest score of incorrectness for the ground-truth position. This metric is relatively strict as the average length of the sentence segments in our dataset is 9.24. The McNemar's test is adopted to perform statistical significance test. Mean Reciprocal Rank (MRR) The mean reciprocal rank rewards the test instances for which the model ranks the ground-truth near the top of the candidate list. MRR is defined as 1 N N i=1 1 rank(i) , where N is the total number of test instances and rank(i) is the rank of the ground-truth position of test instance i. Hit@k Rate The Hit@k rate regards a test instance as correct if the answer is ranked within the top k places. In the experiments, k is set to 2. We report this metric since one of the most common types of WUEs is collocation error. In example (E2), the problem involves a pair of words, i.e., the adjective \u5dee (bad) is not a suitable modifier of the noun \u77e5\u8b58 (knowledge). ( E4 ) and (E5) are both acceptable. (E4) \u5b78\u7fd2 \u7684 \u77e5\u8b58 \u4e5f \u5f88 \u4e0d \u4e0d \u4e0d\u8db3 \u8db3 \u8db3 ( The knowledge learned is also insufficient. ) (E5) \u5b78\u7fd2 \u7684 \u614b \u614b \u614b\u5ea6 \u5ea6 \u5ea6 \u4e5f \u5f88 \u5dee ( The attitude of learning is also very bad. ) Which correction is better highly depends on the context or even the intended meaning in the writer's mind. If the model proposes two potentially erroneous tokens which are closely related to each other, it can be useful for Chinese learners. Hit@r% Rate Finding the exact position of the error could be more challenging in a longer sentence segment. We propose another hit rate measure which takes the segment length (len) into account. Specifically, we regard one test instance as correct if the answer is ranked within the top max(1, len * r% ) candidates. We report hit@20%. That is, for segments shorter than 10 tokens, the system is allowed to propose one candidate; for those whose length is between 10 and 14, the system is allowed to propose two, and so on. Equivalently, this measure judges whether our system can rank the ground-truth error position within the top 20% of the candidate list. This metric compromises Accuracy and Hit@k. Results and Analysis Table 1 shows the performance of our WUE detection models with different input features. The random baseline is a system randomly choosing one token as the incorrect position. The LSTM model using only randomly initialized word embeddings largely outperforms the random baseline. The pre-trained CBOW/SG word embeddings seem not very useful, leading to detection performance slightly lower than the model with random initial word embeddings. For both CBOW and SG, introducing the POS sequence improves the detection accuracy by about 2% and also improves all other measurements. The n-gram features further increase the accuracy by about 1%. On the other hand, the CWIN and Struct-SG embeddings themselves are very powerful. Incorporating the POS and n-gram features leads to only slight improvements in terms of accuracy. Despite the small impact on accuracy, the n-gram features bring obvious improvements on hit@2 and hit@20% rates, indicating that they do facilitate the model in promoting the rank of the ground-truth position. Under the same set of features, all models with CWIN/Struct-SG significantly outperform their CBOW/SG counterparts (p < 0.05). Bidirectional LSTM (Bi-LSTM) further enhance the performance of LSTM. The Bi-LSTM with CWIN+POS features achieves the best accuracy and MRR, and significantly outperforms its LSTM counterpart (p < 0.005). Bi-LSTM with CWIN+POS+n-gram features achieves the best Hit@2 and Hit@20%. To take a closer look, we analyze the performance of the two types of models on different length of segments in Table 2 . We use the versions with all set of features and report hit@20% rates. Using Bi-LSTM leads to some improvement on short (\u2264 9 tokens) segments, and larger improvement on mid-length (10~14 tokens) ones. Even longer (\u2265 15 tokens) segments are relatively rare since foreign learners seldom construct complex sentences. In Section 5.2 we justify the use of the hit@2 metric by pointing out that a WUE usually involves a pair of words dependent on each other. We can verify whether the top two candidates proposed by our model are closely related by examining the dependency distance. We take the output of the Bi-LSTM model with CWIN+POS+ngram features and analyze the error cases where the model ranks the ground-truth error position second. We use the dependency parsing output of CoreNLP to construct an undirected graph, where   Table 4 : Hit@20% rates of Bi-LSTM models with or without POS features on three most frequent POS tags of the erroneous token. each dependency corresponds to an edge, and calculate the shortest distance between the top two candidates in these cases. The results are summarized Table 3 . The average distance (2.07) is small compared to the average length of the segments (9.24), indicating that our model can consider the dependencies among words when ranking the candidate positions. A factor that might limit the effectiveness of POS features is that the POS tagger trained on well-formed text may not perform well on noisy learner data. In fact, for 26.7% of the test data, the POS tag of the original erroneous token differs from that of its corrected version. We compare the performance of the model with or without POS features on three most frequent POS tags in Table 4 . As can be seen, the POS information of the erroneous segment, which potentially contains errors, can still be helpful for detecting anomaly of the segment. In example (E6) we show the scores of incorrectness predicted by models with or without POS features. The \"DEC + AD\" construction is invalid in Chinese, so in this case the error can be detected more easily if POS information is available.  Precision/recall of Bi-LSTM models with CWIN+POS features on four most commonly misused (err rate(w) > 0.4) words. In Table 5 we show the precision/recall of the Bi-LSTM model with CWIN+POS features on four most commonly misused words. The error rate of a word w is calculated on the test set by err rate(w) = # segments in which w is misused # segments containing w . We exclude words that occur in less than 10 segments regardless of their error rates. In general, our model achieves high recall and fair precision. Discriminating correct and wrong usage of the conjunction \u800c (so), which often connects more than one segment, seems to be the most difficult. For example, in (E7) the inappropriateness of \u800c cannot be recognized unless we consider the wider context of this segment. (E7) (*\u800c,\u4e26) \u7576\u6210 \u6b64\u751f \u505a\u4eba \u7684 \u9053\u7406 ( ..., (*so,and) take it as a lifelong way to behave around others. ) Conclusion In this paper we propose an LSTM-based sequence labeling model for detecting WUEs in sentences written by non-native Chinese learners. The experimental results suggest that the CWIN/Struct-SG embeddings, which consider word orders, are better word features for Chinese WUE detection. Moreover, Bi-LSTM is more preferred than LSTM. While a wrong usage often involves more than one token, making it difficult to determine which one should be corrected, the best model can rank the ground-truth error position within the top two in 80.97% of the cases. One possible future direction is to exploit more sophisticated structural information such as dependency paths. Moreover, it is also worth studying how to extend our system to cope with the correction task. Acknowledgments This research was partially supported by Ministry of Science and Technology, Taiwan, under grants MOST-104-2221-E-002-061-MY3 and MOST-105-2221-E-002-154-MY3.",
    "abstract": "Selecting appropriate words to compose a sentence is one common problem faced by non-native Chinese learners. In this paper, we propose (bidirectional) LSTM sequence labeling models and explore various features to detect word usage errors in Chinese sentences. By combining CWIN-DOW word embedding features and POS information, the best bidirectional LSTM model achieves accuracy 0.5138 and MRR 0.6789 on the HSK dataset. For 80.79% of the test data, the model ranks the groundtruth within the top two at position level.",
    "countries": [
        "Taiwan"
    ],
    "languages": [
        "Chinese"
    ],
    "numcitedby": "10",
    "year": "2017",
    "month": "July",
    "title": "Detection of {C}hinese Word Usage Errors for Non-Native {C}hinese Learners with Bidirectional {LSTM}"
}