{
    "article": "A Future `Ideal' Multimedia Document Authoring System A Document Authoring System is a tool that helps an author to write documents. If the system supports the authoring of documents that combine `presentations' in di erent media text and images, for example, we will speak of a multimedia document authoring system. Ideally, a multimedia document authoring system would allow authors to specify the content and form of a high-quality document in ways that are both simple and e cient. More speci cally, an ideal system would a ord the following options to the author: 1. Easy determination of content. `Content' is taken to mean the factual i.e., propositional content of the document in other words, the content of the Knowledge Base kb that forms the input to the document authoring system. 2. Easy determination of style and layout. In the absence of speci c instructions from the author, style and layout should be determined using intelligent defaults. For ex-ample, the standard settings may require the document to be informal, with avoidance of technical terms, lists and footnotes, without maximum paragraph length, and with numbered sections. Defaults can be overridden by the author, whereupon other defaults may become relevant. 3. Easy allocation of media. As in the case of style and layout, the system has to use judiciously chosen defaults: perhaps using illustrative pictures wherever suitable pictures are available, and graphs or tables wherever large amounts of homogeneously structured quantitative information are involved. As above, defaults may be overruled by speci c requests from the author; if a request is impossible to full l, an appropriate error message should be generated. 4. Easy annotation of non-generated presentations. In some cases, it will bepossible for the system to generate presentations. In other cases, this may be impossible: Literally quoted texts, for example, or historic photographs, may predate the use of the system, in which case it may benecessary to treat them as `canned' and to annotate them to allow the system to make intelligent use of them. 5. Easy post-editing. Once the system has produced a document according to the speci cations of the author, the ideal system would o er tools to address remaining inadequacies using post-editing. `Easy' means e cient, protected against inconsistencies, and not requiring specialist skills or knowledge. A domain specialist who may not know a n ything about knowledge representation, logic, or linguistics could use such a system to build kbs that the system can turn into documents in any desired language using any desired combination of media. The production and updating of complex documents would be greatly simpli ed as a result. In present-day practice, these requirements tend to be far from realized: authoring documents by means of such tools as ms Word or Powerpoint requires much l o w-level interaction, such as the typing of characters on a keyboard and the dragging of gures from one physical location to another. In some cases, an Intelligent Multimedia Presentation System immps e.g., Bordegoni et al. 1997 can be used see air 1995, Maybury and Wahlster 1998 for some surveys, which employs techniques from Articial Intelligence to allow higher-level interaction. Present immps, however, meet few of the requirements mentioned above. Most of them, for example, require input of a highly specialized nature e.g., the complex logical formulas entered in the wip system, Andr e and Rist 1995 1 and they allow an author little control over the form e.g., layout, textual style, media allocation of the document. The issue of easy annotation 4 is never even addressed, to the best of our knowledge. The next section describes an implemented system for the authoring of textual documents that can be argued to ful ll requirements 1 and 2 and which forms a suitable starting point for working towards the `ideal' multimedia system outlined above. Section 3 describes an extension of this system in which signi cant aspects of requirements 3-5 have also been implemented. Key features of this new system are its ability to use semantic representations that are common to the di erent media, and the ability to construct natural language feedback texts to help the author understand the content and the form of the document while it is still under construction. The concluding section explains what needs to bedone to ll the gap between the implemented system and the ideal one. Elsewhere Power and Scott 1998 , Scott et al. 1998 , Scott 1999 , a new knowledge-editing method called `wysiwym editing' has been introduced and motivated. Wysiwym editing allows a domain expert to edit a knowledge base kb by interacting with a feedback text, generated by the system, which presents both the knowledge already de ned and the options for extending and modifying it. Knowledge is added or modi ed by menu-based choices which directly a ect the knowledge base; the result is displayed to the author by means of an automatically generated feedback text: thus `What You See Is What You Meant'. Wysiwym instantiates a general recent trend in dialogue systems towards moving some of the initiative from the user to the system, allowing such systems to avoid the di culties of processing `open' i.e., unconstrained input. Of particular importance, here, are applications of wysiwym to the generation of documents containing text and pictures; the present section focuses on multilingual text generation: the kb created with the help of wysiwym is used as input to a natural language generation nlg program, producing as output a document of some sort, for the bene t of an end user. Present applications of wysiwym to text generation use a kl-one-type knowledge representation language as input to two nlg systems. One nlg system generates feedback texts for the author and the other generates output texts for an end user. One application currently under development has the creation of Patient Information Lea ets pills as its domain. The present v ersion of this pills system allows authors to enter information about possible side e ects `If you are either pregnant or allergic to penicillin, then tell your doctor' and how to handle medical devices such as inhalers, inoculators, etc. By interacting with the feedback texts generated by the system, the author can de ne a procedure for performing a task, e.g. preparing an inhaler for use. A new kb leads to the creation of a procedure instance, e.g. p. The permanent part of the kb i.e., the T-Box speci es that procedures may be complex or atomic, and lists a number of options in both cases. In the atomic case, the options include Clean, Store, Remove, etc., and these are made visible by means of a menu from which the author can select, say, Remove. The program responds by adding a new instance, of type Remove, to the kb: Removep `There is a procedure p whose type is Remove.' From the updated knowledge base, the generator produces a feedback text Remove this device or device-part from this device or device-part, making use of the information, in the T-Box o f the system, that Remove procedures require an Actee and a Source. Such not yet de ned attributes are shown through mouse-sensitive anchors. By clicking on an anchor, the author obtains a pop-up menu listing the permissible values of the attribute; by selecting one of these options, the author updates the knowledge base. Clicking on this device or device part yields a pop-up menu that lists all the types of devices and their parts that the system knows about, including a Cover which, according to the T-Box must have a Device as Owner. By continuing to make choices at anchors, the author might expand the knowledge base in the following sequence: Remove a device's cover from a device or device-part Remove a device's cover from an inhaler of a person Remove a device's cover from your inhaler Remove your inhaler's cover from your inhaler At this point the knowledge base is potentially complete, so a less stilted output text can be generated and incorporated into the lea et, e.g. Please remove the cover of your inhaler. Longer output texts can be obtained by expanding the feedback text further. A number of properties of the pills system are worth stressing. First, the system supports a high-level dialogue, allowing the author to disregard lowlevel details, such as the exact words used in the output text. This makes it possible to interact with the system using, say, French provided a generator for French feedback texts is available, for the production of lea ets in Japanese provided a generator for Japanese output texts is available. The semantic model in the T-Box guarantees that many types of inconsistencies e.g., a medicine that has to be taken both once and twice a day are prevented. Second, a simple version of wysiwym has also been applied to the form of the text, allowing the author to specify it separately from its content. This is done by allowing the author to use wysiwym for building a second, form-related kb which describes the style and layout of the document. This kb, for example, may state that the maximum paragraph length is 10 sentences and that there are no footnotes. A second, form-related T-Box determines what the options determining layout are. This form-related kb constrains the texts that are generated. By interacting with feedback texts describing the form-related kb, the author changes the stylistic layout properties of the document. A WYSIWYM-based System for the Authoring of Multimedia Documents Illustrate is an extension of pills producing documents that contain pictures as well as words. Consider a toy example, adapted from abpi 1997. Suppose the document says Remove the cover of your inhaler. An instruction of this kind may be illustrated by the picture below. How can a document authoring system produce a document in which appropriate pictures illustrate the text when this is desired? Illustrate does this by allowing an author to ask for pictorial illustration of the information in the document by interacting with the feedback texts. The author can indicate, for a given mouse-sensitive stretch s of the feedback text, whether she would like to see the part of the document that corresponds to s illustrated. If so, the system searches its library to nd a picture that matches the meaning of s. In Fig. 2 , the author has requested illustration of the in- variations on a common theme, suitable pictures can begenerated. In the case of Patient Information Lea ets, however, this was not a practical option because of the many di erent kinds of things depicted in the lea ets: medicine packages, body parts, medical applicances, various types of actions, etc. Pictures, moreover, are heavily reused in the di erent lea ets written by the same company. For these reasons, illustrate uses an alternative approach, selecting pictures from a library, each of which i s annotated with a formal representation of its meaning. We will explain the workings of illustrate by answering three questions: 1 What kinds of representations are used in the library to annotate the pictures with relevant as-pects of their meaning? 2 How is the semantically annotated library of pictures created? and 3 What selection algorithm is employed to retrieve an optimally appropriate illustration for a given part of the kb from the library? We shall assume that the information whose illustration is requested corresponds with the following formula in the kb, which represents the meaning of the feedback text in Fig. 2 . 2. How is the library created? This is a question of great importance because the library contains semantic representations that are much more detailed than those in current picture retrieval systems e.g. Van de Waal 1995 and this could potentially make the annotation task extremely burdensome Enser 1995. The answer to this problem may be unexpected: Illustrate uses wysiwym itself to enable authors to associate a given picture with a novel representation. The class of representations that are suitable for expressing the meaning of a picture is, after all, a `vivid' subset of the class of representations allowed by the T-Box for the text of the document, and consequently, the same wysiwym interface can be used to create such representations. Fig. 3 Selection Rule: Use the logically strongest picture whose representation is logically implied by the information to be illustrated. Van Deemter 1999 Logical strength is determined on the basis of the two semantic representations alone. Deter-mining whether one representation logically implies the other, where one is an instance in the kb and the other a representation of a picture, is easy, given that both are conjunctions of positive literals. This brief description should su ce to highlight the following advantages of illustrate: One uniform interface is employed for all actions that involve the editing of semantic representations, regardless of the type of presentation involved i.e., its media. When used for the construction of annotations of pictures, the T-Box of the system makes sure that only those properties can enter an annotation that are relevant i n connection with it. In the present domain, for example, the height of the patient is irrelevant, and consequently the T-Box d o e s not make height an attribute of a person. Pictures are retrieved by a reasoning process involving classical logic; since a match between a picture and a piece of the kb can never beinexact, there is no need for the retrieval process to be probabilistic, as has to be done when the system has less control over the form of annotations Van Rijsbergen 1985, Van Deemter 1999. Speci c aspects of illustrate have been described elsewhere, but the assumptions behind the system as a whole have not been stated before. For the representation scheme and the selection scheme see Van Deemter 1999; for the treatment of sequences of pictures see Van Deemter and Power 1999. We h a ve so far simpli ed by assuming there to be only one author. In fact, however, an intelligent authoring system is most useful when there are several authors each of which can be allowed to work in a di erent language. More speci cally, it is plausible that the person authoring the annotations in the library is not the same as the persons who authors the document itself. 4 Future Work Towards the Ideal The pills system section 2 makes a rst stab at ful lling text-related requirements 1 and 2 mentioned in section 1. The illustrate demonstrator goes beyond this, ful lling important aspects of requirements 3 and 4 as well. Yet, there is a considerable gap between the implemented system and the ideal one of section 1. Possible improvements do not only concern the coverage of the system, but matters of system architecture as well. Three di erent sets of improvements may bediscerned. Firstly, there is requirement 5 of section 1, which requires easy postediting. It is easy to allow authors to make low-level corrections in the document after the interaction with wysiwym, but unless the system `understands' the meaning of the editing actions, postediting destroys the connection between the edited document and the content of the various knowledge bases. Consequently, post-editing is not a practical possibility yet, given the state of the art in text-and picture understanding. Other improvements would be less problematic. On the one hand, there are issues that have been tackled by other research groups and whose solutions we intend to carry over to a wysiwym-based setting. These concern the generation of graphics from underlying representations Wahlster et al. 1993 that is made more precise by means of a picture showing the required amount. It should be noted that each of these extensions depends crucially on illustrate's ability to manipulate the semantic representations associated with multimedia objects, where one and the same representation language is used for the di erent media: a multimedia `interlingua' e.g. Barker-Plummer and Greeves 1995. In the case of an author selecting a picture using thumbnails, for example, the semantic representation enables the author to a nd a suitable location for the picture and b adapt the text by omitting from it information that is now expressed by the picture. A nal extension of the ideas outlined in this paper would involve completing the symmetry between feedback and output: all present wysiwym systems use purely textual feedback. In principle, however, feedback can be as multimodal as the target document. We are currently exploring the possibility of allowing an author to express some of her choices by clicking on a mouse-sensitive part of a picture; the system could generate an updated feedback text possibly along with an updated picture as a result. In some technologically complex domains, for example, where a brief description of an object may be di cult to obtain, this might lead to a further improvement of the wysiwym technique.",
    "abstract": "",
    "countries": [
        "United Kingdom"
    ],
    "languages": [
        "Japanese",
        "French"
    ],
    "numcitedby": "8",
    "year": "2000",
    "month": "",
    "title": "Authoring Multimedia Documents using {WYSIWYM} Editing"
}