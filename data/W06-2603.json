{
    "article": "We propose a simple solution to the sequence labeling problem based on an extension of weighted decomposition kernels. We additionally introduce a multiinstance kernel approach for representing lexical word sense information. These new ideas have been preliminarily tested on named entity recognition and PP attachment disambiguation. We finally suggest how these techniques could be potentially merged using a declarative formalism that may provide a basis for the integration of multiple sources of information when using kernel-based learning in NLP. Introduction Many tasks related to the analysis of natural language are best solved today by machine learning and other data driven approaches. In particular, several subproblems related to information extraction can be formulated in the supervised learning framework, where statistical learning has rapidly become one of the preferred methods of choice. A common characteristic of many NLP problems is the relational and structured nature of the representations that describe data and that are internally used by various algorithms. Hence, in order to develop effective learning algorithms, it is necessary to cope with the inherent structure that characterize linguistic entities. Kernel methods (see e.g. Shawe-Taylor and Cristianini, 2004) are well suited to handle learning tasks in structured domains as the statistical side of a learning algorithm can be naturally decoupled from any representational details that are handled by the kernel function. As a matter of facts, kernel-based statistical learning has gained substantial importance in the NLP field. Applications are numerous and diverse and include for example refinement of statistical parsers (Collins and Duffy, 2002) , tagging named entities (Cumby and Roth, 2003; Tsochantaridis et al., 2004) , syntactic chunking (Daum\u00e9 III and Marcu, 2005) , extraction of relations between entities (Zelenko et al., 2003; Culotta and Sorensen, 2004) , semantic role labeling (Moschitti, 2004) . The literature is rich with examples of kernels on discrete data structures such as sequences (Lodhi et al., 2002; Leslie et al., 2002; Cortes et al., 2004) , trees (Collins and Duffy, 2002; Kashima and Koyanagi, 2002) , and annotated graphs (G\u00e4rtner, 2003; Smola and Kondor, 2003; Kashima et al., 2003; Horv\u00e1th et al., 2004) . Kernels of this kind can be almost invariably described as special cases of convolution and other decomposition kernels (Haussler, 1999) . Thanks to its generality, decomposition is an attractive and flexible approach for defining the similarity between structured objects starting from the similarity between smaller parts. However, excessively large feature spaces may result from the combinatorial growth of the number of distinct subparts with their size. When too many dimensions in the feature space are irrelevant, the Gram matrix will be nearly diagonal (Sch\u00f6lkopf et al., 2002) , adversely affecting generalization in spite of using large margin classifiers (Ben-David et al., 2002) . Possible cures include extensive use of prior knowledge to guide the choice of relevant parts (Cumby and Roth, 2003; Frasconi et al., 2004) , the use of feature selection (Suzuki et al., 2004) , and soft matches (Saunders et al., 2002) . In (Menchetti et al., 2005) we have shown that better generalization can indeed be achieved by avoiding hard comparisons between large parts. In a weighted decomposition kernel (WDK) only small parts are matched, whereas the importance of the match is determined by comparing the sufficient statistics of elementary probabilistic models fitted on larger contextual substructures. Here we introduce a position-dependent version of WDK that can solve sequence labeling problems without searching the output space, as required by other recently proposed kernel-based solutions (Tsochantaridis et al., 2004; Daum\u00e9 III and Marcu, 2005) . The paper is organized as follows. In the next two sections we briefly review decomposition kernels and its weighted variant. In Section 4 we introduce a version of WDK for solving supervised sequence labeling tasks and report a preliminary evaluation on a named entity recognition problem. In Section 5 we suggest a novel multi-instance approach for representing WordNet information and present an application to the PP attachment ambiguity resolution problem. In Section 6 we discuss how these ideas could be merged using a declarative formalism in order to integrate multiple sources of information when using kernelbased learning in NLP. Decomposition Kernels An R-decomposition structure (Haussler, 1999; Shawe-Taylor and Cristianini, 2004) on a set X is a triple R = X , R, k where X = (X 1 , . . . , X D ) is a D-tuple of non-empty subsets of X , R is a finite relation on X 1 \u00d7 \u2022 \u2022 \u2022 \u00d7 X D \u00d7 X , and k = (k 1 , . . . , k D ) is a D-tuple of positive defi- nite kernel functions k d : X d \u00d7 X d \u2192 IR. R( x, x) is true iff x is a tuple of \"parts\" for x -i.e. x is a decomposition of x. Note that this definition of \"parts\" is very general and does not require the parthood relation to obey any specific mereological axioms, such as those that will be introduced in Section 6. For any x \u2208 X , let R \u22121 (x) = {(x 1 , . . . , x D ) \u2208 X : R( x, x)} denote the multiset of all possible decompositions 1 of x. A decomposition kernel is then defined as the multiset kernel between the decompositions: K R (x, x ) = x \u2208 R \u22121 (x) x \u2208 R \u22121 (x ) D d=1 \u03ba d (x d , x d ) (1) where, as an alternative way of combining the kernels, we can use the product instead of a summation: intuitively this increases the feature space dimension and makes the similarity measure more selective. Since decomposition kernels form a rather vast class, the relation R needs to be carefully tuned to different applications in order to characterize a suitable kernel. As discussed in the Introduction, however, taking all possible subparts into account may lead to poor predictivity because of the combinatorial explosion of the feature space. Weighted Decomposition Kernels A weighted decomposition kernel (WDK) is characterized by the following decomposition structure: R = X , R, (\u03b4, \u03ba 1 , . . . , \u03ba D ) where X = (S, Z 1 , . . . , Z D ), R(s, z 1 , . . . , z D , x) is true iff s \u2208 S is a subpart of x called the selector and z = (z 1 , . . . , z D ) \u2208 Z 1 \u00d7\u2022 \u2022 \u2022\u00d7Z D is a tuple of subparts of x called the contexts of s in x. Precise definitions of s and z are domain-dependent. For example in (Menchetti et al., 2005) we present two formulations, one for comparing whole sequences (where both the selector and the context are subsequences), and one for comparing attributed graphs (where the selector is a single vertex and the context is the subgraph reachable from the selector within a short path). The definition is completed by introducing a kernel on selectors and a kernel on contexts. The former can be chosen to be the exact matching kernel, \u03b4, on S \u00d7 S, defined as \u03b4(s, s ) = 1 if s = s and \u03b4(s, s ) = 0 otherwise. The latter, \u03ba d , is a kernel on Z d \u00d7 Z d and provides a soft similarity measure based on attribute frequencies. Several options are available for context kernels, including the discrete version of probability product kernels (PPK) (Jebara et al., 2004) and histogram intersection kernels (HIK) (Odone et al., 2005) . Assuming there are n categorical attributes, each taking on m i distinct values, the context kernel can be defined as: \u03ba d (z, z ) = n i=1 k i (z, z ) (2) where k i is a kernel on the i-th attribute. Denote by p i (j) the observed frequency of value j in z. Then k i can be defined as a HIK or a PPK respectively: k i (z, z ) = m i j=1 min{p i (j), p i (j)} (3) k i (z, z ) = m i j=1 p i (j) \u2022 p i (j) (4) This setting results in the following general form of the kernel: K(x, x ) = (s, z) \u2208 R \u22121 (x) (s , z ) \u2208 R \u22121 (x ) \u03b4(s, s ) D d=1 \u03ba d (z d , z d ) (5) where we can replace the summation of kernels with D d=1 1 + \u03ba d (z d , z d ). Compared to kernels that simply count the number of substructures, the above function weights different matches between selectors according to contextual information. The kernel can be afterwards normalized in [\u22121, 1] to prevent similarity to be boosted by the mere size of the structures being compared. WDK for sequence labeling and applications to NER In a sequence labeling task we want to map input sequences to output sequences, or, more precisely, we want to map each element of an input sequence that takes label from a source alphabet to an element with label in a destination alphabet. Here we cast the sequence labeling task into position specific classification, where different sequence positions give independent examples. This is different from previous approaches in the literature where the sequence labeling problem is solved by searching in the output space (Tsochantaridis et al., 2004; Daum\u00e9 III and Marcu, 2005) . Although the method lacks the potential for collectively labeling all positions simultaneously, it results in a much more efficient algorithm. In the remainder of the section we introduce a specialized version of the weighted decomposition kernel suitable for a sequence transduction task originating in the natural language processing domain: the named entity recognition (NER) problem, where we map sentences to sequences of a reduced number of named entities (see Sec.4.1). More formally, given a finite dictionary \u03a3 of words and an input sentence x \u2208 \u03a3 * , our input objects are pairs of sentences and indices r = (x, t) We introduce two versions of WDK: one with four context types (D = 4) and one with increased contextual information (D = 6) (see Eq. 5). The relation R depends on two integers t and i \u2208 {1, . . . , |x|}, where t indicates the position of the word we want to classify and i the position of a generic word in the sentence. The relation for the first kernel version is defined as: R = {(s, z LL , z LR , z RL , z RR , r)} such that the selector s = x[i] is the word at position i, the z LL (LeftLeft) part is a sequence defined as x[1..i] if i < t or the null sequence \u03b5 otherwise and the z LR (LeftRight) part is the sequence x[i + 1..t] if i < t or \u03b5 otherwise. Informally, z LL is the initial portion of the sentence up to word of position i, and z LR is the portion of the sentence from word at position i + 1 up to t (see Fig. 1 ). Note that when we are dealing with a word that lies to the left of the target word t, its z RL and z RR parts are empty. Symmetrical definitions hold for z RL and z RR when i > t. We define the weighted decomposition kernel for sequences as K(r, r )= |x| t=1 |x | t =1 \u03b4 \u03be (s, s ) d\u2208{LL,LR,RL,RR} \u03ba(z d , z d ) (6) where \u03b4 \u03be (s, s ) = 1 if \u03be(s) = \u03be(s ) and 0 otherwise (that is \u03b4 \u03be checks whether the two selector words have the same morphological trait) and \u03ba is Eq. 2 with only one attribute which then boils down to Eq. 3 or Eq. 4, that is a kernel over the histogram for word occurrences over a specific part. Intuitively, when applied to word sequences, this kernel considers separately words to the left of the entry we want to transduce and those to its right. The kernel computes the similarity for each sub-sequence by matching the corresponding bag of enriched words: each word is matched only with words that have the same trait as extracted by \u03be and the match is then weighted proportionally to the frequency count of identical words preceding and following it. The kernel version with D=6 adds two parts called z LO (LeftOther) and z RO (RightOther) defined as x[t + 1..|r|] and x[1..t] respectively; these represent the remaining sequence parts so that x = z LL \u2022 z LR \u2022 z LO and x = z RL \u2022 z RR \u2022 z RO . Note that the WDK transforms the sentence in a bag of enriched words computed in a preprocessing phase thus achieving a significant reduction in computational complexity (compared to the recursive procedure in (Lodhi et al., 2002) ). Named Entity Recognition Experimental Results Named entities are phrases that contain the names of persons, organizations, locations, times and quantities. For example in the following sentence: we are interested in predicting that Wolff and Del Bosque are people's names, that Argentina is a name of a location and that Real Madrid is a name of an organization. The chosen dataset is provided by the shared task of CoNLL-2002 (Saunders et al., 2002) which concerns language-independent named entity recognition. There are four types of phrases: person names (PER), organizations (ORG), locations (LOC) and miscellaneous names (MISC), combined with two tags, B to denote the first item of a phrase and I for any non-initial word; all other phrases are classified as (OTHER). Of the two available languages (Spanish and Dutch), we run experiments only on the Spanish dataset which is a collection of news wire articles made available by the Spanish EFE News Agency. We select a subset of 300 sentences for training and we evaluate the performance on test set. For each category, we evaluate the F \u03b2=1 measure of 4 versions of WDK: word histograms are matched using HIK (Eq. 3) and the kernels on various parts (z LL , z LR ,etc) are combined with a summation SUMHIK or product PROHIK; alternatively the histograms are com- bined with a PPK (Eq. 4) obtaining SUMPPK, PROPPK. The word attribute considered for the selector is a word morphologic trait that classifies a word in one of five possible categories: normal word, number, all capital letters, only capital initial and contains non alphabetic characters, while the context histograms are computed counting the exact word frequencies. Results reported in Tab. 1 and Tab. 2 show that performance is mildly affected by the different choices on how to combine information on the various contexts, though it seems clear that increasing contextual information has a positive influence. Note that interesting preliminary results can be obtained even without the use of any refined language knowledge, such as part of speech tagging or shallow/deep parsing. Kernels for word semantic ambiguity Parsing a natural language sentence often involves the choice between different syntax structures that are equally admissible in the given grammar. One of the most studied ambiguity arise when deciding between attaching a prepositional phrase either to the noun phrase or to the verb phrase. An example could be: 1. eat salad with forks (attach to verb) 2. eat salad with tomatoes (attach to noun) The resolution of such ambiguities is usually performed by the human reader using its past experiences and the knowledge of the words meaning. Machine learning can simulate human experience by using corpora of disambiguated phrases to compute a decision on new cases. However, given the number of different words that are currently used in texts, there would never be a sufficient dataset from which to learn. Adding semantic information on the possible word meanings would permit the learning of rules that apply to entire categories and can be generalized to all the member words. Adding Semantic with WordNet WordNet (Fellbaum, 1998 ) is an electronic lexical database of English words built and annotated by linguistic researchers. WordNet is an extensive and reliable source of semantic information that can be used to enrich the representation of a word. Each word is represented in the database by a group of synonym sets (synset), with each synset corresponding to an individual linguistic concept. All the synsets contained in WordNet are linked by relations of various types. An important relation connects a synset to its hypernyms, that are its immediately broader concepts. The hypernym (and its opposite hyponym) relation defines a semantic hierarchy of synsets that can be represented as a directed acyclic graph. The different lexical categories (verbs, nouns, adjectives and adverbs) are contained in distinct hierarchies and each one is rooted by many synsets. Several metrics have been devised to compute a similarity score between two words using Word-Net. In the following we resort to a multiset version of the proximity measure used in (Siolas and d'Alche Buc, 2000) , though more refined alternatives are also possible (for example using the conceptual density as in (Basili et al., 2005) ). Given the acyclic nature of the semantic hierarchies, each synset can be represented by a group of paths that follows the hypernym relations and finish in one of the top level concepts. Two paths can then be compared by counting how many steps from the roots they have in common. This number must then be normalized dividing by the square root of the product between the path lengths. In this way one can accounts for the unbalancing that arise from different parts of the hierarchies being differently detailed. Given two paths \u03c0 and \u03c0 , let l and l be their lengths and n be the size of their common part, the resulting kernel is: k(\u03c0, \u03c0 ) = n \u221a l \u2022 l (7) The demonstration that k is positive definite arise from the fact that n can be computed as a positive kernel k * by summing the exact match kernels between the corresponding positions in \u03c0 and \u03c0 seen as sequences of synset identifiers. The lengths l and l can then be evaluated as k * (\u03c0, \u03c0) and k * (\u03c0 , \u03c0 ) and k is the resulting normalized version of k * . The kernel between two synsets \u03c3 and \u03c3 can then be computed by the multi-set kernel (G\u00e4rtner et al., 2002a) between their corresponding paths. Synsets are organized into forty-five lexicographer files based on syntactic category and logical groupings. Additional information can be derived by comparing the identifiers \u03bb and \u03bb of these file associated to \u03c3 and \u03c3 . The resulting synset kernel is: \u03ba \u03c3 (\u03c3, \u03c3 ) = \u03b4(\u03bb, \u03bb ) + \u03c0\u2208\u03a0 \u03c0 \u2208\u03a0 k(\u03c0, \u03c0 ) (8) where \u03a0 is the set of paths originating from \u03c3 and the exact match kernel \u03b4(\u03bb, \u03bb ) is 1 if \u03bb \u2261 \u03bb and 0 otherwise. Finally, the kernel \u03ba \u03c9 between two words is itself a multi-set kernel between the corresponding sets of synsets: \u03ba \u03c9 (\u03c9, \u03c9 ) = \u03c3\u2208\u03a3 \u03c3 \u2208\u03a3 \u03ba \u03c3 (\u03c3, \u03c3 ) (9) where \u03a3 are the synsets associated to the word \u03c9. PP Attachment Experimental Results The experiments have been performed using the Wall-Street Journal dataset described in (Ratnaparkhi et al., 1994) . This dataset contains 20, 800 training examples and 3, 097 testing examples. Each phrase x in the dataset is reduced to a verb x v , its object noun x n 1 and prepositional phrase formed by a preposition x p and a noun x n 2 . The target is either V or N whether the phrase is attached to the verb or the noun. Data have been preprocessed by assigning to all the words their corresponding synsets. Additional meanings derived from specific synsets have been attached to the words as described in (Stetina and Nagao, 1997) . The kernel between two phrases x and x is then computed by combining the kernels between single words using either the sum or the product. Results of the experiments are reported in Tab. 3 for various kernels parameters: S or P denote if the sum or product of the kernels between words are used, W denotes that WordNet semantic information is added (otherwise the kernel between two words is just the exact match kernel) and L denotes that lexicographer files identifiers are used. An additional gaussian kernel is used on top of K pp . The C and \u03b3 parameters are selected using an independent validation set. For each setting, accuracy, precision and recall values on the test data are reported, along with the standard deviation of the estimated binomial distribution of errors. The results demonstrate that semantic information can help in resolving PP ambiguities. A small difference exists between taking the product instead of the sum of word kernels, and an additional increase in the amount of information available to the learner is given by the use of lexicographer files identifiers. Using declarative knowledge for NLP kernel integration Data objects in NLP often require complex representations; suffice it to say that a sentence is naturally represented as a variable length sequence of word tokens and that shallow/deep parsers are reliably used to enrich these representations with links between words to form parse trees. Finally, additional complexity can be introduced by including semantic information. Various facets of this richness of representations have been extensively investigated, including the expressiveness of various grammar formalisms, the exploitation of lexical representation (e.g. verb subcategorization, semantic tagging), and the use of machine readable sources of generic or specialized knowledge (dictionaries, thesauri, domain specific ontologies). All these efforts are capable to address language specific sub-problems but their integra-tion into a coherent framework is a difficult feat. Recent ideas for constructing kernel functions starting from logical representations may offer an appealing solution. G\u00e4rtner et al. (2002) have proposed a framework for defining kernels on higherorder logic individuals. Cumby and Roth (2003) used description logics to represent knowledge jointly with propositionalization for defining a kernel function. Frasconi et al. (2004) proposed kernels for handling supervised learning in a setting similar to that of inductive logic programming where data is represented as a collection of facts and background knowledge by a declarative program in first-order logic. In this section, we briefly review this approach and suggest a possible way of exploiting it for the integration of different sources of knowledge that may be available in NLP. Declarative Kernels The definition of decomposition kernels as reported in Section 2 is very general and covers almost all kernels for discrete structured data developed in the literature so far. Different kernels are designed by defining the relation decomposing an example into its \"parts\", and specifying kernels for individual parts. In (Frasconi et al., 2004) we proposed a systematic approach to such design, consisting in formally defining a relation by the set of axioms it must satisfy. We relied on mereotopology (Varzi, 1996) (i.e. the theory of parts and places) in order to give a formal definition of the intuitive concepts of parthood and connection. The formalization of mereotopological relations allows to automatically deduce instances of such relations on the data, by exploiting the background knowledge which is typically available on structured domains. In (Frasconi et al., 2004) we introduced declarative kernels (DK) as a set of kernels working on mereotopological relations, such as that of proper parthood (\u227a P ) or more complex relations based on connected parts. A typed syntax for objects was introduced in order to provide additional flexibility in defining kernels on instances of the given relation. A basic kernel on parts K P was defined as follows: K P (x, x ) = s \u227a P x s \u227a P x \u03b4 T (s, s ) \u03ba(s, s )+K P (s, s ) (10) where \u03b4 T matches objects of the same type and \u03ba is a kernel over object attributes. Declarative kernels were tested in (Frasconi et al., 2004 ) on a number of domains with promising results, including a biomedical information extraction task (Goadrich et al., 2004) aimed at detecting protein-localization relationships within Medline abstracts. A DK on parts as the one defined in Eq. ( 10 ) outperformed state-of-the-art ILP-based systems Aleph and Gleaner (Goadrich et al., 2004) in such information extraction task, and required about three orders of magnitude less training time. Weighted Decomposition Declarative Kernels Declarative kernels can be combined with WDK in a rather straightforward way, thus taking the advantages of both methods. A simple approach is that of using proper parthood in place of selectors, and topology to recover the context of each proper part. A weighted decomposition declarative kernel (WD 2 K) of this kind would be defined as in Eq. ( 10 ) simply adding to the attribute kernel \u03ba a context kernel that compares the surrounding of a pair of objects-as defined by the topology relation-using some aggregate kernel such as PPK or HIK (see Section 3). Note that such definition extends WDK by adding recursion to the concept of comparison selector, and DK by adding contexts to the kernel between parts. Multiple contexts can be easily introduced by employing different notions of topology, provided they are consistent with mereotopological axioms. As an example, if objects are words in a textual document, we can define l-connection as the relation for which two words are l-connected if there are consequential within the text with at most l words in between, and obtain growingly large contexts by increasing l. Moreover, an extended representation of words, as the one employing WordNet semantic information, could be easily plugged in by including a kernel for synsets such as that in Section 5.1 into the kernel \u03ba on word attributes. Additional relations could be easily formalized in order to exploit specific linguisitc knowledge: a causal relation would allow to distinguish between preceding and following context so to take into consideration word order; an underlap relation, associating two objects being parts of the same super-object (i.e. pre-terminals dominated by the same non-terminal node), would be able to express commanding notions. The promising results obtained with declarative kernels (where only very simple lexical information was used) together with the declarative ease to integrate arbitrary kernels on specific parts are all encouraging signs that boost our confidence in this line of research.",
    "abstract": "We propose a simple solution to the sequence labeling problem based on an extension of weighted decomposition kernels. We additionally introduce a multiinstance kernel approach for representing lexical word sense information. These new ideas have been preliminarily tested on named entity recognition and PP attachment disambiguation. We finally suggest how these techniques could be potentially merged using a declarative formalism that may provide a basis for the integration of multiple sources of information when using kernel-based learning in NLP.",
    "countries": [
        "Italy"
    ],
    "languages": [
        "Spanish"
    ],
    "numcitedby": "1",
    "year": "2006",
    "month": "",
    "title": "Decomposition Kernels for Natural Language Processing"
}