{
    "article": "discoursegraphs is a Python-based converter for linguistic annotation formats which facilitates the combination of several, heterogeneous layers of annotation of a document into a unified graph representation. The library supports a range of syntax and discourse-related formats and was successfully used to revise and merge a multilayered corpus (Stede and Neumann,  2014). Introduction In an ideal world, we would like to have an easyto-use annotation tool that supports a wide range of annotation tasks, uses a standard-compliant interchange format and which can be easily extended -in a novice friendly programming language. While there has arguably been progress in the field of general-purpose annotation software in recent years (e.g. brat (Stenetorp et al., 2012) and WebAnno (Yimam et al., 2013) ), hierarchical and higher order annotation remains the domain of specialised programs (e.g. RSTTool (O' Donnell, 2000) and MMAX2 (M\u00fcller and Strube, 2006 )) using idiosyncratic file formats, written and last maintained by brave colleagues in the dark ages of computer history. To honor the contributions of these fellow minds, I have implemented a simple and easily extendable toolkit called discoursegraphs, which can convert a number of syntax and discourserelated annotation formats and is able to merge these annotations into a single graph for further exploration or transformation into other, more sustainable formats. The library is free and opensource software and is available from its reposi-tory 1 . It can also be installed directly via Python's pip package manager 2 . Related Work There are numerous converters for linguistic annotations, but they usually only convert between a limited set of file formats and are geared towards specific projects or focus on one type of annotation (e.g. treetools 3 for Treebank formats). To the best of my knowledge, there's only one other offthe-shelf converter that supports merging heterogeneous annotations into a unified data structure: SaltNPepper (Zipser et al., 2010; Zipser et al., 2014) . Despite its wide range of import and export formats (and its recent addition of merging capabilities), I chose to write my own toolkit for the sake of simplicity and maintainability. 4   3 System Architecture discoursegraphs is implemented in Python 2.7 and uses the NetworkX library (Hagberg et al., 2008) to represent annotated documents as graphs. DisourseDocumentGraph is the fundamental data structure of the library. It is a directed graph with (possibly) multiple edges between nodes. Each token in a document is represented by a node with token-level features (e.g. part-of-speech tag and lemma) encoded as attribute-value pairs. All nodes and edges belong to at least one annotation layer (with possible sub-layers, e.g. 'syntax' vs. 'syntax:category', 'syntax:token' or 'rst' vs. 'rst:nucleus'), which they can be easily queried for. Annotations are expressed as additional nodes (e.g. for elements in a constituency parse tree) and directed edges between them. Both annotation nodes and edges can have additional attributes stored in attribute-value pairs. Namespaces are used in order to allow conflicting annotations to be merged. For example, a token node may have two part-of-speech annotations associated with it (e.g. 'penn:vbz' and 'brown:doz'). The toolkit relies on four basic types of edges (Figure 1 ) to model linguistic annotations ranging from syntax to semantics, discourse phenomena and information structure: \u2022 spanning relation: one span root node with outgoing edges to all (token) nodes the span covers -signifies a contiguous span of tokens, e.g. a phrase or a named entity [dashed line without arrow] \u2022 dominance relation: a hierarchical annotation, e.g. from a noun phrase to a noun in a constituent structure [solid line with black arrow] \u2022 pointing relation: a non-hierarchical relation, e.g. for linking coreferent entities [bold solid line with curved arrow] \u2022 precedence relation: a path, starting from the document root node through all tokens in the order they occur in the document and ending at the last token [dotted line with unfilled arrow] While typed edges are not strictly necessary to represent linguistically annotated data in graphs 5 , 5 For example, the ISO-standardised Linguistic Annotation Framework (ISO 24612, 2012) does allow type annotations on edges, but does not require them. Importers discoursegraphs includes importers for the following tools and formats: (i) constituent and dependency structures: Tiger-XML (Mengel and Lezius, 2000), Penn Treebank (Prasad et al., 2008) and CoNLL 2009/2010 (Haji\u010d et al., 2009; Farkas et al., 2010) Additional importers can easily be implemented by parsing an input format (e.g. with lxml 6 ) and adding its tokens as nodes to a DisourseDocumentGraph. Afterwards, annotation nodes and edges can be added. To simplify the development of complex converters, you can add annotations iteratively and use the library's visualisation and document statistics functions (cf. Section 4) to check if the resulting graph matches your expectations. Exporters The library also provides a number of exporters for (i) general purpose graph formats like dot (Ellson et al., 2002) , GEFX 7 , GML 8 and GraphML (Brandes et al., 2013) , (ii) the linguistic interchange formats CoNLL 2009 and PAULA XML 1.1 (Zeldes et al., 2013) , (iii) the neo4j graph database 9both regular export via the geoff format, as well as live upload of annotated graphs to a running neo4j instance, and (iv) EXMARaLDA's exb format. Usage The API of the library has been kept deliberately simple. These five lines are all it takes to parse a document with two different annotation layers (syntax and rhetorical structure) into document graphs, merge them and convert them into a format that can be read by neo4j: import discoursegraphs as dg docgraph = dg.read_tiger ('in.xml') rstgraph = dg.read_rs3('in.rs3') docgraph.merge_graphs(rstgraph) dg.write_geoff(docgraph, 'out.geoff') Document conversion and annotation merging is also available via a command-line interface. Beyond merging, the API provides functions for basic document statistics and graph visualisations (using the browser-based IPython (P\u00e9rez and Granger, 2007) notebook 10 and its dot plugin 11 ). discoursegraphs provides functions to select nodes and edges based on their properties (e.g. membership in a layer, edge type, annotations etc.). Combined with the graph manipulation capabilities of NetworkX, this e.g. allows the user to extract meaningful substructures from multi-level annotated documents or to create trees that combine syntactic and discourse information for kernel-based machine learning, as in Joty and Moschitti (2014) . Future Work I plan to extend discoursegraphs with imand exporters for further interchange formats, i.e. GrAF (Ide and Suderman, 2007) , FoLiA (van Gompel and Reynaert, 2013) and especially Salt (Zipser et al., 2010) , in order to leverage SaltNPepper's broader variety of supported formats, which would in turn also allow users to use merged corpora in the ANNIS linguistic query and visualisation tool (Krause and Zeldes, 2014) . Acknowledgments This work was supported by Deutsche Forschungsgemeinschaft as part of the funding for project D1 in the Collaborative Research Center 632 'Information Structure' (Univ. Potsdam, HU Berlin and FU Berlin). I would also like to thank Matthias Bisping, Yulia Grishina and Tatjana Scheffler for testing the software and reporting bugs. ",
    "abstract": "discoursegraphs is a Python-based converter for linguistic annotation formats which facilitates the combination of several, heterogeneous layers of annotation of a document into a unified graph representation. The library supports a range of syntax and discourse-related formats and was successfully used to revise and merge a multilayered corpus (Stede and Neumann,  2014).",
    "countries": [
        "Germany"
    ],
    "languages": [
        ""
    ],
    "numcitedby": "8",
    "year": "2015",
    "month": "May",
    "title": "discoursegraphs: A graph-based merging tool and converter for multilayer annotated corpora"
}