{
    "article": "An automatic text summarization system can automatically generate a short and brief summary that contains a main concept of an original document. In this work, we explore the advantages of simple embedding features in Reinforcement leaning approach to automatic text summarization tasks. In addition, we propose a novel deep learning network for estimating Qvalues used in Reinforcement learning. We evaluate our model by using ROUGE scores with DUC 2001, 2002, Wikipedia, ACL-ARC data. Evaluation results show that our model is competitive with the previous models. Introduction In this work, we present extractive text summarization for a single document based on Reinforcement leaning (RL) method. One of the advantages of the extractive approach is that a summary consists of linguistically correct sentences as long as a source document has a certain level of linguistic quality. One of the most well-known solutions of extractive text summarization is to use maximal marginal relevance (MMR) (Goldstein et al., 2000) . However, MMR cannot take into account for the quality of a whole summary because of its greediness (Ryang and Abekawa, 2012) . Another solution is to use optimization techniques such as integer linear programming (ILP) to infer the scores of sentences with consideration of the quality of a whole summary (McDonald, 2007) . However, these methods have a very large time complexity so they are not applicable for text summarization tasks. A Reinforcement Learning method would be an alternative approach to optimize a score function in extractive text summarization task. Reinforcement learning is to learn how an agent in an environment behaves in order to receive optimal rewards in a given current state (Sutton, 1998) . The system learns the optimal policy that can choose a next action with the most reward value in a given state. That is to say, the system can evaluate the quality of a partial summary and determine the sentence to insert in the summary to get the most reward. It can produce a summary by inserting a sentence one by one with considering the quality of the hypothetical summary. In this work, we propose an extractive text summarization model for a single document based on a RL method. A few researchers have proposed the RL approaches in automatic text summarization (Goldstein et al., 2000; Rioux et al. 2014; Hen\u00df et al. 2015) . Previous studies mainly exploited handcrafted complex features in RL-based automatic text summarization. However, choosing important features for a task, re-implementing the features for a new domain, and re-generating new features for a new application are very difficult and timeconsuming jobs. The recent mainstream of NLP applications with Deep Learning is to reduce the burden of hand-crafted features. Embedding is one of the simplest deep learning techniques to build features that represent words, sentences, or documents. It has already shown state-of-the art performance in many NLP applications. The main contributions of our work are as follows: first, we explore the advantages of simple embedding features in RL approach to automatic text summarization tasks. Content embeddings vector and position embeddings vector are only features that our system adopts. Second, we propose a novel deep learning network for estimating Q-values used in RL. This network is devised to consider the relevance of a candidate sentence for an entire document as well as the naturalness of a generated summary. We evaluate our model by using ROUGE scores (Lin, 2004) and show that the performance of our model is comparable to that of the previous studies which rely on as many features as possible. Related Work As far as we know, Ryang and Abekawa (2012) have so far been the first ones who applied RL to the text summarization. The authors regard the extractive summarization task as a search problem. In their work, a state is a subset of sentences and actions are transitions from one state to the next state. They only consider the final score of the whole summary as reward and use TD(\u03bb) as RL framework. Rioux et al. (2014) extended this approach by using TD. They employed ROUGE as part of their reward function and used bi-grams instead of tf * idf as features. Hen\u00df and Mieskes (2015) introduced Q-learning to text summarization. They suggest RL-based features that describe a sentence in the context of the previously selected sentences and how adding this sentence changes hypothetical summary. Our work extends previous work using DQN based algorithm and embedding features. Model for Automatic text summarization In this work, we apply the Deep Q-Networks (DQN)-based model (Volodymyr et al. 2015) to automatic text summarization tasks. In the case of text summarization, the state denotes a summary which can still be incomplete and the action denotes the addition of a sentence to this summary. For using RL method in text summarization, there are two parameters that should be predefined. One is a length limitation of a summary. The other parameter is a reward value for a partial summary. In this work, we use the same length limitation and reward function used in Hen\u00df et al., (2015) . The reward function is defined as: - In the above equation, cor measures the quality of the partial summary (state) by comparing it with the corresponding human reference summary . We use the ROUGE-2 score for the measurement. Q-Network Q-learning models the value Q(s t ; a t ) of performing an action a t in the current state s t . We use a deep neural network model with a regression function to compute the Q-values. The model can calculate a Q-value based on a partial summary (current state) and a candidate sentence (action). The output Q-value indicates the expectation value that the agent can get when it selects the candidate sentence as a part of the summary. Figure 1 shows the Q-network model we propose in this work. ) ( ) (2) (3) (4) The second module (bottom right in the figure) is to represent the relationship between the partial summary and the candidate sentence. The module is constructed as a RNN (Recurrent Neural Network), in which the candidate sentence appears in the given partial summary(PS) as a history. Each sentence is represented as the two vectors which contain the content information(ContVec) and the position information(PosVec), respectively. Through the RNN, the partial summary and the candidate sentence are transformed into the final state vector (StateVec). We implement the RNN which uses GRU unit and activation function, and outputs 50-dimensional state vector. The third module (upper center in the figure) takes the DA_w and StateVec as the input, and calculates the Q-value as the output. It combines the two vectors into element-wise dots and converts them into Q-value through a linear regression function. The output Q-value is the expected value that can be obtained when a new summary is generated by inserting a candidate sentence into a partial summary. Reinforcement Learning in Text Summarization The agent of the text summarization in this work has a sentence Selector and three memories. The role of the agent is to generate a summary for an input document by using the sentence Selector. The agent has the following three memories. 1) D memory contains information about sentences in an input document. 2) PS memory contains information about sentences in a partial summary generated so far. 3) C memory contains information about the sentences that have not yet been selected in the summary. After the Selector calculates Q-values for each sentence in C memory based on information of D and PS memory, it moves the sentence with the largest Q-value from C Memory to PS Memory. RL method enables the Selector to select an appropriate sentence for generating the best summary. Our Q-Learning algorithm is similar to DQN. Please refer the Volodymyr et al. (2015) for a more detailed explanation about the algorithm. The difference between DQN and our model is table 1 and equation ( 5 Features In this work, a sentence is the unit of summarization. A sentence is represented by both a content vector and a position vector. A content vector(ContVec) represents the meaning of a sentence, and a position vector (PosVec) indicates the position of a sentence in a document. ContVec is estimated by the average of word embeddings in a sentence. We use pre-trained 50-dimensional word embeddings vector from GloVe (Pennington et al., 2014) . Due to the lack of training data, word embeddings vector are not updated during the training. The position of a sentence in a document is useful information for summarization. For example, important sentences are likely to appear in front of a newspaper article. Therefore, we adopt positional information as a main feature. The positional information has three views. 1) An absolute position of the sentence (PosSent) within a paragraph 2) An absolute position of the paragraph (PosPara) in which the sentence belongs within a section 3) An absolute position of the section (PosSect) in which the sentence belongs in a document. Each position is encoded as a 50-dimensional vector (PosSentVec, PosParaVec, PosSectVec). The vector PosVec denotes a sentence position and is calculated as: \ud835\udc43 \ud835\udc38\ud835\udc59 - \ud835\udc43 \ud835\udc46 \ud835\udc43 \ud835\udc43 \ud835\udc5f \ud835\udc43 \ud835\udc46 (6) In Figure 1 , each sentence in RNN is represented as the element-wise sum of Co V c and Po V c to take into account the meaning of the sentence as well as its position. For calculating DA w in Figure 1 , a candidate sentence A t is represented as a ContVec only. DocVec is estimated as the average of embeddings vector of words that occur in the document. Experimental Results Figure 2 shows the training progress on WIKI's validation data. We use ROUGE-2 scores for evaluation. The y-axis of the graph is the ROUGE-2 score for the validation data and the xaxis is the number of validation steps. One single evaluation is performed after every 200 times of mini-batch training. In Figure 2 , the ROUGE-2 scores rarely change until the first 50 steps. We infer that the agent tries various combinations of sentences during this period. However, the ROUGE-2 score surges rapidly between 50 and 60 steps. At this step, the agent comes to know which sentence to choose to generate the best summary. After 120 steps, the model reaches a stable status. Table 3 shows the first two sentences of the summary results for the Wikipedia article 'Banded sugar ant'. The number '#/#' in Table 3 indi-cates the positional information. In the third row of table 3, 1/7 means that it was extracted from the first section of the seven sections of the source text. This section has 3 paragraphs, and the first paragraph out of 3 paragraphs, which has 4 sentences. 1/3 and 1/4 mean that the system summary sentence is extracted from this position. Document Title: Banded sugar ant System Summary 1 1/7 The banded sugar ant was first described by German entomologist Wilhelm Ferdinand Erichson, who named it \"Formica consobrina\" in 1842. The banded sugar ant (\"Camponotus consobrinus\"), also known as the sugar ant, is a species of ant endemic to Australia. 2 A member of the genus \"Camponotus\" in the subfamily Formicinae, it was described by German entomologist Wilhelm Ferdinand Erichson in 1842.  Our method outperforms the previous studies (TextRank (Mihalcea and Tarau, 2005) , L2R (Hen\u00df et al, 2015) , Regression (Hen\u00df et al, 2015) , RL-full (Hen\u00df et al, 2015) ) on ACL-ARC and WIKI data but achieves lower performance than the previous studies on DUCs. However, the differences of ROUGE scores between the models are relatively small. These experimental results show that our model is competitive with the previous models. Also, the embedding features have proven to be useful in RL method. Conclusion In this work, we propose an extractive text summarization model for a single document based on RL method. We use only embedding features that convey meaning and position of a sentence. We also extend the previous study by introducing DQN-based algorithms to train Q-network efficiently and effectively. Evaluation results show that our model is promising for text summarization even though it uses only simple features. Finally, we would like to apply our method to more complex summarization tasks such as multidocument or query focus summarization. Acknowledgments",
    "funding": {
        "defense": 0.0,
        "corporate": 0.0,
        "research agency": 1.9361263126072004e-07,
        "foundation": 0.0,
        "none": 1.0
    },
    "reasoning": "Reasoning: The article does not mention any specific funding sources, including defense, corporate, research agency, foundation, or any other type of financial support for the conducted research.",
    "abstract": "An automatic text summarization system can automatically generate a short and brief summary that contains a main concept of an original document. In this work, we explore the advantages of simple embedding features in Reinforcement leaning approach to automatic text summarization tasks. In addition, we propose a novel deep learning network for estimating Qvalues used in Reinforcement learning. We evaluate our model by using ROUGE scores with DUC 2001, 2002, Wikipedia, ACL-ARC data. Evaluation results show that our model is competitive with the previous models.",
    "countries": [
        "South Korea"
    ],
    "languages": [
        "German"
    ],
    "numcitedby": 17,
    "year": 2017,
    "month": "November",
    "title": "Automatic Text Summarization Using Reinforcement Learning with Embedding Features",
    "values": {
        "building on past work": "As far as we know, Ryang and Abekawa (2012) have so far been the first ones who applied RL to the text summarization. The authors regard the extractive summarization task as a search problem. Rioux et al. (2014) extended this approach by using TD. Hen\u00df and Mieskes (2015) introduced Q-learning to text summarization. They suggest RL-based features that describe a sentence in the context of the previously selected sentences and how adding this sentence changes hypothetical summary. Our work extends previous work using DQN based algorithm and embedding features.",
        "novelty": " Content embeddings vector and position embeddings vector are only features that our system adopts.  Second, we propose a novel deep learning network for estimating Q-values used in RL. This network is devised to consider the relevance of a candidate sentence for an entire document as well as the naturalness of a generated summary.",
        "performance": "Evaluation results show that our model is competitive with the previous models. Our method outperforms the previous studies (TextRank (Mihalcea and Tarau, 2005) , L2R (Hen\u00df et al, 2015) , Regression (Hen\u00df et al, 2015) , RL-full (Hen\u00df et al, 2015) ) on ACL-ARC and WIKI data but achieves lower performance than the previous studies on DUCs. However, the differences of ROUGE scores between the models are relatively small. These experimental results show that our model is competitive with the previous models. Evaluation results show that our model is promising for text summarization even though it uses only simple features."
    }
}