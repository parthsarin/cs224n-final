{
    "article": "This paper discusses issues in building a 54-thousand-word Korean Treebank using a phrase structure annotation, along with developing annotation guidelines based on the morpho-syntactic phenomena represented in the corpus. Various methods that were employed for quality control and the evaluation on the Treebank are also presented. 'This word count is computed on tokenized texts and includes symbols. Introduction With growing interest in Korean language processing, numerous natural languages processing (NLP) tools for Korean, such as part-of-speech (POs) taggers, morphological analyzers , parsers, have been developed. This progress was possible through the availability of large-scale raw text corpora and POS tagged corpora (ETRI, 1999; Yoon and Choi, 1999a; Yoon and Choi, 1999b) . However, no large-scale bracketed corpora are currently available to the public, although efforts have been made to develop guidelines for syntactic annotation (Lee et al., 1996; Lee et al., 1997) . As a first step towards addressing this issue, we built a 54-thousand-word s Korean Treebank using a phrase structure annotation. At the same time, we also developed annotation guidelines based on the morpho-syntactic phenomena represented in the corpus, over the period of Jan. 2000 and April 2001 . The corpus that we used for the Korean Treebank consists of texts from military language training manuals. These texts contain information about various aspects of the military, such as troop movement, intelligence gathering, and equipment supplies, among others. This corpus is part of a Korean/English bilingual corpora that was used for domain specific Korean/English machine translation project at the University of Pennsylvania. One of the main reasons for annotating this corpus was to train taggers and parsers that can be used for the MT project. In this paper, we first discuss some issues in developing the annotation guidelines for POS tagging and syntactic bracketing. We then detail the annotation process in \u00a73, including various methods we used to detect and correct annotation errors. \u00a74 presents some statistics on the size of the corpus, and \u00a75 discusses the results of the evaluation on the Treebank. Guideline development The guiding principles employed in developing the annotation guidelines were theory-neutralness (whenever possible), descriptive accuracy and consistency. To this end, various existing knowledge sources were consulted, including theoretical linguistic literature on Korean, publications on Korean descriptive grammar, as well as research works on building tagged Korean copora by such institutions as KAIST and ETRI (ETRI, 1999; Lee et al., 1996; Lee et al., 1997; Yoon and Choi, 1999a, Yoon and Choi, 1999b) . Ideally, complete guidelines should be available to the annotators before annotation begins. However, linguistic problems posed by corpus is much more diverse and complicated than those discussed in theoretical linguistics or grammar books, and new problems surface as we annotate more data. Hence, our guidelines were revised, updated and enriched incrementally as the annotation process progressed. In cases where no agreement could be reached among several alternatives, the one most consistent with the overall guidelines was chosen, with the consideration that the annotated corpus may be converted to accommodate other alternatives when needed. In the next two subsections, we describe in more detail the main points of POS tagging guidelines and syntactic bracketing guidelines. POS tagging and morphological analysis Korean is an agglutinative language with a very productive inflectional system. Inflections include postpositions, suffixes and prefixes on nouns, and tense morphemes, honorifics and other endings on verbs and adjectives. For this reason, a fully inflected lexical form in Korean has often been called a WORD-PHRASE (` 1. To accurately describe this characteristic of Korean morphology, each word-phrase is not only assigned with a POS tag, but also annotated for morphological analysis. Our Treebank uses two major types of POS tags: 14 content tags and 15 function tags. For each word-phrase, the base form (stem) is given a content tag, and its inflections are each given a function tag. Word phrases are separated by a space, and within a word-phrase, the base form and inflections are separated by a plus sign (+). In addition to POS tags, the tagset also consists of 5 punctuation tags. An example of tagged sentence is given in (1).2 The main criterion for tagging and also for resolving ambiguity is syntactic distribution: i.e., a word may receive different tags depending on the syntactic context in which it occurs. For example, '0)4' (some time ago) is tagged as a common noun (NNC) if it modifies another noun, and is tagged as an adverb (ADV) if it modifies a verb. (2) a. 0)-7/1-/ADV 7)-/VV+WEPF+4/EFN someAime_ago go-Past-Deci b. 01-7/1-/NNC+9 /PCA /NNC someAime_ago-Gen promise One important decision we had to make was whether to treat case postpositions and verbal endings as a bound morpheme or as a separate word. The decision we make on this issue would have consequences on syntactic bracketing as well. If we were* to annotate them as separate words, it would be only natural to bracket them as independent syntactic units, which project 2 NNC and NNX are noun tags, PAD, PCA and PAU are noun inflectional tags, ADV is an adverb tag, XSV is a verbalizing suffix tag, EFN is a sentence final ending tag, and SFN is a punctuation tag. For a detailed description of the tagset, see (Han and Han, 2001) . their own functional syntactic nodes. Although some may favor this approach as theoretically more sound, from a descriptive point of view, they are more like bound morphemes, in that they are rarely separated from stems in written form, and native speakers of Korean share the intuition that they can never stand alone meaningfully in both written and spoken form. To reflect this intuition, we have chosen to annotate the inflections as bound morphemes assigning them each with a function tag. Syntactic bracketing Penn Korean Treebank uses phrase structure annotation for syntactic bracketing. Similar phrase structure annotation schemes were also used by Penn English Treebank (Marcus et al., 1993; Bies et al., 1995) , Penn Middle English Treebank (Kroch and Taylor, 1995) and Penn Chinese Treebank, (Xia et al., 2000b) . This annotation is preferable to a pure dependency annotation because it can encode richer structural information. For instance, some of the structural information that a phrase structure annotation can encode, while dependency annotation cannot, are (i) phrasal level node labels such as VP and NP; (ii) explicit representation of empty arguments; (iii) distinction between complementation and adjunction; and (iv) use of traces for displaced constituents. Although having traces and empty arguments may be controversial, it has been shown in (Collins, 1997; Collins et al., 1999) that such rich structural annotation is crucial in improving the efficiency of stochastic parsers that are trained on Treebanks. Moreover, it has been shown in (Rambow and Joshi, 1997 ) that a complete mapping from dependency structure to phrase structure cannot be done, although the other direction is possible. This means that a phrase structure Treebank can always be converted to a dependency Treebank if necessary, but not the other way around. The bracketing tagset of our Treebank can be divided into four types: (i) POS tags for headlevel annotation (e.g., NNC, VV, ADV); (ii) syntactic tags for phrase-level annotation (e.g., NP, VP, ADVP); (iii) function tags for grammatical function annotation (e.g., -SBJ for subject, -OBJ for object, -ADV for adjunct); and (iv) empty category tags for dropped arguments (*pro*), traces (*T*), and so on. \u2022 In addition to using function tags, arguments and adjuncts are distinguished structurally as well. If YP is an internal argument of X, then YP is in sister relation with Y, as represented in (3a). If YP is an adjunct of X, then YP adjoins onto XP, a projection of X, as in (3b). ( 3) XP XP YP X YP XP X (a) Argument (b) Adjunct The syntactic bracketing of example ( 1 ) is given in the top tree of Table 1 . This example contains an empty subject, which is annotated as (NP-SBJ *pro*). The object NP `4-AJ rg-/NNC+-t/PCA' is assigned with -OBJ function tag, and since it is an argument of the verb, it is structurally a sister of the verb. The adverb is an adjunct of the verb, and so it is adjoined to the VP, the phrasal projection of the verb. An example sentence with a displaced constituent is given in (4). In this example, the object NP `t118-1-' appears before the subject, while its canonical position is after the subject. Displacement of argument NPs is called SCRAMBLING.  In our annotation in the second tree of Table 1 , the object is adjoined to the main clause (S), and leaves a trace (*T*) in its original position which is coindexed with it. A potential cause for inconsistency is making argument/adjunct distinction. To ensure consistency in this task, we extracted all the verbs and adjectives from the corpus, and created what we call a PREDICATE-ARGUMENT LEXICON, based on Korean dictionaries, usages in the corpus and our own intuition. This lexicon lists verbs and adjectives with their subcategorization frame. For instance, the verb `-&-g-ti-' (operate) is listed as a transitive verb requiring a subject and object obligatory arguments. We also have a notation for optional arguments for some verbs. For instance, in (5), it is not clear whether `. 6, 1-2.01)' (to school) is an argument or an adjunct, whereas ' 011' (yesterday) and ' (we) seem to offer clear intuition as to their adjuct and argument status, respectively. This is resolved by listing such categories as a locative optionalargument for `71) (to go) in the predicate-argument lexicon. (5) -1-F-it-ciix-11 ti-z1 ?jct.. we-Top yesterday school-to go-Past-Decl `We went to school yesterday.' In syntactic bracketing, while an obligatory arguments are annotated with -SBJ or -OBJ function tag, if a sentence contains an optional argument, it is annotated with -COMP function tag. Moreover, a missing obligatory argument is annotated as an empty argument, but a missing optional argument does not count as an empty argument. Another potential cause for inconsistency is handling ambiguous sentences. To avoid such inconsistencies, we have classified the types of ambiguities, and specified the treatment of each type in the bracketing guidelines. For example, a subset of Korean adverbs can occur either before or after the subject. When the subject is phonologically empty, in principle, the empty subject can be marked either before or after the adverb without difference in meaning if there is no syntactic/contextual evidence for favoring one analysis over the other. In this case, to avoid any unnecessary inconsistencies, a 'default' position for the subject is specified and the empty subject is required to be put before the adverb. An example annotation is already given in Table 1 . 3See (Han et al., 2001) for the documentation of our syntactic bracketing guidelines. Annotation process The annotation proceeded in three phases: the first phase was devoted to morphological analysis and POS tagging, the second phase to syntactic bracketing and the third phase to quality control. Phase I: morphological analysis and POS tagging We used an off-the-shelf Korean morphological analyzer (Yoon et al., 1999) to facilitate the POS tagging and morphological analysis. We ran the entire corpus through this morphological analyzer and then automatically converted the output POS tags to the set of POS tags we had defined. We then hand-corrected the errors in two passes. The first pass took roughly two months to complete by two annotators. During this period, various morphological issues from the corpus were discussed in weekly meetings and guidelines for annotating them were decided and documented. In the second pass, in about a month, each annotator double-checked and corrected the files annotated by the other annotator. Phase II: Syntactic bracketing The syntactic bracketing also went through two passes. The first pass took about 6 months to complete by three annotators, and the second pass took about 4 months to complete by two annotators. In the second pass, the annotators double-checked and corrected the bracketing done during the first pass. Phase II took much longer than Phase I because all the syntactic bracketing had to be done from scratch. Moreover, there were far more syntactic issues to be resolved than morphological issues. As in Phase I, weekly meetings were held to discuss and investigate the syntactic issues from the corpus and annotation guidelines were decided and documented accordingly. The bracketing was done using the already existing emacs-based interface developed for Penn English Treebanking (described in (Marcus et al., 1993) ), which we customized for Korean Treebanking. Using this interface helped to avoid bracketing mismatches and errors in syntactic tag labeling. Phase III: Quality control In order to ensure accuracy and consistency of the corpus, the entire third phase of the project was devoted to quality control. During this period, several full-scale examinations on the whole corpus were conducted, checking for inconsistent POS tag and illegal syntactic bracketings. Lex-Tract was used to detect formatting errors (Xia et al., 2000a) . Correcting POS tagging errors Errors in POS tagging can be classified into three types: (a) assignment of an impossible tag to a morpheme (b) ungrammatical sequence of tags assigned to a word-phrase, and (c) wrong choice of a tag (sequence) candidate in the presence of multiple tag .(sequence) candidates. Type (a) was treated by compiling a tag dictionary for the entire list of morphemes occurring in the corpus. For closed lexical categories such as verbal endings, postposition markers and derivational suffixes, all of them were examined to ensure that they are assigned with correct tags. For open-set categories such as nouns, adverbs, verbs and so on, only those word-tag combinations exhibiting a low frequency count were individually checked. Treating type (b) required knowledge in morphosyntax of Korean. First, a table of all tag sequences and their frequencies in the corpus was compiled, as shown in Table 2 . Those tag sequences found less than 3 times were all manually checked for their grammaticality, and corrected if found illegal. As a next step, a set of hand-crafted morphotactic rules were created in the form of regular expressions. Starting from the most rigorous patterns, we checked the tag sequences against the patterns already incorporated in the set of grammatical rules, expanding the set as needed or invalidating a tag sequence according to the outcome. Type (c), assignment of a wrong tag in the case of ambiguity, cannot be handled by looking at the morphemes by themselves, but syntactic context must be considered: therefore this type of problems were treated along with other illegal syntactic structures. Correcting illegal syntactic structures To correct errors in syntactic bracketing, we targeted each local tree structure (parent node + daughter nodes). To do this, all local tree structures were extracted in the form of context-free rules (Table 3 ). For local trees with a lexical daughter node, the lexical information was ignored and only POS information on the node was listed in the rule. The next step taken was to define the set of context-free rules for Korean. For each possible intermediate node label (phrasal categories as S, NP, VP and a few lexical categories .such as VV and VJ) on the lefthand side of the rule, its possible descendant node configuration was defined as a regular expression, as seen in ( 6 Example (6a) shows that a local tree with VP as the parent node can have as its daughter nodes any numbers of NP-OBJ, NP-COMP, S-COMP or S-OBJ nodes followed by a VV node, which is the head. Rank Count Count% As with the case of word-internal tag sequences, the most frequent context-free rules were examined and incorporated into the set of rules first, and this set gradually grew as more and more rules were examined and decided to be included in the rule set or rejected to be corrected later. As a result, a large number of illegal syntactic bracketings were identified and corrected. Particularly frequent types of syntactic tagging errors were: (a) redundant phrasal projections (i.e. VP -4 VP), (b) missing phrasal projections, and (c) misplaced or ill-scoped modifying elements such as relative clauses and adverbial phrases/clauses. Corpus search We compiled a list of error-prone or difficult syntactic constructions that had been observed to be troublesome and confusing to annotators, and used corpus search tools (Randall, 2000) to extract sentence structures containing each of them from the Treebank. Each set of extracted structures were then examined and corrected. The list of constructions we looked at in detail include relative clauses, complex noun phrases, light verb constructions, complex verbs, and coordinate structures. By doing a construction by construction check of the annotation, not only were we able to correct errors but also enhance the consistency of our annotation. Statistics on the size of corpus In this section, we present some quantitative aspects of the Penn Korean Treebank corpus. The corpus is a relatively small one with 54,528 words and 5,083 sentences, averaging 9.158 words per sentence. A total of 10,068 word types are found in the corpus, therefore the measured type/token ratio (TTR) is rather high at 0.185. However, for languages with rich agglutinative morphology such as Korean, even higher type/token ratios are not uncommon. For comparison, a comparably sized portion (54,547 words) of the ETRI corpus, an annotated corpus with POS  tags, was taken and analyzed. 4  Taking individual morphemes, rather than words in their fully inflected forms, as the evaluation unit, the ratio becomes much smaller: Penn Korean Treebank yields the morpheme type/token ratio of 0.038 (93,148 tokens and 3,555 types). Compared to the same portion of ETRI corpus, we can see that Penn Korean Treebank still shows a lower ratio: ETRI corpus showed the morpheme type/token ratio of 0.086 (101,100 morpheme tokens and 8,734 unique morpheme types). The result suggests that Penn Korean Treebank, aimed to be a domain-specific corpus in the military domain, is highly homogeneous and low in complexity at least in terms of its lexical content. ETRI corpus, on the other hand, consists of texts from different genres including novels, news articles and academic writings, hence the higher counts of lexical entries per word token. In our future work, we hope to expand the Treebank corpus in order to achieve a broader and more general coverage. 4 Total of 12 files: essay01.txt, exp110.txt, exp134.txt, news02.txt, newsp05.txt, newspl2.txt, newspl5.txt,   newspl6.txt, nove103.txt, nove113.txt, nove115.txt and novell9.txt. For fair comparison, the POS annotated text was re-tokenized to suit the Penn Korean Treebank standards. Evaluation For evaluating the consistency and accuracy of the Treebank, we used Evalb software that produces three metrics, bracketing precision, bracketing recall and numbers of crossing brackets, as well as tagging accuracy. For the purposes of evaluation, we randomly selected 10% of the sentences from the corpus in the beginning of the project and saved them to a file. These sentences were then POS tagged and bracketed just like any other sentences in the corpus. After the first pass of syntactic bracketing, however, they were double annotated by two different annotators. We also constructed a Gold Standard annotation for these test sentences. We then ran Evalb on the two annotated files produced by the two different annotators to measure the inter-annotator consistency. Evalb was also run on the Gold Standard and the annotation file of the 1st annotator, and on the Gold Standard and the annotation file of the 2nd annotator to measure the individual annotator accuracy. Most of the inter-annotator inconsistencies belonged to one of the following types: \u2022 In coordinated sentences with empty subject and empty object, whether the level of coordination is VV, VP or 5; \u2022 Whether a sentence has empty object argument or not; \u2022 Whether a noun modified by a clause is a relative clause construction or a complex NP; \u2022 Whether a verb is a light verb or a regular verb; \u2022 In a complex sentence in which the subject of the matrix clause and the subordinate clause are coreferential, whether a topic marked NP is the subject of the matrix clause or the subordinate clause; \u2022 In a sentence with a topic marked object NP and an empty subject, whether the object NP has undergone scrambling over the empty subject or not; \u2022 For an NP with an adverbial postposition 5 , whether it is an argument or an adjunct; \u2022 When an adverb precedes another adverb which in turn precedes a verb, whether the first adverb modifies the adverb or the verb. After the evaluation was done, as a final cleanup of the Treebank, using corpus search tools, we extracted and corrected structures that belong to those that may potentially lead to the types of inconsistencies described above. 5 Adverbial postpositions correspond to English prepositions in function, e.g., Conclusion We have described in detail the annotation process as well as the methods we used to ensure inter-annotator consistency and annotation accuracy in creating a 54K word Korean Treebank.6 We have also discussed the major principles employed in developing POS tagging and syntactic bracketing guidelines. Despite the small size of 'the Treebank, we were able to successfully train a morphological tagger (95.78%/95.39% precision/recall) and a parser (73.45% dependency accuracy) using the data from the Treebank. They were incorporated to Korean/English machine translation system which were jointly developed by University of Pennsylvania and CoGenTex (Han et al., 2000) . We plan to release the Treebank in the near future making it available to the wider community. The corpus we used for the Korean Treebank is originally from a Korean/English parallel copora, and we are currently in the process of creating a Korean/English parallel Treebank by treebanking the English side and aligning the two Treebanks. We would also like to expand the size and coverage of the corpus by treebanking newswire corpora, employing as rigorous an annotation methodology as we did for the 54K Treebank. We hope to speed up the annotation process by automaticizing the annotation process as much as possible (Cf., along the lines described in (Skut et al., 1997) for NEGRA corpus at the University of Saarbriiken), incorporating a parser as well as a tagger to the annotation interface. Acknowledgements We thank Aravind Joshi, Tony Kroch and Fei Xia for valuable discussions on many occasions. -Special thanks are due to Owen Rambow, Nari Kim and Juntae Yoon for discussions in the initial stage of the project. The work reported in this paper was supported by contract DAAD 17-99-C-0008 awarded by the Army Research Lab to CoGenTex, Inc., with the University of Pennsylvania as a subcontractor, NSF Grant -VerbNet, IIS 98-00658, and DARPA Tides Grant N66001-00-1-8915.",
    "abstract": "This paper discusses issues in building a 54-thousand-word Korean Treebank using a phrase structure annotation, along with developing annotation guidelines based on the morpho-syntactic phenomena represented in the corpus. Various methods that were employed for quality control and the evaluation on the Treebank are also presented. 'This word count is computed on tokenized texts and includes symbols.",
    "countries": [
        "United States",
        "Canada"
    ],
    "languages": [
        "Korean",
        "English"
    ],
    "numcitedby": "31",
    "year": "2001",
    "month": "January/February",
    "title": "{P}enn {K}orean Treebank : Development and Evaluation"
}