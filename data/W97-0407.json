{
    "article": "The EUTRANS project, aims at developing Machine Translation systems for limited domain applications. These systems accept speech and text input, and are trained using an example based approach. The translation model used in this project is the Subsequential Transducer, which is easily integrable in conventional speech recognition systems. In addition, Subsequential Transducers can be automatically learned from corpora. This paper describes the use of categories for improving the EUTRANS translation systems. Experimental results with the task defined in the project show that this approach reduces the number of examples required for achieving good models. Introduction The EUTRANS project 1 (Amengual et al., 1996a) , funded by the European Union, aims at developing Machine Translation systems for limited domain applications. These systems accept speech and text input, and are trained using an example based approach. The translation model used in this project is the Subsequential Transducer (SST), which is easily integrable in conventional speech recognition systems by using it both as language and translation model (Jimdnez et al., 1995) . In addition, SSTs can be automatically learned from sentence aligned bilingual corpora (Oncina et ai., 1993) . This paper describes the use of categories both in the training and translation processes for improving the EUTRANS translation systems. The approach presented here improves that in (Vilar et al., 1995) , the integration of categories within the systems is simpler, and it allows for categories grouping units larger than a word. Experimental results with the Traveler Task, defined in (Amengual et al., 1996b) , show that this method reduces the number of examples required for achieving good models. The rest of the paper is structured as follows. In section 2 some basic concepts and the notation are introduced. The technique used for integrating categories in the system is detailed in section 3. Section 4 presents the speech translation system. Both speech and text input experiments are described in section 5. Finally, section 6 presents some conclusions and new directions. Basic Concepts -rid Notation Given an alphabet X, X* is the free monoid of strings over X. The symbol A represents the empty string, first letters (a, b, c, ...) represent individual symbols of the alphabets and last letters (z, y, x, ...) represent strings of the free monoids. We refer to the individual elements of the strings by means of subindices, as in x = al...an. Given two strings x,y E X', xy denotes the concatenation of x and y. Subsequential Transducers A Subsequential Transducer (Berstel, 1979 ) is a deterministic finite state network that accepts sentences from a given input language and produces associated sentences of an output language. A SST is composed of states and arcs. Each arc connects two states and it is associated to an input symbol and an output substring (that may be empty). Translation of an input sentence is obtained starting from the initial state, following the path corresponding to its symbols through the network, and concatenating the corresponding output substrings. Formally, a SST is a tuple r = (X, Y, Q, q0, E, o-) where X and 1,\" are the input and output alphabets, Q is a finite set of states, qo E Q is the initial state, E E Q x X x Y\" x ~ is a set of arcs satisfying the determinism condition, and a : Q ~ Y\" is a state emission function 2. Those states for which o\" is defined are usually called final states. The determinism condition means that, if (p, a. y, q) and (p, a, y', q') belong to E, then y = y' andq=q'. Given astringx = al...an E X', a sequence (qo~al,yl,ql) .... , (qn-l,a,~,yn,q,~) is a valid path if (qi-1, ai, Yi, qi) belongs to E for every i in 1,..., n, and qn is a final state. In case there exists such a valid path for z, the translation of z by r is yl... yna(q~). Otherwise, the translation is undefined. Note that due to the condition of determinism, there can be no more than one valid path, and hence at most one translation, for a given input string. Therefore, r defines a function between an input language, Lt C_ X \u00b0, and an output language, Lo C Y*. Both Lt and Lo are regular languages and their corresponding automata are easily obtainable from the SST. In particular, an automaton for Lt can be obtained by eliminating the output of the arcs and states, and considering the final state set of the automaton being the same as in the SST. A state is useless if it is not contained in any valid path. Useless states can be eliminated from a SST without changing the function it defines. In section 3, we will relax the model. Instead of imposing the determinism conditition, we will only enforce the existence of at most one valid path in the transducer for each input string (nonambiguity). We will call them Unambiguous SSTs (USSTs). Standard algorithms for finding the path corresponding to a string in an unambigous finite state automaton (see for instance (Hopcroft and UNman, 1979) ) can be used for finding the translation in a USST. When the problem is the search for the best path in the expanded model during speech translation (see section 4), the use of the Viterbi algorithm (Forney, 1973) guarantees that the most likely path will be found. Inference of Subsequential Transducers The use of SSTs to model limited domain translation tasks has the distinctive advantage of allowing an automatic and efficient learning of the translation models from sets of examples. An inference algorithm known as OSTIA (Onward Sub-21n this paper, the term function refers to partial functions. We will use f(z) = @ to denote that the function .f is undefined for ~. sequential Transducer Inference Algorithm) allows the obtainment of a SST that correctly models the translation of a given task, if the training set is representative (in a formal sense) of the task (Oncina et al., 1993) . Nevertheless, although the SSTs learned by OSTIA are usually good translation models, they are often poor input language models. In practice, they very accurately translate correct input sentences, but also accept and translate incorrect sentences producing meaningless results. This yields undesirable effects in case of noisy input, like the one obtained by OCR or speech recognition. To overcome this problem, the algorithm OSTIA-DR (Oncina and Var6, 1996) uses finite state domain (input language) and range (output language) models, which allow to learn SSTs that only accept input sentences and only produce output sentences compatible with those language models. OSTIA-DR can make use of any kind of finite state model. In particular, models can be n-testable automata, which are equivalent to n-grams (Vidal et al., 1995) and can be also automatically learned from examples. Introducing Word Categories in the Learning and Translation Processes An approach for using categories together with SSTs was presented in (Vilar et al., 1995) , proving it to be useful in reducing the number of examples required for learning. However, the approach presented there was not easily integrable in a speech recognition system and did not provide for the case in which the categories included units larger than a word. For the EUTRANS project, the approach was changed so that a single USST would comprise all the information for the translation, including elementary transducers for the categories. These steps were followed: \u2022 CATEGORY IDENTIFICATION. The categories used in EUTRANS were seven: masculine names, femenine names, surnames, dates, hours, room numbers, and general numbers. The election of these categories was done while keeping with the example based nature of the project. In particular, the categories chosen do not need very specific rules for recognising them, the translation rules they follow are quite simple, and the amount of special linguistic knowledge introduced was very low. \u2022 CoRPus CATEGORIZATION. Once the cate- gories were defined, simple scripts substituted the words in the categories by adequate labels, so that the pair (ddme la Have de la habitaci6n ciento veintitrds -give me the key to room one two three) became (dime Is Uave de la habitaci6n $ROOM -give me the key to room SROOM), where $ROOM is the category label for room numbers. \u2022 INITIAL MODEL LEARNING. The categorised corpus was used for training a model, the initial SST. \u2022 CATEGORY MODELLING. For each category, a simple SST was built: its category SST (cSST). \u2022 CATEGORY EXPANSION. The arcs in the initial SST corresponding to the different cate-gories were expanded using their cSSTs. A general view of the process can be seen in The category expansion step is a bit more complex than just substituting each category-labeled arc by the corresponding cSST. The main problems are: (I) how to insert the output of the cSST within the output of the initial transducer; (2) how to deal with more than one final state in the cSST; (3) how to deal with cycles in the cSST involving its initial state. The problem with the output had certain subtelities, since the translation of a category label can appear before or after the label has been seen in the input. For example, consider the transducer in Figure2(a) and a Spanish sentence categorised as me voy a $HOUR, which corresponds to the categorised English one I am leaving at $HOUR. Once me roy a is seen, the continuation can only be $HOUR, so the initial SST, before seeing this category label in the input, has already produced the whole output (including $HOUR). Taking this into account, we decided to keep the output of the initial SST and to include there the information necessary for removing the category labels. To do this, the label for the category was considered as a variable that acts as a placeholder in the output sentence and whose contents are also fixed by an assignment appearing elsewhere within that sentence. In our example, the expected output for me roy alas tres y media could be I am leaving at $HOUR $HOUR = [half past three]. This assumes that each category appears at most once within each sentence. The expanded model is obtained by an iterative procedure which starts with the initial SST. Each time the procedure finds an arc whose input symbol is a category label, it expands this arc by the adequate cSST producing a new model. This expansion can introduce non-determinism, so these new models are now USSTs. When every arc of this kind has been expanded, we have the expanded USST. The expansion of each arc follows these steps: \u2022 Eliminate the arc. \u2022 Create a copy of the cSST corresponding to the category label. \u2022 Add new arcs linking the new cSST with the USST. These arcs have to ensure that the output produced in the cSST is embraced between c= [ and ] , c being the category label. \u2022 Eliminate useless states. Formally, we have an USST 7\" = (X,Y,Q, qo, E,a), a cSST r~ = (X,Y, Qc, qoe, E~,ac), where we assume that ac(qoc = 0, and an arc (p, c, z, q) e ~ E. We will produce a new USST r' = (x,v, QuQ~,qo,(E-(p,e,z,q) )u E~,a'). The new elements are: \u2022 The set Q~ is disjoint with Q and there exists a bijection \u00a2 : Qc ~ Q~. \u2022 The new set of arcs is: Aa\u00a2(s) # 0} E'~ = {(\u00a2( U {(p,a, zc=[ya~(s)],q)[(qo\u00a2,a,y,s) E Ec) ^so(s) ~ o} Note that this solves the problems deriving from the cSST having multiple final states or cycles involving the initial state. The price to pay is the introduction of non-determinism in the model. \u2022 The new state emission function is: { a(s) ifsEQ Finally, the useless states that may appear during this construction are removed. A simple example of the effects of this procedure can be seen on Figure 2 . The drawing (a) depicts the initial SST, (b) is a cSST for the hours between one and three (in o'clock and half past forms), and the expanded USST is in (c). Overview of the Speech Tr-an.~lation System A possible scheme for speech translation consists in translating the output of a conventional Continuous Speech Recognition (CSR) front-end. This implies that some restrictions present in the translation and the output language, which could enhance the acoustic search, are not taken into account. In this sense, it is preferable to integrate the translation model within a conventional CSR system to carry out a simultaneous search for the recognised sentence and its corresponding translation. This integration can be done by using a SST as language and translation model, since it has included in the learning process the restrictions introduced by the translation and the output language. Experimental results show that better performance is achieved (Jimdnez et al., 1994; Jim/mez et al., 1995) . Thus, our system can be seen as the result of integrating a series of finite state models at different levels: \u2022 ACOUSTIC LEVEL. Individual phones are represented by means of Hidden Markov Models (HMMs). \u2022 LEXICAL LEVEL. Individual words are represented by means of finite state automata with arcs labeled by phones.  In our case, the integration means the substitution of the arcs of the USST by the automata describing the input language words, followed by the substitution of the arcs in this expanded automata by the corresponding HMMs. In this way, a conventional Viterbi search (Fomey, 1973) for the most likely path in the resulting network, given the input acoustic observations, can be performed, and both the recognised sentence and its translation are found by following the optimal path. Experiments The Traveler Task The Traveler Task (Amengual et al., 1996b ) was defined within the EUTRANS project (Amengual et al., 1996a) . It is more realistic that the one in (Castellanos et al., 1994) , but, unlike other corpora such as the Hansards (Brown et al., 1990) , it is not unrestricted. The general framework established for the Traveler Task aims at covering usual sentences that can be needed in typical scenarios by a traveler visiting a foreign country whose language he/she does not speak. This framework includes a great variety of different translation scenarios, and thus results appropriate for progressive experimentation with increasing level of complexity. In a first phase, the scenario has been limited to some human-tohuman communication situations in the reception of a hotel: \u2022 Asking for rooms, wake-up calls, keys, the bill, a taxi and moving the luggage. \u2022 Asking about rooms (availability, features, price). \u2022 Having a look at rooms, complaining about and changing them. \u2022 Notifying a previous reservation. \u2022 Signing the registration form. \u2022 Asking and complaining about the bill. \u2022 Notifying the departure. \u2022 Other common expressions. The Traveler Task text corpora are sets of pairs, each pair consisting in a sentence in the input language and its corresponding translation in the output language. They were automatically built by using a set of Stochastic, Syntax-directed Translation Schemata (Gonzalez and Thomason, 1978) with the help of a data generation tool, specially developed for the EUTRANS project. This software allows the use of several syntactic extensions 1: Some examples of sentence pairs from the Traveler Task. Spanish: Pot favor, ~quieren pedirnos un taxi para la habitacidn trescientos diez? English: \" Will you ask for a taxi for room number three one oh for us, please? Spanish: DeseaHa reservar una habitaciSn tranquiIa con teldfono y teIevisidn hasta pasado mal~ana. German: Ich mSchte ein ruhiges Zimmer mit TeIefon und Fernseher his iibermorgen reservieren. Spanish: zMe pueden dar las llaves de la habitaciSn, por favor? Italian: Mi potreste dare le chiavi della stanza, per favore? to these schema specifications in order to express optional rules, permutation of phrases, concordance (of gender, number and case), etc. The use of automatic corpora generation was convenient due to time constrains of the first phase of the EUTRANS project, and cost-effectiveness. Moreover, the complexity of the task can be controlled. The languages considered were Spanish as input and English, German and Italian as output, giving a total of three independent corpora of 500,000 pairs each. Some examples of sentence pairs are shown in Table I . Some features of the corpora can be seen in Table 2 . For each language, the test set perplexity has been computed by training a trigram model (with simple fiat smoothing) using a set of 20,000 random sentences and computing the probabilities yielded by this model for a set of i0,000 independent random sentences. The lower perplexity of the output languages derives from a design decision: multiple variants of the input sentences were introduced to account for different ways of expressing the same idea, but they were given the same translation. Finally, a multispeaker speech corpus for the task was acquired. It consists of 2,000 utterances in Spanish. Details can be found in (Amengual et al., 1997a) . Text Input Experiments Our approach was tested with the three text corpora. Each one was divided in training and test sets, with 490,000 and 10,000 pairs, respectively. A sequence of models was trained with increasing subsets of the training set. Each model was tested using only those sentences in the test set that were not seen in training. This has been done because a model trained with OSTIA-DR is guaranteed to reproduce exactly those sentences it has seen during learning. The performance was evaluated in terms of Word Error Rate (WER), which is the percentage of output words that has to be inserted, deleted and substituted for they to exactly match the corresponding expected translations. The results for the three corpora can be seen on Table 3 . The columns labeled as \"Different\" and \"Categ.\", refer to the number of different sentences in the training set and the number of different sentences after categorization. Graphical representations of the same results are on Figures 3,  4 and 5 . As expected, the use of lexical categories had a major impact on the learning algorithm. The differences in WER attributable to the use of lexical categories can be as high as about a 40% in the early stages of the learning process and decrease when the number of examples grows. The large increase in performance is a natural consequence of the fact that the categories help in reducing the total variability that can be found in the corpora (although sentences do exhibit a great deal of variability, the underlying syntactic structure is actually much less diverse). They also have the advantage of allowing an easier extension in the vocabulary of the task without having a negative effect on the performance of the models so obtained (Vilar et al., 1995) . Speech Input Experiments A set of Spanish to English speaker independent translation experiments were performed integrating in our speech input system (as described in   section 4) the following models: \u2022 ACOUSTIC LEVEL. The phones were represented by context-independent continuousdensity HMMs. Each HMM consisted of six states following a left-to-right topology with loops and skips. The emission distribution of each state was modeled by a mixture of Gaussians. Actually, there were only three emi~. sion distributions per HMM since the states were tied in pairs (the first with the second, the third with the fourth, and the fifth with the sixth). Details about the corpus used in training these models and its parametrization can be found in (Amengnal et al., 1997a) . \u2022 LEXICAL LEVEL Spanish Phonetics allows the representation of each word as a sequence of phones that can be derived from standard rules. This sequence can be represented by a simple chain. There were a total of 31 phones, including stressed and unstressed vowels plus two types of silence. SYNTACTIC AND TRANLATION LEVEL. We used the best of the transducers obtained in the Spanish to English text experiments. It was enriched with probabilities estimated by parsing the same training data with the final model and using relative frequencies of use as probability estimates. The Viterbi search for the most likely path was speeded up by using beam search at two levels: independent beam widths were used in the states of the SST (empirically fixed to 300) and in the states of the HMMs. Other details of the experiments can be found in (Amengnal et al., 1997a) . Table 4 shows that good translation results (a WER of 6.4%) can be achieved with a Real Time Factor (RTF) of just 2.2. It is worth noting that these results were obtained in a HP-9735 workstation without resorting to any type of specialised hardware or signal processing device. When translation accuracy is the main concern, a more detailed acoustic model and a wider beam in the search can be used to achieve a WER of 1.9%, but with a RTF of 11.3. Conclusions In the EUTRANS project, Subsequential Transucers are used as the basis of translation systems that accept speech and text input. They can be  automatically learned from corpora of examples. This learning process can be improved by means of categories using the approach detailed in this paper. Experimental results show that this approach reduces the number of examples required for achieving good models, with good translation results in acceptable times without using speciaiised hardware. Our current work concentrates in further reducing the number of examples necessary for training the translation models in order to cope with spontaneous instead of synthetic sentences. For this, new approaches are being explored, like reordering the words in the translations, the use of new inference algorithms, and automatic categorization. Results obtained with a different enhancement of our text input system, the inclusion of error correcting techniques, can be found in (Amengual et al., 1997b The sizes in the horizontal axis refer to the first three columns in Table 3 (c).",
    "abstract": "The EUTRANS project, aims at developing Machine Translation systems for limited domain applications. These systems accept speech and text input, and are trained using an example based approach. The translation model used in this project is the Subsequential Transducer, which is easily integrable in conventional speech recognition systems. In addition, Subsequential Transducers can be automatically learned from corpora. This paper describes the use of categories for improving the EUTRANS translation systems. Experimental results with the task defined in the project show that this approach reduces the number of examples required for achieving good models.",
    "countries": [
        "Spain"
    ],
    "languages": [
        "Italian",
        "German",
        "Spanish",
        "English"
    ],
    "numcitedby": "20",
    "year": "1997",
    "month": "",
    "title": "Using Categories in the {EUTRANS} System"
}