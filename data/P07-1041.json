{
    "article": "We investigate the factors which determine constituent order in German clauses and propose an algorithm which performs the task in two steps: First, the best candidate for the initial sentence position is chosen. Then, the order for the remaining constituents is determined. The first task is more difficult than the second one because of properties of the German sentence-initial position. Experiments show a significant improvement over competing approaches. Our algorithm is also more efficient than these. Introduction Many natural languages allow variation in the word order. This is a challenge for natural language generation and machine translation systems, or for text summarizers. E.g., in text-to-text generation (Barzilay & McKeown, 2005; Marsi & Krahmer, 2005; Wan et al., 2005) , new sentences are fused from dependency structures of input sentences. The last step of sentence fusion is linearization of the resulting parse. Even for English, which is a language with fixed word order, this is not a trivial task. German has a relatively free word order. This concerns the order of constituents 1 within sentences while the order of words within constituents is relatively rigid. The grammar only partially prescribes how constituents dependent on the verb should be ordered, and for many clauses each of the n! possible permutations of n constituents is grammatical. In spite of the permanent interest in German word order in the linguistics community, most studies have limited their scope to the order of verb arguments and few researchers have implemented -and even less evaluated -a generation algorithm. In this paper, we present an algorithm, which orders not only verb arguments but all kinds of constituents, and evaluate it on a corpus of biographies. For each parsed sentence in the test set, our maximumentropy-based algorithm aims at reproducing the order found in the original text. We investigate the importance of different linguistic factors and suggest an algorithm to constituent ordering which first determines the sentence initial constituent and then orders the remaining ones. We provide evidence that the task requires language-specific knowledge to achieve better results and point to the most difficult part of it. Similar to Langkilde & Knight (1998) we utilize statistical methods. Unlike overgeneration approaches (Varges & Mellish, 2001, inter alia) which select the best of all possible outputs ours is more efficient, because we do not need to generate every permutation. Theoretical Premises Background It has been suggested that several factors have an influence on German constituent order. Apart from the constraints posed by the grammar, information structure, surface form, and discourse status have also been shown to play a role. It has also been observed that there are preferences for a particular order. The preferences summarized below have mo-tivated our choice of features: \u2022 constituents in the nominative case precede those in other cases, and dative constituents often precede those in the accusative case (Uszkoreit, 1987; Keller, 2000) ; \u2022 the verb arguments' order depends on the verb's subcategorization properties (Kurz, 2000) ; \u2022 constituents with a definite article precede those with an indefinite one (Weber & M \u00fcller, 2004 ); \u2022 pronominalized constituents precede nonpronominalized ones (Kempen & Harbusch, 2004) ; \u2022 animate referents precede inanimate ones (Pappert et al., 2007) ; \u2022 short constituents precede longer ones (Kimball, 1973) ; \u2022 the preferred topic position is right after the verb (Frey, 2004 ); \u2022 the initial position is usually occupied by scene-setting elements and topics (Speyer, 2005) . \u2022 there is a default order based on semantic properties of constituents (Sgall et al., 1986) : Actor < Temporal < SpaceLocative < Means < Ad- dressee < Patient < Source < Destination < Purpose Note that most of these preferences were identified in corpus studies and experiments with native speakers and concern the order of verb arguments only. Little has been said so far about how non-arguments should be ordered. German is a verb second language, i.e., the position of the verb in the main clause is determined exclusively by the grammar and is insensitive to other factors. Thus, the German main clause is divided into two parts by the finite verb: Vorfeld (VF), which contains exactly one constituent, and Mittelfeld (MF) , where the remaining constituents are located. Our Hypothesis The essential contribution of our study is that we treat preverbal and postverbal parts of the sentence differently. The sentence-initial position, which in German is the VF, has been shown to be cognitively more prominent than other positions (Gernsbacher & Hargreaves, 1988) . Motivated by the theoretical work by Chafe (1976) and Jacobs (2001) , we view the VF as the place for elements which modify the situation described in the sentence, i.e. for so called frame-setting topics (Jacobs, 2001) . For example, temporal or locational constituents, or anaphoric adverbs are good candidates for the VF. We hypothesize that the reasons which bring a constituent to the VF are different from those which place it, say, to the beginning of the MF, for the order in the MF has been shown to be relatively rigid (Keller, 2000; Kempen & Harbusch, 2004) . Speakers have the freedom of selecting the outgoing point for a sentence. Once they have selected it, the remaining constituents are arranged in the MF, mainly according to their grammatical properties. This last observation motivates another hypothesis we make: The cumulation of the properties of a constituent determines its salience. This salience can be calculated and used for ordering with a simple rule stating that more salient constituents should precede less salient ones. In this case there is no need to generate all possible orders and rank them. The best order can be obtained from a random one by sorting. Our experiments support this view. A two-step approach, which first selects the best candidate for the VF and then arranges the remaining constituents in the MF with respect to their salience performs better than algorithms which generate the order for a sentence as a whole. 3 Related Work Uszkoreit (1987) addresses the problem from a mostly grammar-based perspective and suggests weighted constraints, such as Kruijff et al. (2001) describe an architecture which supports generating the appropriate word order for different languages. Inspired by the findings of the Prague School (Sgall et al., 1986) and Systemic Functional Linguistics (Halliday, 1985) , they focus on the role that information structure plays in constituent ordering. Kruijff-Korbayov\u00e1 et al. (2002) address the task of word order generation in the same vein. Similar to ours, their algorithm recognizes the special role of the sentence-initial position which they reserve for the theme -the point of departure of the message. Unfortunately, they did not implement their algorithm, and it is hard to judge how well the system would perform on real data. Harbusch et al. (2006) present a generation workbench, which has the goal of producing not the most appropriate order, but all grammatical ones. They also do not provide experimental results. [+NOM] \u227a [+DAT], [+PRO] \u227a [-PRO], [-FOCUS] \u227a [+FOCUS], etc. The work of Uchimoto et al. (2000) is done on the free word order language Japanese. They determine the order of phrasal units dependent on the same modifiee. Their approach is similar to ours in that they aim at regenerating the original order from a dependency parse, but differs in the scope of the problem as they regenerate the order of modifers for all and not only for the top clausal node. Using a maximum entropy framework, they choose the most probable order from the set of all permutations of n words by the following formula: P (1|h) = P ({Wi,i+j = 1|1 \u2264 i \u2264 n \u2212 1, 1 \u2264 j \u2264 n \u2212 i}|h) \u2248 n\u22121 Y i=1 n\u2212i Y j=1 P (Wi,i+j = 1|hi,i+j) = n\u22121 Y i=1 n\u2212i Y j=1 PME(1|hi,i+j) (1) For each permutation, for every pair of words , they multiply the probability of their being in the correct 2 order given the history h. Random variable W i,i+j 2 Only reference orders are assumed to be correct. is 1 if word w i precedes w i+j in the reference sentence, 0 otherwise. The features they use are akin to those which play a role in determining German word order. We use their approach as a non-trivial baseline in our study. Ringger et al. (2004) aim at regenerating the order of constituents as well as the order within them for German and French technical manuals. Utilizing syntactic, semantic, sub-categorization and length features, they test several statistical models to find the order which maximizes the probability of an ordered tree. Using \"Markov grammars\" as the starting point and conditioning on the syntactic category only, they expand a non-terminal node C by predicting its daughters from left to right: P (C|h) = n Y i=1 P (di|di\u22121, ..., di\u2212j, c, h) (2) Here, c is the syntactic category of C, d and h are the syntactic categories of C's daughters and the daughter which is the head of C respectively. In their simplest system, whose performance is only 2.5% worse than the performance of the best one, they condition on both syntactic categories and semantic relations (\u03c8) according to the formula: P (C|h) = n Y i=1 \u00bb P (\u03c8i|di\u22121, \u03c8i\u22121, ...di\u2212j, \u03c8i\u2212j, c, h) \u00d7P (di|\u03c8i, di\u22121, \u03c8i\u22121..., di\u2212j, \u03c8i\u2212j, c, h) - (3) Although they test their system on German data, it is hard to compare their results to ours directly. First, the metric they use does not describe the performance appropriately (see Section 6.1). Second, while the word order within NPs and PPs as well as the verb position are prescribed by the grammar to a large extent, the constituents can theoretically be ordered in any way. Thus, by generating the order for every non-terminal node, they combine two tasks of different complexity and mix the results of the more difficult task with those of the easier one. Data The data we work with is a collection of biographies from the German version of Wikipedia 3 . Fully automatic preprocessing in our system comprises the following steps: First, a list of people of a certain Wikipedia category is taken and an article is extracted for every person. Second, sentence boundaries are identified with a Perl CPAN module 4 whose performance we improved by extending the list of abbreviations. Next, the sentences are split into tokens. The TnT tagger (Brants, 2000) and the TreeTagger (Schmid, 1997) are used for tagging and lemmatization. Finally, the articles are parsed with the CDG dependency parser (Foth & Menzel, 2006) . Named entities are classified according to their semantic type using lists and category information from Wikipedia: person (pers), location (loc), organization (org), or undefined named entity (undef ne). Temporal expressions (Oktober 1915, danach (after that) etc.) are identified automatically by a set of patterns. Inevitable during automatic annotation, errors at one of the preprocessing stages cause errors at the ordering stage. Distinguishing between main and subordinate clauses, we split the total of about 19 000 sentences into training, development and test sets (Table 1 ). Clauses with one constituent are sorted out as trivial. The distribution of both types of clauses according to their length in constituents is given in Table 2 Given the sentence in Example 1, we first transform its dependency parse into a more general representation (Figure 1 5 ) and then, based on the predictions of our learner, arrange the four constituents. For evaluation, we compare the arranged order against the original one. Note that we predict neither the position of the verb, nor the order within constituents as the former is explicitly determined by the grammar, and the latter is much more rigid than the order of constituents. Baselines and Algorithms We compare the performance of two our algorithms with four baselines. Random We improve a trivial random baseline (RAND) by two syntax-oriented rules: the first position is reserved for the subject and the second for the direct object if there is any; the order of the remaining constituents is generated randomly (RAND IMP). Statistical Bigram Model Similar to Ringger et al. (2004) , we find the order with the highest probability conditioned on syntactic and semantic categories. Unlike them we use dependency parses and compute the probability of the top node only, which is modified by all constituents. With these adjustments the probability of an order O given the history h, if conditioned on syntactic functions of constituents (s 1 ...s n ), is simply: P (O|h) = n i=1 P (s i |s i\u22121 , h) (4) Ringger et al. ( 2004 ) do not make explicit, what their set of semantic relations consists of. From the example in the paper, it seems that these are a mixture of lexical and syntactic information 6 . Our annotation does not specify semantic relations. Instead, some of the constituents are categorized as pers, loc, temp, org or undef ne if their heads bear one of these labels. By joining these with possible syntactic functions, we obtain a larger set of syntactic-semantic tags as, e.g., subj-pers, pp-loc, adv-temp. We transform each clause in the training set into a sequence of such tags, plus three tags for the verb position (v), the beginning (b) and the end (e) of the clause. Then we compute the bigram probabilities 7 . For our third baseline (BIGRAM), we select from all possible orders the one with the highest probability as calculated by the following formula: P (O|h) = n i=1 P (t i |t i\u22121 , h) (5) where t i is from the set of joined tags. For Example 1, possible tag sequences (i.e. orders) are 'b subjpers v adv obja sub e', 'b adv v subj-pers obja sub e', 'b obja v adv sub subj-pers e', etc. Uchimoto For the fourth baseline (UCHIMOTO), we utilized a maximum entropy learner (OpenNLP 8 ) and reimplemented the algorithm of Uchimoto et al. (2000) . For every possible permutation, its probability is estimated according to Formula (1). The binary classifier, whose task was to predict the probability that the order of a pair of constituents is correct, was trained on the following features describing the verb or h c -the head of a constituent c 9 : vlex, vpass, vmod the lemma of the root of the clause (non-auxiliary verb), the voice of the verb and the number of constituents to order; pro whether c contains a (anaphoric) pronoun. lex Maximum Entropy The first configuration of our system is an extended version of the UCHIMOTO baseline (MAXENT). To the features describing c we added the following ones: The first two features describe the discourse status of a constituent; the other two provide information on its \"weight\". Since our learner treats all values as nominal, we discretized the values of dep and len with a C4.5 classifier (Kohavi & Sahami, 1996) . det Another modification concerns the efficiency of the algorithm. Instead of calculating probabilities for all pairs, we obtain the right order from a random one by sorting. We compare adjacent elements by consulting the learner as if we would sort an array of numbers. Given two adjacent constituents, c i < c j , we check the probability of their being in the right order, i.e. that c i precedes c j : P pre (c i , c j ). If it is less than 0.5, we transpose the two and compare c i with the next one. Since the sorting method presupposes that the predicted relation is transitive, we checked whether this is really so on the development and test data sets. We looked for three constituents c i , c j , c k from a sentence S, such that P pre (c i , c j ) > 0.5, P pre (c j , c k ) > 0.5, P pre (c i , c k ) < 0.5 and found none. Therefore, unlike UCHIMOTO, where one needs to make exactly N ! * N (N \u2212 1)/2 comparisons, we have to make N (N \u2212 1)/2 comparisons at most. The Two-Step Approach The main difference between our first algorithm (MAXENT) and the second one (TWO-STEP) is that we generate the order in two steps 10 (both classifiers are trained on the same features): 1. For the VF, using the OpenNLP maximum entropy learner for a binary classification (VF vs. MF), we select the constituent c with the highest probability of being in the VF. 2. For the MF, the remaining constituents are put into a random order and then sorted the way it is done for MAXENT. The training data for the second task was generated only from the MF of clauses. Results Evaluation Metrics We use several metrics to evaluate our systems and the baselines. The first is per-sentence accuracy (acc) which is the proportion of correctly regenerated sentences. Kendall's \u03c4 , which has been used for evaluating sentence ordering tasks (Lapata, 2006) , is the second metric we use. \u03c4 is calculated as 1 \u2212 4 t N (N \u22121) , where t is the number of interchanges of consecutive elements to arrange N elements in the right order. \u03c4 is sensitive to near misses and assigns abdc (almost correct order) a score of 0.66 while dcba (inverse order) gets \u22121. Note that it is questionable whether this metric is as appropriate for word ordering tasks as for sentence ordering ones because a near miss might turn out to be ungrammatical whereas a more different order stays acceptable. Apart from acc and \u03c4 , we also adopt the metrics used by Uchimoto et al. (2000) and Ringger et al. (2004) . The former use agreement rate (agr) calculated as 2p N (N \u22121) : the number of correctly ordered pairs of constituents over the total number of all possible pairs, as well as complete agreement which is basically per-sentence accuracy. Unlike \u03c4 , which has \u22121 as the lowest score, agr ranges from 0 to 1. Ringger et al. (2004) evaluate the performance only in terms of per-constituent edit distance calculated as m N , where m is the minimum number of moves 11 needed to arrange N constituents in the right order. This measure seems less appropriate than \u03c4 or agr because it does not take the distance of the move into account and scores abced and eabcd equally (0.2). Since \u03c4 and agr, unlike edit distance, give higher scores to better orders, we compute inverse distance: inv = 1 -edit distance instead. Thus, all three metrics (\u03c4 , agr, inv) give the maximum of 1 if constituents are ordered correctly. However, like \u03c4 , agr and inv can give a positive score to an ungrammatical order. Hence, none of the evaluation metrics describes the performance perfectly. Human evaluation which reliably distinguishes between appropriate, acceptable, grammatical and ingrammatical orders was out of choice because of its high cost. Results The results on the test data are presented in Table 3 . The performance of TWO-STEP is significantly better than any other method (\u03c7 2 , p < 0.01). The performance of MAXENT does not significantly differ from UCHIMOTO. BIGRAM performed about as good as UCHIMOTO and MAXENT. We also checked how well TWO-STEP performs on each of the two sub-tasks ( The most important conclusion we draw from the results is that the gain of 9% accuracy is due to the VF selection only, because the feature sets are identical for MAXENT and TWO-STEP. From this follows that doing feature selection without splitting the task in two is ineffective, because the importance of a feature depends on whether the VF or the MF is considered. For the MF, feature selection has shown syn and pos to be the most relevant features. They alone bring the performance in the MF up to 75%. In contrast, these two features explain only 56% of the cases in the VF. This implies that the order in the MF mainly depends on grammatical features, while for the VF all features are important because removal of any feature caused a loss in accuracy. acc \u03c4 agr inv TWO-STEP VF 68% ---TWO-STEP MF 80% 0.92 0.96 0.95 Table 4 : Mean of the results for the VF and the MF Another important finding is that there is no need to overgenerate to find the right order. Insignificant for clauses with two or three constituents, for clauses with 10 constituents, the number of comparisons is reduced drastically from 163,296,000 to 45. According to the inv metric, our results are considerably worse than those reported by Ringger et al. (2004) . As mentioned in Section 3, the fact that they generate the order for every non-terminal node seriously inflates their numbers. Apart from that, they do not report accuracy, and it is unknown, how many sentences they actually reproduced correctly. Error Analysis To reveal the main error sources, we analyzed incorrect predictions concerning the VF and the MF, one hundred for each. Most errors in the VF did not lead to unacceptability or ungrammaticality. From lexical and semantic features, the classifier learned that some expressions are often used in the beginning of a sentence. These are temporal or locational PPs, anaphoric adverbials, some connectives or phrases starting with unlike X, together with X, as X, etc. Such elements were placed in the VF instead of the subject and caused an error although both variants were equally acceptable. In other cases the classifier could not find a better candidate but the subject because it could not conclude from the provided features that another constituent would nicely introduce the sentence into the discourse. Mainly this concerns recognizing information familiar to the reader not by an already mentioned entity, but one which is inferrable from what has been read. In the MF, many orders had a PP transposed with the direct object. In some cases the predicted order seemed as good as the correct one. Often the algorithm failed at identifying verb-specific preferences: E.g., some verbs take PPs with the locational meaning as an argument and normally have them right next to them, whereas others do not. Another frequent error was the wrong placement of superficially identical constituents, e.g. two PPs of the same size. To handle this error, the system needs more specific semantic information. Some errors were caused by the parser, which created extra constituents (e.g. false PP or adverb attachment) or confused the subject with the direct verb. We retrained our system on a corpus of newspaper articles (Telljohann et al., 2003 , T \u00fcBa-D/Z) which is manually annotated but encodes no semantic knowledge. The results for the MF were the same as on the data from Wikipedia. The results for the VF were much worse (45%) because of the lack of semantic information. Conclusion We presented a novel approach to ordering constituents in German. The results indicate that a linguistically-motivated two-step system, which first selects a constituent for the initial position and then orders the remaining ones, works significantly better than approaches which do not make this separation. Our results also confirm the hypothesis -which has been attested in several corpus studies -that the order in the MF is rather rigid and dependent on grammatical properties. We have also demonstrated that there is no need to overgenerate to find the best order. On a practical side, this finding reduces the amount of work considerably. Theoretically, it lets us conclude that the relatively fixed order in the MF depends on the salience which can be predicted mainly from grammatical features. It is much harder to predict which element should be placed in the VF. We suppose that this difficulty comes from the double function of the initial position which can either introduce the addressation topic, or be the scene-or frame-setting position (Jacobs, 2001) . Acknowledgements: This work has been funded by the Klaus Tschira Foundation, Heidelberg, Germany. The first author has been supported by a KTF grant (09. 009.2004). We would also like to thank Elke Teich and the three anonymous reviewers for their useful comments.",
    "abstract": "We investigate the factors which determine constituent order in German clauses and propose an algorithm which performs the task in two steps: First, the best candidate for the initial sentence position is chosen. Then, the order for the remaining constituents is determined. The first task is more difficult than the second one because of properties of the German sentence-initial position. Experiments show a significant improvement over competing approaches. Our algorithm is also more efficient than these.",
    "countries": [
        "Germany"
    ],
    "languages": [
        "German"
    ],
    "numcitedby": "40",
    "year": "2007",
    "month": "June",
    "title": "Generating Constituent Order in {G}erman Clauses"
}