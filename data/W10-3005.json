{
    "article": "In this paper, we proposed a hedge detection method with average perceptron, which was used in the closed challenge in CoNLL-2010 Shared Task. There are two subtasks: (1) detecting uncertain sentences and (2) identifying the in-sentence scopes of hedge cues. We use the unified learning algorithm for both subtasks since that the hedge score of sentence can be decomposed into scores of the words, especially the hedge words. On the biomedical corpus, our methods achieved F-measure with 77.86% in detecting in-domain uncertain sentences, 77.44% in recognizing hedge cues, and 19.27% in identifying the scopes. Introduction Detecting hedged information in biomedical literatures has received considerable interest in the biomedical natural language processing (NLP) community recently. Hedge information indicates that authors do not or cannot back up their opinions or statements with facts (Szarvas et al., 2008) , which exists in many natural language texts, such as webpages or blogs, as well as biomedical literatures. For many NLP applications, such as question answering and information extraction, the information extracted from hedge sentences would be harmful to their final performances. Therefore, the hedge or speculative information should be detected in advance, and dealt with different approaches or discarded directly. In CoNLL-2010 Shared Task (Farkas et al., 2010) , there are two different level subtasks: detecting sentences containing uncertainty and identifying the in-sentence scopes of hedge cues. For example, in the following sentence: These results suggest that the IRE motif in the ALAS mRNA is functional and imply that translation of the mRNA is controlled by cellular iron availability during erythropoiesis. The words suggest and imply indicate that the statements are not supported with facts. In the first subtask, the sentence is considered as uncertainty. In the second subtask, suggest and imply are identified as hedge cues, while the consecutive blocks suggest that the IRE motif in the ALAS mRNA is functional and imply that translation of the mRNA is controlled by cellular iron availability during erythropoiesis are recognized as their corresponding scopes. In this paper, we proposed a hedge detection method with average perceptron (Collins, 2002) , which was used in the closed challenges in CoNLL-2010 Shared Task (Farkas et al., 2010) . Our motivation is to use a unified model to detect two level hedge information (word-level and sentence-level) and the model is easily expanded to joint learning of two subtasks. Since that the hedge score of sentence can be decomposed into scores of the words, especially the hedge words, we chosen linear classifier in our method and used average perceptron as the training algorithm. The rest of the paper is organized as follows. In Section 2, a brief review of related works is presented. Then, we describe our method in Section 3. Experiments and results are presented in the section 4. Finally, the conclusion will be presented in Section 5. Related works Although the concept of hedge information has been introduced in linguistic community for a long time, researches on automatic hedge detection emerged from machine learning or compu-tational linguistic perspective in recent years. In this section, we give a brief review on the related works. For speculative sentences detection, Medlock and Briscoe (2007) report their approach based on weakly supervised learning. In their method, a statistical model is initially derived from a seed corpus, and then iteratively modified by augmenting the training dataset with unlabeled samples according the posterior probability. They only employ bag-of-words features. On the public biomedical dataset 1 , their experiments achieve the performance of 0.76 in BEP (break even point). Although they also introduced more linguistic features, such as part-of-speech (POS), lemma and bigram (Medlock, 2008) , there are no significant improvements. In Ganter and Strube (2009) , the same task on Wikipedia is presented. In their system, score of a sentence is defined as a normalized tangent value of the sum of scores over all words in the sentence. Shallow linguistic features are introduced in their experiments. Morante and Daelemans (2009) present their research on identifying hedge cues and their scopes. Their system consists of several classifiers and works in two phases, first identifying the hedge cues in a sentence and secondly finding the full scope for each hedge cue. In the first phase, they use IGTREE algorithm to train a classifier with 3 categories. In the second phase, three different classifiers are trained to find the first token and last token of in-sentence scope and finally combined into a meta classifier. The experiments shown that their system achieves an F1 of nearly 0.85 of identifying hedge cues in the abstracts sub corpus, while nearly 0.79 of finding the scopes with predicted hedge cues. More experiments could be found in their paper (Morante and Daelemans, 2009) . They also provide a detail statistics on hedge cues in BioScope corpus 2 . 3 Hedge detection with average perceptron Detecting uncertain sentences The first subtask is to identify sentences containing uncertainty information. In particular, this subtask is a binary classification problem at sentence-level. We define the score of sentence as the confidence that the sentence contains uncertainty information. The score can be decomposed as the sum of the scores of all words in the sentence, S(x, y) = x i \u2208x s(x i , y) = x i \u2208x w T \u03c6(x i , y) where, x denotes a sentence and x i is the ith word in the sentence x, \u03c6(x i , y) is a sparse high-dimensional binary feature vector of word x i . y \u2208 {uncertain, certain} is the category of the sentence. For instance, in the example sentence, if current word is suggest while the category of this sentence is uncertain, the following feature is hired, \u03c6 n (x i , y) = 1, if x i =''suggest'' y=''uncertain'' , 0, otherwise where n is feature index. This representation is commonly used in structured learning algorithms. We can combine the features into a sparse feature vector \u03a6(x, y) = i \u03c6(x i , y). S(x, y) = w T \u03a6(x, y) = x i \u2208x w T \u03c6(x i , y) In the predicting phase, we assign x to the category with the highest score, y * = arg max y w T \u03a6(x, y) We learn the parameters w with online learning framework. The most common online learner is the perceptron (Duda et al., 2001) . It adjusts parameters w when a misclassification occurs. Although this framework is very simple, it has been shown that the algorithm converges in a finite number of iterations if the data is linearly separable. Moreover, much less training time is required in practice than the batch learning methods, such as support vector machine (SVM) or conditional maximum entropy (CME). Here we employ a variant perceptron algorithm to train the model, which is commonly named average perceptron since it averages parameters w across iterations. This algorithm is first proposed in Collins (2002) . Many experiments of NLP problems demonstrate better generalization performance than non averaged parameters. More theoretical proofs can be found in Collins (2002) . Different from the standard average perceptron algorithm, we slightly modify the average strategy. The reason to this modification is that the original algorithm is slow since parameters accumulate across all iterations. In order to keep fast training speed and avoid overfitting at the same time, we make a slight change of the parameters accumulation strategy, which occurs only after each iteration over the training data finished. Our training algorithm is shown in Algorithm 1. input : training data set: (x n , y n ), n = 1, \u2022 \u2022 \u2022 , N , parameters: average number: K, maximum iteration number: T . output: average weight: cw Initialize: cw \u2190 0,; for k = 0 \u2022 \u2022 \u2022 K \u2212 1 do w 0 \u2190 0 ; for t = 0 \u2022 \u2022 \u2022 T \u2212 1 do receive an example (x t , y t ); predict: \u0177t = arg max y w T t \u03a6(x t , y) ; if \u0177t = y t then w t+1 = w t +\u03a6(x t , y t )\u2212\u03a6(x t , \u0177t ) end end cw = cw + w T ; end cw = cw/K ; Algorithm 1: Average Perceptron algorithm Binary context features are extracted from 6 predefined patterns, which are shown in Figure 1 . By using these patterns, we can easily obtain the complicate features. As in the previous example, if the current word is suggest, then a new compound feature could be extracted in the form of w \u22121 =results//w 0 =suggest by employing the pattern w \u22121 w 0 . // is the separate symbol. Identifying hedge cues and their scopes Our approach for the second subtask consists of two phases: (1) identifying hedge cues in a sentence, then (2) recognizing their corresponding scopes. Identifying hedge cues Hedge cues are the most important clues for determining whether a sentence contains uncertain \u2022 unigram: w 0 ,p 0 \u2022 bigram: w 0 w 1 , w 0 p 0 , p 0 p 1 \u2022 trigram: w \u22121 w 0 w 1 Figure 1: Patterns employed in the sentence-level hedge detection. Here w denotes single word, p is part of speech, and the subscript denotes the relative offset compared with current position. information. Therefore in this phase, we treat the problem of identifying hedge cues as a classification problem. Each word in a sentence would be predicted a category indicating whether this word is a hedge cue word or not. In the previous example, there are two different hedge cues in the sentence (show in bold manner). Words suggest and imply are assigned with the category CUE denoting hedge cue word, while other words are assigned with label O denoting non hedge cue word. \u2022 unigram: w \u22122 , w \u22121 , w 0 , w 1 , w 2 , p 0 \u2022 bigram: w \u22121 w 0 , w 0 w 1 , w 0 p 0 , p \u22121 p 0 , p 0 p 1 \u2022 trigram: w \u22121 w 0 w 1 In our system, this module is much similar to the module of detecting uncertain sentences. The only difference is that this phase is word level. So that each training sample in this phase is a word, while in detecting speculative sentences training sample is a sentence. The training algorithm is the same as the algorithm shown in Algorithm 1. 12 predefined patterns of context features are shown in Figure 2 . Recognizing in-sentence scopes After identifying the hedge cues in the first phase, we need to recognize their corresponding insentence scopes, which means the boundary of scope should be found within the same sentence. We consider this problem as a word-cue pair classification problem, where word is any word in a sentence and cue is the identified hedge cue word. Similar to the previous phase, a word-level linear classifier is trained to predict whether each word-cue pair in a sentence is in the scope of the hedge cue. Besides base context features used in the previous phase, we introduce additional syntactic dependency features. These features are generated by a first-order projective dependency parser (Mc-Donald et al., 2005) , and listed in Figure 3 . The scopes of hedge cues are always covering a consecutive block of words including the hedge cue itself. The ideal method should recognize only one consecutive block for each hedge cue. However, our classifier cannot work so well. Therefore, we apply a simple strategy to process the output of the classifier. The simple strategy is to find a maximum consecutive sequence which covers the hedge cue. If a sentence is considered to contain several hedge cues, we simply combine the consecutive sequences, which have at least one common word, to a large block and assign it to the relative hedge cues. Experiments In this section, we report our experiments on datasets of CoNLL-2010 shared tasks, including the official results and our experimental results when developing the system. Our system architecture is shown in Figure 4 , which consists of the following modules. 1. corpus preprocess module, which employs a tokenizer to normalize the corpus; 2. sentence detection module, which uses a binary sentence-level classifier to determine whether a sentence contains uncertainty information; 3. hedge cues detection module, which identifies which words in a sentence are the hedge cues, we train a binary word-level classifier; 4. cue scope recognition module, which recognizes the corresponding scope for each hedge cue by another word-level classifier. Our experimental results are obtained on the training datasets by 10-fold cross validation. The maximum iteration number for training the average perceptron is set to 20. Our system is implemented with Java 3 . Datasets In CoNLL-2010 Shared Task, two different datasets are provided to develop the system: (1) biological abstracts and full articles from the Bio-Scope corpus, (2) paragraphs from Wikipedia. Besides manually annotated datasets, three corresponding unlabeled datasets are also allowed for the closed challenges. But we have not employed any unlabeled datasets in our system. A preliminary statistics can be found in Table 1. We make no distinction between sentences from abstracts or full articles in biomedical dataset. From Table 1 , most sentences are certainty while about 18% sentences in biomedical dataset and 22% in Wikipedia dataset are speculative. On the average, there exists nearly 1.29 hedge cues per sentence in biomedical dataset and 1.26 in Wikipedia. The average length of hedge cues varies in these two corpus. In biomedical dataset, hedge cues are nearly one word, but more than two words in Wikipedia. On average, the scope of hedge cue covers 15.42 words. Corpus preprocess The sentence are processed with a maximumentropy part-of-speech tagger 4 (Toutanova et al., 2003) , in which a rule-based tokenzier is used to separate punctuations or other symbols from regular words. Moreover, we train a first-order projective dependency parser with MSTParser 5 (Mc-Donald et al., 2005) on the standard WSJ training corpus, which is converted from constituent trees to dependency trees by several heuristic rules 6 . \u2022 word-cue pair: current word and the hedge cue word pair, \u2022 word-cue POS pair: POS pair of current word and the hedge cue word, \u2022 path of POS: path of POS from current word to the hedge cue word along dependency tree, \u2022 path of dependency: relation path of dependency from current word to the hedge cue word along dependency tree, \u2022 POS of hedge cue word+direction: POS of hedge cue word with the direction to the current word. Here direction can be \"LEFT\" if the hedge cue is on the left to the current word, or \"RIGHT\" on the right, \u2022 tree depth: depth of current in the corresponding dependency tree, \u2022 surface distance: surface distance between current word and the hedge cue word. The value of this feature is always 10 in the case of surface distance greater than 10, \u2022 surface distance+tree depth: combination of surface distance and tree depth \u2022 number of punctuations: number of punctuations between current word and the hedge cue word, \u2022 number of punctuations + tree depth: combination of number of punctuations and tree depth Figure 3 : Additional features used in recognizing in-sentence scope Uncertain sentences detection In the first subtask, we carry out the experiments within domain and cross domains. As previously mentioned, we do not use the unlabeled datasets and make no distinction between abstracts and full articles in biomedical dataset. This means we train the models only with the official annotated datasets. The model for cross-domain is trained on the combination of annotated biomedical and Wikipedia datasets. In this subtask, evaluation is carried out on the sentence level and F-measure of uncertainty sentences is employed as the chief metric. Table 2 shows the results within domain. After 10-fold cross validation over training dataset, we achieve 84.39% of F1-measure on biomedical while 56.06% on Wikipedia. We analyzed the low performance of our submission result on Wikipedia. The possible reason is our careless work when dealing with the trained model file. Therefore we retrain a model for Wikipedia and the performance is listed on the bottom line (Wikipedia * ) in Table 3 shows the results across domains. We split each annotated dataset into 10 folds. Then training dataset is combined by individually drawing 9 folds out from the split datasets and the rests are used as the test data. On biomedical dataset, F1-measure gets to 79.24% while 56.16% on Wikipedia dataset. Compared with the results within domain, over 5% performance decreases from 84.39% to 79.24% on biomedical, but a slightly increase on Wikipedia. Results analysis We investigate the weights of internal features and found that the words, which have no uncertainty information, also play the significant roles to predict the uncertainty of the sentence. Intuitively, the words without uncertainty information should just have negligible effect and the corresponding features should have low weights. However, this ideal case is difficult to reached by learning algorithm due to the sparsity of data. In Table 4 , we list the top 10 words involved in features with the largest weights for each category. These words are ranked by the accumulative scores of their related features. In Table 5 , we list the top 10 POS involved in features with the largest weight for each category. Hedge cue identification Hedge cues identification is one module for the second subtask, we also analyze the performance on this module. Since we treat this problem as a binary classification problem, we evaluate F-measure of hedge cue words. The results are listed in Table 6 . We have to point out that our evaluation is Result Analysis We classify the results into four categories: false negative, false positive, true positive and true negative. We found that most mistakes are made because of polysemy and collocation. In Table 7 , we list top 10 words for each category. For the false results, the words are difficult to distinguish without its context in the corresponding sentence. Scopes recognition For recognizing the in-sentence scopes, F-measure is also used to evaluate the performance of the word-cue pair classifier. The results using gold hedge cues are shown in Table 8 . From the results, F-measure achieves respectively 70.44% and 75.94% when individually using the base context features extracted by 12 predefined patterns (see Figure 1 ) and syntactic dependency features (see Figure 3 ), while 79.55% when using all features. The results imply that syntactic dependency From Table 9 and the official result on hedge cue identification in Table 6 , we believe that our post-processing strategy would be responsible for the low performance on recognizing scopes. Our strategy is to find a maximum consecutive block covering the corresponding hedge cue. This strategy cannot do well with the complex scope structure. For example, a scope is covered by another scope. Therefore, our system would generate a block covering all hedge cues if there exists more than one hedge cues in a sentence. Conclusion We present our implemented system for CoNLL-2010 Shared Task in this paper. We introduce syntactic dependency features when recognizing hedge scopes and employ average perceptron algorithm to train the models. On the biomedical corpus, our system achieves F-measure with 77.86% in detecting uncertain sentences, 77.44% in recognizing hedge cues, and 19.27% in identifying the scopes. Although some results are low and beyond our expectations, we believe that our system can be at least improved within the following fields. Firstly, we would experiment on other kinds of features, such as chunk or named entities in biomedical. Secondly, the unlabeled datasets would be explored in the future. Acknowledgments",
    "abstract": "In this paper, we proposed a hedge detection method with average perceptron, which was used in the closed challenge in CoNLL-2010 Shared Task. There are two subtasks: (1) detecting uncertain sentences and (2) identifying the in-sentence scopes of hedge cues. We use the unified learning algorithm for both subtasks since that the hedge score of sentence can be decomposed into scores of the words, especially the hedge words. On the biomedical corpus, our methods achieved F-measure with 77.86% in detecting in-domain uncertain sentences, 77.44% in recognizing hedge cues, and 19.27% in identifying the scopes.",
    "countries": [
        "China"
    ],
    "languages": [],
    "numcitedby": "9",
    "year": "2010",
    "month": "July",
    "title": "Detecting Hedge Cues and their Scopes with Average Perceptron"
}