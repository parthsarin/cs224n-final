{
    "article": "A critical path in the development of natural language understanding (NLU) modules lles in the difficulty of defining a mapping from words to semantics: Usually it takes in the order of years of highly-skilled labor to develop a semmltic mapping, e.g., in the form of a semantic grammar, that is comprehensive enough for a given domain. Yet, due to the very nature of human language, such mappings invariably fail to achieve full coverage oil unseen data. Acknowledging the impossibility of stating a priori all the surface forms by which a concept can be expressed, we present GSG: an empathic computer system for the rapid deployment of NLU front-ends and their dynamic customization by non-expert end-users. Given a new domain for which an NLU front-end is to be developed, two stages are involved. In the authoring stage, GSG aids the developer in the construction of a simple domain model and a kernel analysis grammar. Then, in the run-time stage, GSG provides the enduser with an interactive environment in which the kernel grammar is dynamically extended. Three lear~ling methods are employed in the acquisition of semantic mappings from mmeen data: (i) parser predictions, (ii) tfidden understanding model, and (iii) end-user paraphr~es. A baseline version of GSG has been implemented and preliminary experiments show promising results. Introduction The mapping between words and semantics, be it in the form of a semantic grammar, 1 or of a set of rules that transform syntax trees onto, say, a frame-slot structure, is one of the major bottlenecks in the development of natural language understanding (NLU) systems. A parser will work for any domain but the semantic mapping is domain-dependent. Even after the domain model has been established, the daunting task of trying to come up with all the possible surface forms by which each concept can 1 Semantic grammars are grammars whose non-terminals correspond to semantic concepts (e.g., [greeting] or [suggest_time] ) rather than to syntactic constituents (such as Verb or IounPhrass). They have the advantage that the semantics of a sentence can be directly read off its parse tree, and the disadvantage that a new grammar must be developed for each domain. be expressed, still lies ahead. Writing such mappings takes in the order of years, can only be performed by qualified humans (usually computational linguists) and yet the final result is often fragile and non-adaptive. Following a radically different philosophy, we propose rapid (in the order of days) deployment of NLU modules for new domains with on-need basis learning: let the semantic grammar grow automatically when and where it is needed. 2 Grammar development If we analyze the traditional method of developing a semantic grammar for a new domain, we find that the following stages are involved. 1. Data collection. Naturally-occurring data from the domain at hand are collected. Design of the domain model. A hierarchical structuring of the relevant concepts in the domain is built in the form of an ontology or domain model. Development of a kernel grammar. A grammar that covers a small subset of the collected data is constructed. 4. Expansion of grammar coverage. Lengthy, arduous task of developing the grammar to extend its coverage over the collected data and beyond. 5. Deployment. Release of the final grammar for the application at hand. The GSG system described in this paper aids all but the first of these stages: For the second stage, we have built a simple editor to design and analize the Domain Model; for the third, a semi-automated way of constructing the Kernel Grammar; for the fourth, an interactive environment in which new semantic mappings are dynamically acquired. As for the fifth (deployment), it advances one place: after the short initial authoring phase (stages 2 and 3 above) the final application can already be launched, since the semantic grammar will be extended, at run-time, by the non-expert end-user.  Kernel Grammar Editor, for the authoring stage, and the SouP parser and the IDIGA environment, for the run-time stage. Authoring stage In the authoring stage, a developer 2 creates the Domain Model (DM) with the aid of the DM Editor. In our present formalism, the DM is simply a directed acyclic graph in which the vertices correspond to concept-labels and the edges indicate conceptsubconcept relations (see Fig. 2 for an example). Once the DM is defined, the Kernel Grammar Editor drives the development of the Kernel Grammar by querying the developer to instantiate into grammar rules the rule templates derived from the DM. For instance, in the DM in Fig. 2 , given that concept [suggest_timeS requires subconcept [time], the rule template I'suggest_time] +---[time] is generated, which the developer can instantiate into, say, rule (2) in Fig. 3 . The Kernel Grammar Editor follows a concreteto-abstract ordering of the concepts obtained via a topological sort of the DM to query the developer, after which the Kernel Grammar is complete 3 and 2Understood here as a qualified person (e.g., knowledge engineer or software developer) who is familiar with the domain at hand and has access to some sample sentences that the NLU front-end is supposed to understand. 3We say that grammar G is complete with respect to domain model DM if and only if for each arc from concept i to concept j in DM there is at least one grammar rule headed by concept i that contains concept j. This ensures that any idea expressible in DM has a surface form, or, seen it from another angle, that any in-domaln utterance has a paraphrase 452 [greeting] [farewell] In.el ( the NLU front-end is ready to be deployed. [suggestion] [rejectionl [acceptance] v v i [suggest_timeS [reject_timel [accepttime] [timel [interval] [start_point I [end~oint ] ' [point] [day of_weekS [ time_of_dayS ) [suggestion] +----[suggest_timeS (2) [suggest_timeS +----how about [time] (3) [time] +---[point] (4) [point] ~---*On [day_of_weekS *[time_of_dayS (5) [day_of_weekS /----Tuesday (6) [time_of_dayS /---afternoon 1 It is assumed that: (i) after the authoring stage the DM is fixed, and (ii) the communicative goal of the end-user is expressible in the domain. Run-time stage Instead of attempting \"universal coverage\" we rather accept the fact that one can never know all the surface forms by which the concepts in the domain can be expressed. What Gs6 provides in the run-time stage are mechanisms that allow a non-expert enduser to \"teach\" the meaning of new expressions. The tight coupling between the SouP parser 4 and the IDIGA s environment allows for a rapid and multifaceted analysis of the input string. If the parse, or rather, the paraphrase automatically generated by GsG 6, is deemed incorrect by the end-user, a learning episode ensues. that is covered by G. 4Very fast, stochastic top-down chart parser developed by the first author incorporating heuristics to, in this order, maximize coverage, minimize tree complexity and maximize tree probability. SAcronym for interactive, distributed, incremental grammar acquisition. 6In order for all the interactions with the end-user to be performed in natural language only, a generation grammar is needed to transform semantic representations into surface forms. To that effect GSG is able to cleverly use the analysis grammar in \"reverse.\" By bringing to bear contextual constraints, GSG can make predictions as to what a sequence of unparsed words might mean, thereby exhibiting an \"empathic\" behavior toward the end-user. To this aim, three different learning methods are employed: parser predictions, hidden understanding model, and end-user paraphrases. 3.2.1 Learning Similar to Lehman (1989) , learning in GSG takes place by the dynamic creation of grammar rules that capture the meaning of unseen expressions, and by the subsequent update of the stochastic models. Acquiring a new mapping from an unparsed sequence of words onto its desired semantic representation involves the following steps. 1. Hypothesis formation and filtering. Given the context of the sentence at hand, GsG constructs hypotheses in the form of parse trees that cover the unparsed sequence, discards those hypotheses that are not approved by the DM 7 and ranks the remaining by likelihood. Interaction with the end-user. The ranked hypotheses are presented to the end-user in the form of questions about, or rephrases of, the original utterance. Dynamic rule creation. If the end-user is satisfied with one of the options, a new grammar rule is dynamically created and becomes part of the end-user's grammar until further notice. Each new rule is annotated with the learning episode that gave rise to it, including end-user ID, time stamp, and a counter that will keep track of how many times the new rule fires in successful parses, s Parser predictions As suggested by Kiyono and Tsujii (1993) , one can make use of parse failures to acquire new knowledge, both about the nature of the unparsed words and about the inadequacy of the existing grammar rules. (a) Parse the lexical items of the new rule's right-hand-side with all concepts granted top-level status, i.e., able to stand at the root of a parse tree. (b) If a word is not covered by any tree, take it as is into the final rlght-hand side. Else, take the root of the parse tree with largest span; if tie, prefer the root that ranks higher in the DM. For example, with the DM in Fig. 2 and the grammar in Fig. 3 , What Hidden understanding model As another way of bringing contextual information to bear in the process of predicting the meaning 9For real-world grammars, of, say, over 1000 rules, it is necessary to bound the number of partial parses by enforcing a maximum beam size at the left-hand side level, i.e., placing a limit on tile number of subparses under each nouterminal to curb the exponential explosion.  of unparsed words, the following stochastic models, inspired in Miller et al. (1994) and Seneff (1992), and collectively referred to as hidden understanding model (HUM), are employed. \u2022 Speech-act n-gram. Top-level concepts can be seen as speech acts of the domain. For instance, in the DM in Fig. 2 [suggestion]> is more likely than the sequence < [greeting], [farewell] >. to the concepts in the DM (i.e., equivalent to grammar non-terminals) and the observations to the embedded concepts appearing as immediate daughters of the state in a parse tree. For example, the parse tree in Fig. 4 contains the following set of <state, observation> pairs: {< [time], [point] >, < [point], [day_of_week] >, < [point], [time_of_day] >}. \u2022 Concept-word HMM. Discrete hidden Markov model in which the states correspond to the concepts in the DM and the observations to the embedded lexical items (i.e., grammar terminals) appearing as immediate daughters of the state in a parse tree. For example, the parse tree in Fig. 4 contains the pairs: {< [day_of_week], tuesday>, < [time_of_day], afternoon>}. The HUM thus attempts to capture the recurring patterns of the language used in the domain in an asynchronous mode, i.e., independent of word order (as opposed to parser predictions that heavily depend on word order). Its aim is, again, to provide predictive power at run-time: upon encountering an unparsable expression, the HUM hypothesizes possible intended meanings in the form of a ranked list of the most likely parse trees, given the current state in the discourse, the subparses for the expression and the lexical items present in the expression. Its parameters can be best estimated through training over a given corpus of correct parses, but in order not to compromise our established goal of rapid deployment, we employ the following techniques. 1. In the absence of a training corpus, the HUM parameters are seeded from the Kernel Grammar itself. 2. Training is maintained at run-time through dynamic updates of all model parameters after each utterance and learning episode. End-user paraphrases If the end-user is not satisfied with the hypotheses presented by the parser predictions or the HUM, a third learning method is triggered: learning from a paraphrase of the original utterance, given also by the end-user. Assuming the paraphrase is understood, m GsG updates the grammar in such a fashion so that the semantics of the first sentence are equivalent to those of the paraphrase. 12 11 Precisely, the requirement that the grammar be complete (see note 3) ensures the existence of a suitable paraphrase for any utterance expressible in the domain. In practice, however, it may take too many attempts to find an appropriate paraphrase. Currently, if the first paraphrase is not understood, no further requests are made. 12Presently, the root of the paraphrase's parse tree directly becomes the left-hand-side of the new rule. 4 Preliminary results We have conducted a series of preliminary experiments in different languages (English, German and Chinese) and domains (scheduling, travel reservations). We present here the results for an experiment involving the comparison of expert vs. non-expert grammar development on a spontaneous travel reservation task in English. The grammar had been developed over the course of three months by a fnlltime expert grammar writer and the experiment consisted in having this expert develop on an unseen set of 72 sentences using the traditional environment and asking two non-expert users lz to \"teach\" Gs\u00a23 the meaning of the same 72 sentences through interactions with the system. Table 1 compares the correct parses before and after development. It took the expert 15 minutes to add 8 rules and reduce bad coverage from 27.01% to 13.51%. As for the non-experts, end-user1, starting with a similar grammar, reduced bad parses from 22.97% to 12.17% through a 30-minute session 14 with GSG that gave rise to 8 new rules; end-user2, starting with the smallest possible complete grammar, reduced bad parses from 41.89% to 22.98% through a 35-minute session 14 that triggered the creation of 17 new rules. 60% of the learning episodes were successful, with an average number of questions of 2.91. The unsuccessful learning episodes had an average number of questions of 6.19 and their failure is mostly due to unsuccessful paraphrases. As for the nature of the acquired rules, they differ in that the expert makes use of optional and repeatable tokens, an expressive power not currently available to GSG. On the other hand this lack of generality can be compensated by the Principle of Maximal Abstraction (see note 8). As an example, to cover the new construction And your last name?, the expert chose to create the rule: [requestmame] <---*and your last name 13Undergraduate students not majoring in computer science or linguistics. l'lIncluding a 5-minute introduction. whereas both end-user1 and end-user~ induced the automatic acquisition of the rule: [request.name] +--CONJ POSS [last] name. 15 Discussion Although preliminary and limited in scope, these results are encouraging and suggest that grammar development by non-experts through GSG is indeed possible and cost-effective. It can take the nonexpert twice as long as the expert to go through a set of sentences, but the main point is that it is possible at all for a user with no background in computer science or linguistics to teach GsG the meaning of new expressions without being aware of the underlying machinery. Potential applications of Gsc are many, most notably a very fast development of NLU components for a variety of tasks including speech recognition and NL interfaces. Also, the IDIGA environment enhances the usability of any system or application that incorporates it, for the end-users are able to easily \"teach the computer\" their individual language patterns and preferences. Current and future work includes further development of the learning methods and their integration, design of a rule-merging mechanism, comparison of individual vs. collective grammars, distributed grammar development over the World Wide Web, and integration of GSG's run-time stage into the JANUS speech recognition system (Lavie et al. 1997) . Resum Un dels camins crftics en el desenvolupament de mbduls de comprensi6 del llenguatge natural passa per la dificultat de definir la funcid que assigna, a una seqii~ncia de roots, la representaci6 sem~ntica desitjada. Els m~todes tradicionals per definir aquesta correspond~ncia requereixen l'esfor~ de lingfiistes computacionals, que dediquen mesos o ~dhuc anys construint, per exemple, una gram~tica sem~ntica (formalisme en el qual els sfmbols no terminals de la gramEtica corresponen directament als conceptes del domini de l'aplieaei6 determinada), i, tanmateix, degut precisament a la prbpia natura del llenguatge hum~, la gramhtica resultant mai no 4s capaq de cobrir tots els mots i expressions que ocorren naturalment al domini en qfiesti6. Reconeixent per tant la impossibilitat d'establir a priori totes les formes superficials arab qu~ un concepte pot set expressat, presentem en aquest treball GSG: un sistema computacional emp~tic per al r~pid desplegament de mbduls de comprensi6 del llenguatge natural i llur adaptaci6 dinhmica ales particularitats i prefer~ncies d'usuaris finals inexperts. El proc4s de construcci6 d'un mbdul de com-prensi6 del llenguatge natural per a un nou domini pot set dividit en dues parts. Primerament, durant la fase de composici6, GSG ajuda el desenvolupador expert en l'estructuraci6 dels conceptes del domini (ontologia) i en l'establiment d'una gramEtica minimal. Tot seguit, durant la fase d'execuci6, GSG forneix l'usuari final inexpert d'un medi interactiu en qu~ la gram~tica 4s augmentada din~micament. Tres m~todes d'aprenentatge automatic sdn utilitzats en l'adquisici6 de regles gramaticals a partir de noves frases i construecions: (i) prediceions de l'analitzador (GsG empra anMisis incompletes per conjecturar quins mots poden aparNxer tant desprds de l'arbre d'anMisi incomplet, en anMisi d'esquerra a dreta, com abans de l'arbre d'anMisi incomplet, en anMisi de dreta a esquerra), (ii) cadenes de Markov (m~todes estoc~stics que modelen, independentment de l'ordre dels mots, la distribucid dels conceptes i llurs transicions, emprats per calcular el concepte global m4s probable donats un context i uns arbres d'anMisi parcials determinats), i (iii) par~frasis (emprades per assignar llur representacid sem~ntica a la frase original). Hem implementat una primera versi6 de GSG i els resultats obtinguts, per b4 que preliminars, sdn ben encoratjadors ear demostren que un usuari inexpert pot \"ensenyar\" a GSG el significat de noves expressions i eausar una extensid de la gramgtiea comparable a la d'un expert. Actuahnent estem treballant en la millora dels m~todes automhties d'aprenentatge i llur integracid, en el disseny d'un mecanisme de com-binaci6 autom~tica de regles gramaticals, en la comparaci6 de gramktiques individuals amb gram~tiques col.lectives, en el desenvolupament distribu'/t de gramEtiques a trav4s de la World Wide Web, i en la integraci6 de la fase d'execuci6 de GsG en el sistema de reconeixement de la parla i traducci6 automktica JANUS. $.~\u00a3/fqg~a~9)~J@,4ffo ~Eig.~--]'5'i'~., GSG Acknowledgements The work reported in this paper was funded in part by a grant from ATR Interpreting Telecommmfieations Research Laboratories of Japan.",
    "abstract": "A critical path in the development of natural language understanding (NLU) modules lles in the difficulty of defining a mapping from words to semantics: Usually it takes in the order of years of highly-skilled labor to develop a semmltic mapping, e.g., in the form of a semantic grammar, that is comprehensive enough for a given domain. Yet, due to the very nature of human language, such mappings invariably fail to achieve full coverage oil unseen data. Acknowledging the impossibility of stating a priori all the surface forms by which a concept can be expressed, we present GSG: an empathic computer system for the rapid deployment of NLU front-ends and their dynamic customization by non-expert end-users. Given a new domain for which an NLU front-end is to be developed, two stages are involved. In the authoring stage, GSG aids the developer in the construction of a simple domain model and a kernel analysis grammar. Then, in the run-time stage, GSG provides the enduser with an interactive environment in which the kernel grammar is dynamically extended. Three lear~ling methods are employed in the acquisition of semantic mappings from mmeen data: (i) parser predictions, (ii) tfidden understanding model, and (iii) end-user paraphr~es. A baseline version of GSG has been implemented and preliminary experiments show promising results.",
    "countries": [
        "United States"
    ],
    "languages": [
        "German",
        "English",
        "Chinese"
    ],
    "numcitedby": "0",
    "year": "1998",
    "month": "",
    "title": "Growing Semantic Grammars"
}