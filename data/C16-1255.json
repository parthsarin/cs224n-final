{
    "article": "Semantic classification of words using distributional features is usually based on the semantic similarity of words. We show on two different datasets that a trained classifier using the distributional features directly gives better results. We use Support Vector Machines (SVM) and Multirelational Matrix Factorization (MRMF) to train classifiers. Both give similar results. However, MRMF, that was not used for semantic classification with distributional features before, can easily be extended with more matrices containing more information from different sources on the same problem. We demonstrate the effectiveness of the novel approach by including information from WordNet. Thus we show, that MRMF provides an interesting approach for building semantic classifiers that (1) gives better results than unsupervised approaches based on vector similarity, (2) gives similar results as other supervised methods and (3) can naturally be extended with other sources of information in order to improve the results. Introduction In this paper we consider the task of classifying words into a large number of semantic categories. For this, we use two different data sets: 1. A dataset which is used in literature (Bullinaria and Levy, 2007) -to enable compare our results with results reported in the literature, 2. A larger dataset that is derived from a large thesaurus. The second dataset comes close to practical applications for semantic word classification. Organizations maintaining thesauri usually try to keep their thesaurus up to date and frequently add new terminology to the thesaurus. For each new term, they have to decide at what point it has to be inserted. Automatic semantic classification supports exactly this task. However, the classifier should be able to choose from hundreds or even thousands of semantic classes, not just from a dozen. For semantic word classification, it is a common approach to represent words by context features. Usually, co-occurrence statistics are used as context features. According to the distributional hypothesis, words with similar context features have a similar meaning. Thus, we can use any distance measure between the feature vectors as a measure of semantic similarity. These distances are now commonly used in a nearest neighbor or a nearest centroid (or nearest prototype) classifier. Recently, distributional features have also been used directly to train classifiers that classify pairs of words as being synonymous or not (Hagiwara, 2008; Weeds et al., 2014; Aga et al., 2016) . In these approaches, first a vector representation for a pair is build, that is used by a machine learning algorithm. In the following we will use the distributional features directly to categorize the words into a large number of categories. We will also see that the supervised methods outperform the unsupervised ones. For the given task, we obtain similar results with SVM and MRMF. However, MRMF enables easy integration of different sources which improves the results furthermore. The MRMF does not just aggregate results from different sources, but is also able to model the interaction between the different types of information. As a second source of information we use hypernym information from WordNet. Since, we do not have a mapping from wordnet hypernym classes to our target classes, we have a second learning task. In the first place we show that classification using WordNet is possible, but gives worse results than classification based on distributional features. In the second place, MRMF using both distributional features and WordNet Hypernyms outperforms all other methods. For the SC53 data set that introduced by Bullinaria and Levy (2007) using the Montague and Battig (Battig and Montague, 1969) semantic classes, we get an accuracy of 0, 93. The best result found in literature for the complete data set is 0,86 (Bullinaria and Levy, 2012) . The rest of the paper is organized as follows. Section 2 briefly reviews the related work. Section 3 explains the methodology of the work in detail. Section 4 explains the multi-relational matrix factorization method in detail. Section 5 and Section 6 explain briefly the evaluation of the models and explain the result, respectively. Finally, Section 7 concludes the paper. Related Work In distributional semantics, words are represented by context features, usually co-occurrence numbers between words or the pointwise mutual information between each word and each context word. It turns out that words with a similar meaning have similar vectors of context features; In other words, semantically similar words occur in similar contexts (Rubenstein and Goodenough, 1965; Saif and Hirst, 2012; Bullinaria and Levy, 2007; Turney and Pantel, 2010; Bullinaria and Levy, 2012; Kiela and Clark, 2014) . Classification of words into different semantic categories was studied by Pekar et al. (2004) , who use a k-Nearest Neighbor classifier and investigate different feature weighting schemes and distance measures; Fan and Friedman (2007) study the classification of medical terms using a nearest centroid classifier; Both Bullinaria and Levy (2012) and Keith et al. (2015) use a nearest centroid classifier for the same data set that is also included in our study. However, Keith et al. report only the result for one arbitrary split into test and training set. Thus, their results cannot be compared directly to our and also Bullinaria and Levy results. Matrix factorization has been used in distributional semantics, e.g. by Giesbrecht (2010) and Van de Cruys et al. (2013) in order to reduce the size of the feature space, but not directly for predicting missing values or for classification. We are not aware of any work using matrix factorization for classification of words into semantic categories. The integration of distributed and lexical information is an obvious way to go and was also used in a number of studies. Usually a (weighted) average of similarities based on different types of information is used. E.g. Finkelstein et al. (2001) used distributional features (occurrence frequencies of words in various domains) and the cosine of these feature vectors as a distributional similarity measure. This measure is combined linearly with a WordNet based similarity measure. Yih and Qazvinian (2012) use different similarity methods, like corpus based and web based distributional similarity for binary classification tasks (synonymous or not-synonymous). They also used WordNet similarity. For this, they represent a word as a vector in a Synset-space. The vector, thus indicates, to which synsets a word belongs. They finally aggregated the various similarities by taking the average cosine similarity. Camacho-Collados et al. (2015) combined distributional similarity of words based on their occurrence in Wikipedia with a WordNet based similarity measure. They also combined the similarities from both sources by computing the average. Pennacchiotti et al. (2008) also investigate the contribution of distributional models and their combination with Wordnet. They use the a simple back-off model to combine distributional similarity and Wordnet based similarity. Methodology The task that we considered is to classify words into their semantic category. In this section, we will describe the datasets, the feature construction for the representation of the words and the classification methods that we have used. Data Description Our first dataset is the same with the one used by Bullinaria and Levy (2007) . This data set uses 53 of the 56 basic semantic categories introduced by Battig and Montague (1969) . In total, the dataset contains 530 words which have been taken from 53 semantic categories. For each category there are 10 typical words. We will refer to this dataset as SC53. We have compiled a second, similar but much larger dataset from the Eurovoc Thesaurus (Office for Official Publications of the European Communities, 1995). Eurovoc is a multilingual thesaurus developed by the European Commissions Publications Office as a controlled vocabulary for the manual indexation of documents. The Eurovoc thesaurus is divided into 127 micro-thesauri. From each of these micro-thesauri we took the top-level concepts, 528 in total, as semantic categories. For each category we collected all narrower concepts and considered their preferred and alternative labels as terms for that category. We then removed all terms that belong to more than one category or that consist of more than two words. Finally, we removed all categories for which less than 10 terms were found. Now 190 categories with a total of 2386 terms are left. After further cleaning the dataset by removing the words that have a very high or low frequencies in UkWaK, which is a corpus that has been used to construct word representation vectors, 1447 words with 95 semantic categories are left, each containing 10 to 44 terms. We call this dataset Eurovoc. Feature Construction We use two different representations for each word. The first one is a distributional representation based on word co-occurrences.The second one uses WordNet hypernyms. The two types of representation will be explained in the following subsections. Distributional Representation We construct vectors of co-occurring words to represent each word and use them as an input for all our experiments. For building the context vectors, we used UkWaC English corpus. There are a number of choices that have to be made when building the context vectors for each word. In the following we will use the choices that turned out to yield the best results in a number of different tasks in recent studies by Bullinaria and Levy (2007; 2012) and Kiela and Clark (2014) . After some preliminary experiments we found that including all words in the frequency range from 4 \u2022 10 3 to 1 \u2022 10 6 in the UkWaC Corpus as context feature is a good compromise between optimal results and acceptable storage and computing efforts. Each word is now represented by a vector of 17 400 features. All experiments have been done using these distributional features. Next we have to determine the size of the window for co-occurrence. If the training corpus is large enough all studies show that smaller windows yield better results. We first remove all stop words and then use a window size of two words on the stopped text while respecting sentence boundaries. Syntactic relations are not used to determine the context of a word. We use positive pointwise mutual information (PPMI) as a degree of co-occurrence, since it was shown to give better results than raw co-occurrence probabilities in a number of different studies (see e.g. (Bullinaria and Levy, 2007; Bullinaria and Levy, 2012) ). For a context word c and a (target) word t the PPMI is defined as ppmi(c, t) = max log p(c|t) p(c) , 0 . (1) WordNet Categories Representation In order to classify words into semantic categories, we could directly use the semantic categories of the words from WordNet. However, we do not know the relation between the WordNet categories and the target categories. Moreover, our data set contains lots of terms that are not found in WordNet. For the SC53 dataset we could construct WordNet vectors for 520 out of 530 words; in the Eurovoc dataset, 1198 out of 1447 terms were found in WordNet. The average number of hypernyms for each term found in WordNet was 66. The total number of distinct hypernyms for all words is 2896 for the SC53 and 4938 for the Eurovoc data. Classification Methods Bullinaria and Levy (2012) use a nearest centroid classifier for classifying words based on distributional features. In this approach, for every semantic category a feature vector is created by averaging the feature values of all words in the training set belonging to that category. Now the cosine between the feature vector of the word and each centroid vector is computed and the word is assigned to the class with the closest center. The second classification method is a support vector machine (SVM). We used linear SVM from the liblinear package (Fan et al., 2008) to learn a model and classify words, that words represented by feature vector, to their category. Liblinear is efficient for training, large-scale problems (Fan et al., 2008) . The hyper-parameters of the models have been tuned using a grid search from LIBSVM. To find the best C parameter value, we tested the numbers in between 0 and 20 in step 0.05. The third and main classification method that is used in this paper is multi-relational matrix factorization. We will explain MRMF in detail in the following section. If we want to use both lexical and distributional information, we can use MRMF as we will show in the following section. An obvious alternative is an ensemble classifier, that uses the results of the classifiers using only one type of information. Thus we also trained an SVM on the results of the SVMs using WordNet and distributional features. Since we have only boolean results from the SVM (a word is assigned to a category or not) we use also a logistic regression classifier. Logistic regression gives probabilities for each class and selects the class with the highest probability. The ensemble classifier now can use the probabilities for each class. Though we expect logistic regression to be inferior to SVM, it might have an advantage to use its class probabilities in an ensemble classifier. For MRMF we have three matrices that can be used: the matrix of words and semantic classes, the matrix of words and context features and the matrix of words and WordNet features. The task for MRMF now is to predict values for new words in the first matrix using one or both of the other matrices. Multi-Relational Matrix Factorization MRMF on two Matrices For the problem to classify words that are represented by vectors of WordNet categories and context words, we have followed the same procedure. Let's assume the following problem: We have WN categories Figure 2 : Visual overview of the matrix decomposition used for semantic categorization on three matrices. Algorithm 1 Block coordinate descent optimization algorithm for L2-MRMF 1: procedure MRMF-COORDINATE DESCENT input: X, Y, k, weight constants \u03b1 X , \u03b1 Y , regularization constants \u03bb U , \u03bb V , \u03bb C 2: U \u223c N (0, \u03c3I) 3: V \u223c N (0, \u03c3I) 4: C \u223c N (0, \u03c3I) 5: repeat 6: U \u2190 (\u03b1 X XV + \u03b1 Y Y C) \u03b1 X V T V + \u03b1 Y C T C \u2212 \u03bb U I \u22121 7: V \u2190 \u03b1 X U T U \u2212 \u03bb V I \u22121 \u03b1 X U T X T 8: C \u2190 \u03b1 Y U T U \u2212 \u03bb C I \u22121 \u03b1 Y U T Y T 9: until convergence 10: return U, V, C 11: end procedure \u2022 n features for each word (e.g. positive point wise mutual information (PPMI) values based on the co-occurrence data); \u2022 c semantic categories; The features are represented by a matrix X \u2208 R m\u00d7n where each row of X represents the feature vector of a word. We use a second matrix, Y \u2208 {0, 1} m\u00d7c with the relation between words and categories. Y i,j has value 1 if the word i belongs to the category c and 0 otherwise. The idea of matrix factorization is that X can be approximated by the product of two smaller matrices U and V , where U is a matrix of words and latent features and V is a matrix of context features and the same latent features. The number k of latent features can be chosen freely with k << n. The second matrix, Y , can be decomposed in the same way. The idea of MRMF is that both decompositions use the same factor matrix U of words and latent features. Thus the latent features now form the link between the context features and the categories. The situation is visualized in Figure 1 . The matrices U , V and C are constructed using the training data. If we have a new word w in the test data, we can add it to X and compute it's latent features using V , and thus extend U . From the extended matrix U and C we get the new row for w in Y , that gives us the classification for w. More formally, X and Y can be factorized as: X \u2248 U V T (2) Y \u2248 U C T (3) for some U \u2208 R m\u00d7k , V \u2208 R n\u00d7k and C \u2208 R c\u00d7k . The problem is now to minimize the following objective with respect to L2 loss function arg min U,V,B,C \u03b1 X 1 2 ||X \u2212 U V T || 2 F + \u03b1 Y 1 2 ||Y \u2212 U C T || 2 F (4) + \u03bb U 2 ||U || 2 F + \u03bb V 2 ||V || 2 F + \u03bb C 2 ||C|| 2 F L2 loss function is basically minimizing the sum of the square of the differences between the target value and the estimated values. Learning Algorithm and Predictions One of the most often used optimization algorithms is block coordinate descent. Coordinate descent optimizes the objective function through a sequence of one-dimensional optimizations. Coordinate descent is based on the idea that the minimization of a multi-variable function First U , V and C are initialized with random values. Then the minimization problem is solved for each one of the matrices individually. This is repeated until convergence. The coordinates descent algorithm for the objective with respect to L2 loss function in Equation 4 is given in Algorithm 1 Now, for a set of new words X test , Equation 5 can predict their semantic categories. Y test \u2248 U test C T (5) However, U test is unknown. The standard way to estimate U test is through a fold-in: U test = arg min \u00db ||X test \u2212 \u00db V T || 2 F (6) U test = X test V (V T V ) \u22121 (7) MRMF on three Matrices The MRMF method allows to integrate elegantly many different sources of information. In our experiment we have integrated the lexical and distributional information by extending the MRMF method described in section 4.1. Matrices X and Y are the same matrices that we have seen in section 4.1. The newly added matrix Z has the lexical information which has the hypernym information from WordNet. X, Y and Z can be factorized as follows: X \u2248 U V T (8) Y \u2248 U C T (9) Z \u2248 U B T (10) The overall decomposition of the three matrices for MRMF method is visualized in Figure 2 . Besides adding the Z matrix information in the objective function and in the coordinate decent algorithm, we have modified Equation 7 for U test and add the third matrix information as follows: U test = X test V (V T V ) \u22121 + Z test B(B T B) \u22121 (11) Parameter Selection For MRMF, a combination of weight constant, latent features and regularization parameters with a wide range of values was tested to find the best parameter setting. For SC53 dataset, the weight constant \u03b1 x and \u03b1 z range is in between 1 #_SC53_instances and 1\u202210 \u22127 , and in between 1 #_Eurovoc_instances and 1\u202210 \u22127 for the Eurovoc dataset. The weight constant \u03b1 y is set to 1; Because Y is the matrix that we are building the model for, and Y test is the matrix we want to predict. The regularization constants \u03bb u , \u03bb v and \u03bb b have used the same range of value which is in between 1 \u2022 10 \u221217 and 1 \u2022 10 \u221222 . For the latent features k, we considered a range between 50 and 200. Figure 3 and Figure 4 show the parameters \u03b1 x and k performance for the SC53 and Eurovoc datasets, respectively. As both figures show, the k parameter gives high accuracy on value 200 and goes flat after that for both datasets on MRMF_2 method, and also on method MRMF_3. In method MRMF_2, the k parameter has performed better with the \u03b1 x parameter value around 0.002 for SC53 and between 0.0003 and 0.0001 for the Eurovoc dataset. MRMF_3 gives optimal results when \u03b1 x is 0.001 and \u03b1 z is 0.0004 for SC53 dataset and when \u03b1 x is 1 \u2022 10 \u22126 and \u03b1 z is 1 \u2022 10 \u22127 for the Eurovoc derived data. Evaluation For evaluation we used 10 fold cross validation. For all experiments we used the same stratified split. This is basically the same as the leave-one out setup used by Bullinaria and Levy (2012) . However, for equal size classes, in a leave-one-out experiment an intelligent classifier eventually might learn that the element to be classified always belongs to the smallest class. By using stratified croiss-validation we avoid this problem. Methods Result Table 2 , the result table, summarizes the performance of the methods on each dataset with their standard error (Stand. Err.). Bullinaria and Levy (2007; Bullinaria and Levy (2012) study different design and parameter choices for distributional similarity. The best accuracy, that they reached for the SC53 dataset (using a nearest centroid classifier), was 0, 86. We could reproduce this result using roughly the same choices and parameter settings that were given by Bullinaria and Levy. Applying the same method to the Eurovoc dataset gives an accuracy of 0,58. We used the hypernym features (WN) only in the supervised and hybrid settings. For both datasets, we see that both SVM and MRMF are superior to the nearest centroid classifier. We see no big differences between the SVM and MRMF. As expected the results from logistic regression (LR) stay a bit behind those results. Finally, we see that the integration of lexical and distributional information using MRMF clearly improves the result for both data sets. The ensemble methods can also improve the results, but stay behind the result of MRMF_3M. Since the logistic regression results for the Eurovoc data stay much behind the SVM and MRMF results, we did not test the ensemble based on those classifiers. For the SC53 dataset, both the supervised classifiers using only distributional features and the classifier using a combination of distributional (DF) and lexical (WN) features outperform the best result reported up to now. Keith et al. (2015) report an accuracy of 0, 96 when reproducing the experiment of Bullinaria and Levy, but, as mentioned before, this result is not comparable to ours, since they used only a part of the data for evaluation. If we look at the word classes predicted by the MRMF for the SC53 data, using both sources of information, we still have a small number of real errors. E.g. the word mixer is classified as a nonalcoholic beverage and nun as a relative. Most errors, however, are not real errors, like the word foot that is classified as a body part by MRMF and is a unit of distance in the dataset. A knife is classified as a weapon instead of a kitchen utensil; shoes as a type of footwear instead of clothing; and a bass as a musical instrument instead of a fish. Given the type of errors that is made, we can conclude that to the SC53 data set we are close to the highest possible accuracy that can be reached. The Eurovoc dataset clearly is much harder and has still room for improvement. Conclusion We have studied semantic classification of words using distributional features directly in a strongly supervised learning setting. We have shown on two different data sets, that both SVM and MRMF outperform a distance based classifier, that is commonly used for this task. On a dataset which was used before for the same task, we thus could obtain results that are beyond state of the art. In order to make a classification task that is closer to real applications, we compiled a new data set with more semantic categories. This data set is clearly much harder, but experiments on this dataset confirm all conclusions from the experiment on the smaller dataset. In order to improve the results we finally investigated the possibility to include information from Word-Net. While an ensemble classifier was not very successful in combining the two sources of information, MRMF was able to integrate the two types of information and improve the results substantially. Since we are close to the optimal result for the SC53 dataset, we will concentrate on future work on datasets with a larger number of classes. In addition, we will try to find more sources of information that successfully can be integrated in order to improve the accuracy and to explore the possibilities of MRMF.",
    "abstract": "Semantic classification of words using distributional features is usually based on the semantic similarity of words. We show on two different datasets that a trained classifier using the distributional features directly gives better results. We use Support Vector Machines (SVM) and Multirelational Matrix Factorization (MRMF) to train classifiers. Both give similar results. However, MRMF, that was not used for semantic classification with distributional features before, can easily be extended with more matrices containing more information from different sources on the same problem. We demonstrate the effectiveness of the novel approach by including information from WordNet. Thus we show, that MRMF provides an interesting approach for building semantic classifiers that (1) gives better results than unsupervised approaches based on vector similarity, (2) gives similar results as other supervised methods and (3) can naturally be extended with other sources of information in order to improve the results.",
    "countries": [
        "Germany"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "1",
    "year": "2016",
    "month": "December",
    "title": "Integrating Distributional and Lexical Information for Semantic Classification of Words using {MRMF}"
}