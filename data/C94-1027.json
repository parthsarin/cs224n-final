{
    "article": "Text corpora which are tagged with part-of-speech information are useful in many areas of linguistic research. In this paper, a new part-of-speech tagging method hased on neural networks (Net-Tagger) is presented and its performance is compared to that of a llMM-tagger (Cutting et al., 1992 ) and a trigrambased tagger (Kempe, 1993) . It is shown that the Net-Tagger performs as well as the trigram-based tagger and better than the iIMM-tagger. INTRODUCTION Words are often ambiguous in their part of speech. The English word store for example can be either a noun, a finite verb or an infinitive. In an utterance, this ambiguity is normally resolved by the context of a word: e.g. in the seutence \"The 1977 P6's could store two pages of data. \", store can only be an intluitive. A part-of-speech tagger is a system which automatically assigns the part of speech to words using contextual information. Potential applications for partof-speech taggers exist in many areas inclnding speech recognition, speech synthesis, machine translation and information retrieval. l)ifi'ereut methods have been used for the im plemenration of part-of-speech taggers. TAGGIT (Greene, Rnbin, 1971 ), an early system, which was used for the initial tagging of the Brown corpus was rule-based. It was able to assign the correct part-of-speech to about 77 % of the words in the Brown corpus. In another approach contextual dependencies are modelled statistically. Churcb (1988) and Kempe (1993) use second order Markov Models and train their systems on large handtagged corpora. Using this metbod, they are able to tag more than 96 % of their test words with the correct part-of-speech. The need for reliably tagged training data, however, is a problem for languages, where such data is not available in sufficient quantities. Jelinek (1985) and Cutting et al. (1992) circumvent this problem by training their taggers on untagged data using tile Itaum-Welch algorithm (also know as the forward-backward algorithm). They report rates of correctly tagged words which are comparable to that presented by Church (1988) and Kempe (1993) . A third and rather new approach is tagging with artificial neural networks. In the area of speech recognition neural networks have been used for a decade r, ow. They have shown performances comparable to that of IIidden Ivlarkov model systems or even better (Lippmann, 1989) . Part-of-speech prediction is another area, closer to POS tagging, where neural networks have been applied successfidly. Nakamura el; al. (1990) trained a d-layer feed-forward network with up to three preceding part-of-speech tags ,as input to predict the word category of the next word. The prediction accuracy was similar to that of a trigram-b,~sed predictor. Using tile predictor, Nakamura et al. were able to improve the recognition rate of their speech recognition system from 81.0 % to 86.9 %. Federici and Pirrelli (199a) developed a part-ofspeech tagger which is based on a special type of neural network. It disambiguates between alternative morphosyntactic tags which are generated by a roof phological analyzer. The tagger is trained with an analogy-driven learning procedure. Only preliminary results are presented, so that a comparison with other methods is difficult. Ill this paper, a part-of-speech tagger based on a multilayer perceptrou network is presented. It is similar to tile network of Nakamura et al. (1990) in so far as the same training procedure (Backpropagation) is used; but it differs in the structure of tile network and also in its purpose (disambignation vs. prediction). The performance of tl,e presented tagger is measured and compared to that of two other taggers (Cutting et al., 1992; Kempe, 1993) . NEURAL NETWORKS Artificial neural networks consist of a large number of simple processing units. These units are highly interconnected by directed weighted links. Associated with each unit is an activation value. Through tile connections, this activation is propagated to other units. In mnltilayer perceptron networks (MLP-networks), tile most popular network type, the processing units are arranged vertically in several layers (fig. I). Connections exist only between units in adjacent layers. The bottom layer is called input layer', because the activations of the units in this layer represent the input of tile network. Correspondingly, the top layer is called output layer. Any layers between input layer During the processing in a MLP-network, actiwttions are propagated from inlmt units through hidden units to output units. At each unit j, the weighted inlmt activations aiwij are summed and a bias parameter Oj is added. net i = ~ aiwlj + Oj (1) t The resulting network input ,telj is then l)~uqsed through a sigmoid fimction (the logistic funclion) in order to restrict the value range of the resulting activation aj to the interval [0,i]. k if j is a hidden unit Ilere, Zp is the target output vector which the network lnnst learn t . \"Daining the MLP-network with the backpropagao tion rule guarantees that a local minimum of the error surface is found, thougl, this is not necessarily the global one. In order to speed up the trahfiug process, a momentum term is often introduced into the update rormula: \u00a3kWij(t -~\" 1) \"~ Oapi~pj \"+ (:~lt)ij(l) (4) 1We assume here that the hia.s parameter Oj is realized ms a weight to an additional unit whidt has always the activation va}.ue 1 (cp. (B.umelhart, McChdland, t98, 1) ). For a de.tailed introduction to MLP networks see e.g. (l{unaelhart, McClellan(l, 1984) . @ @ \u00ae...\u00ae @...\u00a9 \u00a9 \u00a9 \u00a9 \u00a9.-.\u00a9 @...\u00a9 \u00a9 @ @ @...@ @...\u00a9 @ \u00a9 \u00a9 \u00a9...\u00a9 \u00a9...@ \u00a9 @ \u00ae @...@ p f In the output layer of the MLP network, each unit corresponds to one of the tags in the tagset. The network learns during the training to activate that output unit which represents the correct tag and to deactivate all other output units, llence, in the trained network, the output unit with the higlu.'st activation indicates, which tag shouhl be attached to the word that is currently processed. The input of the network comprises all the information whicii the systeni ti;Ls about the parts of speech of the current word, the p precedhig words al,d the f following words. More precisely, for each part-of-speech tag posj and each of the p-t-1-kf words in the context, there is an input unit whose activation in U represents the probability that wordl h~Ls part of speech posj. For the word which is being tagged and the following words, the lezical part-of-speech probability l'(posj]wordi) is all we know about the part of speech ~, This probability does not take into account arty contextual influences. So, we get the following input representation for the currently tagged word and the following words: i,,,j : v (vo.,v I,,,o,.d,) , ir i > o (s) 2 Lexical probabilities are estimated hy dividing, the number of times a word occurs with a giw:n tag by the own'all numher of times the word occurs. This method is known as the Ma.vimum Likelihood Principle. For tile preceding words, there is more information available, because they have already bccn tagged. The activation values of the output units at the time of processing are here used instead of the lexieal part-ofspeech probabilitiesa: The network is trained on a tagged corpus. Target activations are 0 for all output units, excepted for the unit which corresponds to the correct tag, for which it is 1. A slightly modified version of the backpropagation algorithm with momentum term which has been presented in the last section is used: if the difference between the activation of an output unit j and the corresponding target output is below a predefined threshold (we used 0.1), the error signal ~pJ is set to zero. In this way the network is forced to pay more attention to larger error signals. This resulted in an improvement of the tagging accuracy by more than 1 percent. Network architectures with and without hidden layers have been trained and tested. In general, MLPnetworks with hidden layers are more powerful than networks without one, but they also need more training and there is a higher risk of overlearning 4. As will be shown in the next section, the Net-Tagger did not profit from a hidden layer. In both network types, the tagging of a single word is performed by copying the tag probabilities of the current word and its neighbours into the input units, propagating the activations through the network to the output units and determining the output unit which has the highest activation. The tag corresponding to this unit is then attached to the current word. If the second strongest activation in the output layer is close to the strongest one, tile tag corresponding to the second strongest activation may be given as an alternative output. No additional computation is required for this. Further, it is possible to give a scored list of all tags as output. aThe output activations of the network do not necessarily sum to 1. Therefore, they should not he interpreted as probabilities. 40verlearning means that irrelevant features of the training set are learned. As a result, the uetwork is unable to generalize. TIIE LEXICON The lexicon which contains the a priori tag probabilities for each word is similar to the lexicon which was used by Cutting et al. (1992) . it has three parts: a fullform lexicon, a suffix lexicon and a default enlry. No documentation of tile construction algorithm of the su[lix lexicon in (Cutting et al., 1992) was available. Thus, a new method based on information theoretic principles was developed. During the lookup of a word in the lexicon of the Net-Tagger, the fifllform lexicon is searched first. If the word is found there, the corresponding tag probability vector is returned. Otherwise, the uppercase letters of the word are turned to lowercase, and the search in the fullform lexicon is repeated. If it fails again, the suIfix lexicon is searched next. If none of the previous steps has been snccessfull, tile default entry of the lexicon is returned. The fullform lexicon was created from a tagged training corpus (some 2 million words of the Penn Treebank Corpus). First, the number of occurrences of each word/tag pair was counted. Afterwards, those tags of each word with an estimated probability of less than 1 percent were removed, because they were in most eases the result of tagging errors in the original corpus. The second part of the lexicon, the suflix lexicon, forms a tree. Each node of tile tree (excepted tile root node) is labeled with a character. At tile leaves, tag probability vectors are attached. During a lookup, tile suffix tree is searched from the root. In each step, tile branch which is labeled with the next character from tile end of the word suffix, is followed. Assume e.g., wc want to look for tile word taggiu 9 in the suflqx lexicon which is shown in fig. 3 . We start at the root (labeled #) and follow the branch which leads to the node labeled g. From there, we move to the node labeled n, and finally we end up in tile node The suffix lexicon was automatically built from the training corpus. First, a sujJiz tree wits constructed from the suffices of length 5 of sill words wliich were annotated with an open class l)art-of-speecli s. Then tag frequencies were cotlnted for all suffices and stored at the corresponding tree nodes. In the next step, an information measure I(S) was calculated for each node of the tree: I(S) = -~ P(posiS ) tomd'(p,>,qS) (7) po* IIere, S is the suffix which corresponds to the current node and P(poslS ) is the probability of tag pos given a word with suffix S. Using this information measure, the suffix tree has been pruned. For each leaf, the weighted information gain G(aS) was calculated: a(aS) = V(aS) (S(S) -S(<,S)), ( 8 ) where S is the suffix of the parent node, aS is the suffix of the current node and F(aS) is the frequency of suffix nS. If the information gain at some leaf of the suffix tree is below a given threshoht ~, it is removed. The tag frequencies of all deleted subnodes of a parent node are collected at the defi, ult node of the parent node. If the default node is the only renlaining subnodc, it is deleted too. In this case, the parent node becomes a leaf and is also checked, whether it is deletable. To illustrate this process consider the following example, where ess is the suffix of the parent node, less is tim suffix of one child node and hess is the suffix of the other child node. The tag frequencies of these nodes are given in table 1. Tim information measure for the parent node is: for hess and 0.56 for less. Now, we can determine the welghted information gain at each of the ehihl nodes. We get: G(ness) = 48(1.32 -0.39) = 44.64 (10) 5Opell class parts-of-speech are those, width allow for the production of new words {e.g. noun, verb, adjective). 6We used a gain threshohl of 10. Both wdues are well above a threshohl of 10, and therefore none of them should be deleted. As explained before, the suflix tree is walked during a lookup along the l)ath, where the nodes are annotated with the letters of the word snflix in reversed order. If at some node on the path, no matching subnode can be found, and there is a default subitode, then the default node is followed. If a leaf is reached at the end of the path, the corresponding tag probability vector is returned. Otherwise, the search fails and the default entry is returned. The defaull entry is constructed by subtracting the tag frequencies at all leaves of the pruned suffix tree from the tag frequencies of the root node and normalizing the resulting frequencies. Thereby, relative frequencies are obtained which sum to one. Rl,~suurs The 2-layer version of the Net-Tagger w,~s trained on a 2 million word subpart of the Pe.nn-Treebank corpus. Its performance was tested on a 100,000 word subpart which was not part of the training corlms. The settings of the network parameters were as follows: the number of preceding words in the context p w,~s 3, the number of following words f was 2 and the number of training cycles was 4 millions. The training of the tagger took one day on a Sparcl0 workstation and the tagging of 100,000 words took 12 minutes on the same machine. In tabh; 2, the accuracy rate of the Net-Tagger is cOrolLated to that of a trigram l)msed tagger (Kempe, 1993) and a lIidden Markov Model tagger (Cutting et al., 1992) which were. trained and tested on the same data. In order to determine the influence of tim size of the training sample, the taggers were also trained on corpora of different sizes and tested again r. The resulting percentages of correctly tagged words are shown in figure 4 . These experiments demonstrate that the performance of the Net-Tagger is comparable to that of the trigram tagger and better than that of the IIMM tagger. They further show tl,at the performance of the Net-Tagger is less affected by a small amount of training data than that of tim trigram tagger. This may be due to a much smaller number of paraineters in the Net-Tagger: while the trigram tagger must accurately ~l:or this test, a slightly simpler netwm'k structure with two preceding and one following word in the input context was used. It was fitrther tested, whether an additional hidden layer in the network with 50 units would improve the accuracy of the tagging. It turned out that the accuracy actually deteriorated slightly, although the number of training cycles had been increased to 50 millions s. Also, tire influence of the size of the input context was determined. Shrinking the context from three preceding and two following words to two preceding and one following word reduced the accuracy only by 0.1%. Enlarging the context gave no improvement. A context of three preceding and two following words seems to he optimal. As mentioned previously, the tagger can produce an alternative tag, if the decision between two tags is difficult. In that way, the accuracy can be raised to 97.79 % at the expense of 4.6 % ambiguously tagged words. An analysis of tire errors of the Net-Tagger and the trigram tagger shows that both have problems with the same words, althot, gh the individual errors are often different 9 . CONCLUSIONS In this paper, the Net-Tagger was presented, a partof-speech tagger which is based on a MLP-network. A comparison of the tagging results with those of a trigram tagger and a IIMM tagger showed that the accuracy is as high as that of the trigram tagger and the robustness on small training corpora is as good as that of the HMM tagger. Thus, the Net-Tagger combines advantages of both of these methods. The Net-Tagger has the additional advantage that problematic decisions between tags are easy to detect, aDue to the large training times needed to train the 3-layernetwork, no further tests have been conducted. o Less than 60 % of the tagging errors were made in common by both taggers. so that in these cases an additional tag can be given in the output. In this way, the final decision can be delayed to a later processing stage, e.g. a parser. A disadvantage of the presented method may be its lower processing speed compared to statistical methods. In the light of the high speed of present computer hardware, however, this does not seem to be a serious drawback.",
    "abstract": "Text corpora which are tagged with part-of-speech information are useful in many areas of linguistic research. In this paper, a new part-of-speech tagging method hased on neural networks (Net-Tagger) is presented and its performance is compared to that of a llMM-tagger (Cutting et al., 1992 ) and a trigrambased tagger (Kempe, 1993) . It is shown that the Net-Tagger performs as well as the trigram-based tagger and better than the iIMM-tagger.",
    "countries": [
        "Germany"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "262",
    "year": "1994",
    "month": "August",
    "title": "Part-of-Speech Tagging With Neural Networks"
}