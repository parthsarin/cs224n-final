{
    "article": "We present a novel PCFG-based architecture for robust probabilistic generation based on wide-coverage LFG approximations (Cahill et al., 2004)  automatically extracted from treebanks, maximising the probability of a tree given an f-structure. We evaluate our approach using stringbased evaluation. We currently achieve coverage of 95.26%, a BLEU score of 0.7227 and string accuracy of 0.7476 on the Penn-II WSJ Section 23 sentences of length \u226420. Introduction Wide coverage grammars automatically extracted from treebanks are a corner-stone technology in state-of-the-art probabilistic parsing. They achieve robustness and coverage at a fraction of the development cost of hand-crafted grammars. It is surprising to note that to date, such grammars do not usually figure in the complementary operation to parsing -natural language surface realisation. Research on statistical natural language surface realisation has taken three broad forms, differing in where statistical information is applied in the generation process. Langkilde (2000) , for example, uses n-gram word statistics to rank alternative output strings from symbolic hand-crafted generators to select paths in parse forest representations. Bangalore and Rambow (2000) use n-gram word sequence statistics in a TAG-based generation model to rank output strings and additional statistical and symbolic resources at intermediate generation stages. Ratnaparkhi (2000) uses maximum entropy models to drive generation with word bigram or dependency representations taking into account (unrealised) semantic features. Valldal and Oepen (2005) present a discriminative disambiguation model using a hand-crafted HPSG grammar for generation. Belz (2005) describes a method for building statistical generation models using an automatically created generation treebank for weather forecasts. None of these probabilistic approaches to NLG uses a full treebank grammar to drive generation. Bangalore et al. (2001) investigate the effect of training size on performance while using grammars automatically extracted from the Penn-II Treebank (Marcus et al., 1994) for generation. Using an automatically extracted XTAG grammar, they achieve a string accuracy of 0.749 on their test set. Nakanishi et al. (2005) present probabilistic models for a chart generator using a HPSG grammar acquired from the Penn-II Treebank (the Enju HPSG). They investigate discriminative disambiguation models following Valldal and Oepen (2005) and their best model achieves coverage of 90.56% and a BLEU score of 0.7723 on Penn-II WSJ Section 23 sentences of length \u226420. In this paper we present a novel PCFG-based architecture for probabilistic generation based on wide-coverage, robust Lexical Functional Grammar (LFG) approximations automatically extracted from treebanks (Cahill et al., 2004) . In Section 2 we briefly describe LFG (Kaplan and Bresnan, 1982) . Section 3 presents our generation architecture. Section 4 presents evaluation results on the Penn-II WSJ Section 23 test set using string-based metrics. Section 5 compares our approach with alternative approaches in the literature. Section 6 concludes and outlines further research. Lexical Functional Grammar Lexical Functional Grammar (LFG) (Kaplan and Bresnan, 1982 ) is a constraint-based theory of grammar. It (minimally) posits two levels of representation, c(onstituent)-structure and f(unctional)structure. C-structure is represented by contextfree phrase-structure trees, and captures surface S \u2191=\u2193 NP VP (\u2191 SUBJ)= \u2193 \u2191=\u2193 NNP V SBAR \u2191=\u2193 \u2191=\u2193 (\u2191 COMP)= \u2193 They believe S (\u2191 PRED) = 'pro' (\u2191 PRED) = 'believe' \u2191=\u2193 (\u2191 NUM) = PL (\u2191 TENSE) = present (\u2191 PERS) = 3 NP VP (\u2191 SUBJ)= \u2193 \u2191=\u2193 NNP V \u2191=\u2193 \u2191=\u2193 John resigned (\u2191 PRED) = 'John' (\u2191 PRED) = 'resign' (\u2191 NUM) = SG (\u2191 TENSE) = PAST (\u2191 PERS) = 3 f1: \uf8ee \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8f0 PRED 'BELIEVE (\u2191SUBJ)(\u2191COMP) ' SUBJ f2: PRED 'PRO' NUM PL PERS 3 COMP f3: \uf8ee \uf8ef \uf8f0 SUBJ f4: PRED 'JOHN' NUM SG PERS 3 PRED RESIGN (\u2191SUBJ) ' TENSE PAST \uf8f9 \uf8fa \uf8fb TENSE PRESENT \uf8f9 \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fb Figure 1 : C-and f-structures for the sentence They believe John resigned. grammatical configurations such as word order. The nodes in the trees are annotated with functional equations (attribute-value structure constraints) which are resolved to produce an fstructure. F-structures are recursive attributevalue matrices, representing abstract syntactic functions. F-structures approximate to basic predicate-argument-adjunct structures or dependency relations. Figure 1 shows the c-and fstructures for the sentence \"They believe John resigned\". PCFG-Based Generation for Treebank-Based LFG Resources Cahill et al. (2004) present a method to automatically acquire wide-coverage robust probabilistic LFG approximations 1 from treebanks. The method is based on an automatic f-structure annotation algorithm that associates nodes in treebank trees with f-structure equations. For each tree, the equations are collected and passed on to a constraint solver which produces an f-structure for the tree. Cahill et al. (2004) present two parsing architectures: the pipeline and the integrated parsing architecture. In the pipeline architecture, a PCFG (or a history-based lexicalised generative parser) is extracted from the treebank and used to parse unseen text into trees, the resulting trees are annotated with f-structure equations by the f-structure annotation algorithm and a constraint solver produces an f-structure. In the in-tegrated architecture, first the treebank trees are automatically annotated with f-structure information, f-structure annotated PCFGs with rules of the form NP(\u2191OBJ=\u2193)\u2192DT(\u2191=\u2193) NN(\u2191=\u2193) are extracted, syntactic categories followed by equations are treated as monadic CFG categories during grammar extraction and parsing, unseen text is parsed into trees with f-structure annotations, the annotations are collected and a constraint solver produces an f-structure. The generation architecture presented here builds on the integrated parsing architecture resources of Cahill et al. (2004) . The generation process takes an f-structure (such as the f-structure on the right in Figure 1 ) as input and outputs the most likely f-structure annotated tree (such as the tree on the left in Figure 1 ) given the input fstructure argmax Tree P (Tree|F-Str) where the probability of a tree given an fstructure is decomposed as the product of the probabilities of all f-structure annotated productions contributing to the tree but where in addition to conditioning on the LHS of the production (as in the integrated parsing architecture of Cahill et al. (2004) ) each production X \u2192 Y is now also conditioned on the set of f-structure features Feats \u03c6-linked 2 to the LHS of the rule. For an f-structure annotated tree Tree and f-structure F-Str with \u03a6(Tree)=F-Str: P (T ree|F-Str) := X \u2192 Y in T ree \u03c6(X) = F eats P (X \u2192 Y |X, F eats) (1) P (X \u2192 Y |X, F eats) = P (X \u2192 Y, X, F eats) P (X, F eats) = (2) P (X \u2192 Y, F eats) P (X, F eats) \u2248 #(X \u2192 Y, F eats) #(X \u2192 . . . , F eats) (3) and where probabilities are estimated using a simple MLE and rule counts (#) from the automatically f-structure annotated treebank resource of Cahill et al. (2004) . Lexical rules (rules expanding preterminals) are conditioned on the full set of (atomic) feature-value pairs \u03c6-linked to the RHS. The intuition for conditioning rules in this way is that local f-structure components of the input f-structure drive the generation process. This conditioning effectively turns the f-structure annotated PCFGs of Cahill et al. (2004) into probabilistic generation grammars. For example, in Figure 1 (where \u03c6-links are represented as arrows), we automatically extract the rule S(\u2191=\u2193) \u2192 NP(\u2191SUBJ=\u2193) VP(\u2191=\u2193) conditioned on the feature set {PRED,SUBJ,COMP,TENSE}. The probability of the rule is then calculated by counting the number of occurrences of that rule (and the associated set of features), divided by the number of occurrences of rules with the same LHS and set of features. Table 1 gives example VP rule expansions with their probabilities when we train a grammar from Sections 02-21 of the Penn Treebank. Chart Generation Algorithm The generation algorithm is based on chart generation as first introduced by Kay (1996) with Viterbi-pruning. The generation grammar is first converted into Chomsky Normal Form (CNF). We recursively build a chart-like data structure in a bottom-up fashion. In contrast to packing of locally equivalent edges (Carroll and Oepen, 2005) , in our approach if two chart items have equivalent rule left-hand sides and lexical coverage, only the most probable one is kept. Each grammatical function-labelled (sub-)f-structure in the overall fstructure indexes a (sub-)chart. The chart for each f-structure generates the most probable tree for that f-structure, given the internal set of conditioning f-structure features and its grammatical function label. At each level, grammatical function indexed charts are initially unordered. Charts are linearised by generation grammar rules once the charts themselves have produced the most probable tree for the chart. Our example in Figure 1 generates the following grammatical function indexed, embedded and (at each level of embedding) unordered (sub-)chart configuration: A Worked Example As an example, we step through the construction of the COMP-indexed chart at level f 3 of the f-structure in Figure 1 . For lexical rules, we check the feature set at the sub-f-structure level and the values of the features. Only features associated with lexical material are considered. The SUBJ-indexed sub-chart f 4 is constructed by first adding the rule NNP(\u2191=\u2193) \u2192 John(\u2191PRED='John ', \u2191NUM=pl, \u2191PERS=3) . If more than one lexical rule corresponds to a particular set of features and values in the f-structure, we add all rules with different LHS categories. If two or more rules with equal LHS categories match the feature set, we only add the most probable one. Unary productions are applied if the RHS of the unary production matches the LHS of an item already in the chart and the feature set of the unary production matches the conditioning feature set of the local sub-f-structure. In our example, this results in the rule NP(\u2191SUBJ=\u2193) \u2192 NNP(\u2191=\u2193), conditioned on {NUM, PERS, PRED}, being added to the sub-chart at level f 4 (the probability associated with this item is the probability of the rule multiplied by the probability of the previous chart item which combines with the new rule). When a rule is added to the chart, it is automatically associated with the yield of the rule, allowing us to propagate chunks of generated material upwards in the chart. If two items in the chart have the same LHS (and the same yield independent of word order), only the item with the highest probability is kept. This Viterbi-style pruning ensures that processing is efficient. At sub-chart f 4 there are no binary rules that can be applied. At this stage, it is not possible to add any more items to the sub-chart, therefore we propagate items in the chart that are compatible with the sub-chart index SUBJ. In our example, only the rule NP(\u2191SUBJ=\u2193) \u2192 NNP(\u2191=\u2193) (which yields the string John) is propagated to the next level up in the overall chart for consideration in the next iteration. If the yield of an item being propagated upwards in the chart is subsumed by an element already at that level, the subsumed item is removed. This results in efficiently treating the well known problem originally described in Kay (1996) , where one unnecessarily retains sub-optimal strings. For example, generating the string \"The very tall strong athletic man\", one does not want to keep variations such as \"The very tall man\", or \"The athletic man\", if one can generate the entire string. Our method ensures that only the most probable tree with the longest yield will be propagated upwards. The COMP-indexed chart at level f 3 of the fstructure is constructed in a similar fashion. First the lexical rule V(\u2191=\u2193) \u2192 resigned is added. Next, conditioning on {PRED, SUBJ, TENSE}, the unary rule VP(\u2191=\u2193) \u2192 V(\u2191=\u2193) (with yield resigned) is added. We combine the new VP(\u2191=\u2193) rule with the NP(\u2191SUBJ=\u2193) already present from the previous iteration to enable us to add the rule S(\u2191=\u2193) \u2192 NP(\u2191SUBJ=\u2193) VP(\u2191=\u2193), conditioned on {PRED, SUBJ, TENSE}. The yield of this rule is John resigned. Next, conditioning on the same feature set, we add the rule SBAR(\u2191comp=\u2193) \u2192 S(\u2191=\u2193) with yield John resigned to the chart. It is not possible to add any more new rules, so at this stage, only the SBAR(\u2191COMP=\u2193) rule with yield John resigned is propagated up to the next level. The process continues until at the outermost level of the f-structure, there are no more rules to be added to the chart. At this stage, we search for the most probable rule with TOP as its LHS category and return the yield of this rule as the output of the generation process. Generation fails if there is no rule with LHS TOP at this level in the chart. Lexical Smoothing Currently, the only smoothing in the system applies at the lexical level. Our backoff uses the built-in lexical macros 4 of the automatic fstructure annotation algorithm of Cahill et al. (2004) to identify potential part-of-speech categories corresponding to a particular set of features. Following Baayen and Sproat (1996) we assume that unknown words have a probability distribution similar to hapax legomena. We add a lexical rule for each POS tag that corresponds to the fstructure features at that level to the chart with a probability computed from the original POS tag probability distribution multiplied by a very small constant. This means that lexical rules seen during training have a much higher probability than lexical rules added during the smoothing phase. Lexical smoothing has the advantage of boosting coverage (as shown in Tables 3, 4 , 5 and 6 below) but slightly degrades the quality of the strings generated. We believe that the tradeoff in terms of quality is worth the increase in coverage. Smoothing is not carried out when there is no suitable phrasal grammar rule that applies during the process of generation. This can lead to the generation of partial strings, since some f-structure components may fail to generate a corresponding string. In such cases, generation outputs the concatenation of the strings generated by the remaining components. 2004 ) from the original Section 23 treebank trees as f-structure input to our generation experiments. We automatically mark adjunct and coordination scope in the input f-structure. Notice that these automatically generated f-structures are not \"perfect\", i.e. they are not guaranteed to be complete and coherent (Kaplan and Bresnan, 1982) : a local f-structure may contain material that is not supposed to be there (incoherence) and/or may be missing material that is supposed to be there (incompleteness). The results presented below show that our method is robust with respect to the quality of the f-structure input and will always attempt to generate partial output rather than fail. We consider this an important property as pristine generation input cannot always be guaranteed in realistic application scenarios, such as probabilistic transfer-based machine translation where generation input may contain a certain amount of noise. Pre-Training Treebank Transformations During the development of the generation system, we carried out error analysis on our development set WSJ Section 22 of the Penn-II Treebank. We identified some initial pre-training transformations to the treebank that help generation. Punctuation: Punctuation is not usually encoded in f-structure representations. Because our architecture is completely driven by rules conditioned by f-structure information automatically extracted from an f-structure annotated treebank, its placement of punctuation is not principled. This led to anomalies such as full stops appearing mid sentence and quotation marks appearing in undesired locations. One partial solution to this was to reduce the amount of punctuation that the system trained on. We removed all punctuation apart from commas and full stops from the training data. We did not remove any punctuation from the evaluation test set (Section 23), but our system will ever only produce commas and full stops. In the evaluation (Tables 3, 4 , 5 and 6) we are penalised for the missing punctuation. To solve the problem of full stops appearing mid sentence, we carry out a punctuation post-processing step on all generated strings. This removes mid-sentence full stops and adds missing full stops at the end of generated sentences prior to evaluation. We are working on a more appropriate solution allowing the system to generate all punctuation. Case: English does not have much case marking, and for parsing no special treatment was encoded. However, when generating, it is very important that the first person singular pronoun is I in the nominative case and me in the accusative. Given the original grammar used in parsing, our generation system was not able to distinguish nominative from accusative contexts. The solution we implemented was to carry out a grammar transformation in a pre-processing step, to automatically annotate personal pronouns with their case information. This resulted in phrasal and lexical rules such as NP(\u2191SUBJ) \u2192 PRP\u02c6nom(\u2191=\u2193) and PRP\u02c6nom(\u2191=\u2193) \u2192 I and greatly improved the accuracy of the pronouns generated. String-Based Evaluation We evaluate the output of our generation system against the raw strings of Section 23 using the Simple String Accuracy and BLEU (Papineni et al., 2002) evaluation metrics. Simple String Accuracy is based on the string edit distance between the output of the generation system and the gold standard sentence. BLEU is the weighted average of n-gram precision against the gold standard sentences. We also measure coverage as the percentage of input f-structures that generate a string. For evaluation, we automatically expand all contracted words. We only evaluate strings produced by the system (similar to Nakanishi et al. (2005) ). We conduct a total of four experiments. The parameters we investigate are lexical smoothing (Section 3.3) and partial output. Partial output is a robustness feature for cases where a sub-fstructure component fails to generate a string and the system outputs a concatenation of the strings generated by the remaining components, rather than fail completely.  Varying the length of the sentences included in the training data (Tables 3 and 5 ) shows that results improve (both in terms of coverage and string quality) as the length of sentence included in the training data increases. Tables 3 and 5 give the results for the experiments including lexical smoothing and varying partial output. Table 3 (+partial, +smoothing) shows that training on sentences of all lengths and evaluating all strings (including partial outputs), our system achieves coverage of 98.05%, a BLEU score of 0.6651 and string accuracy of 0.6808. Table 5 (-partial, +smoothing) shows that coverage drops to 89.49%, BLEU score increases to 0.6979 and string accuracy to 0.7012, when the system is trained on sentences of all lengths. Similarly, for strings \u226420, coverage drops from 98.65% to 95.26%, BLEU increases from 0.7077 to 0.7227 and String Accuracy from 0.7373 to 0.7476. Including partial output increases coverage (by more than 8.5 percentage points for all sentences) and hence robustness while slightly decreasing quality. Tables 3 (+partial, +smoothing) and 4 (+partial, -smoothing) give results for the experiments including partial output but varying lexical smoothing. With no lexical smoothing (Table 4 ), the system (trained on all sentence lengths) produces strings for 90.11% of the input f-structures and achieves a BLEU score of 0.5590 and string accuracy of 0.6207. Switching off lexical smoothing has a negative effect on all evaluation metrics (coverage and quality), because many more strings produced are now partial (since for PRED values unseen during training, no lexical entries are added to the chart). Comparing Tables 5 (-partial, +smoothing) and 6 (-partial, -smoothing), where the system does not produce any partial outputs and lexical smoothing is varied, shows that training on all sentence lengths, BLEU score increases from 0.6979 to 0.7147 and string accuracy increases from 0.7012 to 0.7192. At the same time, coverage drops dramatically from 89.49% (Table 5 ) to 47.60% (Table 6 ). Comparing Tables 4 and 6 shows that while partial output almost doubles coverage, this comes at a price of a severe drop in quality (BLEU score drops from 0.7147 to 0.5590). On the other hand, comparing Tables 5 and 6 shows that lexical smoothing achieves a similar increase in coverage with only a very slight drop in quality. Nakanishi et al. (2005) Using hand-crafted grammar-based generation systems (Langkilde-Geary, 2002; Callaway, 2003) , it is possible to achieve very high results. However, hand-crafted systems are expensive to construct and not easily ported to new domains or other languages. Our methodology, on the other hand, is based on resources automatically acquired from treebanks and easily ported to new domains and languages, simply by retraining on suitable data. Recent work on the automatic acquisition of multilingual LFG resources from treebanks for Chinese, German and Spanish (Burke et al., 2004; Cahill et al., 2005; O'Donovan et al., 2005) has shown that given a suitable treebank, it is possible to automatically acquire high quality LFG re-sources in a very short space of time. The generation architecture presented here is easily ported to those different languages and treebanks. Discussion Conclusion and Further Work We present a new architecture for stochastic LFG surface realisation using the automatically annotated treebanks and extracted PCFG-based LFG approximations of Cahill et al. (2004) . Our model maximises the probability of a tree given an fstructure, supporting a simple and efficient implementation that scales to wide-coverage treebankbased resources. An improved model would maximise the probability of a string given an fstructure by summing over trees with the same yield. More research is required to implement such a model efficiently using packed representations (Carroll and Oepen, 2005) . Simple PCFGbased models, while effective and computationally efficient, can only provide approximations to LFG and similar constraint-based formalisms (Abney, 1997) . Research on discriminative disambiguation methods (Valldal and Oepen, 2005; Nakanishi et al., 2005) is important. Kaplan and Wedekind (2000) show that for certain linguistically interesting classes of LFG (and PATR etc.) grammars, generation from f-structures yields a context free language. Their proof involves the notion of a \"refinement\" grammar where f-structure information is compiled into CFG rules. Our probabilistic generation grammars bear a conceptual similarity to Kaplan and Wedekind's \"refinement\" grammars. It would be interesting to explore possible connections between the treebank-based empirical work presented here and the theoretical constructs in Kaplan and Wedekind's proofs. We presented a full set of generation experiments on varying sentence lengths training on Sections 02-21 of the Penn Treebank and evaluating on Section 23 strings. Sentences of length \u226420 achieve coverage of 95.26%, BLEU score of 0.7227 and string accuracy of 0.7476 against the raw Section 23 text. Sentences of all lengths achieve coverage of 89.49%, BLEU score of 0.6979 and string accuracy of 0.7012. Our method is robust and can cope with noise in the f-structure input to generation and will attempt to produce partial output rather than fail. Acknowledgements We gratefully acknowledge support from Science Foundation Ireland grant 04/BR/CS0370 for the research reported in this paper.",
    "abstract": "We present a novel PCFG-based architecture for robust probabilistic generation based on wide-coverage LFG approximations (Cahill et al., 2004)  automatically extracted from treebanks, maximising the probability of a tree given an f-structure. We evaluate our approach using stringbased evaluation. We currently achieve coverage of 95.26%, a BLEU score of 0.7227 and string accuracy of 0.7476 on the Penn-II WSJ Section 23 sentences of length \u226420.",
    "countries": [
        "Ireland"
    ],
    "languages": [
        "Spanish",
        "Chinese",
        "German"
    ],
    "numcitedby": "63",
    "year": "2006",
    "month": "July",
    "title": "Robust {PCFG}-Based Generation Using Automatically Acquired {LFG} Approximations"
}