{
    "article": "We introduce a new approach to named entity classification which we term a Priority Model. We also describe the construction of a semantic database called SemCat consisting of a large number of semantically categorized names relevant to biomedicine. We used SemCat as training data to investigate name classification techniques. We generated a statistical language model and probabilistic contextfree grammars for gene and protein name classification, and compared the results with the new model. For all three methods, we used a variable order Markov model to predict the nature of strings not represented in the training data. The Priority Model achieves an F-measure of 0.958-0.960, consistently higher than the statistical language model and probabilistic context-free grammar. Introduction Automatic recognition of gene and protein names is a challenging first step towards text mining the biomedical literature. Advances in the area of gene and protein named entity recognition (NER) have been accelerated by freely available tagged corpora (Kim et al., 2003 , Cohen et al., 2005 , Smith et al., 2005 , Tanabe et al., 2005) . Such corpora have made it possible for standardized evaluations such as Task 1A of the first BioCreative Workshop (Yeh et al., 2005) . Although state-of-the-art systems now perform at the level of 80-83% F-measure, this is still well below the range of 90-97% for non-biomedical NER. The main reasons for this performance disparity are 1) the complexity of the genetic nomenclature and 2) the confusion of gene and protein names with other biomedical entities, as well as with common English words. In an effort to alleviate the confusion with other biomedical entities we have assembled a database consisting of named entities appearing in the literature of biomedicine together with information on their ontological categories. We use this information in an effort to better understand how to classify names as representing genes/proteins or not. Background A successful gene and protein NER system must address the complexity and ambiguity inherent in this domain. Hand-crafted rules alone are unable to capture these phenomena in large biomedical text collections. Most biomedical NER systems use some form of language modeling, consisting of an observed sequence of words and a hidden sequence of tags. The goal is to find the tag sequence with maximal probability given the observed word sequence. McDonald and Pereira (2005) use conditional random fields (CRF) to identify the beginning, inside and outside of gene and protein names. GuoDong et al. (2005) use an ensemble of one support vector machine and two Hidden Markov Models (HMMs). Kinoshita et al. (2005) Semantic Network (McCray, 1989) , that does not include genes and proteins. Liu et al. (2002) classified terms that represent multiple UMLS concepts by examining the conceptual relatives of the concepts. Hatzivassiloglou et al. (2001) classified terms known to belong to the classes Protein, Gene and/or RNA using unsupervised learning, achieving accuracy rates up to 85%. The AZuRE system (Podowski et al., 2004 ) uses a separate modified Naive Bayes model for each of 20K genes. A term is disambiguated based on its contextual similarity to each model. Nenadic et al. (2003) recognized the importance of terminological knowledge for biomedical text mining. They used the C/NCmethods, calculating both the intrinsic characteristics of terms (such as their frequency of occurrence as substrings of other terms), and the context of terms as linear combinations. These biomedical classification systems all rely on the context surrounding named entities. While we recognize the importance of context, we believe one must strive for the appropriate blend of information coming from the context and information that is inherent in the name itself. This explains our focus on names without context in this work. We believe one can improve gene and protein entity classification by using more training data and/or using a more appropriate model for names. Current sources of training data are deficient in important biomedical terminologies like cell line names. To address this deficiency, we constructed the SemCat database, based on a subset of the UMLS Semantic Network enriched with categories from the GENIA Ontology (Kim et al, 2003) , and a few new semantic types. We have populated Sem-Cat with over 5 million entities of interest from standard knowledge sources like the UMLS (Lindberg et al., 1993) , the Gene Ontology (GO) (The Gene Ontology Consortium, 2000) , Entrez Gene (Maglott et al., 2005) , and GENIA, as well as from the World Wide Web. In this paper, we use SemCat data to compare three probabilistic frameworks for named entity classification. Methods We constructed the SemCat database of biomedical entities, and used these entities to train and test three probabilistic approaches to gene and protein name classification: 1) a statistical language model with Witten-Bell smoothing, 2) probabilistic context-free grammars (PCFGs) and 3) a new approach we call a Priority Model for named entities. As one component in all of our classification algorithms we use a variable order Markov Model for strings. SemCat Database Construction The UMLS Semantic Network (SN) is an ongoing project at the National Library of Medicine. Many users have modified the SN for their own research domains. For example, Yu et al. (1999) found that the SN was missing critical components in the genomics domain, and added six new semantic types including Protein Structure and Chemical Complex. We found that a subset of the SN would be sufficient for gene and protein name classification, and added some new semantic types for better coverage. We shifted some semantic types from suboptimal nodes to ones that made more sense from a genomics standpoint. For example, there were two problems with Gene or Genome. Firstly, genes and genomes are not synonymous, and secondly, placement under the semantic type Fully Formed Anatomical Structure is suboptimal from a genomics perspective. Since a gene in this context is better understood as an organic chemical, we deleted Gene or Genome, and added the GENIA semantic types for genomics entities under Organic Chemical. The SemCat Physical Object hierarchy is shown in Figure 1 . Similar hierarchies exist for the SN Conceptual Entity and Event trees. A number of the categories have been supplemented with automatically extracted entities from MEDLINE, derived from regular expression pattern matching. Currently, SemCat has 77 semantic types, and 5.11M non-unique entries. Additional entities from MEDLINE are being manually classified via an annotation website. Unlike the Termino database (Harkema et al. (2004) , which contains terminology annotated with morphosyntactic and conceptual information, SemCat currently consists of gazetteer lists only. For our experiments, we generated two sets of training data from SemCat, Gene-Protein (GP) and Not-Gene-Protein (NGP). GP consists of specific terms from the semantic types DNA MOLECULE, PROTEIN MOLECULE, DNA FAMILY, PROTEIN FAMILY, PROTEIN COMPLEX and PROTEIN SUBUNIT. NGP consists of entities from all other SemCat types, along with generic entities from the GP semantic types. Generic entities were automatically eliminated from GP using pattern matching to manually tagged generic phrases like abnormal protein, acid domain, and RNA. Many SemCat entries contain commas and parentheses, for example, \"receptors, tgf beta.\" A better form for natural language processing would be \"tgf beta receptors.\" To address this problem, we automatically generated variants of phrases in GP with commas and parentheses, and found their counts in MEDLINE. We empirically determined the heuristic rule of replacing the phrase with its second most frequent variant, based on the observation that the most frequent variant is often too generic. For example, the following are the phrase variant counts for \"heat shock protein (dnaj)\": \u2022 heat shock protein (dnaj) 0 \u2022 dnaj heat shock protein 84 \u2022 heat shock protein 122954 \u2022 heat shock protein dnaj 41 Thus, the phrase kept for GP is dnaj heat shock protein. After purifying the sets and removing ambiguous full phrases (ambiguous words were retained), GP contained 1,001,188 phrases, and NGP contained 2,964,271 phrases. From these, we randomly generated three train/test divisions of 90% train/10% test (gp1, gp2, gp3), for the evaluation. Variable Order Markov Model for Strings As one component in our classification algorithms we use a variable order Markov Model for strings. Suppose C represents a class and 1 2 3 ... n x x x x repre-sents a string of characters. In order to estimate the probability that 1 2 3 ... n x x x x belongs to we apply Bayes' Theorem to write C ( ) ( ) ( ) ( ) 1 2 3 1 2 3 1 2 3 ... | | ... ... n n n p x x x x C p C p C x x x x p x x x x = (1) Because ( ) 1 2 3 ... n p x x x x does not depend on the class and because we are generally comparing probability estimates between classes, we ignore this factor in our calculations and concentrate our efforts on evaluating ( ) ( ) 1 2 3 ... | n p x x x x C p C . First we write ( ) ( 1 2 3 1 2 3 1 1 ... | | ... , n n k k p x x x x C p x x x x x C \u2212 = = \u220f ) k ) (2) which is an exact equality. The final step is to give our best approximation to each of the num- s N i 1 2 ... 1 r r r k x x x x + + \u2212 is a substring of . We set i s ( ) 1 2 3 1 | ... , i i N k k i i N p p x x x x x C p \u2032 \u2208 \u2212 \u2208 = \u2211 \u2211 . ( 3 ) In some cases it is appropriate to assume that ( ) p C is proportional to 1 M i i p = \u2211 or there may be other ways to make this estimate. This basic scheme works well, but we have found that we can obtain a modest improvement by adding a unique start character to the beginning of each string. This character is assumed to occur nowhere else but as the first character in all strings dealt with including any string whose probability we are estimating. This forces the estimates of probabilities near the beginnings of strings to come from estimates based on the beginnings of strings. We use this approach in all of our classification algorithms. In Table 1 , we give an illustrative example of the string apoe-epsilon which does not appear in the training data. A PubMed search for apoeepsilon gene returns 269 hits showing the name is known. But it does not appear in this exact form in SemCat. Language Model with Witten-Bell Smoothing A statistical n-gram model is challenged when a bigram in the test set is absent from the training set, an unavoidable situation in natural language due to Zipf's law. Therefore, some method for assigning nonzero probability to novel n-grams is required. For our language model (LM), we used Witten-Bell smoothing, which reserves probability mass for out of vocabulary values (Witten and Bell, 1991, Chen and Goodman, 1998) . The discounted probability is calculated as ) ... ( ) ... ( # ) ... ( # ) ... ( \u02c61 1 1 1 1 1 1 \u2212 + \u2212 \u2212 + \u2212 + \u2212 \u2212 + \u2212 + = i n i i n i i n i i n i w w D w w w w w w P (4) where is the number of distinct words that can appear after in the training data. Actual values assigned to tokens outside the training data are not assigned uniformly but are filled in using a variable order Markov Model based on the strings seen in the training data. ) ... ( 1 1 \u2212 + \u2212 i n i w w D 1 1 ... \u2212 + \u2212 i n i w w Probabilistic Context-Free Grammar The Probabilistic Context-Free Grammar (PCFG) or Stochastic Context-Free Grammar (SCFG) was originally formulated by Booth (1969) . For technical details we refer the reader to Charniak (1993) . For gene and protein name classification, we tried two different approaches. In the first PCFG method (PCFG-3), we used the following simple productions: 1) CATP \u2192 CATP CATP 2) CATP \u2192 CATP postCATP 3) CATP \u2192 preCATP CATP CATP refers to the category of the phrase, GP or NGP. The prefixes pre and post refer to beginnings and endings of the respective strings. We trained two separate grammars, one for the positive examples, GP, and one for the negative examples, NGP. Test cases were tagged based on their score from each of the two grammars. In the second PCFG method (PCFG-8), we combined the positive and negative training examples into one grammar. The minimum number of non-terminals necessary to cover the training sets gp1-3 was six {CATP, preCATP, postCATP, Not-CATP, preNotCATP, postNotCATP}. CATP represents a string from GP, and NotCATP represents a string from NGP. We used the following production rules: 1) CATP \u2192 CATP CATP 2) CATP \u2192 CATP postCATP 3) CATP \u2192 preCATP CATP 4) CATP \u2192 NotCATP CATP 5) NotCATP \u2192 NotCATP NotCATP 6) NotCATP \u2192 NotCATP postNotCATP 7) NotCATP\u2192 preNotCATP NotCATP 8) NotCATP \u2192 CATP NotCATP It can be seen that ( 4 ) is necessary for strings like \"human p53,\" and (8) covers strings like \"p53 pathway.\" In order to deal with tokens that do not appear in the training data we use variable order Markov Models for strings. First the grammar is trained on the training set of names. Then any token appearing in the training data will have assigned to it the tags appearing on the right side of any rule of the grammar (essentially part-of-speech tags) with probabilities that are a product of the training. We then construct a variable order Markov Model for each tag type based on the tokens in the training data and the assigned probabilities for that tag type. These Models (three for PCFG-3 and six for PCFG-8) are then used to assign the basic tags of the grammar to any token not seen in training. In this way the grammars can be used to classify any name even if its tokens are not in the training data. Priority Model There are problems with the previous approaches when applied to names. For example, suppose one is dealing with the name \"human liver alkaline phosphatase\" and class represents protein names and class anatomical names. In that case a language model is no more likely to favor than . We have experimented with PCFGs and have found the biggest challenge to be how to choose the grammar. After a number of attempts we have still found problems of the \"human liver alkaline phosphatase\" type to persist. 1 C 2 C 1 C 2 C The difficulties we have experienced with language models and PCFGs have led us to try a different approach to model named entities. As a general rule in a phrase representing a named entity a word to the right is more likely to be the head word or the word determining the nature of the entity than a word to the left. We follow this rule and construct a model which we will call a Priority Model. Let be the set of training data (names) for class and likewise for . Let 1 T 1 C 2 T 2 C { } A t \u03b1 \u03b1\u2208 denote the set of all tokens used in names contained in . Then for each token 1 T T \u222a 2 , t A \u03b1 \u03b1 \u2208 , we assume there are associated two probabilities p \u03b1 and q \u03b1 with the interpretation that p \u03b1 is the probability that the appearance of the token t \u03b1 in a name indicates that name belongs to class and 1 C q \u03b1 is the probability that t \u03b1 is a reliable indicator of the class of a name. Let be composed of the tokens on the right in the given order. Then we compute the probability ( ) ( ) ( ) 1 2 k n t t t \u03b1 \u03b1 \u03b1 = \u2026 ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) 1 1 2 2 1 . | 1 1 k k j i i i j p C n p q q p q \u03b1 \u03b1 \u03b1 \u03b1 = = = = \u2212 + \u2212 \u2211 \u220f \u220f k j j i \u03b1 + (5) This formula comes from a straightforward interpretation of priority in which we start on the right side of a name and compute the probability the name belongs to class stepwise. If is the rightmost token we multiple the reliability times the significance 1 C ( ) k t \u03b1 ( ) k q \u03b1 ( ) k p \u03b1 to obtain , which represents the contribution of . The remaining or unused probability is and this is passed to the next token to the left, . The probability is scaled by the reliability and then the significance of ( ) ( ) k k q p \u03b1 \u03b1 ( ) k t \u03b1 ( ) 1 k q \u03b1 \u2212 ( ) 1 k t \u03b1 \u2212 ( ) 1 k q \u03b1 \u2212 ( ) 1 k t \u03b1 \u2212 to obtain , which is the contribution of toward the probability that the name is of class . The remaining probability is now and this is again passed to the next token to the left, etc. At the last token on the left the reliability is not used to scale because there are no further tokens to the left and only significance ( ) ( ) ( ) 1 (1 ) k k k q q p \u03b1 \u03b1 \u03b1 \u2212 \u2212 1 \u2212 ) k \u03b1 ( ) 1 k t \u03b1 \u2212 1 C ( ) ( ) ( ) ( 1 1 1 k q q \u03b1 \u2212 \u2212 \u2212 ( ) 1 p \u03b1 is used. We want to choose all the parameters p \u03b1 and q \u03b1 to maximize the probability of the data. Thus we seek to maximize ( ) ( ) ( ) ( ) 1 2 1 log | log 2 | n T n T F p C n p C n \u2208 \u2208 = + \u2211 \u2211 . ( 6 ) Because probabilities are restricted to be in the (8) From ( 5 ), (6), and (8) it is straightforward to compute the gradient of as a function of rences are in names in we set . These choices are optimal and because of the form of ( 8 ) it is easily seen that 2 T 0 p \u03b1 = 0 F F x y \u03b1 \u03b1 \u2202 \u2202 = = \u2202 \u2202 (9) for such an \u03b1 . Thus we may ignore all the B \u03b1 \u2208 in our optimization process because the values of p \u03b1 and q \u03b1 are already set optimally. We therefore carry out optimization of using the F , , x y A \u03b1 \u03b1 B \u03b1 \u2208 \u2212 . For the optimization we have had good success using a Limited Memory BFGS method (Nash et al., 1991) . When the optimization of is complete we will have estimates for all the F p \u03b1 and q \u03b1 , A \u03b1 \u2208 . We still must deal with tokens t \u03b2 that are not in- (10) This allows us to apply the priority model to any name to predict its classification based on equation 5. Results We ran all three methods on the SemCat sets gp1, gp2 and gp3. Results are shown in Table 2 . For evaluation we applied the standard information retrieval measures precision, recall and F-measure. For name classification, rel_ret refers to true positive entities, non-rel_ret to false positive entities and rel_ not_ret to false negative entities. Discussion Using variable order Markov model for strings improved the results for all methods (results not shown). The gp1-3 results are similar within each method, yet it is clear that the overall performance of these methods is PM > PCFG-8 > LM > PCFG-3. The very large size of the database and the very uniform results obtained over the three independent random splits of the data support this conclusion. The improvement of PCFG-8 over PCFG-3 can be attributed to the considerable ambiguity in this domain. Since there are many cases of term overlap in the training data, a grammar incorporating some of this ambiguity should outperform one that does not. In PCFG-8, additional production rules allow phrases beginning as CATPs to be overall NotCATPs, and vice versa. The Priority Model outperformed all other methods using F-measure. This supports our impression that the right-most words in a name should be given higher priority when classifying names. A decrease in performance for the model is expected when applying this model to the named entity extraction (NER) task, since the model is based on terminology alone and not on the surrounding natural language text. In our classification experiments, there is no context, so disambiguation is not an issue. However, the application of our model to NER will require addressing this problem. SemCat has not been tested for accuracy, but we retain a set of manually-assigned scores that attest to the reliability of each contributing list of terms. Table 2 indicates that good results can be obtained even with noisy training data. Conclusion In this paper, we have concentrated on the information inherent in gene and protein names versus other biomedical entities. We have demonstrated the utility of the SemCat database in training probabilistic methods for gene and protein entity classification. We have also introduced a new model for named entity prediction that prioritizes the contribution of words towards the right end of terms. The Priority Model shows promise in the domain of gene and protein name classification. We plan to apply the Priority Model, along with appropriate contextual and meta-level information, to gene and protein named entity recognition in future work. We intend to make SemCat freely available. Acknowledgements This research was supported in part by the Intramural Research Program of the NIH, National Library of Medicine.",
    "abstract": "We introduce a new approach to named entity classification which we term a Priority Model. We also describe the construction of a semantic database called SemCat consisting of a large number of semantically categorized names relevant to biomedicine. We used SemCat as training data to investigate name classification techniques. We generated a statistical language model and probabilistic contextfree grammars for gene and protein name classification, and compared the results with the new model. For all three methods, we used a variable order Markov model to predict the nature of strings not represented in the training data. The Priority Model achieves an F-measure of 0.958-0.960, consistently higher than the statistical language model and probabilistic context-free grammar.",
    "countries": [
        "United States"
    ],
    "languages": [],
    "numcitedby": "19",
    "year": "2006",
    "month": "June",
    "title": "A Priority Model for Named Entities"
}