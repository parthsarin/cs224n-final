{
    "article": "The development of the Web services lets many users easily provide their opinions recently. Automatic summarization of enormous sentiments has been expected. Intuitively, we can summarize a review with traditional document summarization methods. However, such methods have not well-discussed \"aspects\". Basically, a review consists of sentiments with various aspects. We summarize reviews for each aspect so that the summary presents information without biasing to a specific topic. In this paper, we propose a method for multiaspects review summarization based on evaluative sentence extraction. We handle three features; ratings of aspects, the tf -idf value, and the number of mentions with a similar topic. For estimating the number of mentions, we apply a clustering algorithm. By integrating these features, we generate a more appropriate summary. The experiment results show the effectiveness of our method. Introduction As Web services like CGMs have become widely used, people can easily post reviews for products or services. Although handling these information (evaluative information) has become necessary, there exists too much information on the Web. Therefore, extracting information that users want and summarizing them have been expected recently. Intuitively, we can summarize a review with traditional document summarization methods. For instance, Brandow et al. (1995) have summarized a document by extracting sentences with some features such as the presence of signature words and the location in the document. For sentiment summarization, Pang and Lee (2004) have extracted all subjective sentences. They suggested that these extracted sentences could be used as summaries. However, a review basically consists of sentiments with various aspects (i.e., \"image quality\" and \"usability\" of a camera). Therefore, we need to extract information for each aspect in the case of review summarization. Aspect summarization can present information without biasing to a specific topic. We focus on multi-aspects review summarization in this research. We generate a summary by extracting important sentences and arranging them. Since we extract summary sentences, we need to discuss which sentences are important and how to extract important sentences. In the case of treating multi-reviews, we need to handle the redundant information. Pang and Lee (2008) have reported that while in traditional summarization redundant information is discarded, in sentiment summarization redundancy indicates the importance of opinions. Therefore, we treat redundancy as a feature for decision of important sentences. We assume that reviews we treat in this research have multiple aspects and a reviewer gives ratings of the aspects (i.e., 0 to 5 stars). Reviewers also write free comments about the target. We leverage three features: ratings of aspects of reviews, the tf -idf value, and the number of mentions with a similar topic. We apply a clustering algorithm to sentences to measure the number of mentions with a similar topic. Then, we aim to integrate those features and generate a more appropriate summary. Figure 1 shows the outline of our method. Features for sentence extraction For generating a summary, we define the following three features: (1) ratings of aspects, (2) the tf -idf value, and (3) the number of mentions with a similar topic. The following sections describe how we treat these features. Ratings of aspects If we generate a summary, the summary needs to contain the proper balance of whole opinions in the reviews. For instance, if we summarize only positive opinions, the summary cannot tell readers negative opinions of a target. We focus on ratings of aspects given to reviews as a feature to deal with this problem. We assume that a reviewer writes a comment corresponding to the rating. For instance, if a reviewer gives 1 star for one aspect, the reviewer writes negative comments for the aspect. We assign ratings of aspects of a review to evaluative sentences included in the review. Each evaluative sentence has the rating corresponding to the aspect of the sentence. We use the pair of the evaluative sentence and the rating to consider the distribution of the ratings for summarization. The tf -idf value The tf -idf algorithm is used as a major algorithm for many tasks such as important sentence extraction. This algorithm features words which only appear in a target document as more important. We similarly apply the tf -idf algorithm to compute the importance of an evaluative sentence. First, we divide sentences in reviews to morphemes by using a morphological analyzer 1 . Then, we define the tf -idf value of a word i in target reviews j as below. Note that we treat only content words (except words such as suffixes and pronouns). tf i j \u00d7 idf i = log 2 (f req(i, j) + 1) log 2 (words(j)) \u00d7 {log 2 ( Rev all Rev include(i) ) + 1} (1) where f req(i, j) is the frequency of i for j, words(j) is the number of words belonging to j, Rev all is the number of all reviews, and Rev include(i) is the number of reviews including i. Next, we compute the importance of an evaluative sentence by using the tf -idf value of a word. We denote an evaluative sentence by S = {w 1 , w 2 , ...}, where each w is a word which has tf -idf value in the sentence. The importance of an evaluative sentence tf -idf S is as below. tf idf S = w\u2208S tf idf w |S| ( 2 ) where |S| is the total number of w in the sentence. This is the importance of an sentence based on feature words. The number of mentions with a similar topic We treat multi-reviews for the target of summarization. In this case, some reviewers might write similar opinions. These similar opinions have possibilities to be redundantly extracted as a summary. On the other hand, the opinion mentioned by many reviewers is important. We need to handle redundant information regarding as a feature to determine an important sentence. Therefore, we aim to integrate similar opinions by clustering them. In this paper, we apply the k-means algorithm which is widely used as the clustering algorithm because of its simplicity. Since the k-means algorithm is a non-hierarchical method, firstly we need to specify how many clusters we divide. However, It is difficult to know the optimum number of divided clusters beforehand. Seki et al. (2007) has estimated the valid number of clusters by statistically evaluating the clustering result. We apply their algorithm to our task. We divide evaluative sentences to morphemes and construct a vector space using these morphemes as features. Note that we treat content words, adjectives, and verbs. A score of each feature is the tf -idf value computed in section 2.2 if the feature has the tf -idf value. If a feature does not have the tf -idf value, we simply assign the frequency within the evaluative sentence as the score. Besides, we introduce the concept of centrality of the word which has been reported by Ishii et al. (2001) to characterize features. This method assumes that words such as a subject case and an objective case in a sentence indicate a topic of the sentence. We also apply the concept to our task and weight central words in the evaluative sentence. By clustering evaluative sentences based on these algorithms, we can generate some clusters including similar sentences. However, we found that clusters generated by our algorithm tended to be divided too much in a preliminary experiment. It denotes that similar opinions which should belong to the same cluster belong to other clusters. We revise the clusters by using another approach. In the algorithm mentioned above, each cluster is formed with evaluative sentences which are gathered by co-occurrence of some words. Therefore, each cluster contains words which appear in common in the cluster. We identify representative words of each cluster by using this feature. If a cluster contains one sentence, we regard all nouns and adjectives in the sentence as representative words. In other cases, we regard words which appear more than half of the number of sentences in the cluster as representative words for the cluster. Using the representative words, we integrate clusters which contain the same representative words. Since a cluster often contains some representative words, we need to decide which cluster is the best for integration. In this case, we compare the tf -idf value of representative words and integrate clusters by using the representative word with the top tf -idf value. Summarizer In this section, we describe how to generate a summary based on three features mentioned in section 2. We compute the importance of each cluster by integrating the tf -idf value of each sentence and the number of mentions. The importance of a cluster Imp(C) is as below. Imp(C) = S\u2208C tf idf S |C| \u00d7 log(|C| + 1) (3) where C = {S 1 , S 2 , ...} is a cluster, each S is an evaluative sentence, |C| is the total number of sentences in the cluster. The Imp(C) is the importance which means both the importance of feature words and the number of mentions. Besides, we treat ratings of aspects to reflect the proper balance of whole opinions of reviews. The process for the sentence extraction is as follows: Figure 2 shows the process of our summary generation. We generate a summary of target reviews by arranging extracted sentences. Experiment In this section, we evaluated our summarization. First, we describe the data set for the experiment. Then, we evaluate the effectiveness of our clustering method. After that, we generate a summary with our method. We subjectively evaluate the effectiveness of using the three features. Finally, we compare our summary with a manual summary for quantitative evaluation. Data set We used game review documents as target data. The review documents were extracted manually from the Web site 2 . Seven evaluative criteria are given to each review, i.e., <Originality (o)>, <Graphics (g)>, <Music (m)>, <Addiction (a)>, <Satisfaction (s)>, <Comfort (c)>, and <Difficulty (d)>. We chosen one of the Nintendo DS software \"New Super Mario Brothers\" as the target data. There were 170 reviews for this game. The target data was annotated beforehand. In this experiment, three annotators (A 1 , A 2 , A 3 ) annotated the target reviews. They annotated 25 reviews (approximately 450 sentences) in 170 reviews. Annotators detected evaluative sentences from the reviews and annotated aspects to which the sentences belong. We target the 25 reviews for summarization 3 . For quantitative evaluation, annotators manually generated summaries. Annotators extracted 50 sentences as a summary from the 450 sentences in the 25 reviews. There is no limit how many sentences they extract for each aspect. Evaluation of clustering At first, we evaluated the effectiveness of our clustering method. We classified evaluative sentences detected from reviews into the seven aspects. The clustering was independently-applied in each aspect. We assigned two sentences with the highest and the lowest tf -idf value as initial clusters. Table 1 shows the change of the number of clusters in each aspect. \"original\" is the number of evaluative sentences (one sentence as one cluster), \"k-means\" is the number of clusters which were applied the original k-means algorithm, and \"revised\" is the number of clusters which were integrated by our method. The number of clusters in the revised step decreased to approximately 30 % of the original sentences. We verified the decrease of clusters between the k-means step and the revised step. In our subjective evaluation, the revised step could form better clusters than the k-means step. Therefore, we conclude that the revision of the clustering was effective. Figure 3 shows an example of the clusters in the aspect <Comfort (c)> 4 . Each labeled box (1\u22123) was a cluster. The cluster 1 was a successful example. In this aspect, there were 16 sentences which mentioned a key \"save\" and 15 sentences were integrated into the same cluster. In this case, all sentences in this cluster indicated a similar opinion. The \"save\" was suitable for a topic of the summarization. On the other hand, in the cluster 2, many sentences were integrated into the same cluster by co-occurrence of the word \"Mario\". We think the reason that \"Mario\" tended to frequently appear in all the reviews because of the nature of the product, and it had the high tf -idf value. However, \"Mario\" was not a topic for the summarization. We need to identify words which widely appear and decrease the importance of such words. Besides, the current clustering method did not handle a polarity of a sentence. As seen in the cluster 3, a cluster might consist of different polar opinions. We need to deal with the problem; for instance, by using the rating information as a feature of the clustering. Evaluation of a summary Using the result of clustering, we generated a summary. For evaluating the effectiveness of each feature, we summarized 25 reviews with the following three methods. Meth1. only the tf -idf value Meth2. the tf -idf value and Imp(C) Meth3. Meth2 and rating information Table 2 shows an example of Meth3's summary for the aspect <Addiction (a)> with A 1 's annotation. The \"rating\" is the actual rating of the review containing the representative sentence, \"Ave\" is the average of the ratings in the cluster containing the representative sentence, and \"ST D\" is the standard deviation of the ratings in the cluster.   We discuss the effectiveness of Meth3. One of the problems in the result of Table 2 was that there existed the sentence to which its rating did not correspond. For example, although \"I was addicted to collect coins.\" was usually considered as a positive opinion, the rating of the review containing the sentence was 2. The reason was that most of the sentences in the review containing the representative sentence had negative opinions for this aspect. This is due to the fact that opinions of reviewers sometimes might be inconsistent with the ratings. We need to handle the non-consistence of ratings if we treat the rating information. We verified the difference between the rating of the representative sentence and the average rating in the cluster. ST D in Table 2 also indicated that ratings in some clusters varied widely. We think the reason that we do not treat the polarity for the clustering or opinions in the cluster were not similar because clustering accuracy was not enough. We need to discuss a more high-accuracy clustering approach and an algorithm for representative sentence extraction. We compared the summaries of each method. Summaries by Meth1 and Meth2 are shown in Table 3 and Table 4 . As seen in Table 3 , we verified that the summarization by Meth1 contained some sentences about \"star coin\". It also consisted of only positive opinions. As compared with Meth1, Meth3 could extract the proper balance of opinions. It shows that opinion integration and using ratings were effective. On the other hand, there were no great difference between Meth2 and Meth3. Both methods use the same representative sentences and select them with the high Imp(C). Therefore, both summarizations became similar. We need to use ratings more effectively. For instance, by using the rating information for the determination of representative sentences, Meth3's result might become better. Quantitative evaluation We compared our summaries with manual summaries. We extracted 50 sentences by using Meth1, Meth2, and Meth3. We estimated how many sentences we extract for each aspect by using the distribution of the number of evaluative sentences in each aspect. The estimation approach was simple idea but we verified the result was relatively close to the manual one. We used ROUGE-N (Lin, 2004) for evaluation of summaries. It indicates an n-gram recall between reference summaries and a candidate summary. ROUGE-N is computed as follows: where S H is a set of reference summaries, g N is the N length n-gram, C(g N ) is the frequency of the g N in the reference summary, and C m (g N ) is the maximum number of n-grams co-occurring in a candidate summary and a set of reference summaries. ROUGE-N = S\u2208S H g N \u2208S C m (g N ) S\u2208S H g N \u2208S C(g N ) (4) Table 5 shows ROUGE-1 and ROUGE-2 between our summaries and manual summaries. Those scores are the average scores in three annotators. Since the distribution of each aspect was different, we computed the weighted average Ave wgt . We weighted the number of sentences in reference summary for each aspect. Meth3 could achieve the best Ave wgt score but there was no significant difference between three methods. We need to discuss two matters. One is the effectiveness of using the rating information. Meth3 summarized reviews with the rating information but the result showed that it was not effective. We think the reason that we used rating information only for summary sentence extraction. We can treat the rating information for our clustering method and representative sentence extraction. We need to improve the use of the rating information. The other problem is that Imp(C) did not work effectively. We used Imp(C) for Meth2 and Meth3 but the results were not different from Meth1. We think the reason that the representative sentences were not appropriate. The current method decides a representative sentence of a cluster by using only tf -idf value of the sentence. The representative sentence might not reflect whole opinions in the cluster. We need to introduce other features, for instance, a centroid of a cluster, a length of a sentence, and phrase structures. We computed ROUGE between annotators as reference (Table 6 ). We regarded A 1 as the reference summary and the scores are the average of A 2 and A 3 . While most of the scores were higher than the result of Table 5 , the scores themselves were not so high. This result shows that it is difficult to generate a same sentiment summary even if between humans 5 . 5 Related work Meng and Wang (2009) have extracted aspects from the specification of the target product and summarized reviews with hierarchic structures. As a result, they could extract appropriate aspects for the products. However, the generated summary did not include detailed opinions about the product. In contrast, our method can treat detailed information by extracting important sentences with feature words. Blair-Goldensohn et al. (2008) have computed a polarity value of sentences based on the maximum entropy method with WordNet and rating information. They extracted evaluative sentences with a high polarity value preferentially and generated a summary. As the advantage of their method, it could estimate the polarity of sentences with high accuracy. However, it is not always true that sentences with high polarity values are appropriate a summary. They also did not treat redundancy of the summary. Lu and Zhai (2008) have introduced the concept of aspects to a PLSA model. They integrated expert reviews and ordinary opinions scattering in the Web. Opinions which should be integrated are identified by measuring the number of mentions in the Web. Although their method are very effective, their purpose is to add more information, such as similar and supplementary opinions, to the base review. In this paper, we did not discuss the identification of the aspect of sentences. However, it is important to identify the aspect information for the sentiment summarization task. Hadano et al. (2010) have identified an aspect of an evaluative sentence with machine-learning approaches. We need to introduce such a method to our task in the future. Conclusion In this paper, we focused on the multi-aspects review summarization. We handled three features; ratings of aspects, the tf -idf value, and the number of mentions with a similar topic. We used the clustering method to integrate similar opinions. The experiment result showed that we could integrate similar opinions and it led to the redundancy elimination of a summary. We evaluated the effectiveness of using all three features for summarization. In our subjective evaluation, we verified that the summarization by using the three features was effective. However, in quantitative evaluation, there was no great difference between the summary using all three features and summaries using only one or two features. Future work includes (1) improvement of the clustering algorithm, (2) more appropriate decision of representative sentences, and (3) treating the rating information more effectively."
}