{
    "article": "The paper presents a new approach to identifying discourse relations, which makes use of a particular sampling method called committeebased sampling (CBS). In the committee-based sampling, multiple learning models are generated to measure the utility of an input example in classification; if it is judged as not useful, then the example will be ignored. The method has the effect of reducing the amount of data required for training. In the paper, we extend CBS for decision tree classifiers. With an additional extension called error feedback, it is found that the method achieves an increased accuracy as well as a substantial reduction in the amount of data for training classifiers. Introduction The success of corpus-based approaches to discourse ultimately depends on whether one is able to acquire a large volume of data annotated for discourse-level information. However, to acquire merely a few hundred texts annotated for discourse information is often impossible due to the enormity of the haman labor required. This paper presents a novel method for reducing the amount of data for training a decision tree classifier, while not compromising the accuracy. While there has been some work exploring the use of machine leaning techniques for discourse and dialogue (Marcu, 1997; Samuel et al., 1998) , to our knowledge, no computational research on discourse or dialogue so far has addressed the problem of reducing or minimizing the amount of data for training a learning algorithm. A particular method proposed here is built on the committee-based sampling, initially proposed for probabilistic classifiers by Dagan and Engelson (1995) , where an example is selected from the corpus according to its utility in improving statistics. We extend the method for decision tree classifiers using a statistical technique called bootstrapping (Cohen, 1995) . With an additional extension, which we call error .feedback, it is found that the method achieves an increased accuracy as well as a significant reduction of training data. The method proposed here should be of use in domains other than discourse, where a decision tree strategy is found applicable. Tagging a corpus with discourse relations In tagging a corpus, we adopted Ichikawa (1990) 's scheme for organizing discourse relations (Table 1 ). The advantage of Ichikawa (1990) 's scheme is that it directly associates discourse relations with explicit surface cues (eg. sentential connectives), so it is possible for the coder to determine a discourse relation by figuring a most natural cue that goes with a sentence he/she is working on. Another feature is that, unlike Rhetorical Structure Theory (Mann and Thompson, 1987) , the scheme assumes a discourse relation to be a local one, which is defined strictly over two consecutive sentences. 1 We expected that these features would make a tagging task less laborious for a human coder than it would be with RST. Further, our earlier study indicated a very low agreement rate with 1This does not mean to say that all of the discourse relations are local. There could be some relations that involve sentences separated far apart. However we did not consider non-local relations, as our preliminary study found that they are rarely agreed upon by coders. In Ichikawa (1990) , discourse relations are organized into three major classes: the first class includes logical (or strongly semantic) relationships where one sentence is a logical consequence or contradiction of another; the second class consists of sequential relationships where two semantically independent sentences are juxtaposed; the third class includes elaborationtype relationships where one of the sentences is semantically subordinate to the other. In constructing a tagged corpus, we asked coders not to identify abstract discourse relations such as LOGICAL, SEQUENCE and ELAB-ORATION, but to choose from a list of predetermined connective expressions. We expected that the coder would be able to identify a discourse relation with far less effort when working with eXplicit cues than when working with abstract Concepts of discourse relations. Moreover, since 93% of sentences considered for labeling in the corpus did not contain predetermined relation cues, the annotation task was in effect one of guessing a possible connective cue that m'ay go with a sentence. The advantage of using explicit cues to identify discourse relations is that even if one has little or no background in linguistics, he or she may be able to assign a discourse relation to a sentence by just asking him/herself whether the associated cue fits well with the sentence. In addition, in order to make the usage of cues clear and unambiguous, the annotation instruction carried a set of examples for each of the cues. Fur-ther, we developed an emacs-based software aid which guides the coder to work through a corpus and also is capable of prohibiting the coder from making moves inconsistent with the tagging instruction. As it turned out, however, Ichikawa's scheme, using subclass relation types, did not improve agreement (~ = 0.33, three coders). So, we modified the relation taxonomy so that it contains just two major classes, SEQUENCE and ELABORATION, (LOGICAL relationships being subsumed under the SEQUENCE class) and assumed that a lexical cue marks a major class to which it belongs. The modification successfully raised the ~ score to 0.70. Collapsing LOGICAL and SEQUENCE classes may be justified by noting that both types of relationships have to do with relating two semantically independent sentences, a property not shared by relations of the elaboration type. Learning with Active Data Selection Committee-based Sampling In the committee-based sampling method (CBS, henceforth) (Dagan and Engelson, 1995; Engelson and Dagan, 1996) , a training example is selected from a corpus according to its usefulness; a preferred example is one whose addition to the training corpus improves the current estimate of a model parameter which is relevant to classification and also affects a large proportion of examples. CBS tries to identify such an example by randomly generating multiple models (committee members) based on posterior dis-tributions of model parameters and measuring how much the member models disagree in classifying the example. The rationale for this is: disagreement among models over the class of an example would suggest that the example affects some parameters sensitive to classification, and furthermore estimates of affected parameters are far from their true values. Since models are generated randomly from posterior distributions of model parameters, their disagreement on an example's class implies a large variance in estimates of parameters, which in turn indicates that the statistics of parameters involved are insufficient and hence its inclusion in the training corpus (so as to improve the statistics of relevant parameters). For each example it encounters, CBS goes through the following steps to decide whether to select the example for labeling. 1. Draw k models (committee members) randomly from the probability distribution P(M ] S) of models M given the statistics S of a training corpus. 2. Classify an input example by each of the committee members and measure how much they disagree on classification. 3. Make a biased random decision as to whether or not to select the example for labeling. This would make a highly disagreed-upon example more likely to be selected. As an illustration of how this might work, consider a problem of tagging words with parts of speech, using a Hidden Markov Model (HMM). A (bigram) HMM tagger is typically given as: .,an = an I S) as a set of binomial distributions, each corresponding to one of its parameters. An arbitrary HMM model is then constructed by randomly drawing a value ai from a binomial distribution for a parameter ai, which is approximated by a normal distribution. Given k such models (committee members) from the multinomial distribution, we ask each of them to classify an input example. We decide whether to select the example for labeling based on how much the committee members disagree in classifying that example. Dagan and Engelson (1995) introduces the notion of vote entropy to quantify disagreements among members. Though one could use the kappa statistic (Siegel and Castellan, 1988) or other disagreement measures such as the a statistic (Krippendorff, 1980) instead of the vote entropy, in our implementation of CBS, we decided to use the vote entropy, for the lack of reason to choose one statistic over another. A precise formulation of the vote entropy is as follows: v(e, e) log V(c, e) V(e) = -k C Here e is an input example and c denotes a class. V(c, e) is the number of votes for c. k is the number of committee members. A selection function is given in probabilistic terms, based on V(e). g Pselect(e) = log k V(e) g here is called the entropy gain and is used to determine the number of times an example is selected; a grea~ter g would increase the number of examples selected for tagging. Engelson and Dagan (1996) investigated several plausible approaches to the selection function but were unable to find significant differences among them. At the beginning of the section, we mentioned some properties of 'useful' examples. A useful example is one which contributes to reducing variance in parameter values and also affects classification. By randomly generating multiple models and measuring a disagreement among them, one would be able to tell whether an example is useful in the sense above; if there were a large disagreement, then one would know that the example is relevant to classification and also is associated with parameters with a large variance and thus with insufficient statistics. In the following section, we investigate how we might extend CBS for use in decision tree classifiers. Decision Tree Classifiers Since it is difficult, if not impossible, to express the model distribution of decision tree classifiers in terms of the multinomial distribution, we turn to the bootstrap sampling method to obtain P(M [ S). The bootstrap sampling method provides a way for artificially establishing a sampling distribution for a statistic, when the distribution is not known (Cohen, 1995) . For us, a relevant statistic would be the posterior probability that a given decision tree may occur, given the training corpus. Bootstrap Sampling Procedure Repeat i = 1. ,. K times: 1. Draw a bootstrap pseudosample S~ of size N from S by sampling with replacement as follows: Repeat N times: select a member of S at random ai~d add it to S~. 2. Build a decision tree model M from S~. Add M to Ss. S is a small Set of samples drawn from the tagged corpus. Repeating the procedure 100 times would give 100 decision tree models, each corresponding to some S~ derived from the sample set S. Note that the bootstrap procedure allows a datum in the original sample to be selected more than once. Given a sampling distribution of decision tree models, a committee can be formed by randomly selecting k models from Ss. Of course, there are some other approaches to constructing a committee for decision tree classifiers (Dietterich, 1998) . One such, known as randomization, is to use a single decision tree and randomly choose a path at each attribute test. Repeating the process k times for each input example produces k models. Features In the following, we describe a set of features used to characterize a sentence. As a convention, we refer to a current sentence as 'B' and the preceding sentence as 'A'. <LocWithinPax> records information on the location of a sentence X within a paragraph in which it appears. #S(X) -#S(Par_[nit_Sen) Length(Par(X)) 'Par_Init_Sen' refers to the initial sentence of a paragraph in which X occurs, 'Length(Par(X))' denotes the number of sentences that occur in that paragraph. LocW:i.thinPar takes continuous values ranging from 0 to 1. A paragraph initial sentence would have 0 and a paragraph final sentence 1. <LenText> the length of a text, measured in Japanese characters. the length of A in Japanese char-<LenSenA> acters. <LenSenB> acters. the length of B in Japanese char-<Sire> encodes the lexical similarity between A and B, based on an information-retrieval measure known as tf. idf (Salton and McGill, 1983) . 2 One important feature here is that we defined similarity based on (Japanese) characters rather than on words: in practice, we broke up nominals from relevant sentences into simple alphabetical characters (including graphemes) and used them to measure similarity between the sentences. (Thus in our setup xi in footnote 2 corresponds to one character, and not to one whole word.) We did this to deal with abbreviations and rewordings, which we found quite frequent in the corpus. <Cue> takes a discrete value 'y' or 'n'. The cue feature is intended to exploit surface cues most relevant for distinguishing between the SE-QUENCE and ELABORATION relations. The fea-2For a word j in a sentence Si (j E Si), its weight wij is defined by: N w# = tf~j \u2022 log ~- df~ is the number of sentences in the text which have an occurrence of a word j. N is the total number of sentences in the text. The tf.idf metric has the property of favoring high frequency words with local distribution. For a pair of sentences .,~ = (xl .... ) and Y = (yx,...), where x and y are words, we define the lexical similarity between X and Y by: t 2 E w(xi)w(y~) SIM(.X,Y)= t i=x t E E i=1 i=1 where w(xi) represents a t~idf weight assigned to the term xi. The measure is known as the Dice coefficient (Salton and McGill, 1983) Table 2 : Some of the 'linguistically interesting' cues identified by the entropy strategy. mata on the other hand, dSjini at the same time, ippou in contrast, sarani in addition, mo topic marker, ni-tsuite-wa regarding, tameda the reason is that, kekka as the result ga-nerai the goal is that sentences. Some of the sentence endings are inflectional categories of verbs such as PAST/NON-PAST, INTERROGATIVE, and also morphological categories :like nouns and particles (eg. question-markers). Based on Ichikawa (1990) , we defined six types of sentence-ending cues and marked a sentence according to whether it contains a part.icular type of cue. Included in the set are inflectional forms of the verb and the verbal adjec~tive, PAST/NON-PAST, morphological categories such as COPULA, and NOUN, parentheses (quotation markers), and sentencefinal particles such as -ka. We use the following two attributes to encode information about sentence-ending cues. <EndCueh> records information about a sentence-ending form of the preceding sentence. It takes a discrete value from 0 to 6, with 0 indicating the absence in the sentence of relevant cues. <EadCueB> Sa~me as above except that this feature is concerned with a sentence-ending form of the current sentence, i.e. the 'B' sentence. Finally, we have two classes, ELABORATION and SEQUENCE. Evaluation To evaluate our method, we carried out experiments, using a corpus of news articles from a Japanese economics daily (Nihon-Keizai-Shimbun-Sha, 1995). The corpus had 477 articles, randomly selected from issues that were published durilig the year. Each sentence in the articles was tagged with one of the discourse relations at the subclass level (i.e. CONSEQUEN-TIAL, ANTITHESIS, etc.). However, in evaluation experiments, we translated a subclass relation into a corresponding major class relation (SE-QUENCE/ELABORATION) for reasons discussed earlier. Furthermore , we explicitly asked coders not to tag a paragraph initial sentence for a discourse relation, for we found that coders rarely agree on their :classifications. Paragraph-initial sentences were dropped ffrom the evaluation corpus. This had left us with 5221 sentences, of which 56% are labeled as SEQUENCE and 44% ELABORATION. To find out effects of the committee-based sampling method (CBS), we ran the C4.5 (Release 5) decision tree algorithm with CBS turned on and off (Quinlan, 1993) and measured the performance by the 10-fold cross validation, in which the corpus is divided evenly into 10 blocks of data and 9 blocks are used for training and the remaining one block is held out for testing. On each validation fold, CBS starts with a set of about 512 samples from the set of training blocks and sequentially examines samples from the rest of the training set for possible labeling. If a sample is selected, then a decision tree will be trained on the sample together with the data acquired so far, and tested on the held-out data. Performance scores (error rates) are averaged over 10 folds to give a summary figure for a particular learning strategy. Throughout the experiments, we assume that k = 10 and g = 1, i.e., 10 committee members and the entropy gain of 1. Figure 1 shows the result of using CBS for a decision tree. Though the performance fluctuates erratically, we see a general tendency that the CBS method fares better than a decision tree classifier alone. In fact differences between C4.5/CBS and C4.5 alone proved statistically significant (t = 7.06, df = 90, p < .01). While there seems to be a tendency for performance to improve with an increase in the amount of training data, either with or without CBS, it is apparent that an increase in the training data has non-linear effects on performance, which makes an interesting contrast with probabilistic classifiers like HMM, whose performance improves linearly as the training data grow. The reason has to do with the structural complexity of the decision tree model: it is possible that small changes in the INFO value lead to   a drastic restructuring of a decision tree. In the face of this, we made a small change to the way CBS works. The idea, which we call a sampling with error feedback, is to remove harmful examples from the training data and only use those with positive effects on performance. It forces the sampling mechanism to return to status quo ante when it finds that an example selected degrades performance. More precisely, this would be put as follows: As Figure 2 shows, the error feedback produced a drastic reduction in the error rate. At 900, the committee-based method with the error feedback reduced the error rate by as much as 23%. Figure 3 compares performance of three sampling methods, random sampling, the committee-based sampling with 100 bootstrap replicates (i.e., K = 100) and that with 500 bootstrap replicates. In the random sampling method, a sample is selected randomly from the data and added to the training data. Figure 4 compares a random sampling approach with CBS with 500 bootstrap replicates. Both used the error feedback mechanism. Differences, though they seem small, turned out to be statistically significant (t = 4.51, df = 90, p < .01), which demonstrates the significance of C4.5/CBS approach. Furthermore, Figure 5 demonstrates that the number of bootstrap replicates affects performance (t = 8.87, df = 90, p < .01). CBS with 500 bootstraps performs consistently better than that with 100 bootstrap replicates. This might mean that in the current setup, 100 replicates are not enough to simulate the true distribution of P(M I S). @ o o o O@~ o @ @ o o @ @@~ @ o @ O O O : @ @ + O @ 0 O \" f St U {e}, if E(CSU{e}) < E(C s~) S +l [ St Note that CBS with 500 replicates achieves the error rate of 33.40 with only 1008 training samples, which amount to one fourth of the training data C4.5 alone required to reach 44.64. While a direct comparison with other learning schemes in discourse such as a transformation method (Samuel et al., 1998) is not feasible, if Samuel et al. (1998) 's approach is indeed comparable to C5.0, as discussed in Samuel et al. (1998) , then the present method might be able to reduce the  The use of the method for learning discourse relations resulted in a drastic reduction in the amount of data required and also an increased accuracy. Further, we found that the number of bootstraps has substantial effects on performance; CBS with 500 bootstraps performed better than that with 100 bootstraps",
    "abstract": "The paper presents a new approach to identifying discourse relations, which makes use of a particular sampling method called committeebased sampling (CBS). In the committee-based sampling, multiple learning models are generated to measure the utility of an input example in classification; if it is judged as not useful, then the example will be ignored. The method has the effect of reducing the amount of data required for training. In the paper, we extend CBS for decision tree classifiers. With an additional extension called error feedback, it is found that the method achieves an increased accuracy as well as a substantial reduction in the amount of data for training classifiers.",
    "countries": [
        "Japan"
    ],
    "languages": [
        "Japanese"
    ],
    "numcitedby": "7",
    "year": "1999",
    "month": "",
    "title": "Learning Discourse Relations with Active Data Selection"
}