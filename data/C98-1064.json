{
    "article": "Two trends are evident in the recent evolution of the field of inforlnation extraction: a preference for simple, often corpus-driven techniques over linguistically sophisticated ones; and a broadening of the central problem definition to include many non-traditional text domains. This development calls for information extraction systems which are as retargetable and general as possible. Here, we describe SRV, a learning architecture for information extraction which is designed for maximum generality and flexibility. SRV can exploit domain-specific information, including linguistic syntax and lexical information, in the form of features provided to the system explicitly as input for training. This process is illustrated using a domain created fl'om Reuters corporate acquisitions articles. Features are derived from two general-purpose NLP systems, Sleator and Temperly's link grammar parser and Wordnet. Experiments compare the learner's performance with and without such linguistic inforlnation. Surprisingly, in many cases, the system performs as well without this information as with it. 1 Introduction The field of information extraction (IE) is coneerned with using natural language processing (NLP) to extract essential details front text documents automatically. While the problems of retrieval, routing, and filtering have received considerable attention through the years, Ig is only now coming into its own as an information management sub-discipline. Progress in the field of IE has been away from general NLP systems, that must be tuned to work in a particular domain, toward faster systems that perform less linguistic processing of documents and can be more readily targeted at novel domains (e.g., (Appelt et al., ~993) ). A natural part of this development has been the introduction of machine learning techniques to facilitate the domain engineering effort (Riloff, 1996; Soderland and Lehnert, 1994) . Several researchers have reported IE systems which use machine learning at their core (Soderland, 1996; Califf and Mooney, 1997) . Rather than spend human effort tuning a system for an IE domain, it becomes possible to conceive of training it on a document sample. Aside from the obvious savings in human development eL fort, this has significant implications for information extraction as a discipline: Retargetability Moving to a novel domain should no longer be a question of code modification; at most some feature engineering should be required. Generality It should be possible to handle a much wider range of domains than previously. In addition to domains characterized by grammatical prose, we should be able to perform information extraction in domains involving less traditional structure, such as netnews articles and Web [)ages. Ill this paper we describe a learning algorithm similar in spirit to FOIL (Quinlan, 1990) , which takes as input a set of tagged documents, and a set of features that control generalization, and produces rules that describe how to extract information from novel documents. For this system, introducing linguistic or any other information particular to a domain is an exercise in feature definition, separate from the central algorithm, which is constant. We describe a set; of experiments, involving a document collection of newswire articles, in which this learner is compared with simpler leecning algorithms. 2 SRV In order to be suitable for the widest possible variety of textual domains, including collections made up of informal E-ma.il messages, World Wide \\Vob pages, or netnews posts, a learner must avoid ally assumptions about the structure of documents that migltt be invalidated by new domains. It is not sa.fe to assunte, tbr example, that text will be grammatical, or that all tokens encountered will have entries in a lexicon available to the system. Fundamentally, a document is simply a sequence of terms. Beyond this, it becomes difficult to make assumptions that are not violated by some ct)nlmon and important domain of interest. At the same time, however, when structural assumptions are justilied, they may be critical to the success of the system. It should be possible, therefore, to make structural information available to the learner as input for training. The machine learning method with which we experiment here, SRV, was designed with these considerations in min(l. In experiments reported elsewhere, we have applied SRV to collections of electronic seminar announcenlents an(l World \\Vide Web pages (Freitag, 1998) . Readers interested in a more thorough description el\" SRV are referred to (Freitag, 1998) . tiere, we list its most salient characteristics: \u2022 Lack of structural assumptions. SRV assumes nothing about the structure of a field instance 1 or the text in which it is embedded--only that an instance is an nnbroken fragment of text. l)uring learning and prediction, SRV inspects cver9 frag~ merit of appropriate size. \u2022 Token-oriented features. Learning is guided by a. feature set which is separate from the c, ore algorithm. Features describe aspects of individual tokens, such as capitalized, numeric, noun. Rules can posit feature values for individual tokens, or for all tokens in a fragment, and can constrain the ordering and positioning of tokens. \u2022 Relational features. SRV also includes lWe use the tel'ms field and field instance for the rather generic IE concepts of slot and slot filler. For a newswire article about a corporate acquisition, Ibr exampie, a field instance might be the text fragment listing the amount paid as part of the deal. a notion of relational f~atures, such as next-token, which maI) a given token to auother token in its e.nvironment. SRV uses such features to explore the context of flagments tinder investigation. ,, Top-down greedy rule search. SRV constructs rules from general to specific, a.s in FOIl, (Quinlan, 1990) . Top-down search is more sensitive to patterns in the data, and less dependent on heuristics, than the bottom-up search used by similar systems (Soderland, 11996; Califf and Mooney, 1997) . Case Study SRV's default feature set, designed for informal donlains where parsing is dil[icult, includes no fea.tures more sophisticated than those immediately computable from a cursory inspection of lokens. The expc, riments described here were an exercise in tile design of features to capture syntactic and lexical information. Donmin As part of these experiments we defined an information extraction problem using a publicly available corpus. 600 articles were samphM from the \"acquisition\" set in the Reuters corpus (Lewis, 1992) and tagged to identify instances of nine fields. Fields include those for the official names of tilt' parties to an acquisition (acquired, purchaser, seller), as well as their short names (acqabr, purchabr, sellerabr), the location of the purchased company or resource (acqloc), tile price paid (dlramt), and any short phrases sun> marizing the progress of negotiations (status). The fields vary widely in length and frequency of occurrence, both of which have a signiticant impact on the difficulty they present for learners. a.2 Feature Set Design We augmented SRV's default feature set; with features derived using two publicly available NLP tools, tile link grammar parser and Wordnet. The link grammar parser takes a sentence as input and returns a complete parse in which terms are connected in typed binary relations (\"links\") which represent syntactic relationships (Sleator and Temperley, 1993) . We mapped these links to relational features: A token on the right side of a link of type X has a corresponding relational feature called left_X that nlaps to the token on the left side of the link. hi addition, several non-relational features, such as part of speech, are derived from parser output. Figure 1 shows part of a link grammar parse and its translation into features. Our object in using \\\u00a5ordnet (Miller, 1995) is to enable SRV to recognize that the phrases, '% bought B,\" and, \"X acquired Y,\" are instantiations of the same underlying pattern. Although \"bought\" and \"acquired\" do not belong to the same \"synset\" in \\\u00a5ordnet, they are nevertheless closely related in Wordnet by means of the \"hypernym\" (or \"is-a\") relation. To exploit such semantic relationships we created a single token feature, called wn_word, in contrast with features already outlined, which are mostly boolean, this feature is set-valued. For nouns and verbs, its value is a set of identifiers representing all synsets in the hypernym path to the root of the hypernym tree in which a word occurs. For adjectives and adverbs, these synset identifiers were drawn from the cluster of closely related synsets. In the case of multiple Wordnet senses, we used the most common sense of a word, according to Wordnet, to construct this set. Competing Learners We compare the performance of SRV with that of two simple learning approaches, which make predictions based on raw term statistics. Rote (see (Freitag, 1998) ), memorizes field instances seen during training and only makes predictions when the same fragments are encountered in novel documents. Bayes is a statistical approach based on the \"Naive Bayes\" algorithm (Mitchell, 1997) . Our implementation is described in (Freitag, 1997) . Note that although these learners are \"simple,\" they are not necessarily ineffective. We have experimented with them in several domains and have been sur o prised by their level of\" performance in some cases. Results The results presented here represent average performances over several separate experiments. In each experiment, the 600 documents in the collection were randomly partitioned into two sets of 300 documents each. One of the two subsets was then used to train each of the lear,> ers, the other to measure the performance of the learned extractors. We compared four learners: each of the two simple learners, 8ayes and Rote, and SRV with two different feature sets, its default feature set, which contains no \"sophisticated\" features, and the default set augmented with the features derived from the link grammar parser and Wordnet. We will refer to the latter as SRV+ling. Results are reported in terms of two metrics closely related to precision and recall, as seen in information retrievah Accuracy, the percentage of documents for which a learner predicted correctly (extracted the field in question) over all documents for which the learner predicted; and coverage, the percentage of documents having the field in question for which a learner made some prediction. Performance Table 1 shows the results of a ten-fold experiment comparing all four learners on all nine fields. Note that accuracy and coverage must be considered together when comparing learners. Fbr example, Rote often achieves reasonable accuracy at very low coverage. Table 2 shows the results of a three-fold experiment, comparing all learners at fixed cover- age levels, 20% and 80%, on four fields which we considered representative of the wide range of behavior we observed. In addition, in order to assess the contribution of each kind of linguis~ tic information (syntactic and lexical) to SRV's performance, we ran experimenls in which its basic [~ature set was augmented with only ol]e type or the other. 4.2 Discussion Perhaps surprisingly, but consistent with results we have obtained in other domains, there is no one algorithm which outperforms the others on all fields. Rather than the absolute difficulty of a field, we speak of the suitability of a learner's inductive bias for a. field (Mitchell, 1997) . Bayes is clearly better than SRV on tile seller and sellerabr fields at all points on the accuracycoverage curve. We suspect this may be due, in part, to the relative infrequency of these fields in the data. The one field for which the linguistic features offer benefit a.t all points along the accuracycoverage curve is acqabr. 2 We surmise that two factors contribute to this success: a high frequency of occurrence for this field (2.42 times 2The acqabr differences in Table 2 (a 3-split experiment) are not significant at the 95% confidence level. However, the full 10-split, averages, wit, h 9,5% error margins, are: at 20% coverage, 61.54-,tA for SRV and 68.54-4.2 for SRV+ling; at. 80% coverage, 37.1\u00b12.0 fin. SRV and ,t2.44-2.1 for SRV+Iing. Table 2 : Accuracy from a three-split experiment at fixed coverage levels. A fragment is a acqabr, if: it contains exactly one token; the token (T) is c~pitalized; T is followed by a lower-case token; 7' is preceded by a lower-case token; 7' has a. right AN-link to a token (17) with wn_word value \"possession\"; U is preceded by a token with wn_word value \"stock\"; and the token two tokens before T is not a two-ch~u:acter token. to purchase 4. co mln~ common shares at acquire another 2.4 mln~ treasury shares Figure 2 : A learned rule tbr acqabr using linguistic features, along with two fragments of matching text. The AN-link connects a llO/ln modifier to the noun it modifies (to \"shares\" in both examples). per document on average), and consistent o(:currence in a linguistically rich context. Figure 2 shows a SRV+ling rule that is able to exploit both types of linguistic infbrmation. The Wordnet synsets for \"possession\" and \"stock\" come from the same branch in a hypernym tree--\"possession\" is a generalization of \"stock ''a -and both inatch the collocations \"common shaxes\" and \"treasury shares.\" That the paths [right~,N] and [right_AN prev_tok] both connect to the same synset indicates tile presence of a two-word Wordnet collocation. It is natural to ask why SRV+ling does not 'ZSRV, with its general-to-speeitie search bias, often employs Wordnet this way-first more general synsets, followed by specializations of the same concept. outperform SRV more consistently. After all, the features available to SRV+ling are a superset of those available to SRV. As we see it, there are two basic explanations: \u2022 Noise. Heuristic choices made in handling syntactically intractable sentences and in disambiguating Wordnet word senses introduced noise into the linguistic features. The combination of noisy features and a very flexible learner ,nay have led to overfitting that offset any advantages the linguistic features provided. \u2022 Cheap features equally effective. The simple features may have provided most of the necessary information. For example, generalizing \"acquired\" and \"bought\" is only useful in the absence of enough data to form rules for each verb separately. Conclusion More than similar systems, SRV satisfies the criteria of generality and retargetability. The separation of domain-specifc information from the central algorithm, in the form of an extensible feature set, allows quick porting to novel dora ains. Here, we have sketched this porting process. Surprisingly, although there is preliminary evidence that general-purpose linguistic information can provide benefit in some cases, most of the extraction performance can be achieved with only the simplest of information. Obviously, the learners described here are not intended to solve the information extraction problem outright, but to serve as a source of information for a post-processing component that will reconcile all of the predictions for a document, hopefully filling whole templates more accurately than is possible with any single learner. How this might be accomplished is one theme of our future work in this area. Acknowledgments Part of this research was conducted as part of a summer internship at Just Research. And it was supported in part by the Darpa HPKB program under contract F30602-97-1-0215.",
    "abstract": "Two trends are evident in the recent evolution of the field of inforlnation extraction: a preference for simple, often corpus-driven techniques over linguistically sophisticated ones; and a broadening of the central problem definition to include many non-traditional text domains. This development calls for information extraction systems which are as retargetable and general as possible. Here, we describe SRV, a learning architecture for information extraction which is designed for maximum generality and flexibility. SRV can exploit domain-specific information, including linguistic syntax and lexical information, in the form of features provided to the system explicitly as input for training. This process is illustrated using a domain created fl'om Reuters corporate acquisitions articles. Features are derived from two general-purpose NLP systems, Sleator and Temperly's link grammar parser and Wordnet. Experiments compare the learner's performance with and without such linguistic inforlnation. Surprisingly, in many cases, the system performs as well without this information as with it.",
    "countries": [
        "United States"
    ],
    "languages": [
        ""
    ],
    "numcitedby": "0",
    "year": "1998",
    "month": "",
    "title": "Toward General-Purpose Learning for Information Extraction"
}