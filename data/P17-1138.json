{
    "article": "Bandit structured prediction describes a stochastic optimization framework where learning is performed from partial feedback. This feedback is received in the form of a task loss evaluation to a predicted output structure, without having access to gold standard structures. We advance this framework by lifting linear bandit learning to neural sequence-to-sequence learning problems using attention-based recurrent neural networks. Furthermore, we show how to incorporate control variates into our learning algorithms for variance reduction and improved generalization. We present an evaluation on a neural machine translation task that shows improvements of up to 5.89 BLEU points for domain adaptation from simulated bandit feedback. Introduction Many NLP tasks involve learning to predict a structured output such as a sequence, a tree or a graph. Sequence-to-sequence learning with neural networks has recently become a popular approach that allows tackling structured prediction as a mapping problem between variable-length sequences, e.g., from foreign language sentences into target-language sentences (Sutskever et al., 2014) , or from natural language input sentences into linearized versions of syntactic (Vinyals et al., 2015) or semantic parses (Jia and Liang, 2016) . A known bottleneck in structured prediction is the requirement of large amounts of gold-standard structures for supervised learning of model parameters, especially for data-hungry neural network models. Sokolov et al. (2016a,b) presented a framework for stochastic structured prediction under bandit feedback that alleviates the need for labeled output structures in learning: Following an online learning protocol, on each iteration the learner receives an input, predicts an output structure, and receives partial feedback in form of a task loss evaluation of the predicted structure. 1 They \"banditize\" several objective functions for linear structured predictions, and evaluate the resulting algorithms with simulated bandit feedback on various NLP tasks. We show how to lift linear structured prediction under bandit feedback to non-linear models for sequence-to-sequence learning with attentionbased recurrent neural networks (Bahdanau et al., 2015) . Our framework is applicable to sequenceto-sequence learning from various types of weak feedback. For example, extracting learning signals from the execution of structured outputs against databases has been established in the communities of semantic parsing and grounded language learning since more than a decade (Zettlemoyer and Collins, 2005; Clarke et al., 2010; Liang et al., 2011) . Our work can build the basis for neural semantic parsing from weak feedback. In this paper, we focus on the application of machine translation via neural sequence-to-sequence learning. The standard procedure of training neural machine translation (NMT) models is to compare their output to human-generated translations and to infer model updates from this comparison. However, the creation of reference translations or post-edits requires professional expertise of users. Our framework allows NMT models to learn from feedback that is weaker than human references or post-edits. One could imagine a scenario of personalized machine translation where translations have to be adapted to the user's specific purpose and domain. The feedback required by our methods can be provided by laymen users or can even be implicit, e.g., inferred from user interactions with the translated content on a web page. Starting from the work of Sokolov et al. (2016a,b) , we lift their objectives to neural sequence-to-sequence learning. We evaluate the resulting algorithms on the task of French-to-English translation domain adaptation where a seed model trained on Europarl data is adapted to the NewsCommentary and the TED talks domain with simulated weak feedback. By learning from this feedback, we find 4.08 BLEU points improvements on NewsCommentary, and 5.89 BLEU points improvement on TED. Furthermore, we show how control variates can be integrated in our algorithms, yielding faster learning and improved generalization in our experiments. Related Work NMT models are most commonly trained under a word-level maximum likelihood objective. Even though this objective has successfully been applied to many sequence-to-sequence learning tasks, the resulting models suffer from exposure bias, since they learn to generate output words based on the history of given reference words, not on their own predictions. Ranzato et al. (2016) apply techniques from reinforcement learning (Sutton and Barto, 1998; Sutton et al., 2000) and imitation learning (Schaal, 1999; Ross et al., 2011; Daum\u00e9 et al., 2009) to learn from feedback to the model's own predictions. Furthermore, they address the mismatch between word-level loss and sequence-level evaluation metric by using a mixture of the REINFORCE (Williams, 1992) algorithm and the standard maximum likelihood training to directly optimize a sequence-level loss. Similarly, Shen et al. (2016) lift minimum risk training (Och, 2003; Smith and Eisner, 2006; Gimpel and Smith, 2010; Yuille and He, 2012; He and Deng, 2012) from linear models for machine translation to NMT. These works are closely related to ours in that they use the technique of score function gradient estimators (Fu, 2006; Schulman et al., 2015) for stochastic learning. However, the learning environment of Shen et al. (2016) is different from ours in that they approximate the true gradient of the risk objective in a full information setting by sampling a subset of translations and computing the expectation over their rewards. In our bandit setting, feedback to only a single sample per sentence is available, making the learning problem much harder. The approach by Ranzato et al. (2016) approximates the expectation with single samples, but still requires reference translations which are unavailable in the bandit setting. To our knowledge, the only work on training NMT from weak feedback is the work by He et al. (2016) . They propose a dual-learning mechanism where two translation models are jointly trained on monolingual data. The feedback in this case is a reward signal from language models and a reconstruction error. This is attractive because the feedback can automatically be generated from monolingual data and does not require any human references. However, we are interested in using estimates of human feedback on translation quality to directly adapt the model to the users' needs. Our approach follows most closely the work of Sokolov et al. (2016a,b) . They introduce bandit learning objectives for structured prediction and apply them to various NLP tasks, including machine translation with linear models. Their approach can be seen as an instantiation of reinforcement learning to one-state Markov decision processes under linear policy models. In this paper, we transfer their algorithms to nonlinear sequence-to-sequence learning. Sokolov et al. (2016a) showed applications of linear bandit learning to tasks such as multiclass-classification, OCR, and chunking, where learning can be done from scratch. We focus on lifting their linear machine translation experiments to the more complex NMT that requires a warm start for training. This is done by training a seed model on one domain and adapting it to a new domain based on bandit feedback only. For this task we build on the work of Freitag and Al-Onaizan (2016) , who investigate strategies to find the best of both worlds: models that adapt well to the new domain without deteriorating on the old domain. In contrast to previous approaches to domain adaptation for NMT, we do not require in-domain parallel data, but consult direct feedback to the translations generated for the new domain. Neural Machine Translation Neural models for machine translation are based on a sequence-to-sequence learning architecture consisting of an encoder and a decoder (Cho et al., 2014; Sutskever et al., 2014; Bahdanau et al., 2015) . An encoder Recurrent Neural Network (RNN) reads in the source sentence and a decoder RNN generates the target sentence conditioned on the encoded source. The input to the encoder is a sequence of vectors x = (x 1 , . . . , x Tx ) representing a sequence of source words of length T x . In the approach of Sutskever et al. (2014) , they are encoded into a single vector c = q({h 1 , . . . , h Tx }), where h t = f (x t , h t\u22121 ) is the hidden state of the RNN at time t. Several choices are possible for the non-linear functions f and q: Here we are using a Gated Recurrent Unit (GRU) (Chung et al., 2014) for f , and for q an attention mechanism that defines the context vector as a weighted sum over encoder hidden states (Bahdanau et al., 2015; Luong et al., 2015a) . The decoder RNN predicts the next target word y t at time t given the context vector c and the previous target words y <t = {y 1 , . . . , y t\u22121 } from a probability distribution over the target vocabulary V . This distribution is the result of a softmax transformation of the decoder outputs o = {o 1 , . . . , o Ty }, such that p \u03b8 (y t = w i |y <t , c) = exp(o w i ) V v=1 exp(o wv ) . The probability of a full sequence of outputs y = (y 1 , . . . , y Ty ) of length T y is defined as the product of the conditional word probabilities: p \u03b8 (y|x) = Ty t=1 p \u03b8 (y t |y <t , c). Since this encoder-decoder architecture is fully differentiable, it can be trained with gradient descent methods. Given a parallel training set of S source sentences and their reference translations D = {(x (s) , y (s) )} S s=1 , we can define a wordlevel Maximum Likelihood Estimation (MLE) objective, which aims to find the parameters \u03b8MLE = arg max \u03b8 L MLE (\u03b8) of the following loss function: L MLE (\u03b8) = S s=1 log p \u03b8 (y (s) |x (s) ) = S s=1 Ty t=1 log p \u03b8 (y t |x (s) , y (s) <t ). This loss function is non-convex for the case of neural networks. Clever initialization strategies, Algorithm 1 Neural Bandit Structured Prediction Input: Sequence of learning rates \u03b3 k Output: Optimal parameters \u03b8 1: Initialize \u03b8 0 2: for k = 0, . . . , K do 3: Observe x k 4: Sample \u1ef9k \u223c p \u03b8 (y|x k ) 5: Obtain feedback \u2206(\u1ef9 k ) 6: \u03b8 k+1 = \u03b8 k \u2212 \u03b3 k s k 7: Choose a solution \u03b8 from the list {\u03b8 0 , . . . , \u03b8 K } adaptive learning rates and momentum techniques are required to find good local maxima and to speed up convergence (Sutskever et al., 2013) . Another trick of the trade is to ensemble several models with different random initializations to improve over single models (Luong et al., 2015a) . At test time, we face a search problem to find the sequence of target words with the highest probability. Beam search reduces the search error in comparison to greedy search, but also exponentially increases decoding time. Neural Bandit Structured Prediction Algorithm 1 is an adaptation of the Bandit Structured Prediction algorithm of Sokolov et al. (2016b) to neural models: For K rounds, a model with parameters \u03b8 receives an input, samples an output structure, and receives user feedback. Based on this feedback, a stochastic gradient s k is computed and the model parameters are updated. As a post-optimization step, a solution \u03b8 is selected from the iterates. This is done with onlineto-batch conversion by choosing the model with optimal performance on held-out data. The core of the algorithm is the sampling: if the model distribution is very peaked, the model exploits, i.e., it presents the most probable outputs to the user. If the distribution is close to uniform, the model explores, i.e., it presents random outputs to the user. The balance between exploitation and exploration is crucial to the learning process: in the beginning the model is rather uninformed and needs to explore in order to find outputs with high reward, while in the end it ideally converges towards a peaked distribution that exactly fits the user's needs. Pre-training the model, i.e. setting \u03b8 0 wisely, ensures a reasonable exploitationexploration trade-off. This online learning algorithm can be applied to any objective L provided the stochastic gradients s k are unbiased estimators of the true gradient of the objective, i.e., we require \u2207L = E[s k ]. In the following, we will present objectives from Sokolov et al. (2016b) transferred to neural models, and explain how they can be enhanced by control variates. Expected Loss (EL) Minimization The first objective is defined as the expectation of a task loss \u2206(\u1ef9), e.g. \u2212BLEU(\u1ef9), over all input and output structures: L EL (\u03b8) =E p(x) p \u03b8 (\u1ef9|x) [\u2206(\u1ef9)] . (1) In the case of full-information learning where reference outputs are available, we could evaluate all possible outputs against the reference to obtain an exact estimation of the loss function. However, this is not feasible in our setting since we only receive partial feedback for a single output structure per input. Instead, we use stochastic approximation to optimize this loss. The stochastic gradient for this objective is computed as follows: s EL k =\u2206(\u1ef9) \u2202 log p \u03b8 (\u1ef9|x k ) \u2202\u03b8 . (2) Objective ( 1 ) is known from minimum risk training (Och, 2003) and has been lifted to NMT by Shen et al. (2016) -but not for learning from weak feedback. Equation ( 2 ) is an instance of the score function gradient estimator (Fu, 2006) where \u2207 log p \u03b8 (\u1ef9|x k ) (3) denotes the score function. We give an algorithm to sample structures from an encoder-decoder model in Algorithm 2. It corresponds to the algorithm presented by Shen et al. (2016) with the difference that it samples single structures, does not assume a reference structure, and additionally returns the sample probabilities. A similar objective has also been used in the REINFORCE algorithm (Williams, 1992) which has been adapted to NMT by Ranzato et al. (2016) . Pairwise Preference Ranking (PR) The previous objective requires numerical feedback as an estimate of translation quality. Alternatively, we can learn from pairwise preference judgments that are formalized in preference ranking objectives. Let P(x) = { y i , y j |y i , y j \u2208 Y(x)} denote the set of output pairs for an input x, and let \u2206( y i , y j ) : P(x) \u2192 [0, 1] denote a task loss function that specifies a dispreference of y i over y j . In our experimental simulations we use two types of pairwise feedback. Firstly, continuous pairwise feedback 2 is computed as \u2206( y i , y j ) = \u2206(y j ) \u2212 \u2206(y i ), and secondly, binary feedback is computed as \u2206( y i , y j ) = 1 if \u2206(y j ) > \u2206(y i ), 0 otherwise. Analogously to the sequence-level sampling for linear models (Sokolov et al., 2016b) , we define the following probabilities for word-level sampling: p + \u03b8 (\u1ef9 t = w i |x, \u0177<t ) = exp(o w i ) V v=1 exp(o wv ) , p \u2212 \u03b8 (\u1ef9 t = w j |x, \u0177<t ) = exp(\u2212o w j ) V v=1 exp(\u2212o wv ) . The effect of the negation within the softmax is that the two distributions p + \u03b8 and p \u2212 \u03b8 rank the next candidate target words \u1ef9t (given the same history, here the greedy output \u0177<t ) in opposite order. Globally normalized models as in the linear case, or LSTM-CRFs (Huang et al., 2015) for the non-linear case would allow sampling full structures such that the ranking over full structures is reversed. But in the case of locally normalized RNNs we retrieve only locally reversed-rank samples. Since we want the model to learn to rank \u1ef9i over \u1ef9j , we would have to sample \u1ef9i word-byword from p + \u03b8 and \u1ef9j from p \u2212 \u03b8 . However, sampling all words of \u1ef9j from p \u2212 \u03b8 leads to translations that are neither fluent nor source-related, so we propose to randomly choose one position of \u1ef9j where the next word is sampled from p \u2212 \u03b8 and sample the remaining words from p + \u03b8 . We found that this method produces suitable negative samples, which are only slightly perturbed and still relatively fluent and source-related. A detailed algorithm is given in Algorithm 3. In the same manner as for linear models, we define the probability of a pair of sequences as p \u03b8 ( \u1ef9i , \u1ef9j |x) = p + \u03b8 (\u1ef9 i |x) \u00d7 p \u2212 \u03b8 (\u1ef9 j |x). Algorithm 2 Sampling Structures Input: Model \u03b8, target sequence length limit T y Output: Sequence of words w = (w 1 , . . . , w T y ) and log-probability p 1: w 0 = START, p 0 = 0 2: w = (w 0 ) 3: for t \u2190 1 . . . T y do 4: w t \u223c p \u03b8 (w|x, w <t ) 5: p t = p t\u22121 + log p \u03b8 (w|x, w <t ) 6: w = (w 1 , . . . , w t\u22121 , w t ) 7: end for 8: Return w and p T Note that with the word-based sampling scheme described above, the sequence \u1ef9j also includes words sampled from p + \u03b8 . The pairwise preference ranking objective expresses an expectation over losses over these pairs: L PR (\u03b8) =E p(x) p \u03b8 ( \u1ef9i ,\u1ef9 j |x) [\u2206( \u1ef9i , \u1ef9j )] . (4) The stochastic gradient for this objective is s PR k =\u2206( \u1ef9i , \u1ef9j ) (5) \u00d7 \u2202 log p + \u03b8 (\u1ef9 i |x k ) \u2202\u03b8 + \u2202 log p \u2212 \u03b8 (\u1ef9 j |x k ) \u2202\u03b8 . This training procedure resembles well-known approaches for noise contrastive estimation (Gutmann and Hyv\u00e4rinen, 2010) with negative sampling that are commonly used for neural language modeling (Collobert et al., 2011; Mnih and Teh, 2012; Mikolov et al., 2013) . In these approaches, negative samples are drawn from a non-parametric noise distribution, whereas we draw them from the perturbed model distribution. Control Variates The stochastic gradients defined in equations ( 2 ) and ( 5 ) can be used in stochastic gradient descent optimization (Bottou et al., 2016) where the full gradient is approximated using a minibatch or a single example in each update. The stochastic choice, in our case on inputs and outputs, introduces noise that leads to slower convergence and degrades performance. In the following, we explain how antithetic and additive control variate techniques from Monte Carlo simulation (Ross, 2013) can be used to remedy these problems. The idea of additive control variates is to augment a random variable X whose expectation is Algorithm 3 Sampling Pairs of Structures Input: Model \u03b8, target sequence length limit T y Output: Pair of sequences w, w and their logprobability p 1: p 0 = 0 2: w, w , \u0175 = (START) \u0175 = ( \u01751 , . . . , \u0175t\u22121 , \u0175t ) 18: end for 19: Return w, w and p T sought, by another random variable Y to which X is highly correlated. Y is then called the control variate. Let \u0232 furthermore denote its expectation. Then the following quantity X\u2212\u0109 Y +\u0109 \u0232 is an unbiased estimator of E[X]. In our case, the random variable of interest is the noisy gradient X = s k from Equation (2). The variance reduction effect of control variates can be seen by computing the variance of this quantity: 3: i \u223c U(1, T ) 4: for t \u2190 1 . . . T Var(X \u2212 \u0109 Y ) = Var(X) + \u01092 Var(Y ) (6) \u2212 2\u0109 Cov(X, Y ). Choosing a control variate such that Cov(X, Y ) is positive and high enough, the variance of the gradient estimate will be reduced. An example is the average reward baseline known from reinforcement learning (Williams, 1992) , yielding Y k = \u2207 log p \u03b8 (\u1ef9|x k ) 1 k k j=1 \u2206(\u1ef9 j ). (7) The optimal scalar \u0109 can be derived easily by taking the derivative of ( 6 ), leading to \u0109 = Cov(X,Y ) Var(X) . This technique has been applied to using the score function (Equation ( 3 )) as control variate in Ranganath et al. (2014) , yielding the following control variate: Y k = \u2207 log p \u03b8 (\u1ef9|x k ). (8) Note that for both types of control variates, ( 7 ) and ( 8 ), the expectation \u0232 is zero, simplifying the implementation. However, the optimal scalar \u0109 has to be estimated for every entry of the gradient separately for the score function control variate. We will explore both types of control variates for the stochastic gradient (2) in our experiments. A further effect of control variates is to reduce the magnitude of the gradient, the more so the more the stochastic gradient and the control variate covary. For L-Lipschitz continuous functions, a reduced gradient norm directly leads to a bound on L which appears in the algorithmic stability bounds of Hardt et al. (2016) . This effect of improved generalization by control variates is empirically validated in our experiments. A similar variance reduction effect can be obtained by antithetic control variates. Here E[X] is approximated by the estimator X 1 +X 2 2 whose vari- ance is Var X 1 + X 2 2 = 1 4 Var(X 1 ) (9) + Var(X 2 ) + 2Cov(X 1 , X 2 ) . Choosing the variates X 1 and X 2 such that Cov(X 1 , X 2 ) is negative will reduce the variance of the gradient estimate. Under certain assumptions, the stochastic gradient (5) of the pairwise preference objective can be interpreted as an antithetic estimator of the score function (3). The antithetic variates in this case would be X 1 = \u2207 log p + \u03b8 (\u1ef9 i |x k ), (10) X 2 = \u2207 log p \u2212 \u03b8 (\u1ef9 j |x k ) , where an antithetic dependence of X 2 on X 1 can be achieved by construction of p + \u03b8 and p \u2212 \u03b8 (see Capriotti (2008) which is loosely related to our approach). Similar to control variates, antithetic variates have the effect of shrinking the gradient norm, the more so the more the variates are antithetically correlated, leading to possible improvements in algorithmic stability (Hardt et al., 2016) . Experiments In the following, we present an experimental evaluation of the learning objectives presented above on machine translation domain adaptation. We compare how the presented neural bandit learning objectives perform in comparison to linear models, then discuss the handling of unknown words and eventually investigate the impact of techniques for variance reduction. Setup Data. We perform domain adaptation from Europarl (EP) to News Commentary (NC) and TED talks (TED) for translations from French to English. Table 1 provides details about the datasets. For data pre-processing we follow the procedure of Sokolov et al. (2016a,b) using cdec tools for filtering, lowercasing and tokenization. The challenge for the bandit learner is to adapt from the EP domain to NC or TED with weak feedback only. NMT Models. We choose a standard encoderdecoder architecture with single-layer GRU RNNs with 800 hidden units, a word embedding size of 300 and tanh activations. The encoder consists of a bidirectional RNN, where the hidden states of backward and forward RNN are concatenated. The decoder uses the attention mechanism proposed by Bahdanau et al. (2015) . 3 Source and target vocabularies contain the 30k most frequent words of the respective parts of the training corpus. We limit the maximum sentence length to 50. Dropout (Srivastava et al., 2014) with a probability of 0.5 is applied to the network in several places: on the embedded inputs, before the output layer, and on the initial state of the decoder RNN. The gradient is clipped when its norms exceeds 1.0 to prevent exploding gradients and stabilize learning (Pascanu et al., 2013) . All models are implemented and trained with the sequence learning framework Neural Monkey (Libovick\u1ef3 et al., 2016; Bojar et al., 2016) . 4 They are trained with a minibatch size of 20, fitting onto single 8GB GPU machines. The training dataset is shuffled before each epoch. Baselines. The out-of-domain baseline is trained on the EP training set with standard MLE. For both NC and TED domains, we train two fullinformation in-domain baselines: The first indomain baseline is trained on the relatively small in-domain training data. The second in-domain baseline starts from the out-of-domain model and is further trained on the in-domain data. All baselines are trained with MLE and Adam (Kingma and Ba, 2014 ) (\u03b1 = 1 \u00d7 10 \u22124 , \u03b2 1 = 0.9, \u03b2 2 = 0.999) until their performance stops increasing on respective held-out validation sets. The gap between the performance of the out-ofdomain model and the in-domain models defines the range of possible improvements for bandit learning. All models are evaluated with Neural Monkey's mteval. For statistical significance tests we used Approximate Randomization testing (Noreen, 1989) . Bandit Learning. Bandit learning starts with the parameters of the out-of-domain baseline. The bandit models are expected to improve over the out-of-domain baseline by receiving feedback from the new domain, but at most to reach the indomain baseline since the feedback is weak. The models are trained with Adam on in-domain data for at most 20 epochs. Adam's step-size parameter \u03b1 was tuned on the validation set and was found to perform best when set to 1 \u00d7 10 \u22125 for non-pairwise, 1 \u00d7 10 \u22126 for pairwise objectives on NC, 1 \u00d7 10 \u22127 for pairwise objectives on TED. The best model parameters, selected with early stopping on the in-domain validation set, are evaluated on the held-out in-domain test set. In the spirit of Freitag and Al-Onaizan (2016) they are additionally evaluated on the out-of-domain test set to investigate how much knowledge of the old domain the models lose while adapting to the new domain. Bandit learning experiments are repeated two times, with different random seeds, and mean BLEU scores with standard deviation are reported. Feedback Simulation. Weak feedback is simulated from the target side of the parallel corpus, but references are never revealed to the learner. Sokolov et al. (2016a,b) used a smoothed version of per-sentence BLEU for simulating the weak feedback for generated translations from the comparison with reference translations. Here, we use gGLEU instead, which Wu et al. (2016) recently introduced for learning from sentence-level reward signals correlating well with corpus BLEU. This metric is closely related to BLEU, but does not have a brevity penalty and considers the recall of matching n-grams. It is defined as the minimum of recall and precision over the total n-grams up to a certain n. Hence, for our experiments \u2206(\u1ef9) = \u2212gGLEU(\u1ef9, y), where \u1ef9 is a sample translation and y is the reference translation. Unknown words. One drawback of NMT models is their limitation to a fixed source-and target vocabulary. In a domain adaptation setting, this limitation has a critical impact to the translation quality. The larger the distance between old and new domain, the more words in the new domain are unknown to the models trained on the old domain (represented with a special UNK token). We consider two strategies for this problem for our experiments: 1. UNK-Replace: with unknown named entities that are just passed through from source to target. However, since it is a non-differentiable post-processing step, the NMT model cannot directly be trained for this behavior. Therefore we also train sub-word level NMT with BPE. We apply 29,800 merge operations to obtain a vocabulary of 29,908 sub-words. The procedure for training these models is exactly the same as for the word-based models. The advantage of this method is that the model is in principle able to generate any word composing it from sub-word units. However, training sequences become longer and candidate translations are sampled on a sub-word level, which introduces the risk of sampling nonsense words. Control variates. We implement the average baseline control variate as defined in Equation 7 , which results in keeping an running average over previous losses. Intuitively, absolute gGLEU feedback is turned into relative feedback that reflects the current state of the model. The sign of the update is switched when the gGLEU for the current sample is worse than the average gGLEU, so the model makes a step away from it, while in the case of absolute feedback it would still make a small step towards it. In addition, we implement the score function control variate with a running es- timate \u0109k = 1 k k j=1 Cov(s j ,\u2207 log p \u03b8 (\u1ef9 j |x j )) Var(s j ) . Results In the following, we discuss the results of the experimental evaluation of the models described above. The out-of-domain baseline results are given in Table 2 , those for the in-domain baselines in 3. The results for bandit learning on NC and TED are reported in Table 4 . For bandit learning we give mean improvements over the respective out-of-domain baselines in the Diff.-columns. Baselines. The NMT out-of-domain baselines, reported in  NC, but the in-domain EP\u2192NC (Table 3 ) baselines outperform the linear baseline by more than 3 BLEU points. Continuing training of a pre-trained out-of-domain model on a small amount of in domain data is very hence effective, whilst the performance of the models solely trained on small indomain data is highly dependent on the size of this training data set. For TED, the in-domain dataset is almost four times as big as the NC training set, so the in-domain baselines perform better. This effect was previously observed by Luong and Manning (2015) and Freitag and Al-Onaizan (2016) . Bandit Learning. The NMT bandit models that optimize the EL objective yield generally a much higher improvement over the out-of-domain models than the corresponding linear models: As listed in Table 4 , we find improvements of between 2.33 and 2.89 BLEU points on the NC domain, and between 4.18 and 5.18 BLEU points on the TED domain. In contrast, the linear models with sparse features and hypergraph re-decoding achieved a maximum improvement of 0.82 BLEU points on NC. Optimization of the PR objective shows improvements of up to 1.79 BLEU points on NC (compared to 0.6 BLEU points for linear models), but no significant improvement on TED. The biggest impact of this variance reduction tech-  A beneficial side-effect of NMT learning from weak feedback is that the knowledge from the out-domain training is not simply \"overwritten\". This happens to full-information in-domain tuning where more than 4 BLEU points are lost in an evaluation on the out-domain data. On the contrary, the bandit learning models still achieve high results on the original domain. This is useful for conservative domain adaptation, where the performance of the models in the old domain is still relevant. Unknown words. By handling unknown words with UNK-Replace or BPEs, we find consistent improvements over the plain word-based models for all baselines and bandit learning models. We observe that the models with UNK replacement essentially benefit from passing through source tokens, and only marginally from lexical translations. Bandit learning models take particular advantage of UNK replacement when it is included already during training. The sub-word models achieve the overall highest improvement over the baselines, although sometimes generating nonsense words. Control variates. Applying the score function control variate to EL optimization does not largely change learning speed or BLEU results. However, the average reward control variate leads to improvements of around 1 BLEU over the EL optimization without variance reduction on both domains. Conclusion In this paper, we showed how to lift structured prediction under bandit feedback from linear models to non-linear sequence-to-sequence learning using recurrent neural networks with attention. We introduced algorithms to train these models under numerical feedback to single output structures or under preference rankings over pairs of structures. In our experimental evaluation on the task of neural machine translation domain adaptation, we found relative improvements of up to 5.89 BLEU points over out-of-domain seed models, outperforming also linear bandit models. Furthermore, we argued that pairwise ranking under bandit feedback can be interpreted as a use of antithetic variates, and we showed how to include average reward and score function baselines as control variates for improved training speed and generalization. In future work, we would like to apply the presented non-linear bandit learners to other structured prediction tasks. Acknowledgments This research was supported in part by the German research foundation (DFG), and in part by a research cooperation grant with the Amazon Development Center Germany.",
    "funding": {
        "defense": 0.0,
        "corporate": 0.0,
        "research agency": 1.0,
        "foundation": 0.0,
        "none": 0.0
    },
    "reasoning": "Reasoning: The acknowledgments section of the article mentions support from the German research foundation (DFG), which is a research agency. There is no mention of funding from defense, corporate entities, foundations, or an explicit statement indicating the absence of any funding sources."
}