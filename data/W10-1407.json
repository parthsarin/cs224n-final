{
    "article": "Discontinuities occur especially frequently in languages with a relatively free word order, such as German. Generally, due to the longdistance dependencies they induce, they lie beyond the expressivity of Probabilistic CFG, i.e., they cannot be directly reconstructed by a PCFG parser. In this paper, we use a parser for Probabilistic Linear Context-Free Rewriting Systems (PLCFRS), a formalism with high expressivity, to directly parse the German NeGra and TIGER treebanks. In both treebanks, discontinuities are annotated with crossing branches. Based on an evaluation using different metrics, we show that an output quality can be achieved which is comparable to the output quality of PCFG-based systems. Introduction Languages with a rather free word order, like German, display discontinuous constituents particularly frequently. In (1), the discontinuity is caused by an extraposed relative clause. Another language with a rather free word order is Bulgarian. In (2), the discontinuity is caused by topicalization. (2) \u00c0 \u00d1 \u00d0 1 Pens 1 \u00de I \u00d9\u00d4\u00d9\u00da \u00d1 buy \u00d7 \u00d1\u00d3 only \u00da\u00d8 \u00d2 expensive t 1 t 1 'As for pens, I only buy expensive ones. ' In most constituency treebanks, sentence annotation is restricted to having the shape of trees without crossing branches, and the non-local dependencies induced by the discontinuities are modeled by an additional mechanism. In the Penn Treebank (PTB) (Marcus et al., 1994) , e.g., this mechanism is a combination of special labels and empty nodes, establishing implicit additional edges. In the German T\u00fcBa-D/Z (Telljohann et al., 2006) , additional edges are established by a combination of topological field annotation and special edge labels. As an example, Fig. 1 shows a tree from T\u00fcBa-D/Z with the annotation of (1). Note here the edge label ON-MOD on the relative clause which indicates that the subject of the sentence (alle Attribute) is modified. However, in a few other treebanks, such as the German NeGra and TIGER treebanks (Skut et al., 1997; Brants et al., 2002) , crossing branches are allowed. This way, all dependents of a long-distance dependency can be grouped under a single node. Fig. 2 shows a tree from NeGra with the annotation of (3). Since in general, the annotation mechanisms for non-local dependencies lie beyond the expressivity of Context-Free Grammar, non-local information is inaccessible for PCFG parsing and therefore generally discarded. In NeGra/TIGER annotation, e.g., tree transformation algorithms are applied before parsing in order to resolve the crossing branches. See, e.g., K\u00fcbler et al. (2008) and Boyd (2007) for details. If one wants to avoid the loss of annotation information which is implied with such transformations, one possibility is to use a probabilistic parser for a formalism which is more expressive than CFG. In this paper, we tackle the question if qualitatively good results can be achieved when parsing German with such a parser. Concretely, we use a parser for Probabilistic Linear Context-Free Rewriting Systems (PLCFRS) (Kallmeyer and Maier, 2010) . LCFRS (Vijay-Shanker et al., 1987) are a natural extension of CFG in which a single nonterminal node can dominate more than one continuous span of terminals. We can directly interpret NeGra-style trees as its derivation structures, i.e., we can extract grammars without making further linguistic assumptions (Maier and Lichte, 2009 ) (see Sect. 2.3), as it is necessary for other formalisms such as Probabilistic Tree Adjoining Grammars (Chiang, 2003) . Since the non-local dependencies are immediately accessible in NeGra and TIGER, we choose these treebanks as our data source. In order to judge parser output quality, we use four different evaluation types. We use an EVALB-style measure, adapted for LCFRS, in order to compare our parser to previous work on parsing German treebanks. In order to address the known shortcomings of EVALB, we perform an additional evaluation using the tree distance metric of Zhang and Shasha (1989) , which works independently of the fact if there are crossing branches in the trees or not, and a dependency evaluation (Lin, 1995) , which has also be applied before in the context of parsing German (K\u00fcbler et al., 2008) . Last, we evaluate certain difficult phenomena by hand on TePaCoC (K\u00fcbler et al., 2008) , a set of sentences hand-picked from TIGER. The evaluations show that with a PLCFRS parser, competitive results can be achieved. The remainder of the article is structured as follows. In Sect. 2, we present the formalism, the parser, and how we obtain our grammars. In Sect. 3, we discuss the evaluation methods we employ. Sect. 4 contains our experimental results. Sect. 5 is dedicated to related work. Sect. 6 contains the conclusion and presents some possible future work. A Parser for PLCFRS Probabilistic Linear Context-Free Rewriting Systems LCFRS are an extension of CFG where the nonterminals can span not only single strings but, instead, tuples of strings. We will notate LCFRS with the syntax of simple Range Concatenation Grammars (SRCG) (Boullier, 1998) , a formalism that is equivalent to LCFRS. A LCFRS (Vijay-Shanker et al., 1987) is a tuple G = (N, T, V, P, S) where a) N is a finite set of non-terminals with a function dim: N \u2192 N that determines the fan-out of each A \u2208 N ; b) T and V are disjoint finite sets of terminals and variables; c) S \u2208 N is the start symbol with dim(S) = 1; d) P is a finite set of rewriting rules A(\u03b1 1 , . . . , \u03b1 dim(A) ) \u2192 A 1 (X (1) 1 , . . . , X (1) dim(A1) ) \u2022 \u2022 \u2022 A m (X (m) 1 , . . . , X (m) dim(Am) ) for m \u2265 0 where A, A 1 , . . . , A m \u2208 N , X (i) j \u2208 V for 1 \u2264 i \u2264 m, 1 \u2264 j \u2264 dim(A i ) and \u03b1 i \u2208 (T \u222a V ) * for 1 \u2264 i \u2264 dim(A). For all r \u2208 P , it holds that every variable X occurring in r occurs exactly once in the left-hand side (LHS) and exactly once in the right-hand side (RHS). The fan-out of an LCFRS G is the maximal fanout of all non-terminals in G. Furthermore, the RHS length of a rewriting rules r \u2208 P is called the rank of r and the maximal rank of all rules in P is called the rank of G. An LCFRS is called ordered if for every r \u2208 P and every RHS non-terminal A in r and each pair X 1 , X 2 of arguments of A in the RHS of r, X 1 precedes X 2 in the RHS iff X 1 precedes X 2 in the LHS. Borrowed from SRCG, we specify the language of an LCFRS based on the notion of ranges. For some input word w = w 1 \u2022 \u2022 \u2022 w n , a range is a pair i, j of integers with 0 \u2264 i \u2264 n denoting the substring w i+1 \u2022 \u2022 \u2022 w j . Note that a range denotes \u03b5 iff i = j. Only consecutive ranges can be concatenated into new ranges. We can replace the variables and terminals of the rewriting rules with ranges. E.g., A( g, h ) \u2192 B( g + 1, h \u2212 1 ) is a replacement of the clause A(aX 1 b) \u2192 B(X 1 ) if the input word w is such that w g+1 = a and w h = b. A rewriting rule in which all elements of all arguments have been consistently replaced by ranges is called an instantiated rule. A derivation is built by successively rewriting the LHSs of instantiated rules with its RHSs. The language L(G) of some LCFRS G consists of all words w = w 1 \u2022 \u2022 \u2022 w n for which it holds that there is a rule with the start symbol on the LHS which can be instantiated to 0, n and rewritten to \u03b5. A probabilistic LCFRS (PLCFRS) is a tuple N, T, V, P, S, p such that N, T, V, P, S is a LCFRS and p : P \u2192 [0..1] a function such that for all A \u2208 N : \u03a3 A( x)\u2192 \u03a6\u2208P p(A( x) \u2192 \u03a6) = 1. There are possibly other ways to extend LCFRS with probabilities. This definition is supported by the fact that probabilistic MCFGs 1 have been defined in the same way (Kato et al., 2006) . 1 MCFGs are equivalent to LCFRSs and SRCGs (Boullier, 1998) . Scan: 0 : [A, i, i + 1 ] A POS tag of w i+1 Unary: in : [B, \u03c1] in + |log(p)| : [A, \u03c1] p : A( \u03c1) \u2192 B( \u03c1) \u2208 P Binary: in B : [B, \u03c1 B ], in C : [C, \u03c1 C ] in B + in C + log(p) : [A, \u03c1 A ] where p : A( \u03c1 A ) \u2192 B( \u03c1 B )C( \u03c1 C ) is an instantiated rule. Goal: [S, 0, n ] A CYK Parser for PLCFRS We use the parser of Kallmeyer and Maier (2010) . It is a probabilistic CYK parser (Seki et al., 1991) , using the technique of weighted deductive parsing (Nederhof, 2003) . While for symbolic parsing, other elaborate algorithms exist (Kallmeyer and Maier, 2009) , for probabilistic parsing, CYK is a natural choice. It is assumed for the parser that our LCFRSs are of rank 2 and do not contain rules where some of the LHS components are \u03b5. Both assumptions can be made without loss of generality since every LCFRS can be binarized (G\u00f3mez-Rodr\u00edguez et al., 2009) and \u03b5-components on LHS of rules can be removed (Boullier, 1998) . We make the assumption that POS tagging is done before parsing. The POS tags are special non-terminals of fan-out 1. Consequently, the rules are either of the form A(a) \u2192 \u03b5 where A is a POS tag and a \u2208 T or of the form A( \u03b1) \u2192 B( x) or A( \u03b1) \u2192 B( x)C( y) where \u03b1 \u2208 (V + ) dim(A) , i.e., only the rules for POS tags contain terminals in their LHSs. The parser items have the form [A, \u03c1], with A \u2208 N and \u03c1 a vector of ranges characterizing all components of the span of A. We specify the set of weighted parse items via the deduction rules in Fig. 3 . Parsing time can be reduced by reordering the agenda during parsing such that those items are processed first which lead to a complete parse more quickly than others (Klein and Manning, 2003a) . The parser uses for this purpose an admissible, but not monotonic estimate called LR estimate. It gives (relative to a sentence length) an estimate of the outside probability of some non-terminal A with a span of a certain length (the sum of the lengths of all the components of the span), a certain number of terminals to the left of the first and to the right of the last component and a certain number of terminals gaps in between the components of the A span, i.e., filling the gaps. A discussion of other estimates is presented at length in Kallmeyer and Maier (2010) . LCFRS for Modeling Discontinuities We use the algorithm from Maier and S\u00f8gaard (2008) to extract LCFRS rules from our data sets. For all nonterminals A 0 with the children A 1 \u2022 \u2022 \u2022 A m (i.e. , for all non-terminals which are not preterminals), we create a clause \u03c8 0 \u2192 \u03c8 1 \u2022 \u2022 \u2022 \u03c8 m with \u03c8 i , 0 \u2264 i \u2264 m, labeled A i . The arguments of each \u03c8 i , 1 \u2264 i \u2264 m, are single variables, one for each of the continuous yield part dominated by the node A i . The arguments of \u03c8 0 are concatenations of these variables that describe how the discontinuous parts of the yield of A 0 are obtained from the yields of its daughters. For all preterminals A dominating some terminal a, we extract a production A(a) \u2192 \u03b5. Since by definition, a label is associated with a certain fan-out, we distinguish the labels by corresponding subscripts. Note that this extraction algorithm yields only ordered LCFRS. Furthermore, note that for trees without crossing branches, this algorithm yields a PLCFRS with fan-out 1, i.e., a PCFG. As mentioned before, the advantage of using LCFRS is that grammar extraction is straightforward and that no separate assumptions must be made. Note that unlike, e.g., Range Concatenation Grammar (RCG) (Boullier, 1998) , LCFRS cannot model re-entrancies, i.e., nodes with more than one incoming edge. While those do not occur in NeGrastyle annotation, some of the annotation in the PTB, e.g., the annotation for right node raising, can be interpreted as re-entrancies. This topic is left for future work. See Maier and Lichte (2009) for further details, especially on how treebank properties relate to properties of extracted grammars. Before parsing, we binarize our grammar. We first mark the head daughters of all non-terminal nodes using Collins-style head rules based on the NeGra rules of the Stanford Parser (Klein and Manning, 2003b) and the reorder the RHSs of all LCFRS rules such that sequence of elements to the right of the head daughter is reversed and moved to the beginning of the RHS. From this point, the binarization works like the transformation into Chomsky Normal Form for CFGs. For each rule with an RHS of length \u2265 3, we introduce a new non-terminal which covers the RHS without the first element and continue successively from left to right. The rightmost new rule, which covers the head daughter, is binarized to unary. We markovize the grammar as in the CFG case. To the new symbols introduced during the binarization, a variable number of symbols from the vertical and horizontal context of the original rule is added. Following the literature, we call the respective quantities v and h. As an example, Fig. 4 shows the output for the production for the VP in the left tree in Fig. 2 . After extraction and head marking: VP2(X1,X2X3) \u2192 AVP1(X1) AVP1(X2) VVPP1'(X3) The probabilities are then computed based on the number of occurrences of rules in the transformed treebank, using a Maximum Likelihood estimator. After binarization and markovization with v = 1, h = 2: VP2(X1,X2) \u2192 AVP1(X1) @-VP2 v -AVP1 h -VVPP1 h (X2) @-VP2 v -AVP1 h -VVPP1 h (X1X2) \u2192 AVP1(X1) @-VP2 v -VVPP1 h (X2) @-VP2 v -VVPP1 h (X1) \u2192 VVPP1(X1) After binarization and markovization with v = 2, h = 1: VP2(X1,X2) \u2192 AVP1(X1) @-VP2 v -S2 v -AVP1 h (X2) @-VP2 v -S2 v -AVP1 h (X1X2) \u2192 AVP1(X1) @-VP2 v -S2 v -VVPP1 h (X2) @-VP2 v -S2 v -VVPP1 h (X1) \u2192 VVPP1(X1) Evaluation methods We assess the quality of our parser output using different methods. The first is an EVALB-style metric (henceforth EVALB), i.e., we compare phrase boundaries. In spite of its shortcomings (Rehbein and van Genabith, 2007) , it allows us to compare to previous work on parsing NeGra. In the context of LCFRS, we compare sets of tuples of the form [A, (i 1 l , i 1 r ), . . . , (i k l , i k r )], where A is a non-terminal in some derivation tree with dim(A) = k and each one from the corresponding treebank trees. Using these tuple sets, we compute labeled and unlabeled recall (LR/UR), precision (LP/UP), and the F 1 measure (LF 1 /UF 1 ) in the usual way. Note that if k = 1, our metric is identical to its PCFG version. EVALB does not necessarily reflect parser output quality (Rehbein and van Genabith, 2007; Emms, 2008; K\u00fcbler et al., 2008) . One of its major problems is that attachment errors are penalized too hard. As the second evaluation method, we therefore choose the tree-distance measure (henceforth TDIST) (Zhang and Shasha, 1989) , which levitates this problem. It has been proposed for parser evaluation by Emms (2008) . TDIST is an ideal candidate for evaluation of the output of a PLCFRS, since it the fact if trees have crossing branches or not is not relevant to it. Two trees \u03c4 k and \u03c4 A are compared on the basis of T -mappings from \u03c4 k to \u03c4 A . A T -mapping is a partial mapping \u03c3 of nodes of \u03c4 k to nodes of \u03c4 A where all node mappings preserve left-to-right order and ancestry. Within the mappings, node insertion, node deletion, and label swap operations are identified, represented resp. by the sets I, D and S. Furthermore, we consider the set M representing the matched (i.e., unchanged) nodes. The cost of a T -mapping is the total number of operations, i.e. |I|+ |D|+ |S|. The tree distance between two trees \u03c4 K and \u03c4 A is the cost of the cheapest T -mapping. Fig. 5 , borrowed from Emms, shows an example for a T -mapping. Inserted nodes are prefixed with >, deleted nodes are suffixed with <, and nodes with swapped labels are linked with arrows. Since in total, four operations are involved, to this T -mapping, a cost of 4 is assigned. For more details, especially on algorithms which compute TDIST, refer to Bille (2005) . In order to convert the tree distance measure into a similarity measure like EVALB, we use the macro-averaged Dice and Jaccard normalizations as defined by Emms. Let \u03c4 K and \u03c4 A be two trees with |\u03c4 K | and |\u03c4 A | nodes, respectively. For a T -mapping \u03c3 from \u03c4 K to \u03c4 A with the sets D, I, S and M, we compute them as follows. (i m l , i m r ), 1 \u2264 m \u2264 k, dice(\u03c3) = 1 \u2212 |D| + |I| + |S| |\u03c4 K | + |\u03c4 A | jaccard (\u03c3) = 1 \u2212 |D| + |I| + |S| |D| + |I| + |S| + |M| where, in order to achieve macro-averaging, we sum the numerators and denominators over all tree pairs before dividing. See Emms (2008) for further details. The third method is dependency evaluation (henceforth DEP), as described by Lin (1995) . It consists of comparing dependency graphs extracted from the gold data and from the parser output. The dependency extraction algorithm as given by Lin does also not rely on trees to be free of crossing branches. It only relies on a method to identify the head of each phrase. We use our own implementation of the algorithm which is described in Sect. 4 of Lin (1995) , combined with the head finding algorithm of the parser. Dependency evaluation abstracts away from another bias of EVALB. Concretely, it does not prefer trees with a high node/token ratio, since two dependency graphs to be compared necessarily have the same number of (terminal) nodes. In the context of parsing German, this evaluation has been employed previously by K\u00fcbler et al. (2008) . Last, we evaluate on TePaCoC (Testing Parser Performance on Complex Grammatical Constructions), a set of particularly difficult sentences hand-picked from TIGER (K\u00fcbler et al., 2008) . Experiments Our data sources are the German NeGra (Skut et al., 1997) and TIGER (Brants et al., 2002) treebanks. In a preprocessing step, following common practice, we attach all punctuation to nodes within the tree, since it is not included in the NeGra annotation. In a first pass, using heuristics, we attach all nodes to the in each case highest available phrasal node such that ideally, we do not introduce new crossing branches. In a second pass, parentheses and quotation marks are preferably attached to the same node. Grammatical function labels are discarded. After this preprocessing step, we create a separate version of the data set, in which we resolve the crossing branches in the trees, using the common approach of re-attaching nodes to higher constituents. We use the first 90% of our data sets for training and the remaining 10% for testing. Due to memory limitations, we restrict ourselves to sentences of a maximal length of 30 words. Our TIGER data sets (TIGER and T-CF) have 31,568 sentences of an average length of 14.81, splitted into 31,568 sentences for training and 3,508 sentences for testing. Our NeGra data sets (NeGra and N-CF) have 18,335 sentences, splitted into 16,501 sentences for training and 1,834 sentences for testing. We parse the data sets described above with activated LR estimate. For all our experiments, we use the markovization settings v = 2 and h = 1, which have proven to be successful in previous work on parsing NeGra (Rafferty and Manning, 2008) . We provide the parser with the gold tagging. Fig. 6 shows the average parsing times for all data sets on an AMD Opteron node with 8GB of RAM (pure Java implementation), Tab. 1 shows the percentage of parsed sentences.  Not surprisingly, reconstructing discontinuities is hard. Therefore, when parsing without crossing branches, the results are slightly better. In order to see the influence of discontinuous structures during parsing on the underlying phrase structure, we resolve the crossing branches in the parser output of NeGra and TIGER and compare it to the respective gold test data of N-CF and T-CF. Tab. 3 shows the results. The results deteriorate slightly in comparison with N-CF and T-CF, however, they are slightly higher than for than for NeGra and TIGER. This is due to the fact that during the transformation, some errors in the LCFRS parses get \"corrected\": Wrongly attached phrasal nodes are re-attached to unique higher positions in the trees. In order to give a point of comparison with previous work on parsing TIGER and NeGra, in Tab. 4, we report some of the results from the literature. All of them were obtained using PCFG parsers: K\u00fcbler (2005) (Tab. 1, plain PCFG for NeGra), K\u00fcbler et al. (2008) (Tab. 3, plain PCFG and Stanford parser with markovization v = 2 and h = 1 for TIGER), and Petrov and Klein (2007) (Tab. 1, Berkeley parser, latent variables). We include the results for N-CF and T-CF. Our results are slightly better than for the plain PCFG models. We would expect the result for T-CF to be closer to the corresponding result for the Stanford parser, since we are using a comparable model. This difference is mostly likely due to losses induced by the LR estimate. All items to which the estimate assigns an outside log probability estimate of \u2212\u221e get blocked and are not put on the agenda. This blocking has an extremely beneficial effect on parser speed. However, it is paid by a worse recall, as experiments with smaller data sets have shown. A complete discussion of the effects of estimates, as well as a discussion of other possible optimizations, is presented in Kallmeyer and Maier (2010) . Recall finally that LCFRS parses are more informative than PCFG parses -a lower score for LCFRS EVALB than for PCFG EVALB does not necessarily mean that the PCFG parse is \"better\". Evaluation Using Tree Distance Tab. 5 shows the results of evaluating with TDIST, excluding unparsed sentences. We report the dice and jaccard normalizations, as well as a summary of the distribution of the tree distances between gold trees and trees from the parser output (see Sect. 3). Again, we can observe that parsing LCFRS is harder than parsing PCFG. As for EVALB, the results for TIGER are slightly higher than the ones for NeGra. The distribution of the tree distances shows that about a third of all sentences receive a completely correct parse. More than a half, resp. a third of all parser output trees require \u2264 3 operations to be mapped to the corresponding gold tree, and a only a small percentage requires \u2265 10 operations. To our knowledge, TDIST has not been used to evaluate parser output for NeGra and TIGER. However, Emms (2008) reports results for the PTB using different parsers. Collins' Model 1 (Collins, 1999), e.g., lies at 93.62 (Dice) and 87.87 (Jaccard) . For the Berkeley Parser (Petrov and Klein, 2007) , 94.72 and 89.87 is reported. We see that our results lie in them same range. However, Jaccard scores are lower since this normalization punishes a higher number of edit operations more severely than Dice. In order to meaningfully interpret which treebank properties are responsible for the fact that between the gold trees and the trees from the parser, the German data requires more tree edit operations than the English data, a TDIST evaluation of the output of an off-the-shelf PCFG parser would be necessary. This is left for future work. Dependency Evaluation For the dependency evaluation, we extract dependency graphs from both the gold data and the test data and compare the unlabeled accuracy. Tab. 6 shows the results. We report unlabeled attachment score (UAS). The dependency results are consistent with the previous results in as much as the scores for PCFG parsing are again higher. The dependency results reported in K\u00fcbler et al. (2008) however are much higher (85.6 UAS for the markovized Stanford parser). While a part of the losses can again be attributed to the LR estimate, another reason lies undoubtedly in the different dependency conversion method which we employ, and in further treebank transformations which K\u00fcbler et al. perform. In order to get a more fine grained result, in future work, we will consider graph modifications as proposed by Lin (1995) as well as including annotation-specific information from NeGra/TIGER in our conversion procedure. TePaCoC The TePaCoC data set (K\u00fcbler et al., 2008) provides 100 hand-picked sentences from TIGER which contain constructions that are especially difficult to parse. Out of these 100 sentences, we only consider 69. The remaining 31 sentences are either longer than 30 words or not included in the TIGER 2003 release (K\u00fcbler et al. use the 2005 release) . The data is partitioned in groups of sentences with extraposed relative clauses (ERC), forward conjunction reduction (FCR), noun PP attachment (PPN), verb PP attachment (PPV), subject gap with finite/fronted verbs (SGF) and coordination of unlike constituents (CUC). Tab. 7 shows the EVALB results for the (discontinuous) TePaCoC. We parse these sentences using the same training set as before with all TePaCoC sentences removed. While we cannot compare our results directly with the PCFG results (using grammatical function labels) of K\u00fcbler et al., their results nevertheless give an orientation. We take a closer look at all sentence groups. Our result for ERC is more than 15 points worse than the result of K\u00fcbler et al. The relative clause itself is mostly recognized as a sentence (though not explicitly marked as a relative clause, since we do not consider grammatical functions). However, it is almost consistently attached too high (on the VP or on clause level). While this is correct for K\u00fcbler et al., with crossing branches, it treated as an error and punished especially hard by EVALB. FCR is parsed mostly well and with comparable results to K\u00fcbler et al. There are too few sentences to make a strong claim about PP attachment. However, in both PPN and PPV flat phrases seem to be preferred, which has as a consequence that in PPN, PPs are attached too high and in PPV too low. Our output confirms the claim of K\u00fcbler et al.'s that unlike coordinations is the most difficult of all TePaCoC phenomena. The conjuncts themselves are correctly identified in most cases, however then coordinated at the wrong level. SGF is parsed best. K\u00fcbler et al. report To sum up, not surprisingly, getting the right attachment positions seems to be hard for LCFRS, too. Additionally, with crossing branches, the output is rated worse, since some attachments are not present anymore without crossing branches. Since especially for the relative clauses, attachment positions are in fact a matter of discussion from a syntactic point of view, we will consider in future studies to selectively resolve some of the crossing branches, e.g., by attaching relative clauses to higher positions. Related Work The use of formalisms with a high expressivity has been explored before (Plaehn, 2004; Levy, 2005) . To our knowledge, Plaehn is the only one to report evaluation results. He uses the formalism of Discontinuous Phrase Structure Grammar (DPSG). Limiting the sentence length to 15, he obtains 73.16 labeled F 1 on NeGra. Evaluating all sentences of our NeGra data with a length of up to 15 words results, however, in 81.27 labeled F 1 . For a comparison between DPSG and LCFRS, refer to Maier and S\u00f8gaard (2008) . Conclusion and Future Work We have investigated the possibility of using Probabilistic Linear Context-Free Rewriting Systems for direct parsing of discontinuous constituents. Consequently, we have applied a PLCFRS parser on the German NeGra and TIGER treebanks. Our evaluation, which used different metrics, showed that a PLCFRS parser can achieve competitive results. In future work, all of the presented evaluation methods will be investigated to greater detail. In order to do this, we will parse our data sets with current state-of-the-art systems. Especially a more elaborate dependency conversion should enable a more informative comparison between the output of PCFG parsers and the output of the PLCFRS parser. Last, since an algorithm is available which extracts LCFRSs from dependency structures (Kuhlmann and Satta, 2009) , the parser is instantly ready for parsing them. We are currently performing the corresponding experiments.",
    "abstract": "Discontinuities occur especially frequently in languages with a relatively free word order, such as German. Generally, due to the longdistance dependencies they induce, they lie beyond the expressivity of Probabilistic CFG, i.e., they cannot be directly reconstructed by a PCFG parser. In this paper, we use a parser for Probabilistic Linear Context-Free Rewriting Systems (PLCFRS), a formalism with high expressivity, to directly parse the German NeGra and TIGER treebanks. In both treebanks, discontinuities are annotated with crossing branches. Based on an evaluation using different metrics, we show that an output quality can be achieved which is comparable to the output quality of PCFG-based systems.",
    "countries": [
        "Germany"
    ],
    "languages": [
        "German"
    ],
    "numcitedby": "22",
    "year": "2010",
    "month": "June",
    "title": "Direct Parsing of Discontinuous Constituents in {G}erman"
}