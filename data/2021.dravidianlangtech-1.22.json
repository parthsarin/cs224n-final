{
    "article": "Messaging online has become one of the major ways of communication. At this level, there are cases of online/digital bullying. These include rants, taunts, and offensive phrases. Thus the identification of offensive language on the internet is a very essential task. In this paper, the task of offensive language detection on YouTube comments from the Dravidian languages of Tamil, Malayalam and Kannada are seen upon as a mutliclass classification problem. After being subjected to language specific pre-processing, several Machine Learning algorithms have been trained for the task at hand. The paper presents the accuracy results on the development datasets for all Machine Learning models that have been used and finally presents the weighted average scores for the test set when using the best performing Machine Learning model. Introduction With the growing freedom on the internet, facing digital bullying has become a daily phenomenon. Offensive languages can be found everywhere including comments on social media. These text are more often targeted to an individual or to a group. The task presented in this paper is to identify offensive language in YouTube comments and classify them in different categories. The comments are in code-mixed Dravidian languages of Tamil, Malayalam and Kannada. Tamil is a Dravidian language natively spoken by South Asia's Tamil people (Chakravarthi, 2020b) . For over 2600 years, Tamil literature has been recorded. Sangam literature, the oldest period of Tamil literature, is dated from ca. 600 BC-300 AD. Among the Dravidian languages, Tamil has the oldest existing literature. Over 55 percent of the epigraphic inscriptions discovered by the Archaeological Survey of India (about 55,000) are in the Tamil language. Malayalam is Tamil's nearest major relative; the two started diverging around the 16th century AD. Code-Mixing is mixing of two or more language in the same utterance. Many user generated in India are code-mixed (Chakravarthi et al., 2018; Chakravarthi, 2020a) . Most of the comments contain multiple types of offensive contents. For this purpose a Multiclass classification method has been adapted to the task. Multiclass text classification is a process of classifying an instance into one of the multiple classes possible. In a multi class classification problem, an instance can belong only to one class. Several Machine Learning algorithms have been well established for Multiclass classification (Thavareesan and Mahesan, 2019, 2020a,b) . However, not all of them suit the task at hand. It also has to be noted that Machine Learning algorithms has to be tuned to fit the Dravidian Languages under consideration (Tamil, Malayalam and Kannada). Thus several pre-processing techniques have been proposed for Dravidian Languages and Machine Learning algorithms have been fine tuned to suit the task (Ghanghor et al., 2021b,a; Puranik et al., 2021; Hegde et al., 2021; Yasaswini et al., 2021) . Related Work Offensive Language Detection is one of the interesting topics where a lot of research has already been done. However, they have all been language specific. (Yin et al., 2009) has used a supervised learning approach with the context, sentiment and contextual features of the document for identifying harassment on the web. (Dadvar et al., 2013) also use supervised learning techniques with three important features: content-based features, cyberbullying features and user-based features. The contentbased are based on the content of the text, the cyberbullying features aim to identify frequently bullied groups such as minority races, religion or physi-cal features, the user-based features exploits the user identity. (Razavi et al., 2010) uses pattern recognition and machine learning methods for offensive language detection. This method extracts features in different conceptual levels and applies a multilevel classification on them. (Spertus, 1997) presents Smokey, which is a system built for automatic recognition of hostile messages. (ming Xu et al.) uses a combination of Text categorization, Role labelling, sentiment analysis and topic modelling for identifying bullying on social media data. (Dinakar et al., 2012) uses common sense reasoning to identify and mitigate cyberbullying. . For this purpose, it uses a common sense knowledge base is used, which permits recognition over a broad spectrum of topics in everyday life. (Dinakar et al., 2012) concentrates on a more narrow range of subject matter associated with bullying like appearance,intelligence, racial and ethnic slurs, social acceptance, and rejection and constructs BullySpace, which is a commonsense knowledge base that encodes particular knowledge about bullying situations. In this paper, the task of offensive language is approached as a Multiclass classification problem. (Pranckevi\u010dius and Marcinkevi\u010dius, 2017) compares various machine learning algorithms -Na\u00efve Bayes, Random Forest, Decision Tree, Logistic Regression and support vector machines for the classification of text reviews. The findings indicate that the Logistic Regression for multi-class classification for product reviews is the best method in terms of accuracy. It should also be noted that the overall classification accuracy in combination with uni/bi/tri-gram models increases the average of classification accuracy. With respect to research works done on Dravidian languages, particularly Dravidian code mixed text, a shared task has been proposed for the task of sentiment analysis of YouTube comments in Dravidian code-mixed text (Mandl et al., 2020) . (Chakravarthi, 2020b) presents an improvement of word sense translation for under-resourced languages. It focuses on cleaning the noisy corpus in the form of code-mixed content at word-level based on orthographic information which results in improvement of Dravidian languages. It also proposes to alleviate the problem of different scripts by transcribing the native script into a common representation such as the Latin script or the International Phonetic Alphabet (IPA). (Jeyafreeda, 2020) proposed a Multiclass Classification method, where several Machine Learning algorithms have been adapted to the task of sentiment analysis and based on the accuracy of the algorithms on the development set the best suited technique is chosen for the language and the task. The languages involved are the Dravidian languages of Tamil and Malayalam. The Tamil language performed well with the Naive Bayes algorithm while the Malayalam language performed well with the Logistic Regression technique. Data The data for the shared task of offensive language detection in Dravidian Code-mixed languages (Chakravarthi et al., 2021 ) is a collection of YouTube comments. The languages used are Tamil, Malayalam and Kannada. The Tamil code-mixed YouTube comments are obtained from (Chakravarthi et al., 2020b) . The Malayalam code-mixed YouTube comments are obtained from (Chakravarthi et al., 2020a) . The Kannada code-mixed YouTube comments are obtained from (Hande et al., 2020) . The classes are \"Notoffensive\", \"offensive-untargeted\", \"offensivetargeted-individual\", \"offensive-targeted-group\", \"offensive-targeted-other\", or \"Not-in-indentedlanguage\". The data set for the Tamil code-mixed YouTube comments has 35,139 instances in the train set, 4,388 instances in the dev set and 4,392 instances in the test set. The data set for the Malayalam code-mixed YouTube comments has 16,010 instances in the train set, 1,999 instances in the dev set and 2,001 instances in the test set. The data set for the Kannada code-mixed YouTube comments has 6216 instances in the train set, 776 instances in the dev set and 778 instances in the test set. Pre-processing The Dravidian languages used needs some preprocessing in order to be able to adapt to machine learning algorithms. The pre-processing used in this paper are as follows: \u2022 Firstly, the words in the script of the Dravidian languages of Tamil, Malayalam and Kannada are replaced by latin text (International Phonetic Alphabet (IPA)). \u2022 Secondly, the emojis are replaced by the words that the emoji represents like happy, sad etc. \u2022 Thirdly, removing stop words and punctuation. For this purpose, python packages for language specific stop words. The advertools and stopwordsiso are used for language specific stopwords. For the purpose of training a supervised classifier, each YouTube comment in the dataset is represented by a numerical feature vector. One common approach for extracting features from text is to use the bag of words model. In this model, the frequency of the words is taken into consideration, but the order in which they occur is ignored. The Term Frequency, Inverse Document Frequency (tf-idf) measure is calculated for each term in the dataset (individually for Tamil, Malayalam and Kannada). 5 Machine Learning Na\u00efve Bayes Na\u00efve Bayes is a fairly simple yet powerful for classification. The Na\u00efve Bayes uses conditional probabilities given by the equation 1. P (h|d) = (P (d|h) * P (h))/P (d) (1) Where, \u2022 P(h/d) is the probability of hypothesis h given the data d. This is called the posterior probability. \u2022 P(d/h) is the probability of data d given that the hypothesis h was true. \u2022 P(h) is the probability of hypothesis h being true (regardless of the data). This is called the prior probability of h. \u2022 P(d) is the probability of the data (regardless of the hypothesis). Support Vector Machines (SVM) SVMs are very good classification algorithm. The idea is to identify hyper-planes that will separate the various features. A linear SVM is used in this paper. The classification decision is thus performed as follows: f (x) = sign(W * .x + b * ) (2) where x represents the input feature, W represents the model weight and b represents the bias. For the multi-class classification problem, a one-vs-rest (also known as one-vs-all) approach is used. It involves splitting the dataset into multiple binary classification problems. Thus a binary classification boundary is constructed to train each binary SVMs and the one with the highest confidence is used to solve the multi-class classification problem. K Nearest Neighbor(KNN) As the name suggests, the \"neighbor\" plays a very important role. This algorithm calculates the distance between the new data point and the other data points. The data points with the shortest distances are selected and the new data variable is then assigned to the class with the most number of close neighbors. K refers to a the number of data points with which the comparisons of distance is performed. Decision Trees and Random Forests A decision tree is the diagrammatic representation of classification. Decision trees are made through a flow-chart like structure whose: \u2022 Internal node symbolizes an attribute \u2022 Each branch symbolizes the outcome of the test \u2022 Each leaf node symbolizes a class label \u2022 The paths from the root to leaf symbolizes classification rules Random Forest is a collection of large number of individual decision trees. Every decision tree predicts a class. Following this, each decision tree predicts a class. A vote is performed on all predicted results. The class with the maximum vote is decided on to be the output class. For the training process, the random subspace method is used (i.e) if one or a few features are very strong predictors for the target output, these features will be selected in many of the decision trees. This makes the features more correlated. Logistic Regression The well established multi-class logistic regression model is implemented for the task at hand (LR, 2017) . The model of logistic regression for a multiclass classification problem forces the output layer to have discrete probability distributions over the possible k classes. This is accomplished by using the softmax function. Given the input vector(z), the softmax function works as follows: sof tmax(z) = e z k i=1 e z i (3) At this point, there are k outputs and thus there is a necessity to impose weights connecting each input to each output. The model thus is as follows: \u0177 = sof tmax(xW + b) (4) where, W is the weight matrix between the input and output, x being the input and b is the bias. Implementation The As seen from table 2, all models are quite closer to each other in terms of accuracy. However, the highest accurate model to use for the task of offensive language detection of YouTube comments in all three Dravidian languages(Tamil, Malayalam and Kannada) is the Support Vector Machine(SVM) classifier. From table 2, the Logistic Regression model for the Dravidian language of Tamil has the same accuracy as the SVM classifier. As the SVM classifier has the highest accuracy for the Malayalam and Kannada language, SVM classifier is still used for the Tamil language as well. Results and Conclusions The weighted averages for the precision, recall and F-score for the task at hand is shown in table 3 . A precision of 0.54, a recall of 0.73 and a F1-score of 0.61 is achieved by the method presented in this paper for the Tamil language. A precision of 0.94, a recall of 0.94 and a F1-score of 0.93 is achieved by the method presented in this paper for the Malayalam language. A precision of 0.66, a recall of 0.67 and a F1-score of 0.63 is achieved by the method presented in this paper for the Kannada language. The same model, SVM, has been used for the offensive language detection for all three Dravidian languages of Tamil, Malayalam and Kannada. The Malayalam language has the highest value of Precision and Recall. On the other hand, Tamil language has the lowest Precision value but the Recall value for the Tamil language is still high. The size of training data for the Tamil language is much higher than that of the other languages (Malayalam and Kannada). The lower precision and recall values for the Tamil language could be the result of over fitting. Future directions of research would include using deep learning methods for the task at hand.",
    "abstract": "Messaging online has become one of the major ways of communication. At this level, there are cases of online/digital bullying. These include rants, taunts, and offensive phrases. Thus the identification of offensive language on the internet is a very essential task. In this paper, the task of offensive language detection on YouTube comments from the Dravidian languages of Tamil, Malayalam and Kannada are seen upon as a mutliclass classification problem. After being subjected to language specific pre-processing, several Machine Learning algorithms have been trained for the task at hand. The paper presents the accuracy results on the development datasets for all Machine Learning models that have been used and finally presents the weighted average scores for the test set when using the best performing Machine Learning model.",
    "countries": [
        "France"
    ],
    "languages": [
        "Tamil",
        "Kannada",
        "Malayalam"
    ],
    "numcitedby": "10",
    "year": "2021",
    "month": "April",
    "title": "{J}udith{J}eyafreeda{A}ndrew@{D}ravidian{L}ang{T}ech-{EACL}2021:Offensive language detection for {D}ravidian Code-mixed {Y}ou{T}ube comments"
}