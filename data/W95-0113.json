{
    "article": "Resea/ch based on a treebank is active for many natural language applications. However, the work to build a large scale treebank is laborious and tedious. This paper proposes a probabilistic chunker to help the development of a partially bracketed corpus. The chunker partitions the part-of-speech sequence into segments called chunks. Rather than using a treebank as our training corpus, a corpus which is tagged with part-of-speech information only is used. The experimental results show the probabilistic chunker has more than 92% correct rate in outside test. The well-formed partially bracketed corpus is a milestone in the development of a treebank. Besides, the simple but effective chunker can also be applied to many natural language applications. Introduction Research based on a treebank, i.e., a corpus annotated with syntactic structures, is active for many natural language applications [1] [2] [3] [4] [5] . Framis [1] proposes a methodology to extract selectional restrictions at a variable level of abstraction from the Penn Treebank. Chen and Chen [2] propose a probabilistic chunker to decide the implicit boundaries of constituents and utilize the linguistic knowledge to extract the noun phrases by a finite state mechanism. In their study, Susanne Corpus is used as a trainmg corpus for their chunker. Pocock and Atwell [3] investigate statistical grammars extracted from Spoken English Corpus (SEC), and apply these grammars to find the grammatically optimal path through a word lattice. The stochastic parsers are also developed in [4, 5] . All these applications employ the syntactic information extracted from different treebanks and show the satisfactory results. However, the work to build a large scale treebank is laborious and tedious. Very few large-scale treebanks are currently available especially for languages other than English. In this paper, we propose a probabilistic chunker to help the development of a partially bracketed corpus, i.e., a simpler version of a treebank. The chunker partitions the part-of-speech sequence into segments called chunks. Rather than using a treebank as our training corpus, a corpus which is tagged with part-of-speech information only is used. In the following sections we first introduce the experimental framework of our model. Lancaster-Oslo/Bergen (LOB) Corpus and Susanne Corpus are adopted. Then a tag mapper and a probabilistic chunker are described. Before concluding the experimental results are demonstrated. Experimental Framework Because the probabilistic chunker proposed in this paper is based on syntactic tags (parts of speech), a part-of-speech tagger is needed. A word sequence W is input to the part-of-speech tagger and a part-of-speech sequence P is generated. The output of the tagger is the input of the chunker. The probabilistic chunker partitions P into C, i.e., a sequence of chunks. Each chunk contains one or more parts of speech. Consider the example \"Attorneys for the mayor said that an amicable property settlement has been agreed upon .\". This 15-word sentence is input to the part-of-speech tagger and a part-of-speech sequence \"NNS IN ATI NPT VBD CS AT JJ NN NN HVZ BEN VBN IN .\" is generated. The probabilistic chunker then partitions this sequence into several chunks. The chunked result is shown as follows. [ NNS] [ INATINPT ] [VBD] [CS] [AT] [ JJNNNN ] [ HVZ BEN ] [VBN] [IN][. ] However, the pei-formance evaluation of the chunker is a sticky work. To evaluate the performance of the chunker, Susanne Corpus, which is a modified and condensed version of Brown Corpus, is adopted. But, the tagging sets [6, 7] of LOB Corpus and Susanne Corpus are different. The latter has finer tags than the former. Thus, a tag mapper is introduced in the experimental framework shown as Figure 1 In our experiments, the test sentence Ps comes from Susanne Corpus. It is a part-of-speech sequence. The corresponding syntactic structure T is regarded as an evaluation criterion for the probabilistic chunker. It is sent to the performance evaluation model. The tag mapper in this figure is used to transform the Susanne part-of-speech into LOB part-of-speech. Through the tag mapper, Ps is converted into PI. Then, PI is input to the probabilistic chunker and a chunk sequence C is produced. Finally, the performance evaluation model reports the evaluation results according to C and T. A Tag Mapper The tagging set of Susanne Corpus is extended and modified from LOB Corpus. They have 424 and 153 tags, respectively. To map a Susanne tag into a LOB tag manually is a tedious work. Thus, an automatic tag mapping algorithm is provided. By our investigation, we found that words are good clues to relate these two tagging sets. Therefore, the first step in automatic tag mapping is to collect words from Susanne Corpus for each Susanne tag. Table 1 Those words which cannot be found in LOB Corpus are removed. Symbol * denotes that all the words cannot be found in LOB Corpus. The third step is to find the corresponding LOB tag for each Susanne tag. For each Susanne tag, the frequency of LOB tags is calculated and the most frequent LOB tag is regarded as the result. For example, LOB tags NN and NNS in row three of Table 2 appear three and one times, respectively. Thus, Susanne tag NNlux is mapped to LOB tag NN. After examining all the Susanne tags by these three steps, three cases have to be considered: (1) Unique Tag. Only one LOB tag remains. (2) Multiple Tags. More than one LOB tags remain. (3) No Match. When all the words extracted from Susanne Corpus for a Susanne tag cannot be found in LOB Corpus, the Susanne tag is mapped to \"No Match\". Some of these words are characteristic words such as YTL 1. The experimental results are shown in Table 3 . In Table 3 , \"Include\" denotes that the correct tag belongs to the remaining multiple tags and \" Exclude\" denotes that the correct tag is not mcluded in the remaining tags. Note that the ditto tags are not considered in this experiment. This is because the mapping for ditto tags can be obtained by human easily. Therefore, only 310 Susanne tags are resolved in this experiment. The experimental results show that the number of multiple tags is large. Thus, two heuristic rules are introduced to reduce the number of multiple tags. 1Tag YTL means \"begin italics/boldface\". First, those LOB tags which are similar to Susanne tag are selected. For example, Susanne tag NNJ2 can be mapped tO LOB tags NNS or VBZ in the above experiment. NNS has two common characters with NNJ2, so that Susanne tag NNJ2 is mapped to LOB tag NNS. Under this heuristic rule, the experimental results are showia m Table 4 . Next, let us consider an example. Susanne tag IW can be mapped to LOB tags IN or RI in the above experiment. Thus, the first heuristic rule has no effects. We examine the tag mapping for the preceding and subsequent three tags of 1W. They are listed as follows. ( LOB Tag AP. Note that only tags which have the same first character as IW are considered, that is,. only (-I), (-2) and (-3) are considered. In these three mappings, LOB tag IN is the most frequent and the only one mapping, and IN is a candidate for IW. Thus, Susanne tag IW is mapped to LOB tag IN. The above procedure forms the second heuristic rule. The experimental results after applying two heuristic rules are shown as follows. Three tags -say, FA, FB and GG, must be treated in particular. For example, Susanne Corpus tags genitive case noun as [John NP 's_GG], but LOB Corpus tags it as [John's_PN$]. Two Susanne tags may be mapped into One LOB tag. Ignoring these three special tags, only nineteen Susanne tags have wrong mapping in Uniq0e-Tag case. A Probabilistic Chunker Gale and Church, [8] propose d~ 2, a X2-1ike statistic, to measure the association between two words. Table 6 illustrates a twr-by-two contingency table for words w I and w 2. Table 6. A Contingency Table Word Based on this definition and ~2 measure, consider the sentence \"The Fulton County Grand Jury said Friday an investigation ...\", which has tag sequence \"ATI NP NPL JJ NN VBD NR AT NN ...\". Its syntactic structure for the first seven words is shown in Figure 2 . ATI NP I I The Fulton Figure 3 shows that there are four local minimal positions, i.e., positions 1, 3, 5 and 6. They can be regarded as the boundaries of chunks. That is, ATI and NP belong to different chunks. Similarly, (NPL and JJ), (NN and VND) and (VND and NR) have the same situation. Let us discuss these concepts formally. For a!probabilistic chunker, the generalized contingency table is defined as follows. It is clear that Definition 3 is the same as Definition 1. Based on Definitions 3, the probabilistic chunker is presented as follows. Note that N is the length of the tag sequence and the last chunk is always a one-tag chunk (punctuation). Figure 2. Probabilistic Chunker(A_Sequence Of Tags)  Based on Definitions 4, the probabilistic chunker is presented as follows. Probabilistic chunker based on Definition 3 concerns the dp 2 distribution between two parts of speech. For each while loop, probabilistic chunker based on Definition 4 processes three parts of speech and concerns the dp 2 distribution between them. Begin Right Chunk a = F([Pi],[pi+ 1, Pi+2]) b = F([Pi+l , Pi+2]) -F([Pi],[Pi+I, Pi+2]) c = F([Pi]) -F([Pi],[Pi+l, Pi+2]) d=N-a Probabilistic_Chunker(A_Sequence Experimental Results LOB Corpus, which is a million-word collection of present-day British English texts, is adopted as the source of training data. Susanne Corpus is adopted as the source of testing data for evaluating the performance of our probabilistic chunker. This corpus contains one tenth of Brown Corpus, but involves more syntactic and semantic information than Brown Corpus. For evaluating the performance, a criterion [2] , i.e., the content of each chunk should be dominated by one non-terminal node in Susanne parse field, is adopted. The performance evaluation model compares the chunked result C with the corresponding syntactic structure T. Accordmg to this criterion, the experimental results for Definitions 3 and 4 are shown in Table 7 One-tag chunks cover about 50%. We further analyze what grammatical components constitute the onetag chunks and find that most of the one-tag chunks contam punctuation marks, nouns and verbs. This is because proper name forms the bare subject or object. Verb is presented in the form of third person and singular, past tense, or base form. These three cases form about 62% of one-tag chunks. By analyzing the error chunked results, we find that many errors result from conjunctions. Besides, some tags cannot be located at the end of the chunks. Therefore, the heuristic rule is applied to improve the performance. The tags that cannot be located at the end of chunks are listed as follows: Applying this heuristic rule, the experimental results are listed in Table 10 . It shows the usefulness of the heuristic rulel The performance increases about 10%. Concluding Remarks To process real text is indispensable for a practical natural language system. Probabilistic method provides a robust way to tackle with the unrestricted text. This paper proposes a probabilistic chunker to help the development of a partially bracketed corpus. Rather than using a treebank as our training corpus, LOB Corpus which is tagged with part-of-speech information only is used. The experimental results show the probabilistic chunker has more than 92% correct rate in outside test. The well-formed partially bracketed corpus is a milestone in the development of a treebank. In addition, the simple but effective chunker can also be applied to many natural language applications such as extracting the predicate-argument structures [9, 10] , grouping words [11] and gathering collocation [12] . The evaluation criterion adopted in this paper is not very strict. Under a strict criterion, the method proposed in this paper may not be suitable for short-fat trees. That is, it is suitable for tall-thin trees. To solve this problem, a more general definition which considers more parts of speech in contingency table is needed. However, that introduces another problem: the more the general definitions we use, the larger the tagged corpus we need. This paper also presents a tag mapper. It sets up the mapping between different tagging sets. Such an algorithm facilitates the development of a large-scale tagged corpus from different sources. By the way, much more reliable statistic information can be trained from the large-scale tagged corpus, so that the feasibility of the chunker is assured. Besides the above problem, the critical points for local minimum are not obvious in some cases. Thus their determination is also demanded in the future. The experimental results demonstrate that Definition 4 (three parts of speech) is more powerful than Definition 3 (two parts of speech). Assume the chunk length is the number of tags in a chunk. The distribution of Chunk length is listed in Tables 8 and 9 .",
    "abstract": "Resea/ch based on a treebank is active for many natural language applications. However, the work to build a large scale treebank is laborious and tedious. This paper proposes a probabilistic chunker to help the development of a partially bracketed corpus. The chunker partitions the part-of-speech sequence into segments called chunks. Rather than using a treebank as our training corpus, a corpus which is tagged with part-of-speech information only is used. The experimental results show the probabilistic chunker has more than 92% correct rate in outside test. The well-formed partially bracketed corpus is a milestone in the development of a treebank. Besides, the simple but effective chunker can also be applied to many natural language applications.",
    "countries": [
        "Taiwan"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "6",
    "year": "1995",
    "month": "",
    "title": "Development of a Partially Bracketed Corpus with Part-of-Speech Information Only"
}