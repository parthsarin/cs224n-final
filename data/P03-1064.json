{
    "article": "Supertagging is the tagging process of assigning the correct elementary tree of LTAG, or the correct supertag, to each word of an input sentence 1 . In this paper we propose to use supertags to expose syntactic dependencies which are unavailable with POS tags. We first propose a novel method of applying Sparse Network of Winnow (SNoW) to sequential models. Then we use it to construct a supertagger that uses long distance syntactical dependencies, and the supertagger achieves an accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a8 \u00a7 \u00a9 . We apply the supertagger to NP chunking. The use of supertags in NP chunking gives rise to almost \u00a9 absolute increase (from \u00a2 \u00a4\u00a3 \u00a6\u00a5 to \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a2 \u00a4 ) in F-score under Transformation Based Learning(TBL) frame. The surpertagger described here provides an effective and efficient way to exploit syntactic information. Introduction In Lexicalized Tree-Adjoining Grammar (LTAG) (Joshi and Schabes, 1997; XTAG-Group, 2001) , each word in a sentence is associated with an elementary tree, or a supertag (Joshi and Srinivas, 1994) . Supertagging is the process of assigning the correct supertag to each word of an input sentence. The following two facts make supertagging attractive. Firstly supertags encode much more syntactical information than POS tags, which makes supertagging a useful pre-parsing tool, so-called, almost parsing (Srinivas and Joshi, 1999) . On the 1 By the correct supertag we mean the supertag that an LTAG parser would assign to a word in a sentence. other hand, as the term 'supertagging' suggests, the time complexity of supertagging is similar to that of POS tagging, which is linear in the length of the input sentence. In this paper, we will focus on the NP chunking task, and use it as an application of supertagging. (Abney, 1991) proposed a two-phase parsing model which includes chunking and attaching. (Ramshaw and Marcus, 1995) approached chucking by using Transformation Based Learning(TBL). Many machine learning techniques have been successfully applied to chunking tasks, such as Regularized Winnow (Zhang et al., 2001) , SVMs (Kudo and Matsumoto, 2001) , CRFs (Sha and Pereira, 2003) , Maximum Entropy Model (Collins, 2002) , Memory Based Learning (Sang, 2002) and SNoW (Mu\u00f1oz et al., 1999) . The previous best result on chunking in literature was achieved by Regularized Winnow (Zhang et al., 2001) , which took some of the parsing results given by an English Slot Grammar-based parser as input to the chunker. The use of parsing results contributed \u00a5 \u00a4\u00a3 absolute increase in F-score. However, this approach conflicts with the purpose of chunking. Ideally, a chunker geneates n-best results, and an attacher uses chunking results to construct a parse. The dilemma is that syntactic constraints are useful in the chunking phase, but they are unavailable until the attaching phase. The reason is that POS tags are not a good labeling system to encode enough linguistic knowledge for chunking. However another labeling system, supertagging, can provide a great deal of syntactic information. In an LTAG, each word is associated with a set of possible elementary trees. An LTAG parser assigns the correct elementary tree to each word of a sentence, and uses the elementary trees of all the words to build a parse tree for the sentence. Elementary trees, which we call supertags, contain more information than POS tags, and they help to improve the chunking accuracy. Although supertags are able to encode long distance dependence, supertaggers trained with local information in fact do not take full advantage of complex information available in supertags. In order to exploit syntactic dependencies in a larger context, we propose a new model of supertagging based on Sparse Network of Winnow (SNoW) (Roth, 1998) . We also propose a novel method of applying SNoW to sequential models in a way analogous to the Projection-base Markov Model (PMM) used in (Punyakanok and Roth, 2000) . In contrast to PMM, we construct a SNoW classifier for each POS tag. For each word of an input sentence, its POS tag, instead of the supertag of the previous word, is used to select the corresponding SNoW classifier. This method helps to avoid the sparse data problem and forces SNoW to focus on difficult cases in the context of supertagging task. Since PMM suffers from the label bias problem (Lafferty et al., 2001) , we have used two methods to cope with this problem. One method is to skip the local normalization step, and the other is to combine the results of left-to-right scan and right-to-left scan. We test our supertagger on both the hand-coded supertags used in (Chen et al., 1999) as well as the supertags extracted from Penn Treebank(PTB) (Marcus et al., 1994; Xia, 2001) . On the dataset used in (Chen et al., 1999) , our supertagger achieves an accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a8 \u00a7 \u00a9 . We then apply our supertagger to NP chunking. The purpose of this paper is to find a better way to exploit syntactic information which is useful in NP chunking, but not the machine learning part. So we just use TBL, a well-known algorithm in the community of text chunking, as the machine learning tool in our research. Using TBL also allows us to easily evaluate the contribution of supertags with respect to Ramshaw and Marcus's original work, the de facto baseline of NP chunking. The use of supertags with TBL can be easily extended to other machine learning algorithms. We repeat Ramshaw and Marcus' Transformation Based NP chunking (Ramshaw and Marcus, 1995) algorithm by substituting supertags for POS tags in the dataset. The use of supertags gives rise to almost \u00a9 absolute increase (from \u00a2 \u00a4\u00a3 \u00a6\u00a5 to \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a2 \u00a4 ) in Fscore under Transformation Based Learning(TBL) frame. This confirms our claim that using supertagging as a labeling system helps to increase the overall performance of NP Chunking. The supertagger presented in this paper provides an opportunity for advanced machine learning techniques to improve their performance on chunking tasks by exploiting more syntactic information encoded in the supertags. Supertagging and NP Chunking In (Srinivas, 1997) trigram models were used for supertagging, in which Good-Turing discounting technique and Katz's back-off model were employed. The supertag for a word was determined by the lexical preference of the word, as well as by the contextual preference of the previous two supertags. The model was tested on WSJ section 20 of PTB, and trained on section 0 through 24 except section 20. The accuracy on the test data is \u00a2 \u00a9 !\u00a5 \" \u00a4 2 . In (Srinivas, 1997) , supertagging was used for NP chunking and it achieved an F-score of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a8 \u00a7 # . (Chen, 2001 ) reported a similar result with a trigram supertagger. In their approaches, they first supertagged the test data and then uesd heuristic rules to detect NP chunks. But it is hard to say whether it is the use of supertags or the heuristic rules that makes their system achieve the good results. As a first attempt, we use fast TBL (Ngai and Florian, 2001) , a TBL program, to repeat Ramshaw and Marcus' experiment on the standard dataset. Then we use Srinivas' supertagger (Srinivas, 1997) to supertag both the training and test data. We run the fast TBL for the second round by using supertags instead of POS tags in the dataset. With POS tags we achieve an F-score of \u00a2 \u00a4\u00a3 \u00a6\u00a5 $\u00a9 , but with supertags we only achieve an F-score of \u00a2 \u00a9 !\u00a5 \u00a4 . This is not surprising becuase Srinivas' supertag was only trained with a trigram model. Although supertags are able to encode long distance dependence, supertaggers trained with local information in fact do not take full advantage of their strong capability. So we must use long distance dependencies to train supertaggers to take full advantage of the information in supertags. The trigram model often fails in capturing the cooccurrence dependence between a head word and its dependents. Consider the phrase \"will join the board as a nonexecutive director\". The occurrence of join has influence on the lexical selection of as. But join is outside the window of trigram. (Srinivas, 1997) proposed a head trigram model in which the lexical selection of a word depended on the supertags of the previous two head words , instead of the supertags of the two words immediately leading the word of interest. But the performance of this model was worse than the traditional trigram model because it discarded local information. (Chen et al., 1999) combined the traditional trigram model and head trigram model in their trigram mixed model. In their model, context for the current word was determined by the supertag of the previous word and context for the previous word according to 6 manually defined rules. The mixed model achieved an accuracy of \u00a2 \u00a9 !\u00a5 %\" !\u00a2 on the same dataset as that of (Srinivas, 1997) . In (Chen et al., 1999) , three other models were proposed, but the mixed model achieved the highest accuracy. In addition, they combined all their models with pairwise voting, yielding an accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 &\u00a9 '\u00a2 . The mixed trigram model achieves better results on supertagging because it can capture both local and long distance dependencies to some extent. However, we think that a better way to find useful context is to use machine learning techniques but not define the rules manually. One approach is to switch to models like PMM, which can not only take advantage of generative models with the Viterbi algorithm, but also utilize the information in a larger contexts through flexible feature sets. This is the basic idea guiding the design of our supertagger. SNoW Sparse Network of Winnow (SNoW) (Roth, 1998 ) is a learning architecture that is specially tailored for learning in the presence of a very large number of features where the decision for a single sample depends on only a small number of features. Furthermore, SNoW can also be used as a general purpose multi-class classifier. It is noted in (Mu\u00f1oz et al., 1999) that one of the important properites of the sparse architecture of SNoW is that the complexity of processing an example depends only on the number of features active in it, ( 0) , and is independent of the total number of features, ( 21 , observed over the life time of the system and this is important in domains in which the total number of features in very large, but only a small number of them is active in each example. As far as supertagging is concerned, word context forms a very large space. However, for each word in a given sentence, only a small part of features in the space are related to the decision on supertag. Specifically the supertag of a word is determined by the appearances of certain words, POS tags, or supertags in its context. Therefore SNoW is suitable for the supertagging task. Supertagging can be viewed in term of the sequential model, which means that the selection of the supertag for a word is influenced by the decisions made on the previous few words. (Punyakanok and Roth, 2000) proposed three methods of using classifiers in sequential inference, which are HMM, PMM and CSCL. Among these three models, PMM is the most suitable for our task. The basic idea of PMM is as follows. Given an observation sequence 3 , we find the most likely state sequence 4 given 3 by maximizing 5 76 4 98 \u00a83 A@ CB D E F 1 HG PI 5 76 RQ 1 S8 Q T 'U \u00a5 V\u00a5 V\u00a5 U SQ 1 XW T YU 3 `@ ba 5 cT Y6 RQ \u00a4T 8 d T @ B D E F 1 HG PI 5 76 RQ 1 S8 Q 1 XW T 'U d e1 f@ ba 5 gT e6 RQ T 8 d T @ (1) In this model, the output of SNoW is used to estimate 5 76 RQ 8 Q 'h iU d @ and 5 gT Y6 RQ 8 d @ , where Q is the current state, Q 'h is the previous state, and d is the current observation. 5 76 RQ 8 Q h U d @ is separated to many subfunctions 5 qp br f6 RQ 8 d \u00a4@ according to previous state Q h . In practice, 5 sp r 6 RQ 8 d @ is estimated in a wider window of the observed sequence, instead of d only. Then the problem is how to map the SNoW results into probabilities. In (Punyakanok and Roth, 2000) , the sigmoid \u00a9 t 6 \u00a9 cu wv W 2x y) S R1 XW $ P @ is defined as confidence, where is the threshold for SNoW, \u00a6 is the dot product of the weight vector and the example vector. The confidence is normalized by summing to 1 and used as the distribution mass 5 sp r 6 RQ 8 d @ . 4 Modeling Supertagging A Novel Sequential Model with SNoW Firstly we have to decide how to treat POS tags. One approach is to assign POS tags at the same time that we do supertagging. The other approach is to assign POS tags with a traditional POS tagger first, and then use them as input to the supertagger. Supertagging an unknown word becomes a problem for supertagging due to the huge size of the supertag set, Hence we use the second approach in our paper. We first run the Brill POS tagger (Brill, 1995) For each POS , we construct a SNoW classifier p qk to estimate distribution 5 lk !6 '8 h XU U `@ according to the previous supertags h . Following the estimation of distribution function in (Punyakanok and Roth, 2000) , we define confidence with a sigmoid r k !6 h8 h U U A@ gj \u00a9 \u00a9 u ts uv W 2x yv xw yx z1 { 1 r i| } ~| XW p U ( 3 ) where Q is the threshold of p qk , and s is set to 1. The distribution mass is then defined with normalized confidence 5 qk e6 '8 h U U `@ gj r k 6 '8 h iU U `@ 1 r k \u00a46 h8 h U U A@ (4) Label Bias Problem In (Lafferty et al., 2001) , it is shown that PMM and other non-generative finite-state models based on next-state classifiers share a weakness which they called the label bias problem: the transitions leaving a given state compete only against each other, rather than against all other transitions in the model. They proposed Conditional Random Fields (CRFs) as solution to this problem. (Collins, 2002) proposed a new algorithm for parameter estimation as an alternate to CRF. The new algorithm was similar to maximum-entropy model except that it skipped the local normalization step. Intuitively, it is the local normalization that makes distribution mass of the transitions leaving a given state incomparable with all other transitions. It is noted in (Mu\u00f1oz et al., 1999 ) that SNoW's output provides, in addition to the prediction, a robust confidence level in the prediction, which enables its use in an inference algorithm that combines predictors to produce a coherent inference. In that paper, SNoW's output is used to estimate the probability of open and close tags. In general, the probability of a tag can be estimated as follows 5 k 6 '8 h U U `@ cj p k !6 h8 h U U A@ Q 1 6 Rp qk \u00a46 h8 h U U A@ s Q @ U (5) as one of the anonymous reviewers has suggested. However, this makes probabilities comparable only within the transitions of the same history h . An alternative to this approach is to use the SNoW's output directly in the prediction combination, which makes transitions of different history comparable, since the SNoW's output provides a robust confidence level in the prediction. Furthermore, in order to make sure that the confidences are not too sharp, we use the confidence defined in (3). In addition, we use two supertaggers, one scans from left to right and the other scans from right to left. Then we combine the results via pairwise voting as in (van Halteren et al., 1998; Chen et al., 1999) as the final supertag. This approach of voting also helps to cope with the label bias problem. Contextual Model 5 qk e6 '8 h U U `@ is estimated within a 5-word window plus two head supertags before the current word. A basic feature is called active for word d if and only if the corresponding word/POS-tag/supertag appears at a specified place around d . For our SNoW classifiers we use unigram and bigram of basic features as our feature set. A feature defined as a bigram of two basic features is active if and only if the two basic features are both active. The value of a feature of d is set to 1 if this feature is active for d , or 0 otherwise. (Chen, 2001 ) implemented an MEMM model for supertagging which is analogous to the POS tagging model of (Ratnaparkhi, 1996) . The feature sets used in the MEMM model were similar to ours. In addition, prefix and suffix features were used to handle rare words. Several MEMM supertaggers were implemented based on distinct feature sets. Related Work In (Mu\u00f1oz et al., 1999) , SNoW was used for text chunking. The IOB tagging model in that paper was similar to our model for supertagging, but there are some differences. They did not decompose the SNoW classifier with respect to POS tags. They used two-level deterministic ( beam-width=1 ) search, in which the second level IOB classifier takes the IOB output of the first classifier as input features. Experimental Evaluation and Analysis In our experiments, we use the default settings of the SNoW promotion parameter, demotion parameter and the threshold value given by the SNoW system. We train our model on the training data for 2 rounds, only counting the features that appear for at least 5 times. We skip the normalization step in test, and we use beam search with the width of 5. In our first experiment, we use the same dataset as that of (Chen et al., 1999) for our experiments. We use WSJ section 00 through 24 expect section 20 as training data, and use section 20 as test data. Both training and test data are first tagged by Brill's POS tagger (Brill, 1995) . We use the same pairwise voting algorithm as in (Chen et al., 1999) . We run supertagging on the training data and use the supertagging result to generate the mapping table used in pairwise voting. The SNoW supertagger scanning from left to right achieves an accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a3 , and the one scanning from right to left achieves an accuracy of \u00a2 \u00a9 !\u00a5 \u00a8 \u00a7 . By combining the results of these two supertaggers with pairwise voting, we achieve an accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a8 \u00a7 \u00a9 , an error reduction of \u00a3 \u00a6\u00a5 &\u00a9 compared to \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a3 \u00a4 , the best supertagging result to date (Chen, 2001) . Table 1 shows the comparison with previous work. Our algorithm, which is coded in Java, takes about 10 minutes to supertag the test data with a P3 1.13GHz processor. However, in (Chen, 2001) , the accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a3 \u00a4 was achieved by a Viterbi search program that took about 5 days to supertag the test data. The counterpart of our algorithm in (Chen, 2001 ) is the beam search on Model 8 with width of 5, which is the same as the beam width in our algorithm. Compared with this program, our algorithm achieves an error reduction of \" #\u00a5 &\u00a9 . (Chen et al., 1999) achieved an accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 &\u00a9 '\u00a2 by combination of 5 distinct supertaggers. However, our result is achieved by combining outputs of two homogeneous supertaggers, which only differ in scan direction. Our next experiment is with the set of supertags abstracted from PTB with Fei Xia's LexTract (Xia, 2001) . Xia extracted an LTAG-style grammar from PTB, and repeated Srinivas' experiment (Srinivas, 1997) tary trees in Xia's grammar I , so that the supertags are more specialized and hence there is much more ambiguity in supertagging. We have experimented with our model on I and her dataset. We train our left-to-right model on WSJ section 02 through 21 of PTB, and test on section 22 and 23. We achieve an average error reduction of \u00a9 ' \u00a6\u00a5 . The reason why the accuracy is rather low is that systems using I have to cope with much more ambiguities due the large size of the supertag set. The results are shown in Table 2 . We test on both normalized and unnormalized models with both hand coded supertag set and autoextracted supertag set. We use the left-to-right SNoW model in these experiments. The results in Table 3 show that skipping the local normalization improves performance in all the systems. The effect of skipping normalization is more significant on auto-extracted tags. We think this is because sparse The first field is the word, the second is the supertag of the word, and the last is the IOB tag. We first use the fast TBL (Ngai and Florian, 2001) , a Transformation Based Learning algorithm, to repeat Ramshaw and Marcus' experiment, and then apply the same program to our new dataset. Since section 15-18 and section 20 are in the standard data set of NP chunking, we need to avoid using these sections as training data for our supertagger. We have trained another supertagger that is trained on 776K words in WSJ section 02-14 and 21-24, and it is tuned with 44K words in WSJ section 19. We use this supertagger to supertag section 15-18 and section 20. We train an NP Chunker on section 15-18 with fast TBL, and test it on section 20. There is a small problem with the supertag set that we have been using, as far as NP chunking is concerned. Two words with different POS tags may be tagged with the same supertag. For example both determiner (DT) and number (CD) can be tagged with B Dnx. However this will be harmful in the case 4 . The system using augmented supertags achieves an F-score of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a2 \u00a4 , or an error reduction of \u00a9 \u00a4\u00a9 !\u00a5 below the baseline of using Brill POS tags. Although these two systems are both trained with the same TBL algorithm, we implicitly employ more linguistic knowledge as the learning bias when we train the learning machine with supertags. Supertags encode more syntactical information than POS tag do. For example, in the sentence Three leading drug companies ..., the POS tag of Rv ( P is VBG, or present participle. Based on the local context of Rv ' ( P , Three can be the subject of leading. However, the supertag of leading is B An, which represents a modifier of a noun. With this extra information, the chunker can easily solve the ambiguity. We find many instances like this in the test data. It is important to note that the accuracy of supertag itself is much lower than that of POS tag while the use of supertags helps to improve the overall performance. On the other hand, since the accuracy of supertagging is rather lower, there is more room left for improving. If we use gold standard POS tags in the previous experiment, we can only achieve an F-score of \u00a2 \u00a4 \u00a6\u00a5 e \u00a7 # . However, if we use gold standard supertags in our previous experiment, the F-score is as high as \u00a2 \u00a4 \u00a6\u00a5 &\u00a9 ' . This tells us how much room there is for further improvements. Improvements in supertagging may give rise to further improvements in chunking. Conclusions We have proposed the use of supertags in the NP chunking task in order to use more syntactical dependencies which are unavailable with POS tags. In order to train a supertagger with a larger context, we have proposed a novel method of applying SNoW to the sequential model and have applied it to supertagging. Our algorithm takes advantage of rich feature sets, avoids the sparse-data problem, and forces the learning algorithm to focus on the difficult cases. Being aware of the fact that our algorithm may suffer from the label bias problem, we have used two methods to cope with this problem, and achieved desirable results. We have tested our algorithms on both the handcoded tag set used in (Chen et al., 1999) and supertags extracted for Penn Treebank(PTB). On the same dataset as that of (Chen et al., 1999) , our new supertagger achieves an accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a8 \u00a7 \u00a9 . Compared with the supertaggers with the same decoding complexity (Chen, 2001) , our algorithm achieves an error reduction of \" #\u00a5 &\u00a9 . We repeat Ramshaw and Marcus' Transformation Based NP chunking (Ramshaw and Marcus, 1995) test by substituting supertags for POS tags in the dataset. The use of supertags in NP chunking gives rise to almost \u00a9 absolute increase (from \u00a2 \u00a4\u00a3 \u00a6\u00a5 to \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a2 \u00a4 ) in F-score under Transformation Based Learning(TBL) frame, or an error reduction of \u00a9 \u00a4\u00a9 !\u00a5 . The accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a2 \u00a4 with our individual TBL chunker is close to results of POS-tag-based systems using advanced machine learning algorithms, such as \u00a2 \u00a4 \u00a6\u00a5 e \u00a7 # by voted MBL chunkers (Sang, 2002) , \u00a2 \u00a4\u00a3 \u00a6\u00a5 by SNoW chunker (Mu\u00f1oz et al., 1999) . The benefit of using a supertagger is obvious. The supertagger provides an opportunity for advanced machine learning techniques to improve their performance on chunking tasks by exploiting more syntactic information encoded in the supertags. To sum up, the supertagging algorithm presented here provides an effective and efficient way to employ syntactic information. Acknowledgments We thank Vasin Punyakanok for help on the use of SNoW in sequential inference, John Chen for help on dataset and evaluation methods and comments on the draft. We also thank Srinivas Bangalore and three anonymous reviews for helpful comments.",
    "abstract": "Supertagging is the tagging process of assigning the correct elementary tree of LTAG, or the correct supertag, to each word of an input sentence 1 . In this paper we propose to use supertags to expose syntactic dependencies which are unavailable with POS tags. We first propose a novel method of applying Sparse Network of Winnow (SNoW) to sequential models. Then we use it to construct a supertagger that uses long distance syntactical dependencies, and the supertagger achieves an accuracy of \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a8 \u00a7 \u00a9 . We apply the supertagger to NP chunking. The use of supertags in NP chunking gives rise to almost \u00a9 absolute increase (from \u00a2 \u00a4\u00a3 \u00a6\u00a5 to \u00a2 \u00a4\u00a3 \u00a6\u00a5 \u00a2 \u00a4 ) in F-score under Transformation Based Learning(TBL) frame. The surpertagger described here provides an effective and efficient way to exploit syntactic information.",
    "countries": [
        "United States"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "20",
    "year": "2003",
    "month": "July",
    "title": "A {SN}o{W} Based Supertagger with Application to {NP} Chunking"
}