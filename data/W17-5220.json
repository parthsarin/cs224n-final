{
    "article": "With the advent of word embeddings, lexicons are no longer fully utilized for sentiment analysis although they still provide important features in the traditional setting. This paper introduces a novel approach to sentiment analysis that integrates lexicon embeddings and an attention mechanism into Convolutional Neural Networks. Our approach performs separate convolutions for word and lexicon embeddings and provides a global view of the document using attention. Our models are experimented on both the SemEval'16 Task 4 dataset and the Stanford Sentiment Treebank and show comparative or better results against the existing state-of-the-art systems. Our analysis shows that lexicon embeddings allow building high-performing models with much smaller word embeddings, and the attention mechanism effectively dims out noisy words for sentiment analysis. Introduction Sentiment analysis is a task of identifying sentiment polarities expressed in documents, typically positive, neutral, or negative. Although the task of sentiment analysis has been well-explored (Mullen and Collier, 2004; Pang and Lee, 2005; Wilson et al., 2005) , it is still very challenging due to the complexity of extracting human emotion from raw text. The recent advance of deep learning has definitely elevated the performance of this task (Socher et al., 2013; Kim, 2014; Yin and Sch\u00fctze, 2015) although there is much more room to improve. In the traditional setting where statistical models are based on sparse features, lexicons consisting of words and their sentiment scores are shown to be highly effective for sentiment analysis because they provide features that may not be captured from training data (Hu and Liu, 2004; Kim and Hovy, 2004; Ding et al., 2008; Taboada et al., 2011) . However, since the appearance of word embeddings, the use of lexicons is getting faded away because word embeddings are believed to capture the sentiment aspects of those words. This brought us two important questions: \u2022 Can lexicons be still useful for sentiment analysis when coupled with word embeddings? \u2022 If yes, what is the most effective way of incorporating lexicons with word embeddings? To answer these questions, we first construct lexicon embeddings that are specifically designed for sentiment analysis and integrate them into the existing Convolutional Neural Network (CNN) model similar to Kim (2014) . Three ways of lexicon integration to the CNN model are proposed, which show distinctive characteristics for different genres (Section 3.2). We then incorporate an efficient attention mechanism to our CNN models, which provides a global view of the document by emphasizing (or de-emphasizing) important words and lexicons (Section 3.3). Our models using lexicon embeddings are evaluated on two well-known datasets, the SemEval'16 dataset and the Stanford Sentiment Treebank, and show state-of-the-art results on both datasets (Section 4). To the best of our knowledge, this is the first time that lexicon embeddings are introduced for sentiment analysis. Related Work The first attempt of sentiment analysis on text was initiated by Pang et al. (2002) who pioneered this field by using bag-of-word features. This work mostly hinged on feature engineering; since then, many kinds of feature learning methods had been introduced to increase the performance (Pang and Lee, 2008; Liu, 2012; Gimpel et al., 2011; Feldman, 2013; Mohammad et al., 2013b) . Aside from pure machine learning approaches, lexicon based approaches had been another trend, which relied on the manual or algorithmic creation of word sentiment scores (Hu and Liu, 2004; Kim and Hovy, 2004; Ding et al., 2008; Taboada et al., 2011) . Since the emergence of the Convolutional Neural Networks (CNN; Collobert et al. (2011) ), conventional methods have become gradually obsolete because of the outstanding performance from the CNN variants. CNN based models are distinguished from earlier methods because they do not rely on laborious feature engineering. The first success of CNN in sentiment analysis was triggered by document classification research (Kim, 2014) , where CNN showed state-of-the-art results in numerous document classification datasets. This success has engendered an upsurge in deep neural network research for sentiment analysis. Various modified models have been proposed in the literature. One of the famous deep learning methods that models a document is the generalized phrase proposed by Yin and Sch\u00fctze (2014) , which represents a sentence using element-wise addition, multiplication, or recursive auto-encoder. Endeavors to capture n-gram information bore fruits with CNN, max pooling, and softmax (Collobert et al., 2011; Kim, 2014) , which is regarded as the standard methods of the document classification problem these days. Kalchbrenner et al. (2014a) extended this standard CNN model with dynamic k-max pooling, which served as an input layer to another stacked convolution layer. Multichannel CNN methods (Kim, 2014; Yin and Sch\u00fctze, 2015) are another branch of CNN, where assorted embeddings are considered together when convolving the input. Unlike Kim (2014) 's model that relies on a single type of embedding with different mutability characteristics of the weights of embedding layer, Yin and Sch\u00fctze (2015) incorporates diverse sort of embedding types using multichannel CNN. Two notable pioneers in using lexicon for sentiment analysis are Mohammad et al. (2013a) ; Kalchbrenner et al. (2014b) generated scores with other manually generated sentiment lexicon scores to achieved the state-of-the-art result in SemEval-2013 Twitter sentiment analysis task. In general domain, Hu and Liu (2004) generated a user review lexicon that showed promising result in capturing sentiment in customer product reviews. Attention based methods have been successful in many application domains, such as image classification (Stollenga et al., 2014) , image caption generation (Xu et al., 2015) , machine translation (Cho et al., 2014; Bahdanau et al., 2014; Luong et al., 2015) , and question answering (Shih et al., 2016; Chen et al., 2015; Yang et al., 2016) . However, in the field of sentiment analysis, the attention is applied to only aspect-based sentiment classification (Yanase et al., 2016) . To the best knowledge of ours, there is no attention-based model for a general sentiment analysis task. Approach The models proposed here are based on a convolutional architecture and use naive concatenation (Section 3.2.1), multichannel (Section 3.2.2), separate convolution (Section 3.2.3), and embedding attention (Section 3.3) for the integration of lexicon embeddings to CNN. Baseline Our baseline approach is a one-layer CNN model using pre-trained word embeddings, which is a reimplementation of the CNN model introduced by Kim (2014) . Let s \u2208 R n\u00d7d be a matrix representing the input document, where n is the number of words, d is the dimension of the word embeddings, and each row corresponds to the word embedding, w i \u2208 R d , where w i indicates the i'th word in the document. This document matrix s is fed into the convolutional layer and convolved by the weights c \u2208 R l\u00d7d , where l is the length of the filter. The convolutional layer can take m-number of filters of the length l. Each convolution produces a vector v c \u2208 R n\u2212l+1 , where elements in v c convey the l-gram features across the document. The max pooling layer selects the most salient features from each of the m vectors produced by the filters. As a result, the output of this max pooling layer is a vector v m \u2208 R (n\u2212l+1)\u00d7m . The selected features are passed onto the softmax layer, which is optimized for the score of each sentiment class label. Lexicon Integration Lexicon embeddings are derived by taking scores from multiple sources of lexicon datasets. Each lexicon dataset consists of key-value pairs, where the key is a word and the value is a list of sentiment scores for that word (e.g., probabilities of the word in positive, neutral, and negative contexts). These scores range between \u22121 and 1, where \u22121 and 1 being the most negative and positive, respectively. However, some lexicons contain non-probabilistic scores (e.g., frequency counts of the word in sentimental contexts), which are normalized to [\u22121, 1].  For each word w \u2208 W , where W is the union of all words in the lexicon datasets, a lexicon embedding is constructed by concatenating all the scores among the datasets with respect to w. If w does not appear in certain datasets, 0 values are assigned in place. The resulting embedding is in the form of a vector v \u2208 R e , where e is the total number of scores across all lexicon datasets. The following subsections propose three methods for lexicon integration to the baseline CNN model (Section 3.1), which depict different characteristics depending on the peculiarities of each domain. Naive Concatenation The simplest way of blending a lexicon embedding into its corresponding word embedding is to append it to the end of the word embedding (Figure 1(a) ). In a formal notation, the document matrix becomes s \u2208 R n\u00d7(d+e) . The subsequent process is the same as the baseline approach. Multichannel Inspired by Yin and Sch\u00fctze (2015) who integrated several kinds of word embeddings using multichannel CNN, lexicon embeddings in this approach are represented in another channel along with the word embedding channel where both channels are convolved together (Figure 1(b) ). Since the dimension of lexicon embeddings is considerably smaller than that of word embeddings (i.e., d e), zeros are padded to the lexicon embeddings so their dimensions match (i.e., d = e). The identical shape of these two channels allows multichannel convolution to the input document. Separate Convolution Another way of adding lexicon embeddings to the CNN model is to process a separate convolution for them (Figure 1(c) ). In this case, two individual convolutions are applied to word embeddings and lexicon embeddings. The max pooled output features from each convolution are then merged together to form an input vector to the softmax layer. Formally, let l w , l x be the filter lengths for word embeddings and lexicon embeddings, respectively. Let m w and m x be the numbers of filters for word embeddings and lexicon embeddings, respectively. The resulting penultimate layer includes max pooled features from word embeddings and lexicon embeddings of size [(n \u2212 l w + 1) \u00d7 m w ] + [(n \u2212 l x + 1) \u00d7 m x ]. Embedding Attention Section 3.2 describes how lexicon embeddings can be incorporated into the CNN model in Section 3.1. Each CNN model uses several filters with different lengths; given the filter length l, the convolution considers l-gram features. However, these l-gram features account only for local views, not the global view of the document, which is necessary for several transitional cases such as negation in sentiment analysis (Socher et al., 2012) . To ameliorate this issue, we introduce the embedding attention vector (EAV), which transforms the document matrix in each embedding space into a vector. For example, the EAV in the word embedding space is calculated as a weighted sum of each column in the document matrix s \u2208 R n\u00d7d , which yields a vector v \u2208 R d . For each document, two EAVs can be derived, one from the document matrix consisting of word embeddings and the other from the one consisting of lexicon embeddings. All embeddings in the document matrix are used to create the EAV through multiple convolutions and max pooling as follows: 1. Apply m-number of convolutions with the filter length 1 to the document matrix s \u2208 R n\u00d7d . For lexicon embeddings, the document matrix has a dimension of R n\u00d7e . 2. Aggregate all convolution outputs to form an attention matrix s a \u2208 R n\u00d7m , where n is the number of words in the document, and m is the number of filters whose length is 1. 3. Execute max pooling for each row of the attention matrix s a , which generates the attention vector v a \u2208 R n (Figure 2 The resulting EAVs are appended to the penultimate layer to serve as additional information for the softmax layer. For our experiments, EAVs are generated from both word and lexicon embedding spaces for all of the three lexicon integration methods in Section 3.2.   3 The word embeddings are trained by the original implementation of word2vec from Google using skip-gram and negative sampling. 4 No explicit hyper-parameter tuning is performed. For each genre, four sets of embeddings with different dimensions (50, 100, 200, 400 ) are trained to observe the impact of the embedding size on each approach. Lexicon Embeddings Six types of sentiment lexicons are used to build lexicon embeddings. All lexicons include sentiment scores; some lexicons contain information about the frequency of positive and negative sentiment polarity associated with each word: \u2022 National Research Council Canada (NRC) Hashtag Affirmative and Negated Context Sentiment Lexicon (Kiritchenko et al., 2014) . \u2022 NRC Hashtag Sentiment Lexicon (Mohammad et al., 2013a) . \u2022 NRC Sentiment140 Lexicon (Kiritchenko et al., 2014) . \u2022 Sentiment140 Lexicon (Mohammad et al., 2013a) . \u2022 MaxDiff Twitter Sentiment Lexicon (Kiritchenko et al., 2014) . \u2022 Bing Liu Opinion Lexicon (Hu and Liu, 2004) . When creating lexicon embeddings, the narrow coverage of vocabulary in lexicons often raises missing scores. If a given word is missing in a specific lexicon, neutral scores of 0 are substituted. Table 3 : The percentage of word types covered by our word and lexicon embeddings for each dataset. Evaluation Seven models are evaluated to show the effectiveness of lexicon embeddings to sentiment analysis: baseline (Section 3.1), naive concatenation (NC; Section 3.2.1), multichannel (MC; Section 3.2.2), separate convolution (SC; Section 3.2.3), and the three integration approaches with embedding attention ( * -EAV; Section 3.3). The comparisons of our proposed models to the previous state-of-the-art approaches are outlined in Table 4 . For all experiments, the fixed random seed of 1 is used to avoid performance boost from different randomness (see Section 4.4.1 for more discussions). The following configuration are used for all models: \u2022 Filter size = (2, 3, 4, 5) for both word and lexicon embeddings. \u2022 Number of filters = (64 and 9) for word and lexicon embeddings, respectively. \u2022 Number of filters = (50 and 20) for constructing embedding attention vectors in word and lexicon embedding spaces, respectively. It is worth mentioning that the performance of our baseline models improved quite a bit when the training corpora for word embeddings and sentiment analysis were tokenized coherently. Unlike several other work, we used the identical tokenization tool, NLP4J, to preprocess all corpora, which gave considerable boost in performance. Comparing the baseline to SC, lexicon embeddings significantly improved accuracy for S16, about 2%, surpassing the previous state-of-the-art result achieved by Deriu et al. (2016) . However, SC did not show much improvement for SST where the baseline was already performing well.  Comparing these lexicon integrated models with the ones with embedding attention vectors ( * -EAV), EAV did not help much for S16 but significantly improved the performance for SST, achieving the state-of-the-art result of 48.8% for a single-layer CNN model. The accuracy achieved by our best model is still 0.8% lower than the state-of-the-art result achieved by Yin and Sch\u00fctze (2015) ; however, considering their model uses five embedding channels and dual-layer convolutions whereas our model uses a single channel and a single-layer convolution, in other words, our model is much more compact, this is very promising. These results suggest that lexicon embeddings coupled with the embedding attention vectors allow to build robust sentiment analysis models. Figure 3 illustrates the robustness of our lexicon integrated models with respect to the size of word embeddings. Our baseline produces inconsistent and unstable results as different sizes of word embeddings are used. Furthermore, a larger size of word embeddings tends to significantly outperform a smaller size of word embeddings. Such tendency is reduced with the incorporation of lexicon embeddings. While the standard deviations for the accuracies achieved by the baseline using different sizes of word embeddings are 0.8491 and 1.1909 for S16 and SST, respectively, they are reduced to 0.4208 and 0.5764 respectively for lexicon integrated models. Furthermore, the accuracy achieved by the lexicon integrated model using the word embedding size 50 is higher or equal to the highest accuracy achieved by the baseline using the word embedding size 200, which implies that it is possible to build more compact models using lexicon embeddings without compromising accuracy.    For S16, the lexicon integration tends to reduce the variances, and the introducing embedding attention vectors pushes the accuracy even higher than the models without it across different random seeds. Another notable observation for S16 is that although multichannel method underperforms when the random seed is fixed to a specific number as seen in Table 4 , it produces a competitive output in the group analysis setting. Such low performance with a fixed random seed is probably attributed to the well known problem of optimization, trapping in local optima. SST: Stanford Sentiment Treebank The problem conditions for SST are different in terms of vocabulary coverage. This difference is caused by the source of the lexicon embeddings, where all of them were constructed from Twitter dataset. Since most of the lexical words are from Twitter, it shows less vocabulary coverage on SST than that of S16 as shown in the right columns of Table 3 . Because of this poor relatedness between lexicons and datasets, we hypothesized that adding a lexicon might be less effective on the performance of SST task. However, our models seems to successfully adopt exogenous features enough to push the accuracy marginally higher than the models without lexicons. On the contrary, the coverage of word embeddings on SST is notably high at around 98%, while only around 70% for S16 (left columns of Table 3 ). These conditions are well reflected in the group analysis of the model in SST. Since word embeddings themselves are sufficient enough to cover majority of words, the model variance of the baseline is relatively small compared to S16. Attention Embedding attention vectors allow to visualize the importance of each word and lexicon for sentiment analysis through a heatmap. In Figure 5 , all negative words get higher weights (reds), while nonsentimental words do not (greens and light blues) in EAV. This visualization is especially useful for neural models because it provides an compelling explanatory information about how the models work. Learning Speed Another advantage of the proposed model, SC-EAV, is that it accelerates the learning speed (Figure 6 ). High F1 score can be achieved in the earlier step, Conclusion This paper proposes several approaches that effectively integrate lexicon embeddings and an attention mechanism to a well-explored deep learning framework, Convolutional Neural Networks, for sentiment analysis. Our experiments show that lexicon integration can improve accuracy, stability, and efficiency of the traditional CNN model. Multiple training results with different random seeds show the generalization of the effectiveness of using lexicon embeddings and embedding attention vectors. The training curve comparison further shows another benefit of this integration for more robust learning. The attention heatmap analysis confirms that embedding attention vectors endow CNN models with explanatory features, which gives good understanding of how the CNN models work. Much more future work is left. The proposed attention models are applied to each single word. However, focusing on multiple words could give more promising information. Application of the attention mechanism to multiple words at the same time is a possible direction. Majority of the lexicons in this work are from tweet dataset. More lexicon dataset from general could be used to improve the coverage of our system. We focused on a simple and yet well performing system. In order to maximize the score, ensemble of multi layer CNN models could be applied. 5 Acknowledgments We gratefully acknowledge the support of the University Research Committee Grant (URC) from Emory University, and the Infosys Research Enhancement Grant. Any contents expressed in this material are those of the authors and do not necessarily reflect the views of these awards and grants. Special thanks are due to Jung-Hyun Kang for producing the wonderful figures.",
    "abstract": "With the advent of word embeddings, lexicons are no longer fully utilized for sentiment analysis although they still provide important features in the traditional setting. This paper introduces a novel approach to sentiment analysis that integrates lexicon embeddings and an attention mechanism into Convolutional Neural Networks. Our approach performs separate convolutions for word and lexicon embeddings and provides a global view of the document using attention. Our models are experimented on both the SemEval'16 Task 4 dataset and the Stanford Sentiment Treebank and show comparative or better results against the existing state-of-the-art systems. Our analysis shows that lexicon embeddings allow building high-performing models with much smaller word embeddings, and the attention mechanism effectively dims out noisy words for sentiment analysis.",
    "countries": [
        "United States"
    ],
    "languages": [
        "Ding"
    ],
    "numcitedby": "90",
    "year": "2017",
    "month": "September",
    "title": "Lexicon Integrated {CNN} Models with Attention for Sentiment Analysis"
}