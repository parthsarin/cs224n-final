{
    "article": "This work explores methods of automatically detecting corrections of individual mistakes in sentence revisions for ESL students. We have trained a classifier that specializes in determining whether consecutive basic-edits (word insertions, deletions, substitutions) address the same mistake. Experimental result shows that the proposed system achieves an F 1 -score of 81% on correction detection and 66% for the overall system, out-performing the baseline by a large margin. Introduction Quality feedback from language tutors can help English-as-a-Second-Language (ESL) students improve their writing skills. One of the tutors' tasks is to isolate writing mistakes within sentences, and point out (1) why each case is considered a mistake, and (2) how each mistake should be corrected. Because this is time consuming, tutors often just rewrite the sentences without giving any explanations (Fregeau, 1999) . Due to the effort involved in comparing revisions with the original texts, students often fail to learn from these revisions (Williams, 2003) . Computer aided language learning tools offer a solution for providing more detailed feedback. Programs can be developed to compare the student's original sentences with the tutor-revised sentences. Swanson and Yamangil (2012) have proposed a promising framework for this purpose. Their approach has two components: one to detect individual corrections within a revision, which they termed correction detection; another to determine what the correction fixes, which they termed error type selection. Although they reported a high accuracy for the error type selection classifier alone, the bottleneck of their system is the other component -correction detection. An analysis of their system shows that approximately 70% of the system's mistakes are caused by mis-detections in the first place. Their correction detection algorithm relies on a set of heuristics developed from one single data collection (the FCE corpus (Yannakoudakis et al., 2011) ). When determining whether a set of basic-edits (word insertions, deletions, substitutions) contributes to the same correction, these heuristics lack the flexibility to adapt to a specific context. Furthermore, it is not clear if the heuristics will work as well for tutors trained to mark up revisions under different guidelines. We propose to improve upon the correction detection component by training a classifier that determines which edits in a revised sentence address the same error in the original sentence. The classifier can make more accurate decisions adjusted to contexts. Because the classifier were trained on revisions where corrections are explicitly marked by English experts, it is also possible to build systems adjusted to different annotation standards. The contributions of this paper are: (1) We show empirically that a major challenge in correction detection is to determine the number of edits that address the same error. (2) We have developed a merging model that reduces mis-detection by 1/3, leading to significant improvement in the accuracies of combined correction detection and error type selection. (3) We have conducted experiments across multiple corpora, indicating that the proposed merging model is generalizable. Correction Detection Comparing a student-written sentence with its revision, we observe that each correction can be decomposed into a set of more basic edits such as word insertions, word deletions and word substitutions. In the example shown in Figure 1 , the correction \"to change \u21d2 changing\" is composed of a deletion of to and a substitution from change with its revision, so that each correction addresses one error. Each polygon corresponds to one correction; the labels are codes of the error types. The codes follow the annotation standard in FCE corpus (Nicholls, 2003) . In this example, W is incorrect Word order; UT is Unnecessary preposiTion; FV is wrong Verb Form; RN is Nnoun needs to be Replaced; ID is IDiom error. Figure 3 : Basic edits extracted by the edit-distance algorithm (Levenshtein, 1966) do not necessarily match our linguistic intuition. The ideal basic-edits are shown in Figure 3a , but since the algorithm only cares about minimizing the number of edits, it may end up extracting basic-edits shown in Figure 3b . to changing; the correction \"moment \u21d2 minute\" is itself a single word substitution. Thus, we can build systems to detect corrections which operates in two steps: (1) detecting the basic edits that took place during the revision, and (2) merging those basic edits that address the same error. Figure 2 illustrates the process for a fragment of the example sentence from Figure 1 . In practice, however, this two-step approach may result in mis-detections due to ambiguities. Mis-detections may be introduced from either steps. While detecting basic edits, Figures 3 gives an example of problems that might arise. Because the Levenshtein algorithm only tries to minimize the number of edits, it does not care whether the edits make any linguistic sense. For merging basic edits, Swanson and Yamangil applied a distance heuristic -basic-edits that are close to each other (e.g. basic edits with at most one word lying in between) are merged. Figure 4 shows cases for which the heuristic results in the wrong scope. These errors caused their system to mis-detect 30% of the corrections. Since mis-detected corrections cannot be analyzed down the pipeline,  the correction detection component became the bottle-neck of their overall system. Out of the 42% corrections that are incorrectly analyzed 1 , 30%/42%\u224870% are caused by mis-detections in the first place. An improvement in correction detection may increase the system accuracy overall. We conducted an error analysis to attribute errors to either step when the system detects a wrong set of corrections for a sentence. We examine the first step's output. If the resulting basic edits do not match with those that compose the actual corrections, we attribute the error to the first step. Otherwise, we attribute the error to the second step. Our analysis confirms that the merging step is the bottleneck in the current correction detection system -it accounts for 75% of the misdetections. Therefore, to effectively reduce the algorithm's mis-detection errors, we propose to build a classifier to merge with better accuracies. Other previous tasks also involve comparing two sentences. Unlike evaluating grammar error correction systems (Dahlmeier and Ng, 2012) , correction detection cannot refer to a gold standard. Our error analysis above also highlights our task's difference with previous work that identify corresponding phrases between two sentences, including phrase extraction (Koehn et al., 2003) and paraphrase extraction (Cohn et al., 2008) . They are fundamentally different in that the granularity of the extracted phrase pairs is a major concern in our work -we need to guarantee each detected phrase pair to address exactly one writing problem. In comparison, phrase extraction systems aim to improve the end-to-end MT or paraphrasing systems. A bigger concern is to guarantee the extracted phrase pairs are indeed translations or paraphrases. Recent work therefore focuses on identifying the alignment/edits between two sentences (Snover et al., 2009; Heilman and Smith, 2010) . A Classifier for Merging Basic-Edits Figures 4 highlights the problems with indiscriminantly merging basic-edits that are adjacent. Intuitively, it seems that the decision should be more context dependent. Certain patterns may indicate that two adjacent basic-edits are a part of the same correction while others may indicate that they each address a different problem. For example, in Figure 5a , when the insertion of one word is followed by the deletion of the same word, the insertion and deletion are likely addressing one single error. This is because these two edits would combine together as a word-order change. On the other hand, in Figure 5b , if one edit includes a substitution between words with the same POS's, then it is likely fixing a word choice error by itself. In this case, it should not be merged with other edits. To predict whether two basic-edits address the same writing problem more discriminatively, we train a Maximum Entropy binary classifier based on features extracted from relevant contexts for the basic edits. We use features in Table 1 in the proposed classifier. We design the features to indicate: (A) whether merging the two basic-edits matches the pattern for a common correction. (B) whether one basic-edit addresses one single error. We train the classifier using samples extracted from revisions where individual corrections are explicitly annotated. We first extract the basic-  goal is to train classifiers to tell if two basic edits should be merged (True or False). We break each correction (outer polygons, also colored in red) in the training corpus into a set of basic edits (black polygons). We construct an instance for each consecutive pair of basic edits. If two basic edits were extracted from the same correction, we will mark the outcome as True, otherwise we will mark the outcome as False. edits that compose each correction. We then create a training instance for each pair of two consecutive basic edits: if two consecutive basic edits need to be merged, we will mark the outcome as True, otherwise it is False. We illustrate this in Figure 6 . Experimental Setup We combine Levenshtein algorithm with different merging algorithms for correction detection. Dataset An ideal data resource would be a real-world collection of student essays and their revisions (Tajiri et al., 2012) . However, existing revision corpora do not have the fine-grained annotations necessary for our experimental gold standard. We instead use error annotated data, in which the corrections were provided by human experts. We simulate the revisions by applying corrections onto the original sentence. The teachers' annotations are treated as gold standard for the detailed corrections. We considered four corpora with different ESL populations and annotation standards, including FCE corpus (Yannakoudakis et al., 2011) , NU-CLE corpus (Dahlmeier et al., 2013) , UIUC corpus 2 (Rozovskaya and Roth, 2010) and HOO2011 corpus (Dale and Kilgarriff, 2011) . These corpora all provide experts' corrections along with error Type name description A gap-between-edits Gap between the two edits. In particular, we use the number of words between the two edits' original words, as well as the revised words. Note that Swanson and Yamangil's approach is a special case that only considers if the basic-edits have zero gap in both sentences. tense-change We detect patterns such as: if the original-revision pair matches the pattern \"V-ing\u21d2to V\". word-order-error Whether the basic-edits' original word set and the revised word set are the same (one or zero). same-word-set If the original sentence and the revised sentence have the same word set, then it's likely that all the edits are fixing the word order error. revised-to The phrase comprised of the two revised words. B editdistance=1 If one basic-edit is a substitution, and the original/revised word only has 1 edit distance, it indicates that the basic-edit is fixing a misspelling error. not-in-dict If the original word does not have a valid dictionary entry, then it indicates a misspelling error. word-choice If the original and the revised words have the same POS, then it is likely fixing a word choice error. preposition-error Whether the original and the revised words are both prepositions.  type mark-ups. The basic statistics of the corpora are shown in Table 2 . In these corpora, around half of revised sentences contains multiple corrections. We have split each corpus into 11 equal parts. One part is used as the development dataset; the rest are used for 10-fold cross validation. Evaluation Metrics In addition to evaluating the merging algorithms on the stand-alone task of correction detection, we have also plugged in the merging algorithms into an end-to-end system in which every automatically detected correction is further classified into an error type. We replicated the error type selector described in Swanson and Yamangil (2012) . The error type selector's accuracies are shown in Table 3 3 . We compare two merging algorithms, combined with Levenshtein algorithm: S&Y The merging heuristic proposed by Swanson and Yamangil, which merges the adjacent basic edits into single corrections. MaxEntMerger We use the Maximum Entropy classifier to predict whether we should merge the two edits, as described in Section 3 4 . We evaluate extrinsically the merging components' effect on overall system performance by 3 Our replication has a slightly lower error type selection accuracy on FCE (80.02%) than the figure reported by Swanson and Yamangil (82.5%) . This small difference on error type selection does not affect our conclusions about correc- Corpus Error  comparing the boundaries of system's detected corrections with the gold standard. We evaluate both (1) the F-score in detecting corrections (2) the F-score in correctly detecting both the corrections' and the error types they address. Experiments We design experiments to answer two questions: 1. Do the additional contextual information about correction patterns help guide the merging decisions? How much does a classifier trained for this task improve the system's overall accuracy? 2. How well does our method generalize over revisions from different sources? Our major experimental results are presented in Table 4 and Table 6 . Table 4 compares the overall educational system's accuracies with different merging algorithms. Table 6 shows the system's F 1 score when trained and tested on different corpora. We make the following observations: First, Table 4 shows that by incorporating correction patterns into the merging algorithm, the errors in correction detection step were reduced. This led to a significant improvement on the overall system's F 1 -score on all corpora. The improvement is most noticeable on FCE corpus, where the error in correction detection step was reduced by 9%. That is, one third of the correction misdetections were eliminated. Table 5 shows that the number of merging errors are significantly reduced by the new merging algorithm. In particular, the number of false positives (system proposes merges when it should not) is significantly reduced. Second, our proposed model is able to generalize over different corpora. As shown in Table 6 . The models built on corpora can generally improve the correction detection accuracy 5 . Models built on the same corpus generally perform the best. Also, as suggested by the experimental result, among the four corpora, FCE corpus is a comparably good resource for training correction detection models with our current feature set. One reason is that FCE corpus has many more training instances, which benefits model training. We tried varying the training dataset size, and test it on different corpora. Figure 7 suggests that the model's accuracies increase with the training corpus size. Conclusions A revision often contains multiple corrections that address different writing mistakes. We explore building computer programs to accurately detect individual corrections in one single revision. One major challenge lies in determining whether consecutive basic-edits address the same mistake. We propose a classifier specialized in this task. Our experiments suggest that: (1) the proposed classifier reduces correction mis-detections in previous systems by 1/3, leading to significant overall system performance. (2) our method is generalizable over different data collections. Acknowledgements This work is supported by U.S. National Science Foundation Grant IIS-0745914. We thank the anonymous reviewers for their suggestions; we also thank Homa Hashemi, Wencan Luo, Fan Zhang, Lingjia Deng, Wenting Xiong and Yafei Wei for helpful discussions.",
    "abstract": "This work explores methods of automatically detecting corrections of individual mistakes in sentence revisions for ESL students. We have trained a classifier that specializes in determining whether consecutive basic-edits (word insertions, deletions, substitutions) address the same mistake. Experimental result shows that the proposed system achieves an F 1 -score of 81% on correction detection and 66% for the overall system, out-performing the baseline by a large margin.",
    "countries": [
        "United States"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "18",
    "year": "2014",
    "month": "June",
    "title": "Improved Correction Detection in Revised {ESL} Sentences"
}