{
    "framing_question": "What social implications does this paper address, if any?",
    "response": "The paper does not address any social implications.",
    "article": "In this paper we present our work on adapting a state-of-the-art anaphora resolution system for a resource poor language, namely Bengali. Performance of any anaphoric resolver greatly depends on the quality of a high accurate mention detector. We develop a number of models for mention detection based on heuristics and machine learning. Our experiments show that, a language-dependent system can attain reasonably good performance when re-trained on a new language with a proper subset of features. The system yields the MUC recall, precision and F-measure values of 57.80%, 79.00% and 66.70%, respectively. Our experiments with other available scorers show the F-measure values of 59.47%, 49.83%, 31.81% and 70.82% for BCUB, CEAFM, CEAFE and BLANC, respectively. Introduction Anaphora/co-reference resolution is the task of identifying noun phrases that are used to refer to the same entity in a text. More precisely, let us assume that C1 and C2 are occurrences of two noun phrases (NPs) and both have a unique referent in the context in which they occur. Here C2 refers to C1 in the context. C1 is called antecedent and C2 is called anaphor. The noun phrases that may participate in co-reference relation are called mentions/markables. Various practical tasks require language technology; for example, information extraction and text summarization, can be performed more reliably if it is possible to automatically find parts of the text containing information about a given topic. Anaphoric information is also needed to solve several other such kinds of Natural Language Processing (NLP) problems. Most of these works on supervised machine learning co-reference resolution have been developed for English (Soon et al., 2001; Ng and Cardie, 2002; Yang et al., 2003; Luo et al., 2004) , due to the availability of large corpora such as ACE (Walker et al., 2006) and OntoNotes (Weischedel et al., 2008) . BART, the Beautiful Anaphora Resolution Toolkit (Versley et al., 2008) , (Ponzetto and Strube, 2006) , (Poesio and Kabadjov, 2004) , is the resultant of the project titled \"Exploiting Lexical and Encyclopedic Resources For Entity Disambiguation\" carried out at the Johns Hopkins Summer Workshop 2007. It can handle all the preprocessing tasks to perform automatic coreference resolution. A variety of machine learning approaches are used in BART; it mainly uses several machine learning toolkits, including WEKA, MaxEnt and Support Vector Machine (SVM) . Literature shows the significant amount of works in the area of anaphora resolution. But these (Pradhan et al., 2012; Ng, 2010; Poesio et al., 2010) are mainy in non-Indian languages. The works related to anaphora resolution in Indian languages are still at the nascent stage due to the following facts: Indian languages are resource constrained, i.e. corpus, annotated corpus, morphological analyzers, Part-of-Speech (PoS) taggers, named entity (NE) taggers, parsers etc. are not readily available. There have been few attempts for anaphora resolution in Indian languages. In 2011 a shared task on NLP Tools Contest on Anaphora Resolution in Indian Languages was organized in association with 9th International Conference on Natural Language Processing (ICON 2011) 1 . Four teams participated in this contest with the varying approaches (Chatterji et al., 2011; Dakwale and Sharma, 2011; Senapati and Garain, 2011; Ghosh et al., 2011) . In this paper we propose our work on anaphora resolution in Bengali, a resource poor language. We develop a number of models for mention detection. The mention detector developed with the supervised classifier, Conditional Random Field (Lafferty, 2001) performs best for the anaphora resolution. We identify and implement several features for mention detection as well for anaphora resolution. Detailed experiments were carried out on the development set to identify the most relevant set of features. Later on we use that particular configuration to report the final evaluation results on test data. Brief Description of BART System Architecture Our starting point of anaphora resolution system is the toolkit from (Versley et al., 2008) , originally conceived as a modularized version of previous efforts from (Ponzetto and Strube, 2006; Poesio and Kabadjov, 2004; Versley, 2006; Broscheit et al., 2010) . BART's final aim is to bring together stateof-the-art approaches, including syntax-based and semantic features. The state-of-the-art anaphora resolution system, BART has five main components: preprocessing pipeline, mention factory, feature extraction module, decoder and encoder. In addition, an independent language plugin module handles all the language specific information and is accessible from any component. Each module can be accessed independently and thus adjusted to leverage the system's performance on a particular language or domain. The preprocessing pipeline converts an input document into a set of linguistic layers, represented as separate XML files. The mention factory uses these layers to extract mentions and assign their basic properties (number, gender etc). The feature extraction module describes pairs of mentions M i , M j , i < j as a set of features. The decoder generates training examples through a process of sample selection and trains a binary classifier. Finally, the encoder generates testing examples through a (possibly distinct) process of sample selection, runs the classifier and partitions the mentions into coreference chains. Models for Mention Detection Robust mention detection is an essential component of anaphora resolution system in any language. BART supports different pipelines for mention detection. The choice of a pipeline de-pends crucially on the availability of linguistic resources for a given language. The very first step of anaphora resolution process tries to identify the occurrence of mentions in the documents. In our original experimental datasets, three information were provided for each token: Part-of-Speech (PoS), phrase (or, chunk) and Named Entity (NE). We develop the following mention detection models: 1 1 clearly show that this mention detection system is the best compared to the other three models. Details of this systems are mentioned in the following subsection. Conditional Random Field(CRF) based Mention Detection System To formulate the problem of mention detection using CRF (Lafferty, 2001) , we consider the token of a sentence as an element of the observation sequence and the corresponding class label as an element of its state sequence. We have used the C ++ based CRF ++ package 3 . Features for Mention Detection We train CRF with the following set of features. 1. Context word: The contextual information of a target entity plays a significant role to decide whether it is a potential candidate for being a mention (or markable). We use the preceding and following few tokens as the features. 2. Word suffix and prefix: Fixed length (say, n) word suffixes and prefixes are used as the features for mention detection. These are the fixed length character strings stripped either from the rightmost (for suffix) or from the leftmost positions (for prefix) of the words. We included this feature with the observation that mentions, in general, share some common character sequences either at the beginning or at the end. 3. Part-of-Speech (PoS) information: PoS information of the token is effective for mention detection. We consider the PoS classes like NN (Common noun), NNP (Proper noun), PRP (Pronoun) etc. as important for mention detection. 4. Chunk information: Each mention belongs to the noun phrase and so its boundary identification is important. We use the chunk information provided with the datasets. 5. Suffix list: Variable length suffixes of a word are matched with the predefined list of useful suffixes which are helpful to detect person (e.g., -bAbu, -der, -dI, -rA etc.) and pronoun (e.g.,-tI, -ke, -der etc.) names 4 . We prepared such lists from the training data. A binary valued feature is defined that fires if the current word contains any of these suffixes. 9. First word: Noun phrases often appear at the beginning for the particular datasets that we have used, and these can most likely be the mentions. This feature is used to define whether the token is the first word in the sentence or not. 10. Morphological features: We extract morphological features from the shallow parser available at 5 . The features include lemma and number information (singular/plural) of the words. 11. Fine\u2212grained noun information: The fine\u2212grained information of nouns are extracted from the PoS tags. The feature checks whether the token is definite noun or demonstrative noun, and decides accordingly. We present the results of mention detection module in Table 1 . It shows that CRF based classifier attains the best performance. Inspired by these results, we identify mentions in test data using this CRF based classifier. We merge the development Methods for Anaphora Resolution In this work we extend BART to perform anaphora resolution for Bengali, a resource poor language. We perform systematic study to identify most suitable configuration of BART for anaphora resolution in Bengali. We identify and implement several features for this task. We design and evaluate our system using the Bengali datasets obtained from the NLP Tools Contests on Anaphora Resolution in Indian Languages, organized in ICON-2011 6 . The Bengali corpus contains three types of datasets-training, development and test. Preprocessing and Markable Extraction For the anaphora resolution system, mentions are identified from the datasets based on the gold annotations. These are treated as the markables. Thereafter we convert the markables to the data format used by BART, namely MMAX2s standoff XML format. Features for anaphora resolution We view coreference resolution as a binary classification problem. We use the learning framework proposed by (Soon et al., 2001) as a baseline. Each classification instance consists of two markables, i.e. an anaphor and its potential antecedent. Instances are modelled as feature vectors and are used to train a binary classifier. The classifier has to decide, given the features, whether the anaphor and the candidate antecedent are coreferent or not. To improve the performance we define some features specific to the language. Given BART's flexible architecture, we explore the contribution of some features implemented in BART for co-reference resolution in Bengali. Given a potential antecedent RE i and a anaphor RE j , we compute the following features: 6 http://ltrc.iiit.ac.in/icon2011/contests.html 1. String match: This feature compares between the two mentions. The value of this feature is true if the candidate anaphor (RE j ) and antecedent (RE i ) have the same surface strings forms, otherwise false. Sentence distance: A non-negative integer feature capturing the distance between anaphor and antecedent; if they are in the same sentence, then value of 0 is produced else if their sentence distance is 1 the value of 1 is produced. 3. Markable distance: This is also a nonnegative integer feature that captures the distance in terms of the number of mentions between the two markables. First person pronoun: This feature is defined based on the direct and indirect speech. For a given anaphor-antecedent pair (RE j , RE i ) a feature is set to high if RE j is a first person pronoun found within a quotation and RE i is a mention immediately preceding it within the same quote. If RE i is outside the quote and appears either in the same sentence or in any of the previous three sentences and is not first person then the corresponding feature is also set to high. The feature also behaves in a similar way if the pair (RE j , RE i ) appears outside the quotation. Second person pronoun: This feature checks whether the pair (RE j , RE i ) is in the same quote and fires the feature accordingly. It is true if RE j is second person and RE i is other than the first person. If RE j is inside the quotation, and RE i ends with the suffix \"ke and is outside the quote then the feature fires. 6. Third person pronoun: This feature checks whether the pair (RE j , RE i ) appears inside or outside the quotation. It feature fires if both the mentions either appear within or outside the quotation. 7. Reflexive pronoun: For a given pair (RE j , RE i ), this feature checks whether RE j is a reflexive pronoun and fires accordingly. This means if any antecedent is immediately followed by a reflexive pronoun then the feature is true, otherwise false. 8. Number agreement: If both anaphor(RE j ) and antecedent(RE i ) agree in their number information then the feature value is set to true, otherwise false. We extract this feature from the shallow parser available at 7 . The parser was not able to take longer sentences as inputs and so we had to pre-process the data before running the parser. 9. Semantic class feature: If both RE j and RE i agree in their semantic classes then this feature is set to true, otherwise false. In particular this feature checks whether the pair either belongs to person class or organization class or location class. 10. Alias feature: It checks whether RE j is an alias of RE i or not. 11. Appositive feature: If RE j is in apposition to RE i then the value of this feature is set to true, otherwise it is false. 12. String kernel: String kernel similarity is used to estimate the similarity between two strings based on the string subsequence kernel. 13. Mention type: Following (Soon et al., 2001) , we have encoded mention types (name, nominal or pronoun) of the anaphor and the antecedent. In addition, we check whether the anaphor RE j is a definite pronoun or demonstrative pronoun or merely a pronoun. We also check whether each of the entities in the mention pair denotes proper name. Learning algorithm In order to learn coreference decisions, we experiment with WEKA's (Witten and Frank, 2005) implementation of the C4.5 decision tree learning algorithm (Quinlan, 1993) , with the above mentioned feature combinations. Instances are created following (Soon et al., 2001) . We generate a positive training instance from each pair of adjacent coreferent markables. Negative instances are created by pairing the anaphor with any markable occurring between the anaphor and the antecedent. Decoding In the decoding step, the coreference chains are created by the best-first clustering. Each mention is compared with all of its previous mentions with a probability greater than a fixed threshold value, and is clustered with the highest probability. If none has probability greater than the threshold, the mention becomes a new cluster. Evaluation Dataset For our experiments we use the data sets provided in the ICON NLP Tools Contest on Anaphora Resolution in Indian Languages. The datasets were taken from the Bengali literature (mostly from the short stories). All the datasets were provided with PoS, chunk and NE information. For training and development datasets, anaphoric annotations were provided by the organizers. However for test set there was no annotation available. In line with the annotations of training and development datasets, we manually annotated test dataset. Some statistics of the datasets are presented in Table 3 . Evaluation metrics and results In order to evaluate the anaphora resolution system we use different scorers such as MUC (Vilain et al., 1995) , B 3 (Bagga and Baldwin, 1998), CEAF (Luo, 2005) and BLANC (Recasens and Hovy, October 2011) . We experiment with the different mention detectors for anaphora resolution. 4 reveal the fact that the proposed anaphora resolution system achieves the best performance when CRF based classifier is used for mention detection. Based on these results on development data, we evaluate the system for the test data using the mentions extracted by the CRF based machine learner. Results on the test data are reported in Table 5 . Results show the F-measure values of 66.70%, 59.47%, 49.83%, 31.81% and 70.82% for MUC, BCUB, CEAFM, CEAFE and BLANC, respectively. Discussion We explore different models for mention detections. We observed that the mention detection performs best with the supervised machine learner, CRF. These system mentions are then used for the encoding and decoding modules in BART. Experimental results shown in Table 4 show that mention detection plays an important role in anaphora resolution. We implement the baseline model using a subset of the features reported in (Soon et al., 2001) . These include number agreement, alias, string matching, semantic class agreement, sentence distance, appositive and several features (c.f. Section 3.2). This model showed the MUC recall, precision and F-measure values of 38.8%, 67.4% and 49.3%, respectively. This is clearly much less compared to our proposed model. Comparisons with the available related works (specific to the language) show that our proposed system achieves state-of-the-art accuracy. Conclusion We present a anaphora resolution system for Bengali, a resource-poor language based on BART, a state-of-the-art coreference resolution model originally developed for English. We explore many models for markable identification, and observed that a supervised CRF based classifier produces the best results. The main focus of this work is to build a machine learning based anaphora resolution system for a resource-poor Indian language. Our system attains the state-of-the-art accuracy level. Currently our focus is on developing methods for capturing the missing markables; and identifying more syntactic and semantic features. Future work will also concentrate on porting the systems to other Indian languages, e.g. Hindi and Telugu, as well as investigating the portability and usefulness of more syntactic, morphological and semantic information across different languages. We also aim to perform systematic feature selection for mention detection and anaphora resolution. Acknowledgments The research described in this paper has been partially supported by the European Community's Seventh Framework Programme (FP7/2007-2013) under the grant #288024: LIMOSINE -Linguistically Motivated Semantic aggregation engiNes.",
    "funding": {
        "military": 0.0,
        "corporate": 0.0,
        "research agency": 0.02096509464861307,
        "foundation": 0.0024725967842744723,
        "none": 0.9999037328639782
    }
}