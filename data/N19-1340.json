{
    "article": "Semantic role labeling (SRL) is a task to recognize all the predicate-argument pairs of a sentence, which has been in a performance improvement bottleneck after a series of latest works were presented. This paper proposes a novel syntax-agnostic SRL model enhanced by the proposed associated memory network (AMN), which makes use of inter-sentence attention of label-known associated sentences as a kind of memory to further enhance dependency-based SRL. In detail, we use sentences and their labels from train dataset as an associated memory cue to help label the target sentence. Furthermore, we compare several associated sentences selecting strategies and label merging methods in AMN to find and utilize the label of associated sentences while attending them. By leveraging the attentive memory from known training data, Our full model reaches state-of-theart on CoNLL-2009 benchmark datasets for syntax-agnostic setting, showing a new effective research line of SRL enhancement other than exploiting external resources such as well pre-trained language models. Introduction Semantic role labeling (SRL) is a task to recognize all the predicate-argument pairs of a given sentence and its predicates. It is a shallow semantic parsing task, which has been widely used in a series of natural language processing (NLP) tasks, such as information extraction (Liu et al., 2016) and question answering (Abujabal et al., 2017) . Generally, SRL is decomposed into four classification subtasks in pipeline systems, consisting of predicate identification, predicate disambiguation, argument identification, and argument classification. In recent years, great attention (Zhou and Xu, 2015; Marcheggiani et al., 2017; He et al., 2017 He et al., , 2018a,b) ,b) has been turned to deep learning method, especially Long Short-term Memory (LSTM) network for learning with automatically extracted features. (Zhou and Xu, 2015) proposed the first end-to-end recurrent neural network (RNN) to solve the SRL task. (Marcheggiani et al., 2017) studied several predicate-specified embedding and decoding methods. (He et al., 2017) delivered a full study on the influence of RNN training and decoding strategies. Whether to use the syntactic information for SRL is also studied actively (He et al., 2017 (He et al., , 2018b)) . Since the recent work of (Marcheggiani et al., 2017) , which surprisingly shows syntax-agnostic dependency SRL for the first time can be rival of syntax-aware models, SRL has been more and more formulized into standard sequence labeling task on a basis of keeping syntax unavailable. A series of work on SRL received further performance improvement following this line through further refining neural model design (He et al., 2018a) . Different from all previous work, we propose to introduce an associated memory network which builds memory from known data through the inter-sentence attention to enhance syntaxagnostic model even further. Inspired by the observation that people always refer to other similar problems and their solutions when dealing with a problem they have never seen, like query in their memory, we want to utilize similar known samples which include the associated sentences and their annotated labels to help model label target sentence. To reach such a goal, we adopt a memory network component, and use inter-sentence attention to fully exploit the information in memory. Based on Memory Network (Weston et al., 2014; Sukhbaatar et al., 2015) , (Miller et al., 2016) proposed Key-Value Memory Network (KV-MemNN) to solve Question Answering problem and gain large progress. Our proposed method is similar to KV-MemNN, but with a different definition of key-value and different information distilling process. Thus, we propose a carefully designed inter-sentence attention mechanism to handle it. Recently, there are also some attempts to make use of attention mechanism in SRL task. (Tan et al., 2018; Strubell et al., 2018) focus on selfattention, which only uses the information of the input sentence as the source of attention. (Cai et al., 2018) makes use of biaffine attention (Dozat and Manning, 2017) for decoding in SRL, which was the current state-of-the-art (SOTA) in CoNLL-2009 benchmark as this work was embarking. Different from all previous work, we utilize inter-sentence attention to help model leverage associated information from other known sentences in the memory. To our best knowledge, this is the first time to use memory network in the SRL task. Our evaluation on CoNLL-2009 benchmarks shows that our model outperforms or reaches other syntaxagnostic models on English, and achieves competitive results on Chinese, which indicates that memory network learning from known data is indeed helpful to SRL task. There are several SRL annotation conventions, such as PropBank (Bonial et al., 2012) and FrameNet (Baker et al., 1998) . This paper focuses on the former convention. Under PropBank convention, there are two role representation forms, which are span-based SRL, such as CoNLL 2005 and CoNLL 2012 shared tasks, and dependencybased SRL, such as CoNLL 2009 shared task. The former uses span to represent argument, while the latter uses the headword of the span to represent the argument. As the latter has been more actively studied due to dependency style SRL for convenient machine learning, we will focus on dependency SRL only in this work. Given a sentence S, the goal of dependency SRL task is to find all the predicate-argument pairs (p, a). The following shows an example sentence with semantic role labels marked in subscripts. She A0 has lost v it A1 just ARGM \u2212M N R as quickly. Here, v means the predicate, A0 means the agent, A1 means the patient and ARGM-MNR means how an action v is performed. In the rest of this paper, we will describe our model in Section 2. Then, the experiment set-up and results are given in Section 3. Related works about SRL and attention mechanism will be given in Section 4. Conclusions and future work are drawn in Section 5. Model An SRL system usually consists of four pipeline modules: predicate identification and disambiguation, argument identification and classification. Following most of previous work, we focus on the last two steps in standard SRL task: argument identification and classification. The predicate identification subtask is not needed in CoNLL-2009 shared task 1 , and we follow previous work (He et al., 2018b) to handle the predicate disambiguation subtask. This work will only focus on the argument labeling subtask through sequence labeling formalization. We first describe our base model in Section 2.1. Then we introduce the proposed associated memory network including the inter-sentence attention design and label merging strategies in Section 2.2. The full model architecture is shown in Figure 1 . Base Model Word Embedding We use the concatenation of the following embeddings as the representation for every word. (1) Random-initialized word embedding x re i \u2208 R dre (2) GloVe (Pennington et al., 2014) \u2208 R d pred . The final representation of each word is: x i = x re i \u2022 x pe i \u2022 x pos i \u2022 x le i \u2022 x ce i \u2022 x pred i where \u2022 stands for concatenation operator. BiLSTM Encoder LSTM network is known to handle the dependency over long sentence well, and can effectively model the context information when encoding. Therefore, we leverage a stacked BiLSTM network LST M e to be our encoder. It takes word embedding sequence x = [x i ] n S i=1 of sentence S = [w i ] n S i=1 as input (n S is the length of sentence), and outputs two different hidden states \u2212 \u2192 h i and \u2190 \u2212 h i for word w i by processing the sequence in forward and backward directions. The final contextual representation of word w i is the concatenation of two hidden states h i = \u2212 \u2192 h i \u2022 \u2190 \u2212 h i . Then, we use a final softmax layer after the Bi-LSTM encoding to predict the label of each word. Associated Memory Network Using the base model as backbone, we introduce an associated memory network (AMN) component for further performance improvement. The proposed AMN memorizes known associated sentences and their labels, then the useful clue in the memory will be delivered to the SRL module through an inter-sentence mechanism. AMN processing includes three steps, associated sentence selection, inter-sentence attention and label merging. Associated Sentence Selection We aim to utilize the associated sentences and their labels to help our model label the target sentences. For the sake of fairness, we only use the sentences in train dataset as our source. However, it is impossible to attend all the sentences in train dataset because of the extremely high computational and memory cost. Therefore, we propose a filter to select the most useful sentences from the given dataset (train dataset in this paper) when given the label-unknown sentence S. The filter algorithm is straightforward. First, We compute the distance of every two sentences. Then, we sort all the sentences in train dataset according to their distances with the target sentence S, and select top m sentences {A j } m j=1 with the minimum distances and their label sequences {L j } m j=1 as our associated attention. m is the memory size. As for the computation of distance between two sentences, we formally consider three types of distances, which are edit distance (ED), word moving distance (WMD) and smooth inverse frequency distance (SD), plus random distance (RD) as baseline. These distances are defined as follows, \u2022 edit distance This method uses the edit distance of the POS tag sequences of two sentences as the distance value. \u2022 word moving distance Following (Kusner et al., 2015) , this method takes word moving distance of two sentences 2 . \u2022 smooth inverse frequency distance Following (Arora et al., 2017) , we use Euclidean distance between the SIF embedding of two sentences as the distance value. \u2022 random distance This method returns a random value for distance computation thus lead to selecting sentences randomly in the train dataset. Inter-sentence Attention This part aims to attain the inter-sentence attention matrix, which can be also regarded as the core memory part of the AMN. The input sentence S and associated sentences {A j } m j=1 first go through a stacked BiSLTM network LST M a to encode the sentence-level information to each word representation 3 : S = LST M a (S) A j = LST M a (A j ) j \u2208 {1, 2, ..., m} where S = [x i ] n S i=1 and A j = [x j,k ] n j k=1 are the lists of new word representations, with each word representation is a vector x \u2208 R da , where d a is the size of hidden state in LST M a . Then, for each associated sentence A j , we multiply it with the input sentence representation S to get the raw attention matrix M raw j . M raw j = S A T j Every element M raw j (i, k) = x i \u2022 x T j,k can be regarded as an indicator of similarity between the i th word in input sentence S and the k th word in associated sentence A j . Finally, we perform softmax operation on every row in M raw j to normalize the value so that it can Figure 1 : Semantic role labeling with associated memory network, where S is the input sentence with its length n S . A j is the j th associated sentence of S with its label sequence L j and its length n j . S and A j are the result of LST M 1 with S and A j as input respectively. d ae is the dimension of argument embedding. M raw j is the raw attention matrix of A j and S. a \u2212,j = [a 1,j , a 2,j , ..., a nS,j ] is the associated-sentence-specified attention embedding. be considered as probability from input sentence S to associated sentence A j . \u03b1 i,j = f ([M raw j (i, 1)..., M raw j (i, n j )]) M j = [\u03b1 1,j , \u03b1 2,j , ..., \u03b1 n S ,j ] where f (\u2022) stands for softmax function. \u03b1 i,j can be regarded as probability vector indicating the similarity between the i th word in sentence S and every word in the associated sentence A j . Label Merging In order to utilize the labels {L j } m j=1 of the associated sentences during decoding, a label merging needs to be done. We use randomly initialized argument embedding x ae \u2208 R dae to embed each argument label. Therefore, the label sequence L j of associated sentence A j can be written as L j = [x ae j,k ] n j k=1 .We treat the probability vector \u03b1 i,j as weight to sum all the elements in L j to get the associated-sentence-specified argument embedding a i,j , which represents the attention embedding of word w i \u2208 S calculated from the j th associated sentence A j and label L j . a i,j = \u03b1 i,j \u2022 L T j = n j k=1 \u03b1 i,j (k)x ae j,k Because the associated sentences are different, the overall contributions of these argument embeddings should be different. We let the model itself learn how to make use of these argument embeddings. Following attention combination mechanism from (Libovick\u1ef3 and Helcl, 2017) , we consider four ways to merge the label information. 1) Concatenation All the associated argument embedding are concatenated as the final attention embeddings. a i = a i,1 \u2022 a i,2 \u2022 ... \u2022 a i,m 2) Average The average value of all the associated argument embeddings is used as the final attention embedding. a i = 1 m m j=1 a i,j 3) Weighted Average The weighted average of all the associated argument embedding is used as the final attention embedding. We calculate the mean value of every raw similarity matrix M raw j to indicate the similarity between input sentence S and associated sentence A j , and we use the softmax function to normalize them to get a probability vector \u03b2 indicating the similarity of input sentence S towards all the associated sentences {A j } m j=1 . \u03b2 = f ([g(M raw 1 ), ..., g(M raw m )]) where f (\u2022) stands for softmax function and g(\u2022) represents the mean function. Then, we use the probability vector \u03b2 as weight to sum all the associated-sentence-specified attention embedding a i,j to get the final attention embedding a i of the i th word w i in input sentence S. a i = m j=1 \u03b2(j)a i,j 4) Flat This method does not use a i,j information. First, we concatenate all the raw similarity matrix M raw j along the row. M raw = [M raw 1 , M raw 2 , ..., M raw m ] Then, we perform softmax operation on every row in M raw to normalize the value so that it can be considered as probability from input sentence S to all associated sentences A j . where f (\u2022) stands for softmax operation. n all = m j=1 n j is the total length of all m associated sentences. \u03b3 i = f ([M raw i,1 , M raw i,2 ..., M raw i,n all ]) We also concatenate the associated label information, and use \u03b3 i as weight to sum the concatenated label sequence as final attention embedding. L = [L 1 , L 2 , ..., L j ], a i = \u03b3 i \u2022 L T After we have the final attention embedding a i , we concatenate it with word embedding x i as the input of the BiLSTM encoder LST M e . Experiments We conduct experiments on CoNLL-2009 (Haji\u010d et al., 2009) For English, We independently determine the best distance calculating method and the best merging method one after another. First, we select a distance according to the results on development set and then we determine the merging method with the selected distance method. At last we explore the impact of memory size. For Chinese, --87.7 (Roth and Lapata, 2016) 90.3 85.7 87.9 (Marcheggiani and Titov, 2017) 90.5 87.7 89.1 System (syntax-agnostic single) P R F1 (Marcheggiani et al., 2017) 88.7 86.8 87.7 (He et al., 2018b) 89.5 87.9 88.7 (Cai et al., 2018) 89.9 89.2 89.6 (Li et al., 2018) 89.5 87.9 88.7 Ours ( + AMN + ELMo) 90.0 89.2 89.6 we obtain the result with similar parameters as for the best model in English. The English and Chinese GloVe word embeddings are both trained on Wikipedia. The pretrained English ELMo model is from (Peters et al., 2018) , and the Chinese one is from (Che et al., 2018) , which is hosted at (Fares et al., 2017) . The model is trained for maximum 20 epochs for the nearly best model based on development set results. We re-run our model using different initialized parameters for 4 times and report the average performance 4 . Results For the predicate disambiguation, we use the same one from (He et al., 2018b) with the precisions System (syntax-aware single) P R F 1 (Zhao et al., 2009a) 80.4 75.2 77.7 (Roth and Lapata, 2016) 83.2 75.9 79.4 (Marcheggiani and Titov, 2017) 84.6 80.4 82.5 (He et al., 2018b) 84.2 81.5 82.8 (Li et al., 2018) 84.8 81.2 83.0 System (syntax-agnostic single) P R F 1 (Marcheggiani et al., 2017) 83.4 79.1 81.2 (He et al., 2018b) 84.5 79.3 81.8 (Cai et al., 2018) 84.7 84.0 84.3 Ours ( + AMN + ELMo) 85.0 82.6 83.8 For English in-domain test, our model outperforms the syntax-agnostic model in (He et al., 2018b) , whose architecture is quite similar to our base model. Our model achieves 89.6% in F 1 score, which is the same with current SOTA syntax-agnostic model (Cai et al., 2018) . Besides, our result is competitive with existing syntaxaware and better than ensemble models. The advantage is more salient on English outof-domain test set. The F 1 score of our model is 79.7%, which is 0.7% higher than the current SOTA syntax-agnostic model (Cai et al., 2018) . The result is also competitive with the best syntaxaware model (Li et al., 2018) . The comparisons show that the proposed model has a greater generalization ability. For Chinese, starting with the similar parameters as for the best model in English, we find that attending 5 associated sentences shows a better result on Chinese. Our model achieves 83.8% F 1 score, outperforming (He et al., 2018b) with an improvement of 2.0% in F 1 score. Our result is also competitive with that of (Cai et al., 2018) . Note that our method is not conflict with the one in (Cai et al., 2018) , which leverages biaffine attention (Dozat and Manning, 2017) for decoding. However, due to experiment cycle, we are not able to combine these two methods together. We will leave the combination as future work. In the following part, we conduct several ablation studies on our model. All the experiments are re-run 2-4 times and the average values are re-System P R F 1 WMD (Kusner et al., 2015) Ablation on Distance Method Table 5 shows the performance of different distance calculating methods. All models use average method for label merging, and the memory size m is set to 4. It can be observed from Table 5 that edit distance performs best among all the distance calculating methods, with 88.3% F 1 score. All the distance calculating methods have surpassed the base model, showing that the proposed AMN is effective. Note that even the random distance model performs better than the base model, with an improvement of 0.3% in F 1 score, which shows that the proposed AMN can effectively extract useful information from even poorly related sentences. Besides, associated sentence se-lection methods based on word embeddings like WMD and SD have similar performance with random distance (RD), which shows simple word embedding may not be good enough signal indicator to measure semantic structure similarity in SRL task. On the contrary, we may also try to explain why even the random distance selection may work to some extent. As sentences always have core arguments label such as A0, A1 and A2, associated sentences even from random selection may also have such labels, which makes them helpful to enhance SRL over these labels. This may explain why our model with randomly selected associated sentences can distinguish core arguments better. Ablation on Label Merging Method Table 6 shows the performance of different label merging methods. All models use edit distance with 4 associated sentences. The result shows that Average label merging strategy gives the best performance, achieving 88.3% in F 1 score with an improvement of 0.5% compared to the baseline model. Note that our weighted average model does not outperform the average model, which is a surprise to us. We speculate that the current weight calculation method needs to be more improved to fit the concerned task. ELMo vs. AMN Table 7 compares the performance contribution from ELMo and AMN. Our model can achieve better performance only using informative clue from training set in terms of AMN design, rather than focusing on external resource like ELMo. However, even though our baseline SRL has been enhanced by ELMo, it can still receive extra performance improvement from the propose AMN. Note that our enhancement from the proposed AMN keeps effective when ELMo is included (a 0.5% enhancement on baseline over the 0.3% enhancement on ELMo baseline) Ablation on Memory Size We show the effect of different memory size in Figure 3 . Note that more associated sentences means more cost on time and space. We test memory size m from 2 to 6 (which reaches the limit under experiment setting in 11G GPU). We also fit the measured points with a linear function (the blue line in Figure 3 ). The performance of our model has a general trend of increasing when the System (syntax-aware) P R F 1 (He et al., 2018b) 86.8 85.8 86.3 (He et al., 2018b ) + ELMo 87.7 87.0 87.3 (Li et al., 2018) 87.7 86.7 87.2 (Li et al., 2018) memory size becomes larger, which shows the potential of the proposed AMN. Analysis on Confusion Matrix To further understand the advance of the proposed method, we conduct an error type break down analysis. Figures 4 and 5 show the confusion matrices of labeling errors in the baseline model and our model on development set, respectively. We only show the main and most informative type of arguments. Every number in these figures stands for the times of occurrence. Comparing these two confusion matrixes shows that the proposed model makes fewer mistakes between core arguments such as A0, A1, and A2. AMN indeed helps when labeling them. It is also noted that, as in (He et al., 2017; Tan et al., 2018) , the model still easily confuses ARG2 with AM-DIR, AM-LOC and AM-MNR. Analysis of Performance on Distance We compare the performance concerning with the distance of argument and predicate on our best model and base model in Figure 2 , from which we can observe that our model performs better nearly at any distance. Case Study on AMN To explore how the AMN works in the model, we visualize the similarity matrix M of some sentences from development set in Figure 6 . The input sentence is it A1 should AM \u2212M OD run v forever AM \u2212T M P . And the associated sentence is it A1 wo AM \u2212M OD n tAM\u2212NEG happen v again AM \u2212T M P . The current predicates are run, happen respectively. The visualization shows that inter-sentence attention can find and align the word in the similar context correctly, which shows that the proposed AMN is reasonable and effective. Related Works Early attempts (Pradhan et al., 2005; Zhao et al., 2009a Zhao et al., ,b, 2013;; Roth and Woodsend, 2014) to the SRL task were mainly linear classifiers. The main focus was how to find proper feature templates that can best describe the sentences. (Pradhan et al., 2005) utilized a SVM classifier with rich syntactic features. (Toutanova et al., 2008) took the structural constraint into consideration by using a global reranker. (Zhao et al., 2009c) adopted a maximum entropy model with large scale feature template selection. (Roth and Woodsend, 2014) explored the distributional word representations as new feature to gain more powerful models. Recently, a great attention has been paid on neural networks. (Zhou and Xu, 2015) proposed an end-to-end model using stacked BiLSTM network combined with CRF decoder without any syntactic input. (Marcheggiani et al., 2017) explored the predicate-specified encoding and decoding and also provided a syntax-agnostic LSTM model. (He et al., 2017) followed (Zhou and Xu, 2015) and analyzed all popular methods for initialization and regularization in LSTM network. By considering that our approach also bor-rows power from the memory, the proposed intersentence attention in our AMN shares features with memory networks, which was proposed in (Weston et al., 2014) with motivation that memory may reduce the long-term forgetting issues. (Sukhbaatar et al., 2015) and (Miller et al., 2016) later further improved this work. However, we use quite different mechanisms to store the memory, and the effectiveness of our model needs a carefully designed attention mechanism to handle the sequence-level information distilling. Attention mechanism was first used by (Bahdanau et al., 2014) in machine translation. Recently, (Tan et al., 2018) and (Strubell et al., 2018) proposed to use self-attention mechanism in SRL task. (Cai et al., 2018) leveraged the biaffine attention (Dozat and Manning, 2017) for better decoding performance. Different from all the existing work, we instead introduce an inter-sentence attention to further enhance the current state-of-theart SRL. Conclusions and Future Work This paper presents a new alternative improvement on strong SRL baselines. We leverage memory network which seeks power from known data, the associated sentences, and thus is called associated memory network (AMN). The performance of our model on CoNLL-2009 benchmarks shows that the proposed AMN is effective on SRL task. As to our best knowledge, this is the first attempt to use memory network in SRL task. There is still a large space to explore along this research line. For example, our weighted average method may need more carefully improved. Our model can be built over the biaffine attention which has been verified effective in (Cai et al., 2018) 5 , and the encoder in our model can be improved with more advanced forms such as Transformer (Vaswani et al., 2017) . At last, as this work is done on a basis of quite limited computational resources, only one piece of nVidia 1080Ti (11G graphic memory), much plentiful available computational resource will greatly enable us to explore more big model setting (i.e., larger memory size m) for more hopefully better performance improvement.",
    "abstract": "Semantic role labeling (SRL) is a task to recognize all the predicate-argument pairs of a sentence, which has been in a performance improvement bottleneck after a series of latest works were presented. This paper proposes a novel syntax-agnostic SRL model enhanced by the proposed associated memory network (AMN), which makes use of inter-sentence attention of label-known associated sentences as a kind of memory to further enhance dependency-based SRL. In detail, we use sentences and their labels from train dataset as an associated memory cue to help label the target sentence. Furthermore, we compare several associated sentences selecting strategies and label merging methods in AMN to find and utilize the label of associated sentences while attending them. By leveraging the attentive memory from known training data, Our full model reaches state-of-theart on CoNLL-2009 benchmark datasets for syntax-agnostic setting, showing a new effective research line of SRL enhancement other than exploiting external resources such as well pre-trained language models.",
    "countries": [
        "China"
    ],
    "languages": [
        "English",
        "Chinese"
    ],
    "numcitedby": "15",
    "year": "2019",
    "month": "June",
    "title": "Semantic Role Labeling with Associated Memory Network"
}