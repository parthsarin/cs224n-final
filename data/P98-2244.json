{
    "article": "There exist several methods of calculating a similarity curve, or a sequence of similarity values, representing the lexical cohesion of successive text constituents, e.g., paragraphs. Methods for deciding the locations of fragment boundaries are, however, scarce. We propose a fragmentation method based on dynamic programming. The method is theoretically sound and guaranteed to provide an optimal splitting on the basis of a similarity curve, a preferred fragment length, and a cost function defined. The method is especially useful when control on fragment size is of importance. Introduction Electronic full-text documents and digital libraries make the utilization of texts much more effective than before; yet, they pose new problems and requirements. For example, document retrieval based on string searches typically returns either the whole document or just the occurrences of the searched words. What the user often is after, however, is microdocument: a part of the document that contains the occurrences and is reasonably self-contained. Microdocuments can be created by utilizing lexical cohesion (term repetition and semantic relations) present in the text. There exist several methods of calculating a similarity curve, or a sequence of similarity values, representing the lexical cohesion of successive constituents (such as paragraphs) of text (see, e.g., (Hearst, 1994; Hearst, 1997; Kozima, 1993; Morris and Hirst, 1991; Yaari, 1997; Youmans, 1991) ). Methods for deciding the locations of fragment boundaries are, however, not that common, and those that exist are often rather heuristic in nature. To evaluate our fragmentation method, to be explained in Section 2, we calculate the paragraph similarities as follows. We employ stemming, remove stopwords, and count the frequencies of the remaining words, i.e., terms. Then we take a predefined number, e.g., 50, of the most frequent terms to represent the paragraph, and count the similarity using the cosine coefficient (see, e.g., (Salton, 1989) ). Furthermore, we have applied a sliding window method: instead of just one paragraph, several paragraphs on both sides of each paragraph boundary are considered. The paragraph vectors are weighted based on their distance from the boundary in question with immediate paragraphs having the highest weight. The benefit of using a larger window is that we can smooth the effect of short paragraphs and such, perhaps example-type, paragraphs that interrupt a chain of coherent paragraphs. Fragmentation by Dynamic Programming Fragmentation is a problem of choosing the paragraph boundaries that make the best fragment boundaries. The local minima of the similarity curve are the points of low lexical cohesion and thus the natural candidates. To get reasonably-sized microdocuments, the similarity information alone is not enough; also the lengths of the created fragments have to be considered. In this section, we describe an approach that performs the fragmentation by using both the similarities and the length information in a robust manner. The method is based on a programming paradigm called dynamic programming (see, e.g., (Cormen et al., 1990) ). Dynamic programming as a method guarantees the optimality of the result with respect to the input and the parameters. The idea of the fragmentation algorithm is as follows (see also Fig. 1 ). We start from the first boundary and calculate a cost for it as if the first paragraph was a single fragment. Then we take the second boundary and attach to it the minimum of the two available possibilities: the cost of the first two paragraphs as if they were a single fragment and the cost fragmentation (n, p, h, len[1..n of the second paragraph as a separate fragment. In the following steps, the evaluation moves on by one paragraph at each time, and all the possible locations of the previous breakpoint are considered. We continue this procedure till the end of the text, and finally we can generate a list of breakpoints that indicate the fragmentation. e := c + cost[i -1] + sim[i -1]; if C < Cmin { Cmin := C; IOC-Cmin := i --1; } } The cost at each boundary is a combination of three components: the cost of fragment length Clen, and the cost cost [.] and similarity sim [.] of some previous boundary. The cost function Clen gives the lowest cost for the preferred fragment length given by the user, say, e.g., 500 words. A fragment which is either shorter or longer gets a higher cost, i.e., is punished for its length. We have experimented with two families of cost functions, a family of second degree functions (parabolas), ~z + 1), and V-shape linear functions,  where x is the actual fragment length, p is the preferred fragment length given by the user, and h is a scaling parameter that allows us to adjust the weight given to fragment length. The smaller the value of h, the less weight is given to the preferred fragment length in comparison with the similarity measure. Clen(X,p,h) = Ih(~ - Experiments As test data we used Mars by Percival Lowell, 1895. As an illustrative example, we present the analysis of Section I. Evidence of it of Chapter II. Atmosphere. The length of the section is approximately 6600 words and it contains 55 paragraphs. The fragments found with different parameter settings can be seen in Figure 2 . One of the most interesting is the one with parabola cost function and h = .5. In this case the fragment length adjusts nicely according to the similarity curve. Looking at the text, most fragments have an easily identifiable topic, like atmospberic chemistry in fragment 7. Fragments 2 and 3 seem to have roughly the same topic: measuring the diameter of the planet Mars. The fact that they do not form a single fragment can be explained by the preferred fragment length requirement. Table 1 summarizes the effect of the scaling factor h in relation to the fragment length variation with the two cost functions over those 8 sections of Mars that have a length of at least 20 paragraphs. The average deviation davg with respect to the preferred fragment length p is defined as davg = (~-'~n= 1 [P --lil)/m where li is the length of fragment i, and m is the number of fragments. The parametric cost function chosen affects the result a lot. As expected, the second degree cost function allows more variation than the linear one but roles change with a small h. Although the experiment is insufficient, we can see that in this example a factor h > 1.0 is unsuitable with the linear cost function (and h = 1.5 with the parabola) since in these cases so much weight is given to the fragment length that fragment boundaries can appear very close to quite strong local maxima of the similarity curve. Conclusions In this article, we presented a method for detecting fragment boundaries in text. The fragmentation method is based on dynamic programming and is guaranteed to give an optimal solution with respect to a similarity curve, a preferred fragment length, and a parametric fragment-length cost function defined. The method is independent of the similarity calculation. This means that any method, not necessarily based on lexical cohesion, producing a suitable sequence of similarities can be used prior to our fragmentation method. For example, the lexical cohesion profile (Kozima, 1993) should be perfectly usable with our fragmentation method. 1486 The method is especially useful when control over fragment size is required. This is the case in passage retrieval since windows of 1000 bytes (Wilkinson and Zobel, 1995) or some hundred words (Callan, 1994) have been proposed as best passage sizes. Furthermore, we believe that fragments of reasonably similar size are beneficial in our intended purpose of document assembly. Acknowledgements This work has been supported by the Finnish Technology Development Centre (TEKES) together with industrial partners, and by a grant from the 350th Anniversary Foundation of the University of Helsinki. The author thanks Helena Ahonen, Barbara Heikkinen, Mika Klemettinen, and Juha K~kk~iinen for their contributions to the work described.",
    "abstract": "There exist several methods of calculating a similarity curve, or a sequence of similarity values, representing the lexical cohesion of successive text constituents, e.g., paragraphs. Methods for deciding the locations of fragment boundaries are, however, scarce. We propose a fragmentation method based on dynamic programming. The method is theoretically sound and guaranteed to provide an optimal splitting on the basis of a similarity curve, a preferred fragment length, and a cost function defined. The method is especially useful when control on fragment size is of importance.",
    "countries": [
        "Finland"
    ],
    "languages": [
        "Finnish"
    ],
    "numcitedby": "69",
    "year": "1998",
    "month": "August",
    "title": "Optimal Multi-Paragraph Text Segmentation by Dynamic Programming"
}