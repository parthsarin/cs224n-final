{
    "article": "Considering the speed in which humans resolve syntactic ambiguity, and the overwhelming evidence that syntactic ambiguity is resolved through selection of the analysis whose interpretation is the most 'sensible', one comes to the conclusion that interpretation, hence parsing take place incrementally, just about every word. Considerations of parsimony in the theory of the syntactic processor lead one to explore the simplest of parsers: one which represents only analyses as defined by the grammar and no other information. Toward this aim of a simple, incremental parser I explore the proposal that the competence grammar is a Combinatory Categorial Grammar (CCG). I address the problem of the proliferating analyses that stem from CCG's associativity of derivation. My solution involves maintaining only the maximally incremental analysis and, when necessary, computing the maximally right-branching analysis. I use results from the study of rewrite systems to show that this computation is efficient. Introduction The aim of this paper is to work towards a computational model of how humans syntactically process the language that they hear and read. The endpoint of this enterprise is a precise characterization of the process that humans follow, getting details such as timing and garden pathing exactly right. *The research reported here was conducted as part of my Ph.D. thesis work at the University of Pennsylvania and supported by the following grants: DARPA N00014-90-J-1863, ARO DAAL03-89-C-0031, NSF IRI 90-16592, Ben Franklin 91S.3078C-1. Preparation of this paper was supported by a postdoctoral fellowship at the Technion in Israel. I am grateful to Mark Hepple, Mitch Marcus, Mark Steedman, VM Tannen, and Henry Thompson for helpful suggestions, and to Jeff Siskind for help with typesetting CCG derivations. Any errors are my own. Ambiguity Resolution Recently, a great deal of evidence has accumulated that humans resolve syntactic ambiguity by considering the meaning of the available analyses and selecting the 'best' one. Various criteria for goodness of meaning have been advanced in the psycholinguistic literature: e.g. thematic compatibility and lexical selection (Trueswell and Tanenhaus 1994) , discourse felicity of definite expressions (Altmann et al. 1994) , temporal coherence in discourse (Trueswell and Tanenhaus 1991) , grammatical function vis avis given/new status (Niv 1993b) , and general world-knowledge (Kawamoto and Farrar 1993) . Many of the works cited above consider the timing of the ambiguity resolution decision. The evidence is overwhelming that ambiguity is resolved within a word or two of the arrival of disambiguating information--that is, when there is a meaningbased criterion which militates toward one or another syntactically available analysis, that analysis is selected. Should the other analysis turn out to be the ultimately correct analysis, a garden path will result. Given that the various analyses available are compared on various criteria of sensibleness, it follows that these analyses are constructed and maintained in parallel until disambiguating information arrives. Indeed, there is psycholinguistic evidence that the processor maintains the various analyses in parallel (Nicol and Pickering 1993; MacDonland et al. 1992) . Our parser, therefore, must be able to build and maintain analyses in parallel. It must also extract from the developing parse in a prompt fashion all of the semantically relevant syntactic commitments (e.g. predicate-argument relations) in order to allow the interpretation module that it feeds to make accurate evaluations of the meaning. Recovery from garden paths is not addressed in this paper. Parser and Grammar Let us adopt the widely held position that humans posses a representation of grammatical competence which is independent of any process (e.g. production, perception, acquisition) that uses it. Steedman (1994) argues that if two theories of the grammar and processor package have identical empirical coverage, but one has a more complex parser, then the other is preferred. This preference is not just on philosophical grounds of cleanliness of one's theories, but stems from consideration of the evolution of the human linguistic capacity: A theory whose grammar requires a complex parser in order to be of any use would entail a more complex or less likely evolutionary path which the parser and grammar took together than would a theory whose grammar requires little specialized apparatus by way of a parser, and could thus have evolved gradually. So what is the simplest parser one can construct? In other words, what is the minimal addition of computational apparatus to the competence grammar necessary to make it parse? From the argument in section 1.1, this addition must include a mechanism for maintaining analyses in parallel. Minimally, nothing else is necessary --the data structure which resides in each parallel slot in the parser is a direct representation of an analysis as defined by the competence machinery. Suppose the grammatical competence is one that always divides an English clause into a subject and a predicate (VP henceforth). Suppose also that the primary operations of the grammar are putting constituents together. Could the minimal parser for such a grammar account for the minimal pair in (1)? (1) a. The doctor sent for the patient arrived. b. The flowers sent for the patient arrived. (1)a is a garden path. In (1)b the garden path is avoided because flowers are not good senders. The difference between (1)a and b indicates that well before the word 'arrived' is encountered, the processor has already resolved the ambiguity introduced by the word 'sent'. That is, in the main-verb analysis of 'sent', the interpreter is aware of the relation between the subject the verb before the end of the VP. But the minimal parser cannot put the subject together with 'sent' or 'sent for the' because the latter are not a complete VP! There are two possible solutions to this problem, each relaxes one of the two suppositions above: Steedman (1994) argues for a grammatical theory (CCG) which does not always make the subjectpredicate juncture the primary division point of a clause. Shieber and Johnson (1993) on the other hand, argue that there is no need to assume that a constituent has to be complete before it is combined with its sister(s). At this time, neither approach is sufficiently developed to be evaluable (e.g. they both lack broad coverage grammar) so either one is viable. In this paper, I develop the first. A derivation is a binary tree whose leaves are each a single-word constituent, and whose internal nodes are each a constituent which is derived from its children by an application of one of the combinatory rules. A string w is grammatical just in case there exists a derivation whose frontier is w. I equivocate between a derivation and the constituent at its root. An analysis of a string w is a sequence of derivations such that the concatenation of their frontiers is w. The Simplest Parser Let us consider the simplest conceivable parser. Its specification is \"find all analyses of the string so far.\" It has a collection of slots for maintaining one analysis each, in parallel. Each slot maintains an analysis of the string seen so far --a sequence of one or more derivations. The parser has two operations, as shown in figure 1 . This parser succeeds in constructing the incremental analysis (2) necessary for solving the problem in (1). 1Two common combinatory rules, type-raising and substitution are not listed here. The substitution rule (Steedman 1987 ) is orthogonal to the present discussion and can be added without modification. The rule for type-raising (see e.g. Dowty 1988) can cause difficulties for the parsing scheme advocated here (Hepple 1987) and is therefore assumed to apply in the lexicon. So a proper name, for example, would be have two categories: np and s/(s\\np). Forward combination rule name X/Y Y X >0 X/Y YIZ X[Z >1 X/Y Y]-Z11Z2 X~z [Z2 >2 Backward Combination rule name X/Y YIZ1...IZ. XIZI...[Z. >n Y X\\Y , X <0 YIZ x\\Y , xlz <1 Y]-Z, [Z2 X\\Y ~ X]-ZIIZ2 \" <2 Y[Z1... [Zn X\\Y ' X[Z1... [Zn <n IZ stands for either/Z or \\Z. Underlined regions in a rule must match. Table 1 : The combinatory rules \u2022 scan get the next word from the input stream for each analysis a in the parser's memory empty the slot containing a for each lexical entry e of the word make a copy a ~ of a add the leaf derivation e to the right of a ~ add a ~ as a new analysis \u2022 combine for each analysis a in the parser's memory if a contains more than one constituent and some rule can combine the rightmost two constituents in a then make a copy a ~ of a replace the two constituents of a ~ by their combination add a / as a new analysis But this parser is just an unconstrained shiftreduce parser that simulates non-determinism via parallelism. It suffers from a standard problem of simple bottom-up parsers: it can only know when a certain substring has a derivation, but in case a substring does not have a derivation, the parser cannot yet know whether or not a larger string containing the substring will have a derivation. This means that when faced with a string such as (3) The insults the new students shouted at the teacher were appalling. the parser will note the noun-verb ambiguity of 'insults', but will be unable to use the information that 'insults' is preceded by a determiner to rule out the verb analysis in a timely fashion. It would only notice the difficulty with the verb analysis after it had come to the end of the string and failed to find a derivation for it. This delay in ruling out doomed analyses means that the parser and the interpreter are burdened with a quickly proliferating collection of irrelevant analyses. Standard solution to this problem (e.g. Earley's 1970 parser; LR parsing, Aho and Johnson 1974) consider global properties of the competence grammar to infer that no grammatical string will begin with a determiner followed by a verb. These solutions exact a cost in complicating the design of the parser: new data structures such as dotted rules or an LR table must be added to the parser. The parser is no longer a generic search algorithm for the competence grammar. Given the flexibility of CCG derivations, one may consider imposing a very simple constraint on the parser: every prefix of a grammatical string must have a derivation. But such a move it too heavy-handed. Indeed CCG often gives left-branching derivations, but it is not purely left-branching. For example, the derivation of a WH-dependency requires leaving the WHfiller constituent uncombined until the entire gapcontaining constituent is completed, as in (4). (4) whose cat did Fred find n s/s s/(s\\np) >i s\\np/np q/(s/np)/n >0 q/(s/np) s/(s\\np) s/np >I >0 The Viable Analysis Criterion Given the desideratum to minimize the complexity of the biologically specified parser, I propose that the human parser is indeed as simple as the scancombine algorithm presented above, and that the ability to rule out analyses such as determiner+verb is not innate, but is an acquired skill. This 'skill' is implemented as a criterion which an analysis must meet in order to survive. An infant starts out with this criterion completely permissive. Consequently it cannot process any utterances longer than a few words without requiring excessively many parser slots. But as the infant observes the various analyses in the parser memory and tracks their respective outcomes, it notices that certain sequences of categories never lead to a grammatical overall analysis. After observing an analysis failing a certain number of times and never succeeding, the child concludes that it is not a viable analysis and learns to discard it. The more spurious analyses are discarded, the better able the child is to cope with longer strings. The collection of analyses that are maintained by the parser is therefore filtered by two independent processes: The Viable Analysis Criterion is a purely syntactic filter which rules out analyses independently of ambiguity. The interpreter considers the semantic information of the remaining analyses in parallel and occasionally deems certain analyses more sensible than their competitors, and discards the latter. Given that English sentences rarely require more than two or three CCG constituents at any point in their parse, and given the limited range of categories that arise in English, the problem of learning the viable analysis criterion from data promises to be comparable to other n-gram learning tasks. The empirical validation of this proposal awaits the availability of a broad coverage CCG for English, and other languages. 2 5 CCG and flexible derivation 5.1 The Problem CCG's distinguishing characteristic is its derivational flexibility --the fact that one string is potentially assigned many truth-conditionally equivalent analyses. This feature is crucial to the present approach of incremental parsing (as well as for a range of grammatical phenomena, see e.g. Steedman 1987 Steedman , 1994;; Dowty 1988 ). But the additional ambiguity, sometimes referred to as 'spurious', is also a source of difficulty for parsing. For example, the truth-conditionally unambiguous string 'John was thinking that Bill had left' has CCG derivations corresponding to each of the 132 different binary trees possible for seven leaves. The fact that this sentence makes no unusual demands on humans makes it clear that its exponentially prolif~ crating ambiguous analyses are pruned somehow. The interpreter, which can resolve many kinds of ambiguity, cannot be used to for this task: it has no visible basis for determining, for example, that the single-constituent analysis 'John was thinking' 2In addition to the category-ambiguity problem in (3), the viable analysis criterion solves other problems, analogous to shift-reduce ambiguities, which are omitted here for reasons of space. The interested reader is referred to Niv (1993a) for a comprehensive discussion and an implementation of the parser proposed here. somehow makes more sense (in CCG) than the twoconstituent analysis 'John'+'was thinking'. Note that the maximMly left-branching derivation is the one which most promptly identifies syntactic relations, and is thus the preferred derivation. It is possible to extend the viable analysis criterion to encompass this consideration of efficiency as well. The infant learns that it is usually most efficient to combine whenever possible, and to discard an analysis in which a combination is possible, but not taken. 3. Previous Approaches Following up on the work of Lambek (1958) who proposed that the process of deriving the grammaticality of a string of categories be viewed as a proof, there have been quite a few proposals put forth for computing only normal forms of derivations or proofs (KSnig 1989; Hepple and Morrill 1989; Hepple 1991 ; inter alia). The basic idea with all of these works is to define 'normal forms' --distinguished members of each equivalence class of derivations, and to require the parser to search this smaller space of possible derivations. But none of the proposed methods result in parsing systems which proceed incrementally through the string. 4 Karttunen (1989) and others have proposed chart-based parsers which directly address the derivational ambiguity problem. For the present purpose, the principal feature of chart parsing -the factoring out of constituents from analyses -turns out to create an encumberance: The interpreter cannot compare constituents, or arcs, for the purposes of ambiguity resolution. It must compare analyses of the entire prefix so far, which are awkward to compute from the developing chart. 3 Discussion of the consequences of this move on the processing of picture noun extractions and ambiguityrelated filled-gap effects is omitted for lack of space. See Niv (1993a) . 4In the case of Hepple's (1991) proposal, a leftbranching normal form is indeed computed. But its computation must be delayed for some words, so it does not provide the interpreter with timely information about the incoming string. Pareschi and Steedman (1987) propose the following strategy: (which can be taken out of the chart-parsing context of their paper) construct only maximally left-branching derivations, but allow a limited form of backtracking when a locally non-left-branching derivation turns out to have been necessary. For example, when parsing ( 5 The idea with this 'revealing' operation is to exploit the fact that the rules >n and <n, when viewed as three-place relations, are functional in all three arguments. That is, knowledge any two of {left constituent, right constituent, result), uniquely determines the third. There are many problems with the completeness and soundness Pareschi and Steedman's proposal (Hepple 1987; Niv 1993a) . For example, in ( 7 ), the category b\\c cannot be revealed after it had participated in two combinations of mixed direction: <0 and >0.  Results from the study of rewrite systems (see Klop (1992) for an overview) help determine the computational complexity of this operation: A Rewrite System for Derivations If x is a node in a binary tree let A(x) (resp. p(x)) refer to its left (right) child. Any subtree of a derivation which matches the left-hand-side of either (8) or ( 9 ) is called a redez. The result of replacing a redex by the corresponding right-hand-side of a rule is called the eontractum. A derivation is in normal form (NF) if it contains no redexes. In the following I use the symbol --~ to also stand for the relation over pairs of derivations such that the second is derived from the first by one application of ,7. Let ~--be the converse of---*. Let ( , be ~ U ~---. Let ,~ be the reflexive transitive closure of --~ and similarly, the reflexive transitive closure of ~---, and , ,, the reflexive transitive closure of ~ ,. Note that .... is an equivalence relation. A rewrite system is strongly normalizing (SN) iff every sequence of applications of ~ is finite. Theorem 1 ---* is SN 5 proof Every derivation with n internal nodes is assigned a positive integer score. An application of is guaranteed to yield a derivation with a lower 5Hepple and Morrill (1989) Proved SN for a slight variant of ---*. The present proof provides a tighter score function, see lemma 1 below. Figure 2 : Schema for one redex in DRS score. This is done by defining functions # and for each node of the derivation as follows: (~ if x is a leaf node #(x) = + #(A(x)) + #(p(x)) otherwise f0 if x is a leaf node ~(x) = ~\u00a2r(A(x)) + ~(p(x)) + #(A(x)) otherwise Each application of ---+ decreases a, the score of the derivation. This follows from the monotonic dependency of the score of the root of the derivation upon the scores of each sub-derivation, and from the fact that locally, the score of a redex decreases when ---+ is applied: In figure 2 , a derivation is depicted schematically with a redex whose sub-constituents are named a, b, and c. Applying ~ reduces ~(e), hence the score of the whole derivation. Lemma I Given a derivation x, let n = #x. Every sequence of applications of ---+ is of length at most n(n -1)/2. 6 proof By induction on n: Base case: n = 1; 0 applications are necessary. Induction: Suppose true for all derivations of fewer than n internal nodes. Let m = #A(x). So 0 < 6Niv (1994) shows by example that this bound is tight. So far I have shown that every sequence of applications of ----+ is not very long: at most quadratic in the size of the derivation. I now show that when there is a choice of redex, it makes no difference which redex one picks. That is, all redex selection strategies result in the same normal form. Lemma 2 ---, is WCR. proof Let w be a derivation with two distinct redexes x and y, yielding the two distinct derivations w I and w\" respectively. There are a few possibilities: case 1: x and y share no internal nodes. There are three subcases: x dominates y (includes y as a subconstituent), x is dominated by y, or z and y are incomparable with respect to dominance. Either way, it is clear that the order of application of ---+ makes no difference. case 2: x and y share some internal node. Without loss of generality, y does not dominate x. There exists a derivation z such that w~----~ zAw\"---~ z. This is depicted in figure 3 . (Note that all three internal nodes in figure 3 are of the same rule direction, either > or <.) [] Lemma 3 (Newman) WCR A SN D CR. Theorem 2 ~ is CR. proof From theorem 1 and lemmas 2 and 3. [] Therefore any maximal sequence of applications of ~ will lead to the normal form 7. We are free to select the most efficient redex selection scheme. From lemma 1 the worst case is quadratic. Niv (1994) shows that the optimal strategy, of applying --+ closest as possible to the root, yields ---+ applications sequences of at most n steps. 7Assuming, as is the case with extant CCG accounts, that constraints on the applicability of the combinatory rules do not present significant roadblocks to the derivation rewrite process. Note that all that was said in this section generalizes beyond CCG derivations to any associative algebra. Discussion Given the rightmost subconstituent recovered using the normal form technique above, how should parsing proceed? Obviously, if the leftward looking category which precipitated the normal form computation is a modifier, i.e. of the form X\\X, then it ought to be combined with the recovered constituent in a form analogous to Chomsky adjunction. But what if this category is not of the form X\\X? For example, should the parser compute the reanalysis in (10)? Ascribing the same non-garden-path status to the reanalysis in (10) that we do to (6) would constitute a very odd move: Before reanalysis, the derivation encoded the commitment that the /b of the first category is satisfied by the b of the b/c in the second category. This commitment is undone in the reanalysis. This is an undesirable property to have in a computational model of parsing commitment, as it renders certain revisions of commitments eas-ier than others, without any empirical justification. Furthermore, given the possibility that the parser change its mind about what serves as argument to what, the interpreter must be able to cope with such non-monotonic updates to its view of the analysis so far --this would surely complicate the design of the interpreter, s Therefore, constituents on the right-frontier of a right-normal-form should only combine with 'endocentric' categories to their right. The precise definition of 'endocentric' depends on the semantic formalism used --it certainly includes post-head modifiers, and might also include coordination. Stipulating that certain reanalyses are impossible immediately makes the parser 'incomplete' in the sense that it cannot find the analysis in (10). From the current perspective of identifying garden paths, this incompleteness is a desirable, even a necessary property. In (10), committing to the composition of a/b and b/c is tantamount to being led down the garden path. In a different sense, the current parser is complete: it finds all analyses if the Viable Analysis Criterion and the interpreter never discard any analyses. Conclusion The current proposal shifts some of the burden traditionally associated with the parser to other components of the human cognitive faculty: the interpreter resolves ambiguity, and an acquired skill removes 'garbage' analyses from the parser's memory --solving the so-called spurious ambiguity problem, as well as effectively applying grammarglobal constraints traditionally computed by topdown techniques or grammar compilation. The resultant parser adheres to the desideratum that it be a generic search algorithm for the grammar formalism, provided the definition of CCG explicitly includes the notion of 'derivation' and explicates the truth-conditional equivalence relation. Such inclusions have indeed been proposed (Steedman 1990 ).",
    "abstract": "Considering the speed in which humans resolve syntactic ambiguity, and the overwhelming evidence that syntactic ambiguity is resolved through selection of the analysis whose interpretation is the most 'sensible', one comes to the conclusion that interpretation, hence parsing take place incrementally, just about every word. Considerations of parsimony in the theory of the syntactic processor lead one to explore the simplest of parsers: one which represents only analyses as defined by the grammar and no other information. Toward this aim of a simple, incremental parser I explore the proposal that the competence grammar is a Combinatory Categorial Grammar (CCG). I address the problem of the proliferating analyses that stem from CCG's associativity of derivation. My solution involves maintaining only the maximally incremental analysis and, when necessary, computing the maximally right-branching analysis. I use results from the study of rewrite systems to show that this computation is efficient.",
    "countries": [
        "Israel"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "16",
    "year": "1994",
    "month": "June",
    "title": "A Psycholinguistically Motivated Parser for {CCG}"
}