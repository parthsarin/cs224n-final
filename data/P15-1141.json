{
    "article": "Most existing topic models make the bagof-words assumption that words are generated independently, and so ignore potentially useful information about word order. Previous attempts to use collocations (short sequences of adjacent words) in topic models have either relied on a pipeline approach, restricted attention to bigrams, or resulted in models whose inference does not scale to large corpora. This paper studies how to simultaneously learn both collocations and their topic assignments. We present an efficient reformulation of the Adaptor Grammar-based topical collocation model (AG-colloc) (Johnson, 2010), and develop a point-wise sampling algorithm for posterior inference in this new formulation. We further improve the efficiency of the sampling algorithm by exploiting sparsity and parallelising inference. Experimental results derived in text classification, information retrieval and human evaluation tasks across a range of datasets show that this reformulation scales to hundreds of thousands of documents while maintaining the good performance of the AG-colloc model. Introduction Probabilistic topic models like Latent Dirichlet Allocation (LDA) (Blei et al., 2003) are commonly used to study the meaning of text by identifying a set of latent topics from a collection of documents and assigning each word in these documents to one of the latent topics. A document is modelled as a mixture of latent topics, and each topic is a distribution over a finite vocabulary of words. It is common for topic models to treat documents as bags-of-words, ignoring any inter-nal structure. While this simplifies posterior inference, it also ignores the information encoded in, for example, syntactic relationships (Boyd-Graber and Blei, 2009) , word order (Wallach, 2006) and the topic structure of documents (Du et al., 2013) . Here we are interested in topic models that capture dependencies between adjacent words in a topic dependent way. For example, the phrase \"white house\" can be interpreted compositionally in a real-estate context, but not in a political context. Several extensions of LDA have been proposed that assign topics not only to individual words but also to multi-word phrases, which we call topical collocations. However, as we will discuss in section 2, most of those extensions either rely on a pre-processing step to identify potential collocations (e.g., bigrams and trigrams) or limit attention to bigram dependencies. We want a model that can jointly learn collocations of arbitrary length and their corresponding topic assignments from a large collection of documents. The AG-colloc model (Johnson, 2010) does exactly this. However, because the model is formulated within the Adaptor Grammar framework (Johnson et al., 2007) , the time complexity of its inference algorithm is cubic in the length of each text fragment, and so it is not feasible to apply the AG-colloc model to large collections of text documents. In this paper we show how to reformulate the AG-colloc model so it is no longer relies on a general Adaptor Grammar inference procedure. The new formulation facilitates more efficient inference by extending ideas developed for Bayesian word segmentation (Goldwater et al., 2009) . We adapt a point-wise sampling algorithm from Bayesian word segmentation, which has also been used in Du et al. (2013) , to simultaneously sample collocation boundaries and collocation topic assignments. This algorithm retains the good performance of the AG-colloc model in document classification and information retrieval tasks. By exploiting the sparse structure of both collocation and topic distributions, using techniques inspired by Yao et al. (2009) , our new inference algorithm produces a remarkable speedup in running time and allows our reformulation to scale to a large number of documents. This algorithm can also be easily parallelised to take advantage of multiple cores by combining the ideas of the distributed LDA model (Newman et al., 2009) . Thus, the contribution of this paper is three-fold: 1) a novel reformulation of the AG-colloc model, 2) an easily parallelisable and fast point-wise sampling algorithm exploiting sparsity and 3) systematic experiments with both qualitative and quantitative analysis. The structure of the paper is as follows. In Section 2 we briefly discuss prior work on learning topical collocations. We then present our reformulation of the AG-colloc model in Section 3. Section 4 derives a point-wise Gibbs sampler for the model and shows how this sampler can take advantage of sparsity and be parallelised across multiple cores. Experimental results are reported in Section 5. Section 6 concludes this paper and discusses future work. Related Work There are two main approaches to incorporating topical collocations in LDA: 1) pipeline approaches that use a pre-processing step prior to LDA, and 2) extensions to LDA, which modify the generative process. In this section we discuss prior work that falls into these two categories and their limitations. Pipeline Approaches (Lau et al., 2013) , denoted here by PA, involve two steps. The first step identifies a set of bigrams that are potentially relevant collocations from documents by using simple heuristics for learning collocations, e.g., the Student's t-test method of Banerjee and Pedersen (2003) . For each identified bigram \"w 1 w 2 \", a new pseudo word \"w 1 w 2 \" is added to the vocabulary and the documents are re-tokenised to treat every instance of this bigram as a new token. LDA is then applied directly to the modified corpus without any changes to the model. While Lau et al. demonstrated that this two-step approach improves performance on a document classification task, it is limited in two ways. First, it can identify only collocations of a fixed length (i.e., bigrams). Second, the pre-processing step that identifies collocation candidates has no access to contextual cues (e.g. the topic of the context in which a bigram occurs), A variety of extensions to the LDA model have been proposed to address this second shortcoming. Most extensions add some ability to capture word-to-word dependencies directly into the underlying generative process. For example, Wallach (2006) incorporates a hierarchical Dirichlet language model (MacKay and Peto, 1995) , enabling her model to automatically cluster function words together. The model proposed by Griffiths et al. (2004) combines a hidden Markov model with LDA, using the former to model syntax and the latter to model semantics. The LDA collocation model (LDACOL) (Griffiths et al., 2007) infers both the per-topic word distribution in the standard LDA model and, for each word in the vocabulary, a distribution over the words that follow it. The generative process of the LDACOL model allows words in a document to be generated in two ways. A word is generated either by drawing it directly from a per-topic word distribution corresponding to its topic as in LDA, or by drawing it from the word distribution associated with its preceding word w. The two alternatives are controlled by a set of Bernoulli random variables associated with individual words. Sequences of words generated from their predecessors constitute topical collocations. Wang et al. (2007) extended the LDACOL model to generate the second word of a collocation from a distribution that conditions on not only the first word but also the first word's topic assignment, proposing the topical N-gram (TNG) model. In other words, whereas LDACOL only adds a distribution for every word-type to LDA, TNG adds a distribution for every possible word-topic pair. Wang et al. found that this modification allowed TNG to outperform LDACOL on a standard information retrieval task. However, both LDACOL and TNG do not require words within a sequence to share the same topic, which can result in semantically incoherent collocations. Subsquent models have sought to encourage topically coherent collocations, including Phrase-Discovering LDA (Lindsey et al., 2012) , the timebased topical n-gram model (Jameel and Lam, 2013a) and the n-gram Hierarchical Dirichlet Process (HDP) model (Jameel and Lam, 2013b) . Phrase-Discovering LDA is a non-parametric ex-tension of TNG inspired by Bayesian N-gram models Teh (2006) that incorporate a Pitman-Yor Process prior. The n-gram HDP is a nonparametric extension of LDA-colloc, putting an HDP prior on the per-document topic distribution. Both of these non-parametric extensions use the Chinese Franchise representation for posterior inference. Our work here is based on the AG-colloc model proposed by Johnson (2010) . He showed how Adaptor Grammars can generalise LDA to learn topical collocations of unbounded length while jointly identifying the topics that occur in each document. Unfortunately, because the Adaptor Grammar inference algorithm uses Probabilistic Context-Free Grammar (PCFG) parsing as a subroutine, the time complexity of inference is cubic in the length of individual text fragments. In order to improve the efficiency of the AG-colloc model, we re-express it using ideas from Bayesian word segmentation models. This allows us to develop an efficient inference algorithm for the AGcolloc model that scales to large corpora. Finally, we evaluate our model in terms of classification, information retrieval, and topic intrusion detection tasks; to our knowledge, we are the first to evaluate topical collocation models along all the three dimensions. Topical Collocation Model In this section we present our reformulation of the AG-colloc model, which we call the Topical Collocation Model (TCM) to emphasise that we are not using a grammar-based formulation. We start with the Unigram word segmentation model and Adaptor Grammar model of topical collocations, and then present our reformulation. Goldwater et al. (2009) introduced a Bayesian model for word segmentation known as the Unigram model. This model is based on the Dirichet Process (DP) and assumes the following generative process for a sequence of words. G \u223c DP (\u03b1 0 , P 0 ), w i | G \u223c G Here, P 0 is some distribution over the countably infinite set of all possible word forms (which are in turn sequences of a finite number of characters), and G is a draw from a Dirichlet Process. Inference is usually performed under a collapsed model in which G is integrated out, giving rise to a Chinese Restaurant Process (CRP) representation. The CRP is defined by the following pre-dictive probability of w i given w 1:i\u22121 : p(w i = l|w 1:i\u22121 ) = n l i \u2212 1 + \u03b1 0 + \u03b1 0 P 0 (l) i \u2212 1 + \u03b1 0 , where n l is the number of times word form l appears in the first n \u2212 1 words. During inference, the words are not known, and the model observes only a sequence of characters. Goldwater et al. (2009) derived a linear time Gibbs sampler that samples from the posterior distribution over possible segmentations of a given corpus according to the model. Their key insight is that sampling can be performed over a vector of Boolean boundary indicator variables -not included in the original description of the modelthat indicates which adjacent characters are separated by a word boundary. We will show how this idea can be generalised to yield an inference algorithm for the AG-colloc model. Adaptor Grammars (Johnson et al., 2007 ) are a generalisation of PCFGs. In a PCFG, a nonterminal A is expanded by selecting a rule A \u2192 \u03b2 with probability P (\u03b2|A), where \u03b2 is a sequence of terminal and non-terminal node labels. Because the rules are selected independently, PCFGs introduce strong conditional independence assumptions. In an Adaptor Grammar, some of the nonterminal labels are adapted. These nodes can be expanded either by selecting a rule, as in PCFGs, or by retrieving an entire subtree from a Dirichlet Process cache specific to that node's non-terminal label, 1 breaking the conditional independence assumptions and capturing longer-range statistical relationships. The AG-colloc model can be concisely expressed using context free grammar rule schemata, where adapted non-terminals are underlined: Top \u2192 Doc m Doc m \u2192 \u2212m | Doc m Topic i Topic i \u2192 Word + Here m ranges over the documents, i ranges over topics, \"|\" separates possible expansions, and \" + \" means \"one or more\". As in LDA, each document is defined as a mixture of K topics with the mixture probabilities corresponding to the probabili-ties of the different expansions of Doc m . However, the topic distributions are modelled using an adapted non-terminal Topic i . This means that there is an infinite number of rules expanding Topic i , one for every possible sequence over the finite vocabulary of words. Topic i non-terminals cache sequences of words, just as G caches sequences of characters in the Unigram model. The base distribution of the AG-colloc model is a geometric distribution over sequences of a finite vocabulary of words: P 0 (c = (w 1 , . . . , w M )) = p # (1\u2212p # ) M \u22121 M j=1 P w (w j ) , where P w (\u2022) is the uniform distribution over the finite set of words. This is the same base distribution used by Goldwater et al. (2009) , except characters have been replaced by words. p # is the probability of seeing the end of a collocation, and so controls the length of collocations. With this, we can re-express the AG-colloc model as a slight modification of the Unigram model: 1. For each topic k, 1 \u2264 k \u2264 K, \u03c6 k \u223c DP(\u03b10, P0) 2. For each document d, 1 \u2264 d \u2264 D (a) Draw a topic distribution \u03b8 d |\u03b1 \u223c DirichletK (\u03b1) (b) For each collocation c d,n in document d, 1 \u2264 n \u2264 N d i. Draw a topic assignment: z d,n | \u03b8 d \u223c Discrete(\u03b8 d ) ii. Draw a collocation: c d,n | z d,n , \u03c6 1 , . . . , \u03c6 K \u223c \u03c6 z d,n where the length of a collocation c where l = max {i | 1 \u2264 i \u2264 j \u2212 1 \u2227 b d,i = 0}, and b d,j = k (1 \u2264 k \u2264 K) is the topic of the collocation. Note that b d,N d must not be 0 as the end of a document is always a collocation boundary. For example, consider the document consisting of the words \"the white house.\" We use the K+1valued variables b 1 , b 2 (after 'the' and 'white') and the K-valued variable b 3 (after 'house') to describe every possible segmentation of this document into topical collocations. 3 If there are K topics and N words, there are (K + 1) N \u22121 K possible topical segmentations. To illustrate, see how each of the following triples (b 1 , b 2 , b 3 ) encodes a different analysis of \"the white house\" into bracketed collocations and subscripted topic numbers: \u2022 (0, 0, 1) : (the white house) 1 \u2022 (1, 0, 2) : (the) 1 (white house) 2 \u2022 (2, 1, 1) : (the) 2 (white) 1 (house) 1 The next section elaborates the Gibbs sampler over these K+1 boundary variables. A Point-wise Gibbs Sampler for the TCM We consider a collapsed version of the TCM in which the document-specific topic mixtures \u03b8 1:D and the K non-parametric topic distributions \u03c6 1:K are integrated out. We introduce the sampling equations using a concrete example, considering again the toy document, \"the white house.\" Let the sampler start in state b 1 = b 2 = 0, b 3 = z 0 , 1 \u2264 z 0 \u2264 K. This corresponds to the analysis (the 0 white 0 house z 0 c 0 ) . This analysis consists of a single collocation c 0 which spans the entire document and is assigned to topic z 0 . For simplicity, we will not show how to model document boundaries. If we resample b 1 , we have to consider two different hypotheses, i.e., putting or not putting a collocation boundary at b 1 . The analysis corresponding to not putting a boundary is the one we just saw. Putting a boundary corresponds to a new segmentation, (the z 1 ) c 1 (white 0 house z 2 c 2 ) . We need to consider the K possible topics for c 1 , for each of which we calculate the probability as follows. If b 1 = 0 (i.e., there is no collocation boundary after \"the\") we have p(z 0 , c 0 |\u00b5) = p(z 0 |\u03b1)p(c 0 |\u03b1 0 , P 0 , z 0 ) , (1) where \u00b5 = {\u03b1, \u03b1 0 , P 0 }. p(c 0 |\u03b1 0 , P 0 , z 0 ) is the probability of generating collocation c 0 from topic z 0 with a CRP, i.e., p(c 0 |\u03b1 0 , P 0 , z 0 ) = n \u2212c 0 z 0 + \u03b1 0 P 0 (c 0 ) N \u2212c 0 z 0 + \u03b1 0 , (2) where n \u2212c 0 z 0 is the number of times that collocation c 0 was assigned to topic z 0 and N \u2212c 0 z 0 is the total number of collocations assigned to z 0 . Both counts exclude the parts of the analysis that are affected by the boundary c 0 . As in LDA, p(z 0 = k|\u03b1) = n\u2212c 0 k + \u03b1 K k=1 n\u2212c 0 k + K\u03b1 , (3) where n\u2212c 0 k is the total number of collocations assigned to topic k in a document, again excluding the count for the parts of the document that are affected by the current boundary. For the hypothesis that b 1 = z 1 (with 1 \u2264 z 1 \u2264 K), the full conditional to generate two adjacent collocations is p(z 1 , z 2 , c 1 , c 2 |\u00b5) \u221d (4) p(z 1 |\u03b1)p(c 1 |\u03b1 0 , P 0 , z 1 ) p(z 2 |\u03b1, z 1 )p(c 2 |\u03b1 0 , P 0 , c 1 , z 1 , z 2 ) , where p(z 1 |\u03b1) and p(c 1 |\u03b1 0 , P 0 , z 1 ) can be computed with Eqs (3) and (2), respectively. The remaining probabilities are computed as p(z 2 = k|\u03b1, z 1 ) = n\u2212c 1 ,c 2 k + \u03b1 + I z 2 =z 1 K k=1 n\u2212c 1 ,c 2 k + K\u03b1 + 1 , (5) p(c 2 |\u03b1 0 , P 0 , c 1 , z 1 , z 2 ) = n \u2212c 1 ,c 2 z 2 + I z 1 =z 2 I c 1 =c 2 + \u03b1 0 P 0 (c 2 ) \u03b1 0 + N \u2212c 1 ,c 2 z 2 + I z 1 =z 2 (6) where I x=y is an indicator function that is equal to 1 if x = y and 0 otherwise, n \u2212c 1 ,c 2 z 2 is the number of collocations c 2 assigned to topic z 2 , and N \u2212c 1 ,c 2 z 2 is the total number of collocations assigned to topic z 2 . Both counts exclude the current c 2 , and also exclude c 1 if z 1 = z 2 and c 1 = c 2 . Our sampler does random sweeps over all the boundary positions, and calculates the joint probability of the corresponding collocations and their topic assignment using Eqs (1) and ( 4 ) at each position. Parallelised Sparse Sampling Algorithm The word distributions and topic distributions in LDA are typically sparse, and Yao et al. (2009) proposed a 'sparseLDA' Gibbs sampler that takes advantage of this sparsity to substantially reduce running time. These two distributions are even sparser for the TCM than LDA, because collocations are less frequent than unigrams. Here we show how to modify our sampler to take advantage of sparsity. Sampling boundaries according the two probabilities shown Eqs ( 1 ) and ( 4 ) requires the generation of a random number x from a uniform distribution, U(0, P), where P = p(z 0 , c 0 ) + K z 1 =1 p(z 1 , c 1 )p(z 2 , c 2 |c 1 , z 1 ) . (7) Here the first term corresponds to the case that there is no collocation boundary, and the summation corresponds to the case that there is a collocation boundary. Thus, if x is less than P (z 0 , c 0 ), there will be no boundary. Otherwise, we need to sample z 1 according to Eq (4). The sampling algorithm requires calculation of Eq (7), even though the probability mass may be concentrated on just a few topics. We have observed in our experiments that the denominators of Eqs ( 5 ) and ( 6 ) are often quite large and the indicator functions usually turn out to be zero, so we approximate the two equations by removing the indicator functions. This approximation not only facilitates the computation of Eq ( 7 ), but also means that p(z 2 , c 2 |c 1 , z 1 ) no longer depends on z 1 and c 1 . Thus, Eq (7) can be approximated as P \u2248 p(z 0 , c 0 ) + p(z 2 , c 2 ) K z 1 =1 p(z 1 , c 1 ) . ( 8 ) Now that p(z 0 , c 0 ) and p(z 2 , c 2 ) are both out of the summation; they can be pre-computed and cached. To reduce the computational complexity of the summation term in Eq (8), we use the \"buckets\" method (Yao et al., 2009) . We divide the summation term in p(z 1 , c 1 ) into three parts as follows, each of which corresponds to a bucket: p(z 1 = k, c 1 ) = n\u2212c 1 ,c 2 k + \u03b1 K k=1 n\u2212c 1 ,c 2 k + K\u03b1 n \u2212c 1 ,c 2 k + \u03b1 0 P 0 (c 1 ) N \u2212c 1 ,c 2 k + \u03b1 0 \u221d \u03b1 0 P 0 (c 1 )\u03b1 N \u2212c 1 ,c 2 k + \u03b1 0 + n\u2212c 1 ,c 2 k \u03b1 0 P 0 (c 1 ) N \u2212c 1 ,c 2 k + \u03b1 0 + (n \u2212c 1 ,c 2 k + \u03b1)n \u2212c 1 ,c 2 k N \u2212c 1 ,c 2 k + \u03b1 0 (9) Then, the summation in Eq ( 8 ) is proportional to the sum of the following three equations: s = K k=1 \u03b1 0 P 0 (c 1 )\u03b1 N \u2212c 1 ,c 2 k + \u03b1 0 (10) r = K k=1 n\u2212c 1 ,c 2 k \u03b1 0 P 0 (c 1 ) N \u2212c 1 ,c 2 k + \u03b1 0 (11) q = K k=1 (n \u2212c 1 ,c 2 k + \u03b1)n \u2212c 1 ,c 2 k N \u2212c 1 ,c 2 k + \u03b1 0 (12) We can now use the sampling techniques used in the sparse-LDA model to sample z 1 . Firstly, sample U \u223c U(0, s + r + q). If U < s we have hit bucket s. In this case, we need to compute the probability for each possible topic. If s < x < (s + r) we have hit the second bucket r. In this case, we compute probabilities only for topics such that n\u2212c 1 ,c 2 k = 0. If x > (s + r) we have hit bucket q, which is the \"topic collection\" bucket, and we need only consider topics such that n \u2212c 1 ,c 2 k = 0. Although we use an approximation in computing the full conditionals, experimental results have shown that our TCM is as accurate as the original AG-colloc model, see Section 5. Our sparse sampling algorithm can be easily parallelised with the same multi-threading strategy used by Newman et al. (2009) in their distributed LDA (AD-LDA). In AD-LDA, documents are distributed evenly across P processors, each of which also has a copy of the word-topic count matrix. Gibbs updates are performed simultaneously on each of the P processors. At the end of each Gibbs iteration, the P copies of the word-topic count matrices are collected and summed into the global word-topic count matrix. In the TCM, collocations in each topic are generated from a CRP. Hence, distributing the wordtopic count matrix in AD-LDA now corresponds to distributing a set of Chinese restaurants in the parallelised TCM. The challenge is how to merge the Chinese Restaurant copies from the P processors into a single global restaurant for each topic, similar to the merging problem in Du et al. (2013) . However, Eqs (2) and ( 6 ) show that the statistics that need to be collected are the number of collocations generated for each topic. The number of tables in a restaurant does not matter. 4 Therefore, we can adapt the summation technique used in AD-LDA. We further observed that if P is large, using a single processor to perform the summation operation could result in a large overhead. The summation step could be even costlier in TCM than in LDA, since the number of distinct collocations is much larger than the number of distinct words. Thus we also parallelise the summation step using all the processors that are free in this step. Experimental Results In this section we evaluate the effectiveness and efficiency of our Topical Collocation Model (TCM) on different tasks, i.e., a document classification task, an information retrieval task and a topic intrusion detection task. All the empirical results show that our TCM performs as well as the AG-colloc model and outperforms other collocation models (i.e., LDACOL (Griffiths et al., 2007) , TNG (Wang et al., 2007) , PA (Lau et al., 2013) ). The TCM also runs much faster than the other models. We also compared the TCM with the Mallet implementation of AD-LDA (Newman et al., 2009) , denoted by Mallet-LDA, for completeness. Following Griffiths et al. (2007) , we used punctuation and Mallet's stop words to split the documents into subsequences of word tokens, then removed those punctuation and stop words from the input. All experiments were run on a cluster with 80 Xeon E7-4850 processors (2.0GHz) and 96 GB memory. Classification Evaluation In the classification task, we used three datasets: the movie review dataset (Pang and Lee, 2012) (MReviews), the 20 Newsgroups dataset, and the Reuters-21578 dataset. The movie review dataset includes 1,000 positive and 1,000 negative reviews. The 20 Newsgroups dataset is organised The classification evaluation was carried out as follows. First, we ran each model on each dataset to derive point estimates of documents' topic distributions (\u03b8), which were used as the only features in classification. We then randomly selected from each dataset 80% documents for training and 20% for testing. A Support Vector Machine (SVM) with a linear-kernel was used. We ran all models for 10,000 iterations with 50 topics on the movie review dataset and 100 on the other two. We set \u03b1 = 1/K and \u03b2 = 0.02 for Mallet-LDA, LDACOL, TNG and PA. We used the reported settings in Johnson (2010) for the AG-colloc model. For the TCM, we used \u03b1 = 1/K. tion parameter \u03b1 0 was initially set to 100 and resampled using approximated table counts (Blunsom et al., 2009) . Since efficient inference is unavailable for LDACOL, TNG and AG-colloc, making it impractical to evaluate them on the large corpora, we compared our TCM with them only on the MReviews dataset. The first column of Table 1 shows the classification accuracy of those models. All the collocation models outperform Mallet-LDA. The AG-colloc model yields the highest classification accuracy, and our TCM with/without sparsity performs as well as the AG-colloc model according to the Wilcoxon signed rank test. The Pipeline Approach (PA) is always better than LDACOL and TNG. Therefore, in the following experiments we will focus on the comparison among our TCM, Mallet-LDA and PA. Table 2 shows the classification accuracy of those three models on the larger datasets, i.e., the 20 Newsgroups dataset, and the Reuters-21578 dataset. The TCM outperforms both Mallet-LDA and PA on 3 out of 5 datasets, and performs equally well as PA on the Politics and Reuter-21578 datasets according to a Wilcoxon signed rank test (p < 0.05). Information Retrieval Evaluation For the information retrieval task, we used the method presented by Wei and Croft (2006) and Wang et al. (2007) to calculate the probability of a query given a document. We used the San Jose Mercury News (SJMN) dataset and the AP News dataset from TREC. The former has 90,257 documents, the latter has 242,918 documents. Queries 51-150 were used. We ran all the models for 10,000 iteration with 100 topics. The other parameter settings were the same as those used in Section 5.1. Queries were tokenised using unigrams for Mallet-LDA and collocations for all collocation models. and takes less than a second per iteration. Therefore, Tables 1 and 5 jointly show that our reformulation runs an order of magnitude faster than AG-colloc without losing performance, thereby making the AG-colloc model inference feasible at large scales. We further studied the scalability of our sampling algorithm after parallelisation on the SJMN dataset and the AP news dataset. We fixed the number of topics to 100, and varied the number of processors from 1 to 24 for the SJMN dataset and from 1 to 80 for the AP dataset. The plots in Figure 1 show that our parallelised sampler achieved a remarkable speedup. We have also observed that there is a point at which using additional processors actually slows running time. This is common in parallel algorithms when communication and synchronisation take more time than the time saved by parallelisation. This slowdown occurs in the highly-optimized Mallet implementation of LDA with fewer cores than it does in our implementation. The speedup achieved by our TCM also shows the benefit of parallelising the summation step mentioned in Section 4.2. Conclusion In this paper we showed how to represent the AG-colloc model without using Adaptor Grammars, and how to adapt Gibbs sampling techniques from Bayesian word segmentation to perform posterior inference under the new representation. We further accelerated the sampling algorithm by taking advantage of the sparsity in the collocation count matrix. Experimental results derived in different tasks showed that 1) our new representation performs as well as the AG-colloc model and outperforms the other collocation models, 2) our point-wise sampling algorithm scales well to large corpora. There are several ways in which our model can be extended. For example, our algorithm could be further sped up by using the sampling techniques presented by Smola and Narayanamurthy (2010), Li et al. (2014) and Buntine and Mishra (2014) . One can also consider using a hybrid of MCMC and variational inference as in Ke et al. (2014) . Acknowledgments This research was supported by a Google award through the Natural Language Understanding Focused Program, and under the Australian Research Council's Discovery Projects funding scheme (project numbers DP110102506 and DP110102593). On a small subset of the SJMN data, which contains 2,000 documents (SJMN-2k), we find again that TCM and AG-colloc perform equally well and outperform all other models (LDACOL, TNG, PA), as shown in the second column of Table 1. We further compare the TCM, Mallet-LDA and PA on the full SJMN dataset and the AP news dataset, as these models can run on large scale. Table 3 shows the mean average precision (MAP) scores. The TCM significantly outperforms both Mallet-LDA and the PA approach, and yields the highest MAP score. Topic Coherence Evaluation We ran a set of topic intrusion detection experiments (Chang et al., 2009) that provide a human evaluation of the coherence of the topics learnt by Mallet-LDA, PA and TCM on the SJMN dataset. This set of experiments was use to measure how well the inferred topics match human concepts. Each subject recruited from Amazon Mechanical Turk was presented with a randomly ordered list of 10 tokens (either words or collocations). The task of the subject was to identify the token which is semantically different from the others. To generate the 10-token lists, we experimented with two different methods for selecting tokens (either words or collocations) most strongly associated with a topic t. The standard method chooses the tokens w that maximise p(w|t). This method is biased toward high frequency tokens, since low-frequency tokens are unlikely to have a large p(w|t). We also tried choosing words and collocations w that maximise p(t|w). This method finds w that are unlikely to appear in any other topic except t, and is biased towards low frequency w. We reduce this low-frequency bias by using a smoothed estimate for p(t|w) with a Dirichlet pseudo-count \u03b1 = 5. An intruder token was randomly selected from a set of tokens that had low probability in the current topic but high probability in some other topic. We then randomly selected one of the 10 tokens  to be replaced by the intruder token. We expect collocations to be more useful in lists that are constructed using p(t|w) than lists constructed using p(w|t). This is because p(w|t) can be dominated by the frequency of w, but individual collocations are rare. The performance was measured by model precision (Chang et al., 2009) , which measures the fraction of subjects that agreed with the model. Table 4 shows that our TCM outperforms both PA and Mallet-LDA under both ways of constructing the intrusion lists. As expected, the collocation models PA and TCM perform better with lists constructed according to p(t|w) than lists constructed according to p(w|t). Efficiency of the TCM In this section we study the efficiency of our TCM model in terms of running time. We first compare the efficiency of our TCM model with and without sparsity with the AG-colloc model on the MReview dataset and the SJMN-2k dataset. Table 5 shows the average running time per iteration for the two models. We used 100 and 800 topics. The TCM algorithm that does not exploit sparsity in sampling runs about 6 times faster than the AGcolloc model. Our sparse sampler runs even faster,",
    "funding": {
        "defense": 0.0,
        "corporate": 1.0,
        "research agency": 1.0,
        "foundation": 3.128162811005808e-07,
        "none": 0.0
    },
    "reasoning": "Reasoning: The acknowledgments section of the article mentions support from a Google award through the Natural Language Understanding Focused Program and funding under the Australian Research Council's Discovery Projects scheme. Google is a corporation, and the Australian Research Council is a government-funded research agency. There is no mention of defense or foundation funding.",
    "abstract": "Most existing topic models make the bagof-words assumption that words are generated independently, and so ignore potentially useful information about word order. Previous attempts to use collocations (short sequences of adjacent words) in topic models have either relied on a pipeline approach, restricted attention to bigrams, or resulted in models whose inference does not scale to large corpora. This paper studies how to simultaneously learn both collocations and their topic assignments. We present an efficient reformulation of the Adaptor Grammar-based topical collocation model (AG-colloc) (Johnson, 2010), and develop a point-wise sampling algorithm for posterior inference in this new formulation. We further improve the efficiency of the sampling algorithm by exploiting sparsity and parallelising inference. Experimental results derived in text classification, information retrieval and human evaluation tasks across a range of datasets show that this reformulation scales to hundreds of thousands of documents while maintaining the good performance of the AG-colloc model.",
    "countries": [
        "Australia",
        "United Kingdom"
    ],
    "languages": [
        "Chinese",
        "Lau",
        "Chang"
    ],
    "numcitedby": 2,
    "year": 2015,
    "month": "July",
    "title": "A Computationally Efficient Algorithm for Learning Topical Collocation Models"
}