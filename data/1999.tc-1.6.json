{
    "article": "The key issues of the approach revolve around four major axes: \u2022 \"automatic\" alignment of parallel texts, i.e. establishment of correspondences between units of parallel texts Introduction The deployment of learning and matching techniques in the area of machine translation, first advocated in the early 80s (Nagao 84) proposed as \"Translation by Analogy\" and the return of statistical methods in the early 90's (Brown et al. 93 ) have given rise to much discussion as to the architecture and constituency of modern machine translation systems. Bilingual text processing and in particular text alignment with the resulting exploitation of information extracted from thus derived examples has turned into a new wave in machine translation (MT). Traditional Rule-Based Machine Translation (RBMT) systems suffer from tractability, adaptability as well as quality and performance problems. Example-based Machine Translation (EBMT) also known as Memory-based Machine Translation (MBMT) has attempted to provide alternative ways to overcome the knowledge acquisition bottleneck, yielding promising results. In this paper, we will describe a multi-level architecture for a computer-aided translation (CAT) platform implemented in the TR\u2022AID system. The system employs different levels of information and processing in an attempt to maximize past translation reuse as well as terminology and style consistency in the translation of specific types of text. Background Translation work is often characterised by three conflicting parameters: repetition, demand on efficiency as well as high demand on quality, especially in terms of consistency. This is particularly true for translation of technical and administrative documentation, becoming more evident in the case of law documents and product documentation where text repetition may reach a rate of 70% and sometimes higher. TR\u2022AID aims at providing a computational framework, in more practical terms a toolbox that will: \u2022 rid translators of the repetitive part of their work by reusing existing human translations and learning from them \u2022 enhance quality and consistency of translation by being able to integrate ancillary translation tools. Appropriate storage of pairs of source language (SL) and target language (TL) blocks of text and provision of means for retrieval of applicable solutions and means for post-editing them would increase the productivity of a translator and at the same time improve the quality and consistency of the translation (Freibott 92) (Ishida 94). \u2022 organisation of multilingual parallel corpora, i.e. texts in different languages, one being the translation of the other, allowing for efficient storage and retrieval of translation examples as well as terminological data. \u2022 sophisticated text matching techniques for fast retrieval of most appropriate translation templates \u2022 sophisticated \"term conflation\" techniques for term spotting and translation. Alternative techniques have been examined under the proposed architecture for each individual task. The most practical as well as cost-effective solutions have been adopted and integrated towards the development of the TR\u2022AID (Translation Aid) system. System Architecture Overview Figure 1 displays TR\u2022AID's architecture where all the individual components are presented within the overall framework. \"Optional\" components as well as optional links between different tools are presented in dotted lines. A detailed description of each individual system component will be provided in the following sections. Text Handling In order to be able to make full use of parallel corpora, the corpora have to be rendered in an appropriate form. To this end, corpora have to be normalised and handled prior to alignment. Normalisation consists in extraction from the multilingual corpus body of all those sections or information that cannot be exploitable for text translation purposes. Text handling can be seen as a sophisticated interface between input text streams and various text manipulation modules. At the stage of analysis, the text handler has the responsibility of transforming a text from the original form in which it is found into a form suitable for the manipulation required by the application; at the stage of synthesis, it is responsible for the reverse process, i.e. for converting the output text from the form used by the application into a form equivalent to that of the input text. The main operations usually associated with the text handler include: \u2022 analysis of the format of the physical appearance of the input text (as evidenced by the wordprocessing and/or typesetting commands, such as bold and italic characters, indentation, etc.) and mapping of these into a standardised mark-up language or a canonical form recognised by the application \u2022 identification of textual units at the level of paragraphs and sentences \u2022 identification of extra-linguistic elements, such as dates, abbreviations, acronyms, list enumerators, numbers, etc. \u2022 at the stage of synthesis, conversion of the output of the application into the same format recognised at the stage of analysis; e.g. italicised characters, centred phrases, etc. must be given to the user in their original form. In the last few years, we have seen notable work on tokenization and sentence segmentation. (Grefenstette & Tapanainen 94) apply regular expression grammars with abbreviation lists and improve sentence recognition by adding increasing levels of linguistic sophistication. (Palmer & Hearst 94) have developed an efficient, trainable algorithm that uses a lexicon with part-of-speech probabilities and a feed-forward neural network. (Chanod & Tapanainen 96) propose a finite-state automaton for simple tokens and a lexical transducer that encodes a wide variety of multiword expressions. (Reynar & Ratnaparkhi 97) propose a solution based on a maximum entropy model which requires a few hints about what information to use and a corpus annotated with sentence boundaries. Following common practice, a multilevel architecture is proposed, consisting of regular expression definition of words, coupled with precompiled common abbreviation lists for the treated language and simple heuristics for distinguishing between these abbreviations or other evident abbreviation. Scalability has been considered as a crucial factor during the design and implementation. Depending on the availability of corpus linguistic annotators in the languages represented in the multilingual corpus, the corpus is lemmatised and tagged for grammatical category (part of speech, pos). Possible unresolved ambiguities stemming from multiple possible lemma and tag assignments are appropriately stored in the memory. Text Alignment One crucial factor in establishing an alignment methodology, is the nature of the \"text-units\" involved. Deciding about the \"text-units\", that is determining whether the search is for matches at sentence or sub-sentence level, mainly concerns the best match retrieval component. Sentences, however, constitute the sole mostly unambiguous text unit and on this ground sentence level has been chosen for text alignment within the TR\u2022AID framework. Several different approaches have been proposed tackling the alignment problem at various levels. Catizone's technique (Catizone et al. 89) was to link regions of text according to the regularity of word co-occurrences across texts. (Brown et al. 91) described a method based on the number of words that sentences contain. Moreover, certain anchor points and paragraph markers are also considered. The method has been applied to the Hansard Corpus and has achieved an accuracy between 96%-97%. (Gale & Church 91) proposed a method that relies on a simple statistical model of character lengths. The model is based on the observation that lengths of corresponding sentences between two languages are highly correlated. Although the apparent efficacy of the Gale-Church algorithm is undeniable and validated on different pairs of languages (English-German-French-Czech-Italian), it seems to be awkward when handling complex alignments. Given the availability in electronic form of texts translated into many languages, an application of potential interest is the automatic extraction of word equivalencies from these texts. (Kay & Roscheisen 91) have presented an algorithm for aligning bilingual texts on the basis of internal evidence only. This algorithm can be used to produce both sentence alignments and word alignments. (Simard et al. 92) argues that a small amount of linguistic information is necessary in order to overcome the inherited weaknesses of the Gale-Church method. He proposed using cognates, which are pairs of tokens of different languages which share \"obvious\" phonological or orthographic and semantic properties, since these are likely to be used as mutual translations. (Papageorgiou et al. 94), proposed a generic alignment scheme invoking surface linguistic information coupled with information about possible unit delimiters depending on the level at which alignment is sought. Each unit, sentence, clause or phrase, is represented by the sum of its content part of speech tags. The results are then fed into a dynamic programming framework that computes the optimum alignment of text units. The proposed alignment scheme consists of a multi-level architecture employing as a core engine the Gale-Church mechanism. Special effort has been made to improve the performance of the former mechanism by locating candidate anchor points based only on internal evidence. Candidate word alignments are computed based on individual word, bi-word and tri-word distribution. Based on word alignment information, the most reliable sentence pairs are extracted. These are used subsequently, as boundaries within which the core engine will run thus providing better results. Alternatively, significant improvement can be made at this point by employing possibly available bilingual lexica. Turning to translational equivalences below sentence level, the problems of low quality, as mentioned above, as well as ambiguity problems when the produced segments are rather short, become valid again. Despite the fact that most of the running EBMT systems employ the sentence as the text unit, it is believed that the potential of EBMT lies in the exploitation of fragments of text smaller than sentences and the combination of such fragments to produce the translation of whole sentences (Sato & Nagao 90). Along these lines, automatic sub-sentential alignment has started receiving attention lately (Boutsis & Piperidis 98). Their proposed method features statistical techniques coupled with shallow linguistic processing. It presupposes a parallel bilingual corpus and identifies alignments between the clauses of the source and target language sides of the corpus. Parallel texts are first statistically aligned at sentence level, as described above, and then tagged with their part-of-speech categories. Regular grammars functioning on tags, recognize clauses on both sides of the parallel text. A probabilistic model is applied next, operating on the basis of word occurrence and co-occurrence probabilities and character lengths. Depending on sentence size, possible alignments are fed into a dynamic programming framework or a simulated annealing system in order to find or approximate the best alignment. The method has been tested on a small English-Greek corpus consisting of texts relevant to software systems and has produced promising results in terms of correctly identified clause alignments. Underlying Database The complexity inherent in the translation processes within a typical EBMT framework necessitates the existence of well-defined powerful resources. The need for optimal utilisation of different levels of available resources and the demand for real time responses, call for an efficient database architecture. Approaches like the ones by Sato & Nagao (Sato & Nagao 90) or Watanabe (Watanabe 92), are characterised by rather complicated storage schemas (fully annotated structures) which consequently have a negative effect in the necessary storage and retrieval mechanisms in terms of computational cost as well as response time. (Sumita & Iida 95) proposed an alternative solution through parallel processing which was also adopted by other approaches. Of critical importance, too, is the quality of the examples in the translation memory database, especially in terms of consistency. Conflicting translation examples should be identified and treated properly. Simple string matching techniques fail to overcome this problem. This matter has been addressed by (Nomiyama 92) and (Watanabe 94) under the term \"exceptional examples\". Furthermore, multiple occurrences of the same example should not add bias to the system. In TR\u2022AID, we define as meta-data the distinguishable objects present in the translation memory application, derived from the original raw text through the text pre-processing (annotation) and alignment process, as previously described. The proposed architecture apart from the plain storage of monolingual corpus meta-data will also need to account for the appropriate storage of bilingual metadata which will render the monolingual corpora as parallel aligned corpora. The derivation of supplementary bilingual meta-data, such as multi-word units or fixed phrase cross-language associations, should also be able to be accommodated later under the same framework. The meta-data physically stored in our DB schema have been further decomposed into the following logical entities: \u2022 Words: all wordforms appearing in the texts \u2022 Lemmas: all the lemma forms from which any wordform in the text can be derived \u2022 Tags: POS tags (grammatical categories) of each word in the text \u2022 Sentences: basic structural units \u2022 Documents: the files comprising the corpus \u2022 Corpus: collection of the above \u2022 Translation Memory: folder associated with a particular subject domain and possibly a particular user. It comprises all of the above and can be conceived as a super-entity. Database administration is handled by a number of mechanisms especially designed for this purpose. The user is provided with batch as well as interactive procedures for inserting new translation examples into the DB and for managing DB modules (creating, deleting, loading, updating) . Conflicting examples are identified and marked as such. The user can make the best choice through a ranked list proposed by the system. Precision can be improved if surface linguistic knowledge is added to the system (grammatical information). A similar database schema has been adopted for managing terminological resources. Optimal utilization of different types of resources apart from efficient storage also necessitates uniform and seamless access to these resources as well as appropriate merging of results. Text Matching Sentences constitute the basic text unit in the translation process. This is because, not only are sentence boundaries unambiguous, but also translation proposals at sentence level is what a translator is usually looking for. Sentences can, however, be quite long. And the longer they are, the less possible it is that they will have a perfect match in the translation archive, and the less flexible the EBMT system will be. On the other hand, if the text unit is the sub-sentence, it is likely that the resulting translation of the whole sentence will be of low quality, due to boundary friction (Sato & Nagao 90) and incorrect chunking. In practice, EBMT systems that operate at sub-sentence level involve the dynamic derivation of the optimum length of segments of the input sentence by analysing the available parallel corpora. This requires a procedure for determining the best \"cover\" of an input text by segments of sentences contained in the database (Nirenburg et al. 93) . It is assumed that the translation of the segments of the database that cover the input sentence is known. What is needed, therefore, is a procedure for aligning parallel texts at sub-sentence level similar to the ones described in section 2.3. The core of the TR\u2022AID system is its text matching tool. Having rendered the corpus in the appropriate form (handled, aligned), the matching tool can search for database sentences that are identical or only similar to an input sentence and in addition retrieve the equivalent translation. The matching mechanism consists of two processes: (i) the perfect match process by which the system quickly locates a database sentence (and its translation) in the Translation Memory which is identical to the input sentence, and (ii) extraction of candidate sentences and the fuzzy match process. The fuzzy match process aims at extracting from the TM a number of sentences and their translations which resemble the given input sentence above a certain minimum degree (percentage), specified by the user. Two alternatives of the fuzzy match process have been examined bearing similar features but based on a different concept of similarity distance. In the first approach, each sentence is encoded into a vector based on the elements it contains. Then a Dynamic Programming pattern matching technique (Ney 84) takes place producing a similarity score for each sentence based on the common and contiguous segments as well as the length of the sentences under comparison. The common as well as the different elements of the two sentences that contributed to this score are located and presented to the user so that he/she adapts efficiently the suggested translation. In the simplest case an element corresponds to a wordform. The second approach was based on an \"enhanced\" string edit distance algorithm. This particular algorithm is based on a dynamic programming framework and on the same sentence representation scheme as the previous one and aims at estimating the minimum transformation cost between two sentences. The algorithm computes the minimum number of required editing actions (insertions, deletions, substitutions, movements and transpositions) in order to transform one sentence into another through an inverse backtracking procedure. The final similarity score is computed by assigning appropriate weights to these actions. Even though this method achieves a more thorough comparison between sentences it is still under question whether this will finally constitute a more cost-effective solution. Both approaches can be expanded to encapsulate surface linguistic information, in which case, the elements under comparison consist in a combination of word and lemma (and/or a pos tag) introducing, in this way, an intermediate level of similarity (instead of a binary one). In cases where fuzzy matches accepted by the user are found, the user is asked to render in the target language those parts of the source language sentence that have not matched. The new emerging pair of translation units is then stored in the translation memory database for future use. In cases where no match can be found, including cases where matches exist but their score is below the user's desired threshold, the user is asked to provide the translation of the input sentence which is again subsequently stored in the TM database. Thus, the translation memory system starts learning new translation pairs in an interactive mode. (Carl et al. 98) . These stand somewhere between example-based and rule-based approaches borrowing features from both. The definition of \"translation units\" in each particular method is based on different techniques varying from simple rule based processes to pattern matching or even psycholinguistic parameters (marker hypothesis) as well as combinations of the above. However, since \"variable features\" of text (grammatical information, subcategorisation information, etc) upon which generalization can be achieved, are only found within deeper linguistic information (as opposed to plain wordforms), such information is also required in order to correctly adopt the proposed target fragments. Matching at the syntax level, coupled by lexical similarity in a hybrid configuration, is believed to be the best an EBMT system could offer as a translation proposal. Term Spotting and Translation Term spotting and translation has been included within the overall TR\u2022AID framework as an intermediate step towards a full document translation process. This tool spots candidate terms and replaces them with their translation equivalents (if any) in the desired language. In both steps the system uses a multilingual terminological database, mainly to identify a term and then to get its translation. The underlying DB schema emphasises on the efficient storage of monolingual as well as bilingual information allowing for fast retrieval. Term spotting is performed in two different ways depending on the available linguistic resources: a) In case tagging and lemmatisation tools are available, input sentences are appropriately processed prior to term spotting. \"Canonical forms\" of the corresponding terms are searched in the database in a rather straightforward procedure. b) However, considering the vast collection of languages and domains the system will be expected to deal with in real life applications the cost of acquiring or developing such tools may be prohibitive calling for more cost effective and practical solutions. To cater for this problem, an alternative approach known as \"term conflation\" has been proposed, during which the system aims at capturing morphological variations of terms located in the database (Frakes 84). Term conflation is being performed at search time allowing for full form information to be stored in the DB. For efficiency reasons, the term spotting process is performed in two subsequent phases. The first phase aims at reducing the search space thus improving the performance of the system in terms of required memory recourses as well as response time. At this phase, the system extracts a small set of candidate terms based on statistical information. During the second phase a more elaborate procedure takes place, where the systems ranks the located terms producing a complete term \"short-list\" for each candidate term of the input text. The scoring mechanism is based on a dynamic programming framework, especially designed to assign higher scores to morphological variations of the same root form. The system can easily detect single as well as multiword terms and also exclude functional words from the matching process, if these are available. An interesting aspect of the term substitution task that is currently being investigated is how this could be fully integrated within the sentence matching process that is, to actually use term existence information during sentence matching and translation. Terms constitute basic translation units. In this respect, they should be treated as individual units during the matching and translation process. Prior to sentence matching terms are located and appropriately marked up. Sentence matching is performed as previously described but for the deviation that in this case terms enter the matching process as single tokens. In many cases this treatment seems to improve the precision of the matching process, however decreasing recall as well as response time due to the extra processing phase. Consequently, the benefits of this are questionable and dependent on the application at hand. Concluding remarks The real added value of a translation related software is in its ability to enhance the efficiency of the translation task by cutting down cost and time while retaining quality of a purely human generated translation. High-quality fully automatic machine translation is not yet feasible. Furthermore, it is generally believed that the future of MT (at least the near future) lies on the efficient merging of different MT engines towards the creation of hybrid multi-engine MT systems. To this respect, the goal should be to develop systems that optimally combine different levels of sophistication and resources and which will also be easily adaptable to different languages and domains. References 39-44, 1994.",
    "abstract": "The key issues of the approach revolve around four major axes: \u2022 \"automatic\" alignment of parallel texts, i.e. establishment of correspondences between units of parallel texts",
    "countries": [
        "Greece"
    ],
    "languages": [
        "Czech",
        "Italian",
        "Greek",
        "French",
        "German",
        "English"
    ],
    "numcitedby": "2",
    "year": "1999",
    "month": "November 10-11",
    "title": "A Multi-level Framework for Memory-Based Translation Aid Tools"
}