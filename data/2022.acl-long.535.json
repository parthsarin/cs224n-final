{
    "article": "Various models have been proposed to incorporate knowledge of syntactic structures into neural language models. However, previous works have relied heavily on elaborate components for a specific language model, usually recurrent neural network (RNN), which makes themselves unwieldy in practice to fit into other neural language models, such as Transformer and GPT-2. In this paper, we introduce the Dependency-based Mixture Language Models. In detail, we first train neural language models with a novel dependency modeling objective to learn the probability distribution of future dependent tokens given context. We then formulate the next-token probability by mixing the previous dependency modeling probability distributions with self-attention. Extensive experiments and human evaluations show that our method can be easily and effectively applied to different neural language models while improving neural text generation on various tasks. 1 Introduction Syntactic structures serve as the principle of how words are correctly combined to form sentences. It is widely acknowledged that learning syntactic structures should improve neural text generation (Shen et al., 2018; Peng et al., 2019; Du et al., 2020) . Even though current neural language models, such as Transformer (Vaswani et al., 2017) and GPT-2 (Radford et al., 2019) have achieved outstanding performance without explicitly modeling latent syntactic structures, these models still fail to learn the long-range syntactic dependencies (Kuncoro et al., 2018; Xu et al., 2021) . To leverage explicit syntactic knowledge in natural language generation (NLG), many methods have been proposed (Wu et al., 2017; Shen et al.,  2018; Zhang et al., 2019; Kim et al., 2019; Du   1 Our code is available at https: //github.com/FadedCosine/ Dependency-Guided-Neural-Text-Generation et al., 2020). We conclude from previous works that knowledge of syntactic structures can bring four advantages to neural language models: (1) Syntactic structures can be modeled to obtain better representations of natural language sentences (Jacob et al., 2018; Williams et al., 2018; Wang et al., 2019) . (2) Jointly training syntactic structure parsing and language modeling can contribute to each other (Shen et al., 2018; Dyer et al., 2016; Kim et al., 2019; Du et al., 2020; Shen et al., 2021b) . (3) Syntactic structures can be used to directly model the composition of language (Socher et al., 2013; Casas et al., 2020) and help with the longrange dependency problem by providing shortcuts for gradient backpropagation (Chung et al., 2017) . (4) Integrating syntactic structures into a neural network can improve generalization via a better inductive bias (Shen et al., 2019; Zhang et al., 2019) . Despite these advantages, it is not trivial to incorporate knowledge of syntactic structures into neural language models effectively and efficiently. Several practical problems arise: (1) Previous works (Chung et al., 2017; Shen et al., 2018; Dyer et al., 2016; Kim et al., 2019; Shen et al., 2019) have relied heavily on elaborate components for a specific language model, usually recurrent neural network (RNN) (Sutskever et al., 2014) . These methods are difficult to be adapted to other neural language models, such as Transformer and GPT-2. (2) If jointly modeling language modeling and syntactic structure parsing, it will require much more time/memory during training or inference. To address these problems while keeping the advantages, we explore incorporating knowledge of syntactic structures in a different manner. In this work, we propose a novel dependency modeling objective to train neural language models to directly predict the current token's future dependent tokens given the history. We define the future dependent to-Models External Parameters? External Networks? Architecture Agnostic? RNNG (Dyer et al., 2016) Yes Yes No PRPN (Shen et al., 2018) Yes Yes No URNNG (Kim et al., 2019) Yes Yes No ON-LSTM (Shen et al., 2019) Yes No No DMLM (Ours) No or Negligible No Yes Table 1 : The difference between our DMLM and previous neural language models that incorporate knowledge of syntactic structures. Previous models often require external networks and external Parameters. For example, PRPN consists of three neural networks: Parsing Network, Reading Network and Predict Network. ON-LSTM is built upon a single LSTM, but it requires two additional gates in the LSTM cells, which leads to external parameters. All these previous models can only be built upon RNN architecture. However, as an architecture-agnostic method, DMLM needs no external parameters or networks when built upon Transformer, while it only needs negligible external parameters when built upon RNN. kens of a specific token in a sentence as its children and parent in the dependency parse tree that will appear in the rest of the sentence. Further, we propose Dependency-based Mixture Language Models (DMLM) that, at each timestep, mixes the previous dependency modeling probability distributions with self-attention to get the next-token probability. As shown in Table 1 , the proposed method can be adapted to any neural language model without adding external networks or parameters. Our core idea can be illustrated in Figure 1 and Figure 2 : when predicting the next-token \"indicate\" after reading \"red figures on the screen\", common language models are easy to predict an incorrect word, such as \"indicates\", since the prediction of these models relies heavily on the recent word, \"screen\" in this case. However, our propose DMLM will directly look back into the long-range context, and select the next-token from all the future dependent tokens predicted by previous tokens. According to the underlying dependency structure, DMLM pays different weights to different tokens' future dependent tokens. Thus, the model is more likely to predict \"indicate\" since DMLM tends to think of the next-token as a future dependent token of \"figures\" rather than \"screen\". We conduct experiments with different neural language models including LSTM (Hochreiter and Schmidhuber, 1997) , Transformer (Vaswani et al., 2017) , and GPT-2 (Radford et al., 2019) across different tasks in conditional text generation, unconditional text generation, and language modeling. Through extensive experiments we demonstrate that DMLM consistently improves the generation quality according to both human evaluations and automatic metrics. Compared to other neural language models that incorporate syntactic knowledge, . DMLM is architecturally simpler and easier to fit into any neural language model, while possessing wide applicability to different text generation tasks. Methodology Our goal is to propose a simple yet effective method that can improve neural text generation by learning from the underlying syntactic structure, and can fit into any auto-regressive generation model without using additional elaborate components. We first introduce a novel dependency modeling objective to force the model to directly predict the future dependent tokens of the current token. Based on the dependency modeling, we then present the proposed DMLM. Dependency Modeling It has been a challenge to equip neural language models with the capability of modeling long-range dependency in text (Dai et al., 2019) . In particular, previous works (Wu et al., 2017) observe that vanilla RNN can hardly capture many subtle long-range token dependencies effectively. On the other hand, though self-attention mechanisms can build direct connections between long-distance token pairs, it is still elusive for Transformer to be aware of syntactic dependency structures while also obtaining strong language modeling performance (Shen et al., 2021a) . The current neural language models are mostly trained purely using the language modeling objective with Maximum Likelihood Estimation (MLE). With the auto-regressive factorization, language modeling can be reduced to modeling the conditional distribution of the next-token x t given the context x <t = {x 1 , . . . , x t\u22122 , x t\u22121 }. However, in order to make neural language models aware of long-range dependency and syntactic structures, we propose the dependency modeling objective to train models to learn the probability distribution of the future dependent tokens directly. Following Ahmed et al. (2019) , we define the future dependent tokens of a specific token in a sentence as its children and parent in the dependency parse tree that will appear in the rest of the sentence. Taking Figure 1 as an example, the future dependent tokens of \"figures\" are \"screen\" and \"indicate\", since \"red\" does not appear after \"figures\" in this sentence. Specifically, given a token sequence x = {x 1 , . . . , x T \u22121 , x T } where T \u2208 N denotes the sequence length, we first use dependency parser to generate a dependency tree. Then, we derive the future dependent tokens set Z t for each token x t\u22121 , where Z t = {x i | i \u2265 t, x i is the child or parent of x t\u22121 }. We train a language model \u03b8 to maximize the log-likelihood sum of tokens in Z t . This equals to minimize: L DM (\u03b8) = \u2212 T t=1 zt\u2208Zt log p dep \u03b8 (z t | x <t ) , (1) which is the dependency modeling objective. Dependency-based Mixture Language Models To give a categorical probability distribution over the next-token, a standard approach for the current neural language models is to encode the context into a fixed-size vector followed by an output embedding layer and a softmax function. In our case, given the context x <t , we first train the language model to directly learn the probability distribution of x t\u22121 's future dependent tokens p dep \u03b8 (w | x <t ) by dependency modeling (Section 2.1). We then propose DMLM (depicted in Figure 2 ) that mixes dependency modeling probability distributions P dep = {p dep \u03b8 (w | x <1 ) , . . . , p dep \u03b8 (w | x <t\u22121 ) , p dep \u03b8 (w | x <t )}. All the probability distributions in P dep are weighed by self-attention, and summed to obtain the final next-token probability distribution. We can easily implement a self-attention in both Transformer-based and RNN-based language models. For example, in Transformer and GPT-2, the penultimate layer seems to naturally learn alignments (Garg et al., 2019) , so we use its average attention weights over all the attentions heads as the dependency attention distribution. In RNNbased models, inspired by Merity et al. (2017) and Vaswani et al. (2017) , at each timestep, we linearly project the current hidden state h t \u2208 R H to a query vector q t = W Q h t and a key vector k t = W K h t , where W Q \u2208 R H\u00d7H , W K \u2208 R H\u00d7H , q t \u2208 R H , and k t \u2208 R H . To generate the dependency attention, we compute the match between the query q t and the context's keys {k 1 , . . . , k t\u22121 , k t } by taking the inner product, followed by a softmax to obtain the dependency attention distribution: e (t) = {e (t) 1 , . . . , e (t) t\u22121 , e (t) t }, e (t) i = q T t k i , 1 \u2264 i \u2264 t, a (t) = softmax( e (t) \u221a H ), a (t) = {a (t) 1 , . . . , a (t) t\u22121 , a (t) t }, (2) where e (t) \u2208 R t , and a (t) \u2208 R t . We scale the dot products by 1 \u221a H following Vaswani et al. (2017) . The dependency attention distribution reveals which token in the context may have a strong dependency relation with the token to be predicted. Thus, the neural language model should pay more attention to previous tokens with high dependency attention scores, i.e., the next-token is more likely to be the future dependent token of those tokens in the context. Formally, the next-token probability is the sum of the context's dependency modeling probability distributions weighed by the dependency attention scores: p \u03b8 (w | x <t ) = t \u03c4 =1 a (t) \u03c4 p dep \u03b8 (w | x <\u03c4 ) . (3) where p dep \u03b8 (w | x <\u03c4 ) is the probability distribution of x \u03c4 \u22121 's future dependent tokens, since till now the neural language model is only trained by dependency modeling. Then, we further finetune the neural language model using MLE, but with respect to our modified probability distribution given in Equation 3 : L LM (\u03b8) = \u2212 T t=1 log p \u03b8 (x t | x <t ) . (4) For each timestep during inference, DMLM outputs a dependency modeling distribution, and we store it in a list. To predict the next-token, DMLM applies self-attention in Equation 2 to produce a dependency attention distribution over the context, and then the next-token probability can be calculated by Equation 3 , where the list preserves all the p dep \u03b8 (w | x <\u03c4 ) , 1 \u2264 \u03c4 \u2264 t. Experiments Despite previous works mainly focusing on language modeling, it has always been a thorny issue whether better language models lead to better performance in downstream tasks. Therefore, we showcase the performance of our proposed DMLM in three different tasks: conditional text generation (Section 3.1), unconditional text generation (Section 3.2), and language modeling (Section 3.3). To verify the effectiveness and architecturally generalizability of our method, we conduct the generation tasks with three dominant neural language models, including LSTM, Transformer and GPT-2. We prefix the base model name with \"DM-\" to denote the corresponding Dependency-based Mixture language model. Specifically, we adopt AWD-LSTM (Merity et al., 2018) as our base LSTM, and further compare our DM-LSTM with PRPN (Shen et al., 2018) and ON-LSTM (Shen et al., 2019) which also incorporate knowledge of syntactic structures, and are built on LSTM. In the same task, we use exactly the same hyper-parameters and setups for the pairs of base models and corresponding DM-models. Other details of the experimental setup for each task can be seen in Appendix A. For all the tasks, we use a state-of-the-art parser, HPSG Parser 2 (Zhou and Zhao, 2019) to get the dependency parse tree for each sentence in the datasets. We discuss the impact of the dependency parser in Appendix B. Conditional Text Generation Setup We take the story ending generation as the conditional text generation task, and evaluate our method on the ROCStories corpus (Mostafazadeh et al., 2016) , which consists of 98,161 five-sentences. We follow the preprocessing 3 of Kong et al. (2021) to randomly split ROCStories by 8:1:1 for training/validation/test, respectively, and delexicalize stories by masking all the male/female/unknown names with \"[MALE]\"/\"[FEMALE]\"/\"[NEUTRAL]\". We finally get a word-level vocabulary with 31, 216 unique tokens. The conditional text generation task is to generate a reasonable ending given a foursentence story context. For all models, we generate stories using nucleus sampling (Holtzman et al. , Models UNION \u2191 BERTScore \u2191 B-1 \u2191 B-2 \u2191 D2 \u2191 D3 \u2191 SB-2 \u2193 SB- 2020 ) with p = 0.5. We measure the generated story endings by the following automatics metrics: (1) UNION (Guan and Huang, 2020): It is a learnable unreferenced metric for evaluating the quality of generated stories; (2) BERTScore (Zhang et al., 2020) : The metric measures the semantic consistency between the generated and the referenced ones by BERT (Devlin et al., 2019) ; (3) BLEU (B-n) (Papineni et al., 2002) : BLEU evaluates n-gram overlap between the generated stories and the references; (4) Distinct (D-n) (Li et al., 2016) : The proportions of distinct n-grams in the outputs to evaluate the diversity of generated results. Since Distinct score will become extremely low for small n, we calculate it with n = 2, 3; (5) Self-BLEU (SB-n) (Zhu et al., 2018) : The metric is calculated by computing ngrams (n = 2, 3) BLEU score of each generated text with all other generated ones as references. Smaller Self-BLEU scores indicate better diversity. Results The experimental results of baselines and corresponding DM-models are shown in Table 2. Note that we do not conduct significant tests on Distinct since it is a document-level metric. We can see that, all the DM-models significantly outperform baseline models on almost all the metrics. Furthermore, compared with PRPN and ON-LSTM, our DM-LSTM performs signifi- cantly better in all the metrics. This indicates that incorporating knowledge of syntactic structures in our proposed way can effectively contribute to both the quality and diversity of the story ending generation. Moreover, no matter what the base model is, our DM-model can substantially improves the conditional text generation. This demonstrates that our method can be effectively adapted to different neural language models, such as the large scale language model, GPT-2, while previous models like ON-LSTM can only be built on LSTM. Human evaluation To further evaluate the fluency and logic of generated stories, following (Guan et al., 2020) To reach a good trade-off between quality and diversity, we adopt nucleus sampling with p = 0.7 for all the models to generate samples. baselines. We randomly sample 100 story endings from each model. For each pair of stories (one by the DM-model and the other by the baseline, along with the beginning), five annotators are hired to give a preference (win, lose, or tie) from the following two aspects: (1) Grammaticality: whether a story ending is natural and fluent; (2) Logicality: whether a story is coherent to the given beginning and reasonable in terms of causal and temporal dependencies in the context. The detailed questionnaire and other details are shown in Appendix D. The average win/lose/tie rates of the human evaluation are shown in Table 3 . To measure the interannotator agreement, we calculate Krippendorff's alpha (Hayes and Krippendorff, 2007) for each pair-wise comparison, and all the results are fair agreement (0.2 \u2264 \u03ba \u2264 0.4) or moderate agreement (0.4 \u2264 \u03ba \u2264 0.6). The results show that our DMmodels significantly outperform baseline models in both the grammaticality and logicality. Unconditional Text Generation Setup We perform experiments of unconditional text generation on EMNLP2017 WMT News dataset 4 . We use the preprocessed data of a recent work 5 (Caccia et al., 2020) sentences of DM-models are of better quality, while the consistently lower RLM scores also demonstrate that DM-models can generate more diverse sentences meanwhile. In addition, each model is used to generate 1, 000 sentences with various sampling hyper-parameters, and GPT-2 Perplexity is further calculated. As shown in Table 5 , our proposed method can make neural language models perform significantly better in terms of generation fluency. In particular, Transformer-based models can gain more significant improvement from DMLM. We conjecture that this is because, in our implementation, we directly uses the penultimate multi-head attention layer of Transformer to obtain the dependency attention distribution of DMLM. Thus, it can easily inherit all the strengths of Transformer-based models. Human evaluation Following previous work (Yu et al., 2017; Guo et al., 2018) , we conduct a Turing test to further evaluate the generated text. In practice, we mix 100 randomly sampled sentences from each model, and another 100 sentences from the real test set. Five annotators are hired to judge whether each of the 900 sentences is created by human or machines. Each sentence gets +1 score when it is regarded as a real one, and 0 score otherwise. The detailed questionnaire and other details are shown in Appendix D. The average score for each model is shown in Table 6 , from which we can see all the DM-models surpass the baselines. Both automatic evaluations and human evaluations indicate that DMLM can help neural language models generate more readable, fluent, and natural sentences. Language Modeling Setup We evaluate the proposed method with the word-level language modeling task by measuring Perplexity (PPL) on the Penn Treebank (PTB) (Marcus et al., 1993; Mikolov et al., 2012) corpora. The PTB dataset has a vocabulary size of 10, 000 unique words, and the training/validation/test set consists of 42, 068/3, 370/3, 761 sentences. For this task, we mainly implement the DMLM on the RNN-based language model, i.e., AWD-LSTM (Merity et al., 2018) . For a fair comparison, our DM-LSTM uses exactly the same hyperparameters and setups as AWD-LSTM. Since Transformer-based models' strong performance relies on training with large datasets, it will perform worse than random when trained on a small dataset (Shen et al., 2021a) . We still report Transformer-based models' language modeling results on PTB in Appendix C. Results We compare our method with its base model, AWD-LSTM, and we report the results along with other state-of-the-art models in Table 7 . Compared with the AWD-LSTM, our DM-LSTM reduces the perplexity by 1.4 on the validation set and 1.1 on the test set, indicating that incorporating knowledge of syntactic structures in our proposed manner can substantially improve language modeling. Compared with other models that also leverage syntactic knowledge, our DM-LSTM strongly outperforms RNNG, PRPN, and URNNG. Moreover, though DM-LSTM does not make any changes to the architecture of the AWD-LSTM language model, it still achieves a comparable perplexity with ON-LSTM. Note that, since our method is model-agnostic, it can be harmonically combined with other state-of-the-art models, such as MoS (Yang et al., 2018) and DOC (Takase et al., 2018) . U H G I L J X U H V R Q W K H V F U H H Q L Q G L F D W H I D O O L Q J V W R F N V Discussion Visualization We show how our proposed method works by visualizing the dependency attention distributions. We use DM-Transformer to generate a sentence: \"red figures on the screen indicate falling stocks.\" For each generation step, we record this step's dependency attention distribution. When we finally generate the whole sentence, we get 9 distributions and plot Figure 3 from them. Each row in Figure 3 shows the dependency attention distribution of the model when generating the corresponding Y-axis token. When predicting the token \"indicate\", DMLM pays great attention to \"figures\". This is because these two tokens have a direct dependency connection in the dependency parse tree, and our method successfully captures this relationship. In addition, DMLM also helps the model better organize dependency information when the next-tokens, such as \"screen\" and \"stocks\", have dependencies on more than one token in the context. Case Study We perform case studies for a better understanding of the model performance. Table 8 provides examples of conditional text generation produced by our DM-models and other baselines. Obviously, all the DM-models can generate more reasonable and coherent story endings. Additionally, some examples of unconditional text generation are shown in Table 9 and Appendix E. These examples show that our DMLM can help base models generate more reasonable, readable, fluent, and natural sentences. Computational Complexity Compared with vanilla RNN, our DM-RNN indeed increases the computational complexity from O(T ) to O(T 2 ). In practice, we can follow Merity et al. (2017) to set a context window that allows DMLM looks L timesteps into the past at most, where L is the context length. However, our DMLM can efficiently apply to Transformer-based models without additional computational complexity. Related Works Many previous studies have shown that leveraging the knowledge of syntactic structures can improve NLG (Chelba, 1997; Roark, 2001; Emami and Jelinek, 2005; Buys and Blunsom, 2015) . Mirowski and Vlachos (2015) incorporated syntactic dependencies into the RNN formulation, but they limited the scope to the scoring of complete sentences, not to next word prediction. Some other efforts have been done to integrate dependency structure into neural machine translation (NMT) from both the source and target side. However, all these methods, mainly based on RNN (Sutskever et al., 2014) , incorporate knowl- Story context: [FEMALE] bought packets of vegetable seeds from the store . she dug up the dirt in her garden . [FEMALE] planted onions , cilantro , and tomatoes . [FEMALE] watered the garden every night . Golden Text: by the end of the summer [FEMALE] had enough vegetables to make salsa . PRPN: she got to work in the morning and was happy to have a garden . ON-LSTM: [FEMALE] planted the plants and made it a huge success . AWD-LSTM: [FEMALE] was happy to be helping her plants . DM-LSTM: soon , [FEMALE] had enough vegetables to grow in her garden ! Transformer: she went to the store to buy the seeds . DM-Transformer: soon , [FEMALE] had her garden full of vegetables ! GPT-2: [FEMALE] 's garden grew very quickly and dry . DM-GPT-2: [FEMALE] now has fresh fruits and vegetables in her garden . the right point to pay for the purchase of a bike , that ' s all we want to do to build , build together the support that i need to get here . ON-LSTM: it ' s great to know that my experience has changed my mind because i ' m not going to work because i ' ve had to talk about that . AWD-LSTM: this is a tragic attack and it is understood that the pair will come up with a package of documents which may be possible . DM-LSTM: the win over bernie sanders was an emotional moment for clinton , who was running in the general election , though she lost their state of vermont . Transformer: ' i ' ve just been in that position so i ' ve never seen anything like this before , but it ' s something i have to say and i ' m going to go to and win this series . DM-Transformer: in the second quarter of 2015 , the outlook for consumer spending rose 8 . 6 per cent , but for the fourth quarter , the company said it expects to expand by 0 . 7 per cent . GPT-2: if i had said a bit of pressure , i would probably be in a different position if i was a coach . DM-GPT-2: they ' ve also said that it ' s difficult to know how many emails clinton actually sent to her in recent weeks or whether she would be the nominee . edge of syntactic structures by introducing complex architectural changes. Therefore, it can get very unwieldy to adapt them to other neural language models, such as Transformer and GPT-2. Conclusion In this paper, we introduce Dependency-based Mixture Language Models, which can incorporate knowledge of dependency structures into arbitrary auto-regressive generation models without any changes to the original architectures. Both automatic and human evaluation results in extensive experiments across different tasks and different architectures demonstrate the effectiveness and generalizability of our method. In the future, we will explore to incorporate the dependency labels into our method, and combine our DMLM with more neural language models. Second, we would like to integrate other linguistic knowledge, such as constituency structures and semantic information, into neural language models in our manner. of PTB, and kept the test set held-out. So, when we do language modeling on PTB, the parser will not inject any future predictions that contribute to testing. HPSG Parser maintains high-quality on outof-domain text, as shown in its paper (Zhou and Zhao, 2019) . Most importantly, even on the out-of-domain datasets, i.e., ROCStories and EMNLP2017 WMT News, our work can still obtain a significant improvement, as shown in Section 3.1 and Section 3.2. C Language Modeling on Transformer-based Models The language modeling results of Transformerbased models evaluated on PTB dataset are shown in following The good performance of Transformer-based models often rely on training with large datasets, but PTB is a very small dataset. Therefore, Transformer-based models perform worse than LSTM-based models, as shown in Table 7 and Table 13. However, our DM-models still substantially reduce the perplexity compared with base models. DM-Transformer improves the base Transformer by over 20 perplexity points on both the validation and test set, and DM-GPT-2 also improves the base GPT-2 by almost 4 perplexity points. These results further confirm the effectiveness our method. D Human Evaluation We post the human evaluation questionnaire, as shown in Table 14 and Table 15 , and then recruit five workers with sufficient high English skills. We pay each worker 45 US dollars, and let them complete the evaluation within a week. E Generated Examples For a more general comparison, we present more generated examples of unconditional text generation in Table 16 . Task Description Each story contains about five sentences. For each story, we will put the first four sentences into two different systems, and then systems generate the last sentence. The requirement for this manual evaluation is to judge which story better complies with the English grammar norm, and is more logically related to the first four sentences. NOTE that the names in all stories are replaced with \"[MALE]\" or \"[FEMALE]\" or \"[NEUTRAL]\", and all the sentences are preprocessed by lowercasing, separating punctuation, and splitting conjunctions. They are not grammar errors. Please ignore these when evaluating and do not allow them to affect your judgments. Evaluation Criterion You need to compare the stories from two metrics: grammaticality and logicality. And the two metrics are independent of each other. One of the judgments should not have any influence on the other one. Specific criteria for evaluating are as follows: 1. Grammaticality In the process of evaluating grammaticality, it should be considered whether the statement itself complies with the English standard usage. Then annotate which story is better at grammaticality. You may not care about what the generated sentences are saying but only if there are any grammatical problems in the sentence itself. Logicality In the process of evaluating logicality, you need to carefully read the whole story including the first four sentences and the generated sentence, and compare stories in logicality. Then annotate which story is better at logicality in terms of the coherence to the given beginnings and the inter-sentence causal and temporal dependencies. In this process, you may encounter sentences that are not completely grammatical.Please make a logical evaluation based on the main part of the sentence (such as some keywords, etc.) and what you can intuitively feel. Under the circumstances, the story can be judged totally illogical only if the grammar is too poor to understand the meaning or the logic is unreasonable. Notes \u2022 Again, the grammaticality and logicality of the story are two independent metrics. Some very logically inappropriate generated stories are good in the grammaticality part, and there are some stories with obvious grammatical errors but they don't affect the respective judgment. \u2022 Sometimes, there may be more than one kind of reasonable story for a beginning. Please do not limit your imagination. As long as the story is logically reasonable, direct, and able to make sense, it can be judged good in logicality. \u2022 Some stories may not be accurately judged. In the process of determining the comparison of this type of two stories, according to your own understanding of the examples and the subjective feelings of the stories, choose a better story you think is the most appropriate. Please ensure that your evaluation criterion for different stories is the same. Task Description In this review, you will read 900 sentences. For each sentence, you should determine whether the sentence is written by human. Note: All the sentences are preprocessed by lowercasing, separating punctuation, and splitting conjunctions. They are not grammar errors. Some sentences may have a specific context, or they may be talking about completely fictitious things. Please ignore these when evaluating and do not allow them to affect your judgments. Evaluation Criterion The judgment can mainly depend on your own understanding and the subjective feelings. But fluency, readability, engagement (whether you felt interested about the sentence), and anything else that you think is important can also help you make a decision. Acknowledgements This work was supported by National Key R&D Program of China (No.2018YFB1005100), Bejing Academy of Artificial Intelligence (BAAI) and State Key Laboratory of Media Convergence Production Technology and Systems. We appreciate the anonymous reviewers for their helpful comments. Xiaojun Wan is the corresponding author. A Experimental Setup All the algorithms are implemented in Pytorch and trained on a machine with 8 NVIDIA GTX 2080Ti GPUs. A.1 Conditional Text Generation The dataset statistics of ROCStories dataset is reported in Table 10 .  In this task, both the DM-LSTM and base LSTM are built on a AWD-LSTM language model with an embedding size of 400 and hidden layer units 1150. The dropout rates are 0.4, 0.25, 0.4 for the output of the last layer, outputs between LSTM layers, and input embedding layers, respectively. The weight dropout for the RNN hidden to hidden matrix is 0.5, and the dropout rate to remove words from embedding layer is 0.1. The context length for DM-LSTM is set to 56. For PRPN and ON-LSTM, we keep their original settings. In this task, all the models are trained on a singe GPU with learning rate 30, weight decay 1.2e \u2212 6. LSTM baselines are trained for 500 epochs with batch size 100. DM-LSTM is first trained by dependency modeling objective for 100 epochs with batch size 80, and then by language modeling in Equation 4 for 400 epochs with batch size 60 due the computational budgets limit. For both the DM-Transformer and base Transformer, we use a standard 6-layer Transformer language model with 8 attention heads, embedding dimension 512, projection dimension 2048 and dropout rate 0.1. During training, we use Adam optimizer with \u03b2 1 = 0.9, \u03b2 2 = 0.98, weight decay 0.01 and learning rate 5e \u2212 4, and apply the dynamic batching provided by fairseq 6 to train both the models with 4 GPUs. Transformer is trained for 60 epochs, while DM-GPT-2 is first trained by dependency modeling for 30 epochs, and then trained by language modeling in Equation 4 for 30 epochs. We use the pretrained GPT-2-base model for both the DM-GPT-2 and base GPT-2. In this comparison, we apply the same training settings with Transformer-base models except that learning rate 6 https://github.com/pytorch/fairseq is set to 5e \u2212 5. GPT-2 is trained for 80 epochs, while DM-GPT-2 is first trained by dependency modeling for 40 epochs, and then trained by language modeling in Equation 4 for 40 epochs. For all the models, we select the best checkpoint according to the loss of validation set for testing. A.2 Unconditional Text Generation The dataset statistics of EMNLP2017 WMT News dataset is reported in Table 11 . Train Validation Test #Stories 268,586 10,000 10,000 The context length for DM-LSTM is set to 36. LSTM baselines are trained for 500 epochs with batch size 300. DM-LSTM is first trained by dependency modeling objective for 100 epochs with batch size 300, and then by language modeling for 400 epochs with batch size 200. Besides, all the other experimental setups are the same with those for the conditional text generation task. A.3 Language Modeling The dataset statistics of Penn Treebank dataset is reported in Table 12 The context length for DM-LSTM is set to 16. DM-LSTM is trained for 1000 epochs with batch size 20, following (Merity et al., 2018) . Besides, all the other experimental setups are the same with those for the conditional text generation task. B Impact of the Dependency Parser In our work, we use an off-the-shelf dependency parser to get the dependency parse trees for dependency modeling. Consequently, the better the quality of dependency parsing, the better the performance of our method. HPSG Parser (Zhou and Zhao, 2019) , the dependency parser we use, is one of the state-state-of-the-art parsers. This ensures the high quality of parsing results. Zhou and Zhao (2019) trained HPSG Parser with the training set Golden Text: over 1 , 600 a day have reached greece this month , a higher rate than last july when the crisis was already in full swing . \" we ' re working through a legacy period , with legacy products that are 10 or 20 years old , \" he says . ' the first time anyone says you need help , i ' m on the defensive , but that ' s all that i know . out of those who came last year , 69 per cent were men , 18 per cent were children and just 13 per cent were women . PRPN: as a mother , i can ' t work to be working on some kind of stuff , but i ' m not really sure that the single market is going to be as bad as i ' m on . in fact , there is a good position to focus on this and that will be a clear opportunity for the us to make sure that we do not have any concerns . there ' s still more opportunities than that , but this is what you ' re talking about , but it ' s not right . as well as a labour party , the former party member who claimed the vote in the referendum on whether to vote to leave the eu should be questioned . ON-LSTM: so they did that because we ' ve been saying they ' re going to be fighting for this state , but they ' re going to keep going . the official said they were hoping to make a contribution in its strong inflation growth in the future , and that a more conservative leader could look for jobs and be stronger . it ' s something that i think are a good team , the first place to do it and i ' m really happy . ' there ' s no question that the person we ' re going to take is probably an important thing to be asked , \" said john . AWD-LSTM: in this month ' s election , the u . s . economy has fallen in the past few years , a higher than a decade ago . in the last year i had been an 18 -year -old woman in my two -year -old son . it was a great test for me to try to get back on the bench and be there , it ' s a huge challenge for us . i just think it ' s important for us to do something that would help them in the best way we can to do it . DM-LSTM: \" the united states has to come to mind that the threat of climate change is less of a serious issue , \" the pentagon said in a statement . in the event of an initial campaign for the democratic nomination , he had released some of the most controversial ads that they had been speaking about since he was a president . there is an example of a presidential candidate who has been on the debate trail for more than a year . the central bank of japan is set to raise its benchmark interest rate at its first time in nearly a decade . Transformer: you can ' t get away with things that are better than you did at home and hopefully get better than not the first team . in the case of the cases , the nsw government said it would accept 10 , 000 additional emergency costs if it did not help the industry . if there is an oil price that is at stake , it is not as far as the price of oil . the country has promised to build a nationwide population of about 150 , 000 to more than 2 , 000 , with a budget to help in building more affordable housing . DM-Transformer: in this particular area , as in the modern world , he is seen as someone who takes the risk of suffering a heart attack . that ' s why we ' re talking about the second half of the year , and a lot of people have asked us to do the best we can . the vast majority of american voters , particularly those who chose trump , said that he had changed the result . so this is a big step , and i ' m really excited to be part of the new york olympics . GPT-2: the reason is that the student community who doesn ' t know what he ' s talking about , or who ' s not even a businessman , he ' s going to take care of itself . the difference is that the reality of \" brexit \" has been the single largest trading partner in the world , and now is it . the game is now used to push for players to learn from them and learn from them and also play in the front of them . the first woman to run for president is to make a case for a woman she wants to make as president of the united states . DM-GPT-2: \" i just thought that the whole picture was a strange story , \" he said in a telephone interview on thursday . \" the importance of local authorities is very strong , \" she said in an interview on friday afternoon . we are working closely with the government to resolve this issue and have to work with local authorities to resolve the problem . a final verdict will be held on thursday at the supreme court in washington on march 15 , 2017 .",
    "abstract": "Various models have been proposed to incorporate knowledge of syntactic structures into neural language models. However, previous works have relied heavily on elaborate components for a specific language model, usually recurrent neural network (RNN), which makes themselves unwieldy in practice to fit into other neural language models, such as Transformer and GPT-2. In this paper, we introduce the Dependency-based Mixture Language Models. In detail, we first train neural language models with a novel dependency modeling objective to learn the probability distribution of future dependent tokens given context. We then formulate the next-token probability by mixing the previous dependency modeling probability distributions with self-attention. Extensive experiments and human evaluations show that our method can be easily and effectively applied to different neural language models while improving neural text generation on various tasks. 1",
    "countries": [
        "China"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "0",
    "year": "2022",
    "month": "May",
    "title": "Dependency-based Mixture Language Models"
}