{
    "article": "This paper describes an efficient method of incremental dependency parsing based on phrase structure grammar with the dependency relation. The reachability relation between syntactic categories is utilized for connecting a head word with a dependent word simultaneously with the inputs. The method does not need to construct the whole parse tree of an initial fragment on the word-by-word basis, and thus can be expected to be usable for simultaneous spoken language processing. An experiment on the ATIS corpus has shown the technique of utilizing the reachability to be effective for reducing processing time of the incremental dependency parsing. Introduction Dependency grammar has a long tradition in natural language theories. In recent years, great attention has been paid to the concept of dependency, as the importance of relations between words is recognized in the field of language parsing. Dependency parsing techniques of written language has been studied so far, on the other hand, few investigations has been done for that of spoken language. In particular, such spoken language processing systems as real-time dialogue system, simultaneous machine interpreting system, etc. are being studied, and thus dependency parsing needs to be discussed from the viewpoint of incrementality. An approach based on context-free phrase structure grammars is known as one of the dependency parsing techniques. In this approach, dependency grammar is described as a set of phrase structure rules with head-dependent relations between syntactic categories, and the dependencies are extracted from parse trees according to Collins' structures mapping procedure [1] . This means that we can not acquire the dependency structures before getting parse tree completely. If such the technique is used for incremental spoken language processing, it is strongly required not to damage the incrementality. This paper describes an efficient method of incremental dependency parsing based on CFG with the dependency relation. In order to connect a head word with a dependent word simultaneously with the inputs, the reachability relation between syntactic categories is utilized. Our method, which is different from the standard one of incremental parsing such as incremental chart parsing [4] , does not necessarily construct the whole parse tree for an initial fragment, and can be therefore expected to be suitable for incremental spoken language processing. To evaluate the performance of our method, an experiment on the ATIS corpus has been made. The experimental result has shows the technique of utilizing the reachability to be effective for reducing parsing time.  An orthodox and typical method of incremental dependency parsing based on context free grammar with the dependency relation could be as follows: When an input word is produced, (i) the partial parse trees of the initial fragment are constructed by incremental CFG parsing such as incremental chart parsing [4] , (ii) the dependencies between words are extracted from the parse trees according to the structure mapping procedure [1] . This section describes such the method shortly. input: [[\u2022 \u2022 \u2022] C 1 \u2022 \u2022 \u2022 [\u2022 \u2022 \u2022] C i \u2022 \u2022 \u2022 [\u2022 \u2022 \u2022] Cm ] X output: D D := \u222a C j (1\u2264j\u2264m) dependency([\u2022 \u2022 \u2022] C j ) if a rule X \u2192 C 1 \u2022 \u2022 \u2022 C * i \u2022 \u2022 \u2022 Cm exists then add h([\u2022 \u2022 \u2022] C j ), h([\u2022 \u2022 \u2022] C i ) to D (1 \u2264 j \u2264 m, j = i) Dependency is a kind of relations between words, and represents that a word modifies another word. The modified word is called a head and the modifying word is called a dependent. We write the dependency, in which w d is dependent and w h is head, as w d , w h . Dependencies can be extracted from a parse tree by identifying the head-child in each rule [1] . Just one category in the right-hand side of each rule is called head-child, which is annotated with a special symbol * as shown in Fig. 1 . A parse tree has a head-word, which represents a main meaning of the parse tree. We denote the head-word of a term \u03c3 by h(\u03c3). Head-words propagate up through the tree, each parent receiving its head-word from its head-child. The dependency extraction procedure is defined in Fig. 2 . Incremental chart parsing produces the partial parse trees for initial fragments [4] . The partial parse tree is called a term, which is denoted by [\u03b1] X where X is a category and \u03b1 is a word, a special symbol ? or a list of terms. We denote the category of [\u03b1] X by cat([\u03b1] X ). The term [?] X is called undecided term and corresponds to the part not inputed yet. The leftmost occurrence of an undecided term in a term \u03c3 is called leftmost undecided term in \u03c3, which denoted by lut(\u03c3). The incremental chart parsing introduces two new operations to the standard bottom-up chart parsing [2] . One is the application of rules to the term including undecided terms and the other is the replacement of the leftmost undecided term with the term including undecided terms. As an example, let us consider the parse of the fragment \"The boy saw\". The standard chart parsing produces terms: (1)[[[the] DET [boy] N ] N P [?] V P ] S , (2)[saw] V , (3)[[saw] V [?] N P ] V P 1 and so on. However, it produces no term for \"The boy saw\". On the other hand, the incremental chart parsing applies the rule V P \u2192 V P 1 ADV for (3) to produce a term (4)[[[saw] V [?] N P ] V P 1 [?] ADV ] V P and the leftmost undecided term of (1) is replaced with (4) so that it produces the term (5 )[[[the] DET [boy] N ] N P [[[saw] V [?] N P ] V P 1 [?] ADV ] V P ] S for \" The boy saw\". Dependencies for initial fragments can be extracted from the terms produced in incremental chart parsing by applying the dependency extraction procedure. For example, the dependencies for \"The boy saw\" is computed from the term (5) as shown in Fig. 3 . Incremental Dependency Parsing The method described in Sect.2 can compute the dependencies for initial fragments. However, we can not say the efficiency is enough, because it may produce a lot of terms which have the same dependencies. If it is possible to extract the dependencies correctly, all the terms are not necessary to for i := 0 to m \u2212 2 if cat(\u03c3 m\u2212i ) h \u2740 * cat(lut(\u03c3 m\u2212i\u22121 )) then h(lut(\u03c3 m\u2212i\u22121 )) := h(\u03c3 m\u2212i ) D := D \u222a dependency(\u03c3 m\u2212i\u22121 ) Figure 4 : Algorithm of extracting dependencies from connected terms produce so that the efficiency is increased. We accomplish this by utilizing the reachability relation. Before describing our proposed method, we give a definition of reachability. Let X and Y be categories. We write X \u2740 Y , if a rule Y \u2192 X\u03b1 exists for some categories sequence \u03b1. Let \u2740 * be the reflexive transitive closure of \u2740. We say that Y is reachable from X, if X \u2740 * Y . The relation that Y is reachable from X means that a parse tree whose root is Y may have the leftmost descendant X. To compute dependencies, we classify the reachability relation. Definition 1 Let X and Y be categories. We write X h \u2740 Y if a rule Y \u2192 X * \u03b1 exists for some categories sequence \u03b1. We write X d \u2740 Y if a rule Y \u2192 X\u03b1Z * \u03b2 exists for some categories sequences \u03b1 and \u03b2 and some category Z. \u2737 When Y is reachable from X, X and Y satisfy X h \u2740 * Y or X \u2740 * d \u2740\u2740 * Y . X h \u2740 * Y means that the head-word of leftmost descendant X propagates up to the ancestor Y . In contrast, X \u2740 * d \u2740\u2740 * Y means that the head-word of X does not propagate up to Y . For initial fragments, the proposed parsing (i) produces terms according to the standard chart parsing, (ii) connects terms by utilizing reachability and (iii) extracts dependencies from the connected terms. The same dependencies as the one described in Sect. 2 can be obtained by the method. The method connects a term \u03c3 with another term \u03c4 , if cat(lut(\u03c3)) is reachable from cat(\u03c4 ). We represent connected terms by a list of terms. The adjacent terms \u03c3 and \u03c4 in the list mean that they are connected by reachability. Fig. 4 illustrates the procedure of extracting dependencies from connected terms. By utilizing the relation h \u2740 * , the procedure propagates a head-word of a term to another term. If the relation \u2740 * d \u2740\u2740 * is satisfied, the head-word is not propagated. This enables the parsing to compute the dependencies for fragments without applying rules to terms including undecided terms. As an example, let us consider the incremental parsing process of the fragment \"The boy saw\". When \"saw\" is processed, the parsing produces the terms (1) and ( 2 ) according to the standard chart parsing fashion. The category of ( 2 ) is V and the one of the leftmost undecided term of ( 1 ) is V P . Since V \u2740 * V P , (1) and ( 2 ) are connected. Moreover, since V h \u2740 * V P and the head-word of (2) is \"saw\", the head-word of the leftmost undecided term of (1) becomes \"saw\" (see Fig. 5 .). For \"The boy saw\", the dependencies the, boy and boy, saw are obtained by the procedure in Fig. 4 . The dependencies are the same as the ones extracted from the term (5). Experimental Result In order to evaluate the performance of our technique, an parsing experiment has been made. The parsing was implemented in GNU Common Lisp on a Linux PC with Pentium III 1GHz processor and 1GB main memory. We used the ATIS corpus of Penn Treebank [3] . The corpus contains 578 sentences with CFG parse tree tags, and 509 phrase structure rules in them are used for the test. The parsing time has been compared between the technique explained in Sect. 2 (i.e. usual method) and the one utilizing the reachability relation in Sect. 3 (i.e. our method). Fig. 6 shows the relation between the sentence length and the processing time 1 . The average time of our method is 0.03 sec., while that of the usual method is 23.49 sec. This result shows the technique of utilizing the reachability to be effective for reducing processing time. Concluding Remarks This paper has described an efficient method of incrementally computing the dependencies between words. We have pointed out that the reachability relation between syntactic categories is related to the head-dependent relation between words. We provided a simple algorithm for acquiring the lexical dependencies based on the reachability relation. An experimental result has demonstrated that our method is effective for reducing processing time. Therefore, the method can be expected to be applicable to a simultaneous speech interpreting system which we are studying. In this method, the lexical dependencies of the natural language sentence have been extracted from the CFG parse tree. From the point of view of only the efficiency, however, the parsing with only syntactic constraints on dependency grammar might also be available. For the comparison with such the technique, further experiments will be made in the future.",
    "abstract": "This paper describes an efficient method of incremental dependency parsing based on phrase structure grammar with the dependency relation. The reachability relation between syntactic categories is utilized for connecting a head word with a dependent word simultaneously with the inputs. The method does not need to construct the whole parse tree of an initial fragment on the word-by-word basis, and thus can be expected to be usable for simultaneous spoken language processing. An experiment on the ATIS corpus has shown the technique of utilizing the reachability to be effective for reducing processing time of the incremental dependency parsing.",
    "countries": [
        "Japan"
    ],
    "languages": [
        ""
    ],
    "numcitedby": "3",
    "year": "2001",
    "month": "October",
    "title": "Efficient Incremental Dependency Parsing"
}