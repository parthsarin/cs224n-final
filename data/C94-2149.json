{
    "article": "This paper presents the XTAG system, a grammar development tool based on the Tree Adjoining Grammar (TAG) formalism that includes a wide-coverage syntactic grammar for English. The various components of the system are discussed and preliminary evaluation results from the parsing of various corpora are given. Results from the comparison of X3AG against the IBM statistical parser and the Alvey Natural Language Tool parser are also given. INTRODUCTION XTAG is a large on-going project to develop a widecoverage grammar for English, based on the l,exicalized Tree Adjoining Grammar (I 3\"AG) tbrmalism. LTAG is a lexicalized mildly-context sensitive tree rewriting system [Joshi et al., 1975; Schabes, 1990] that is closely related to Dependency Grammars and Categorial Grammars. Elementary trees in 13~AG provicle a larger domain of locality over which syntactic and semantic (predicate-argument) constraints are specified. XTAG also serves as an LTAG grammar development system consisting of a predictive left-to-right parser, an X-window interface, a roof phological analyzer, and a part-of-speech tagger (also referred to as simply 'tagger'). SYSTEM DESCRIPTION Figure 1 shows the overall llow of the system when parsing a sentence. The input sentence is submitted to the Morphological Analyzer and the 3hgger. The morphological analyzer retrieves the morphological information for each individual word from the morphological database. This output is tiltered in the P.O.S Blender using the output of the trigram tagger to reduce the part-of-speech ambiguity of the Morphological Analyzer Part-of-Speech Tagger A trigram part-of-speech tagger [Church, 19881, trained on the Wall Street Jotlrilal Corpus, is incorporated in XTAG. The trigraln tagger has been extended to output the N-best parts-of-speech sequences [Soong and Huang, 1990] . XTAG uses this infer mat|on Io reduce the number of specious parses by filtering the possible parts-of-speech provided by the morphological analyzer for each word. The tagger decreases tile time to parse a sentence by an average of 93%. Parser Tim system uses an Ea,'ley-style parser which has been extended to handle feature structures associated with trees [Schabes, 19901. The parser uses a general two-pass parsing s|rategy for 'lexicalized' gramlnars ISchabes, 19881. In the tree-selection pass, the parser uses tile syntactic database entry [or each lexical item in the sentence to select a set of elementary structures from the tree database. The tree-grafting pass composes the selected trees using substitution and ad-junct|on operations to obtain the parse of the sentence. The output of tile parser for tile sentence I had a map yesterday is illustrated in l;igure 2. The parse tree I represents the surface constituent structure, while the derivation tree represents the deriwttion history of tile parse. The nodes of the derivation tree are the tree names anchored by tile lexical items. The composition operation is indicated by the nature of Ihe arcs; a dashed line is used for substitution and a bold line for adjunct|on. The number beside each tree name is the address of the node at which the operation took place. Tile deriwltion tree can also be interpreted as a dependency graph with unlabeled arcs hetween words of the sentence. lleuristics that take advantage of 12FAGs have been implemented to improve the performance of tile parser. For instance, the span of the tree and the position of the anchor in the tree are used to weed out unsuitable trees in the first pass of the parser. Statistical information about the usage frequency of the trees I liach node of Ihe parse tree has a ligature sh'uchlre, not shown here, associaled with it. has been acquired by parsing corpora. This information has been compiled into a statistical database (tile l,ex Prob DB) that is used by the parser. These methods speed the runt|me by approxmmtely 87%. J lleuristics for Ranking the 1 arses The parser generates the parses in a rank order. This ranking is determined using a combination of heuristics, which are expressed as structural preferences for deriwttion, e..g. attachment sites of adjuncts, right-vs. left-branching structures, topicalized sentences, etc. Similar hem'istics have been used for other parsers. See recent work by IHobbs and Bear, 199411, [Mc-Cord, 19931,and [Nagao, 1994t. A partial list el ~ the heuristics used in XTAG follows: 1. Prefer argument positions to adjunct positions (here, this amotmts Io preferring fewer adjunc-t|on operations). 4. 5. Prefer left-branching structure for sequences of norms. Prefer high attachment (wide-scope) for a moditier and a sequence of modifees of the same type (i.e. a PP following or preceding a coordinate NP, an adjective or determiner preceding a coordinate NP or sequence of Ns, an N preceding coordinate Ns). These rankings are used to control the number of sentences passed on to further levels of processing. In applications emphasizing speed, only the highest ranked parse will be considered, in applications emphasizing accuracy, the top N parses can be considered. Syntactic Database The syntactic database associates lexical items with the appropriate trees and tree families based on selectional information. The syntactic database entries were originally extracted from the Oxford Advanced Learner's Dictionary and Oxford Dictionary for Contemporary Idiomatic English; and then modified and augmented by hand. There are more than 37,000 syntactic database entries. Selected entries from this database are shown in Table 1 . Each syntactic entry consists of an INDEX feld, the uninflected form under which the entry is compiled in the database, an ENTRY field, which contains all of the lexical items that will anchor the associated tree(s), a pos field, which gives the part-of-speech for the lexical item(s) in the ENTRY feld, and then either (but not both) a TREES or FAM field. The TREES field indicates a list of individual trees to be associated with the entry, while the FAM field indicates a list of tree families. A tree family, which corresponds to a subcategorization frame (see section 2.3.3), may contain a number of trees. A syntactic entry may also contain a list of feature templates (Fs) which expand out to feature equations to be placed in the specified tree(s). Any number of EX felds may be provided for example sentences. Note that lexical items may have more than one entry and may select the same tree more than once, using different features to capture lexical idiosyncrasies (e.g. have). Tree Database Trees in the English [;FAG framework fall into two conceptual classes. The smaller class consists o1' individual trees such as trees (a), (d), and (e) in Figure 3 #N..wh-, #N_refl-, #N_plur \"Fable 1 : Selected Syntactic Database Entries grouped into tree families. These tree families represent subcategorization frmnes; the trees in a tree family would be related to each other transformationally in a movement-based approach. Trees 3(b) and 3(c) are members of two distinct tree families. As illustrated by trees 3(d) and 3(e), each node of a tree is annotated with a set of features whose wtlues may be specified within the tree or may be derived from the syntactic database. There are 385 trees that compose 40 tree families, along with 62 individually selected trees in the tree database. Statistics Database The statistics database contains trec tmigram frequencies which have been collected by parsing lhe Wall Street Jourllal, the IBM manttal, and the ATIS corptts using the XTAG English grammar. The parser, augmented with the statistics database [Joshi and Srinivas, 1994] , assigns each word of the input sentence the top three inost frequently used trees given the part-of-speech o1' the word. On failure the parser retries using all the trees suggested by the syntactic database liar each word. The augmented parser has been observed to have a success rate of 50% without retries. X-Interface XTAG provides a graphical interface for manipulating TAGs. The interface offers the following: Menu-based facility for creating and modifying tree liles and loading grammar files. User controlled parser parameters, including the parsing of categories (S, embedded S, NP, l)etP), and the use of the tagger (on/o flTrctry on failure), Storage/,etriewfl facilities for elementary and t)arsed hces as text liles. The production of postscript files corresponding to elementary and parsed trees. Graphical displays of trec and feature data structures, including a scroll 'web' for large tree structures. Mouse-based tree editor for crca|ing and modifying trees and feature shuctures. Hand combination of trees by adjunction or substitution for use in diagnosing grallunar problems. Figure 4 shows tile X window interface after a number of sentences have becll pat'sed. ENGLISH GRAMMAR The morphology, syntactic, and tree databases together comprise the English grammar. Lexical items not in the databases are handled by default mechanisms. The range of syntactic phenomena that can be handled is large and includes auxiliaries (including inversion), copula, raising and small clause constructions, topicalization, relative clauses, infinitives, gerunds, passives, adjuncts, it-clefts, wh-clefts, PRO constructions, noun-noun modifications, extraposition, determiner phrases, genitives, negation, nounverb contractions and imperatives. Analyses for sentential adjuncts and time NP adverbials are currently being implemented. The combination of large scale lexicons and wide phenomena coverage result in a robust system. Sysl:em CoiliparisOll with Alvey We also colnpared the XTt\\G parser to the Alvey Nal:tlral kailgtlage Tools (ANI ;l') t)alser, and louild that the two perfornled coniparably. We parsed the sol of I~DOCI'2 Noltn Pluases presented in Appendix l:l of the teciinical report IC, arroll, 1903 ] , using Iho XTAG parser. The lechnical report presenls the ranking of tile correct parse and also gives the Ioial iillillber of doriwitions for each liOtill phrase. In this experhnenl, we have conlparod lhe total nuinber o[' doriwliions obtained |'rent X'I'A(I with lhai oblainod front the ANUF parser. XTAG has recently been used to parse the Wall Street Journal 2, IBM manual, and ATIS corpora as a means of evaluating the coverage and correctness of XTAG parses. For this evaluation, a sentence is considered to have parsed correctly if XTAG produces parse trees. Verifying the presence of the correct parse among the parses generated is done manually at present. Table 2 shows the preliminary results. We will present more complete and rigorous results by the time of the conference and compare them with other 2Sentences of length <= 15 words Comparison with IBM Parser A more detailed experiment to measure the crossing bracket accuracy of the XTAG-parsed IBM-manual sentences has been performed. Of the 1600 IBM sentences that have been parsed (those available from the Penn Treebank [Marcus et al., 19931) , only 67 overlapped with the IBM-manual treebank that was bracketed by University of Lancaster. 3 The XTAGparses for these 67 sentences were compared 4 with the Lancaster IBM-manual treebank. Table 3 shows the results obtained in this experiment. It also shows the crossing bracket accuracy of the latest IBM statistical parser [Jelinek el al., 1994] on the same genre of sentences. Recall is a measure of the number of bracketed constituents the system got right divided by the number of constituents in the corresponding Treebank sentences. Precision is the number of bracketed constituents the system got right divided by the number of bracketed constituents in the system's parse. Based on the present data, we believe our\" results will be consistent for the complete XTAO-parsed IBM corpus; we plan to evaluate the XTAG parses against the Penn Treebank. In addition, we are parsing the Lancaster sentences, and adding those to the XTAG IBM corpus. While the crossing-brackets measure is useful for comparing the output of different parsers, we believe that it is a somewhat inadequate method for\" evaluating a parser like XTAG for\" two main reasons. First, 3The treebank was obtained through Salim Roukos (roukos@watson.ibm.com) at IBM. ~We used the parseval program written by Phil llarison (phil @atc.boeing.com).",
    "abstract": "This paper presents the XTAG system, a grammar development tool based on the Tree Adjoining Grammar (TAG) formalism that includes a wide-coverage syntactic grammar for English. The various components of the system are discussed and preliminary evaluation results from the parsing of various corpora are given. Results from the comparison of X3AG against the IBM statistical parser and the Alvey Natural Language Tool parser are also given.",
    "countries": [
        "United States"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "136",
    "year": "1994",
    "month": "",
    "title": "{XTAG} System - A Wide Coverage Grammar for {E}nglish"
}