{
    "article": "There is significant evidence in the literature that integrating knowledge about multiword expressions can improve shallow parsing accuracy. We present an experimental study to quantify this improvement, focusing on compound nominals, proper names and adjectivenoun constructions. The evaluation set of multiword expressions is derived from Word-Net and the textual data are downloaded from the web. We use a classification method to aid human annotation of output parses. This method allows us to conduct experiments on a large dataset of unannotated data. Experiments show that knowledge about multiword expressions leads to an increase of between 7.5% and 9.5% in accuracy of shallow parsing in sentences containing these multiword expressions. Introduction Multiword expressions are sequences of words that tend to co-occur more frequently than chance and are characterised by various levels of idiosyncracy (Baldwin et al., 2003; Baldwin, 2006) . There is extended literature on various issues relevant to multiword expression; recognition, classification, lexicography, etc. (see Section 6). The vast majority of these publications identifies as motivation for multiword expression research its potential contribution to deep or shallow parsing. On the other side of this issue, the state-of-the-art parsing systems seem to ignore the fact that treating multiword expressions as syntactic units would potentially increase parser's accuracy. In this paper, we present an experimental study attempting to estimate the contribution of integrating multiword expressions into shallow parsing. We focus on multiword expressions that consist of two successive tokens; in particular, compound nominals proper names and adjective-noun constructions. We also present a detailed classification method to aid human annotation during the procedure of deciding if a parse is correct or wrong. We present experimental results about the different classes of changes that occur in the parser output while unifying multiword expression components. We conclude that treating known multiwords expressions as singletons leads to an increase of between 7.5% and 9.5% in accuracy of shallow parsing of sentences containing these multiword expressions. Increase percentages are higher for multiword expressions that consist of an adjective followed by a noun (12% to 15%); and even higher for noncompositional multiword expressions 1 that consist of an adjective and a noun (15.5% to 19.5%). The rest of the paper is structured as follows: In Section 2 we present how multiword expressions can be annotated in text and used by a shallow parser. In Section 3 we present an overview of our experimental process. Section 4 explains how the set of target multiword expressions and textual corpora were created. In Section 5 we present and discuss the results of the experimental process. In Section 6 we present parts of the related literature. Section 7 concludes the paper and proposes some future work. Annotating Multiword expressions In this paper, we present a study to inspect the extent to which knowledge of multiword expressions improves shallow parsing. Our approach focuses on English multiword expressions that appear as sequences in text. In particular, we focus on compound nominals (e.g. lemon tree), proper names (e.g. prince Albert) and adjective-noun constructions (e.g. red carpet). Shallow or deep parsing should treat multiword expression as units that cannot be divided in any way. We replace the multiword expression tokens with a special made up token, i.e. the multiword expression constituents joined with an underscore. For example, we replace all occurrences of \"lemon tree\" with \"lemon tree\". We choose to replace the multiword expression words with a token that does not exist in the dictionary of the part of speech tagger. This is quite an important decision. Usually, a part of sheech tagger assigns to an unknown words the part of speech that best fits to it with respect to the parts of speech of the words around it and the training data. This is a desirable behaviour for our purposes. The experimental results of our study quantify the difference between the shallow parser output of a big number of sentences after the replacement and the shallow parser output of the same sentences before the replacement. The comparison is done ignoring changes of parts of speech, assigned by the part of speech tagger. Evaluation The target of our experiment is to evaluate whether replacing the multiword expression tokens with a single token, unknown to the part of speech tagger, improves shallow parsing accuracy. The ideal way to perform this evaluation would be to use a corpus with manual annotation about parsing and multiword expressions. Given this corpus we would be able to measure the accuracy of a shallow (or deep) parser before and after replacing multiword expressions. However, to the best of our knowledge there is no corpus available to include this type of annotations in English. Instead, there are two options: Firstly, we can use treebank data, where manual parsing annotation is readily available, and manually annotate multiword expressions. The advantage of this approach is that results are directly comparable with other results of the literature, due to the use of benchmark data. Manual annotation of multiword expressions is a very time-and effort-consuming process due to the large size of most treebanks. Alternatively, multiword expression annotation could be done using a method of recognition. Annotating the multiword expressions that appear in WordNet could be a safe decision, in terms of correctness, however, WordNet is reported to have limited coverage of multiword expressions (Baldwin, 2006; Laporte and Voyatzi, 2008) . WordNet covers only 9.1 % and 16.1 % of the datasets of Nicholson and Baldwin (2008) (484 noun compounds) and Kim and Baldwin (2008) (2169 noun compounds), respectively. Secondly, we can use a set of multiword expressions as a starting point and then create corpora that contain instances of these multiword expressions. In succession, these sentences need to be manually annotated in terms of parsing, and this requires huge human effort. Alternatively, we can parse the corpora before and after replacing the multiword expression and then compare the parser output. This is the evaluation procedure that we chose to follow, and is shown in Figure 1 . The above procedure is only able to retrieve instances where the replacement of the multiword expression leads to a different parsing, a different allocation of tokens to phrases. It is not able to spot instances where the parser output remains unchanged after the replacement, no matter if they are correct. multiword expressions with a single token improves parsing accuracy, we are not interested in instances that remain unchanged. We focus on instances that changed; either they were corrected or they were made wrong or they remain erroneous. For example, the shallow parser output for example A in Table 1 did not change after the replacement. Example B in Table 1 shows a sentence which was corrected after the replacement. Instead of manually annotating the sentences whose parser output changed after the replacement as corrected or not, we identify a number of change classes under which we classify all these sentences. In the following section, we present the change classes. For each we thoroughly discuss whether its form guarantees that its sentences are wrongly parsed before the change and correctly parsed after the change. In this case, the sentences of the corresponding class should be counted as false positives. We also discuss the opposite; if the form of each change class guarantees that its sentences are correctly parsed before the change and wrongly parsed after the change. In this case, the sentences of the corresponding class should be counted as true negatives. For this discussion we hypothesize that among the possible output shallow parses for a given sentence the correct one has (a) the smallest number phrases, and (b) the smallest number of tokens not assigned to any phrase. Shallow parsing change classes In this section, we present a classification of cases where the shallow parser output of the sentence is different from the parser output of the same sentence after replacing the multiword expression with a single token. The secondary focus of this discussion is to estimate whether the specific form of each change class can lead to a safe conclusion about if the parser output of the sentence under discussion: (a) was wrong before the replacement and was then corrected, (b) was correct before the replacement and was then made wrong, or (c) was wrong before the replacement and remained wrong. For this discussion, we refer to words that are not assigned to any phase in the shallow parser output as \"leaves\". Hypothesis: We base our analysis on the hypothesis that among the possible output shallow parses for a given sentence the correct one has (a) the smallest number phrases, and (b) the smallest number of leaves. The theoretical intuitions behind the hypothesis are: (a) parse trees with just leaves are partial parse trees and hence should not be preferred over complete parse trees. (b) when mistaken parse trees are generally larger (with more phrases). We checked the hypothesis by manually annotating 80 randomly chosen instances; 10 for each change class that is counted as correct or wrong (see Table 2 ). 74 instances validated the hypothesis (92.5%). Table 2 shows one example for each change class. Figure 2 presents the classes as transformations between trees, following the notation of Bille (2005) . Change class P2LMw (Phrase to Leaves including the Multiword expression) Before replacing the multiword expression sequence with a single token, the multiword expression is assigned to some phrase, possibly together with other words. After the replacement, the components of that phrase are not assigned to any phrase, but instead as leaves. Change class P2L (Phrase to Leaves excluding the multiword expression) Similarly to change class P2LMw, before the replacement, some successive tokens excluding the multiword itself are assigned to some phrase. After the replacement, the components of that phrase appear as leaves. Change class L2PMw (Leaves to Phrase including the Multiword expression) The changes covered by this class are the opposite changes of change class P2LMw. Before the replacing the multiword expression sequence with a single token, the multiword expression sequence is not assign to any phrase possibly among other words. After the replacement, the multiword expression is assigned to a phrase. Change class L2P (Leaves to Phrase excluding the multiword expression) Similarly to change class L2PMw, before the replacement, one or more successive tokens excluding the multiword expression itself appear as leaves. After the replacement, these tokens are assigned to a phrase. Change class PL2P (Phrases or Leaves to Phrase) After the replacement, the tokens of more than one phrases or leaves are assigned to a single phrase. Change class P2PL (Phrase to Phrases or Leaves) In contrast to change class PL2P, after the replacement, the tokens of one phrase either are assigned to more than one phrases or appear as leaves. Change class PN (Phrase label Name) After replacing the multiword expression sequence with a single token, one phrase appears with a different phrase label, although it retains exactly the same component tokens. Change class PoS (Part of Speech) After replacing the multiword expression sequence with a single token, one or more tokens appears with a different part of speech. This class of changes comes from the part of speech tagger, and are out of the scope of this study. Thus, in the results section we show a size estimate of this class, and then we present results about change classes, ignoring change class PoS. Change class P2P (Phrases to less Phrases) After replacing the multiword expression sequence with a single token, the component tokens of more than one successive phrases \u03b1 are assigned to a different set of successive phrases \u03b2. However, it is always the case that phrases \u03b1 are less than phrases \u03b2 (|\u03b1| < |\u03b2|). Change class MwA (Multiword expression Allocation) Before replacing the multiword expression sequence, the multiword expression constituents are assigned to different phrases. The instances of change classes where the parser output after the replacement has more parsing leaves or phrases than before are counted towards sentences that were parsed wrongly after the replacement. For these classes, change classes P2LMw, P2L and P2PL, most probably the parser output after the replacement is wrong. In contrast, the instances of change classes where a sequence of tokens is assigned to a phrase, or many phrases are merged are counted towards sentences that were parsed wrongly before the replacement and correctly after the replacement. These changes, that are described by classes L2PMw, L2P, PL2P and P2P, most probably describe improvements in shallow parsing. The instances of change class MwA are counted as correct after the replacement because by definition all tokens of a multiword expression are expected to be assigned to the same phrase. The instances of change class PN can be either correct or wrong after the replacement. For this reason, we present our results as ranges (see Table 4 ). The minimum value is computed when the instances of class PN are counted as wrong after the replacement. In contrast, the maximum value is computed when the instances of this class are counted as correct after the replacement. Shallow parsing complex change classes During the inspection of instances where the shallow parser output before the replacement is dif- Table 2 : Examples for change classes. Multiword expression: \"action officer\". Parts of speech appear within parentheses. \"B\" stands for \"before\" and \"A\" for \"after\" (multiword expression replacement). or denote change classes that count positively or negatively towards improving shallow parsing. ? denotes classes that are treated specially. ferent from the shallow parser output after the replacement, we came across a number of instances that were classified in more than one class of the previous subsection. In other words, two or more classes of change happened. For example, in a number of instances, before the replacement, the multiword expression constituents are assigned to different phrases (change class MwA). After the replacement, the tokens of more than one phrases are assigned to a single phrase (change class PL2P). These instances consist new complex change classes and are named as the sum of names of the participating classes. The instances of the example above consist the complex change class PL2P+MwA. Target multiword expressions and corpora collection We created our set of target multiword expressions using WordNet 3.0 (Miller, 1995) . Out of its 52, 217 multiword expressions we randomly chose 120. Keeping the ones that consist of two tokens resulted in the 118 expressions of Table 3 . Manually inspecting these multiword expressions proved that they are all compound nominals, proper names or adjective-noun constructions. Each multiword expression was manually tagged as compositional or non-compositional, following the procedure described in Korkontzelos and Manandhar (2009) . Table 3 shows the chosen multiword expressions together with information about their compositionality and the parts of speech of their components.  For each multiword expression we created a different corpus. Each consists of webtext snippets of length 15 to 200 tokens in which the multiword expression appears. Snippets were collected following Korkontzelos and Manandhar (2009) . Given a multiword expression, a set of queries is created: All synonyms of the multiword expression extracted from WordNet are collected 2 . The multiword expression is paired with each synonym to create a set of queries. For each query, snippets are collected by parsing the web-pages returned by Yahoo!. The union of all snippets produces the multiword expression corpus. In Table 3 , the number of collected corpus sentences for each multiword expression are shown within parentheses. GENIA tagger (Tsuruoka et al., 2005) was used as part of speech tagger. SNoWbased Shallow Parser (Munoz et al., 1999) was used for shallow parsing. Experimental results and discussion The corpora collecting procedure of Section 4 resulted in a corpus of 376, 007 sentences, each one containing one or more multiword expressions. In 85, 527 sentences (22.75%), the shallow parser output before the replacement is different than the shallow parser output after the replacement. 7.20% of these change instances are due to one or more parts of speech changes, and are classified to change class PoS. In other words, in 7.20% of cases where there is a difference between the shallow parses before and after replacing the multiword expression tokens there is one or more tokens that were assigned a different part of speech. However, excluding parts of speech from the comparison, there is no other difference between the two parses. The focus of this study is to quantify the effect of unifying multiword expressions in shallow parsing. Part of speech tagging is a component of our approach and parts of speech are not necessarily parts of the parser output. For this reason, we chose to ignore part of speech changes, the changes of class PoS. Below, we discuss results for all other classes. Table 4 shows a summary of our results. The first two columns describe classes of multiword expression with respect to compositionality and the parts of speech of the component words. The first line accounts for the average of all multiword expressions, the second one for compositional multiword expressions made of nouns, etc. The third column shows the number of corpus sentences of each class. For each one of the classes of Table 4 , the fourth and fifth columns show the minimum and maximum improvement in shallow parsing, respectively, caused by unifying multiword expression tokens. Let X be the function that returns the number of instances assigned to change class X. With respect to the discussion of Subsection 3.1 about how the instances of each class should be counted towards the final results, the minimum and maximum improvements in shallow parsing are: min = \u2212 P2LMw \u2212 P2L + L2PMw + L2P + + PL2P \u2212 P2PL + PL2P+MwA + + P2P + P2P+MwA \u2212 PN (1) max = \u2212 P2LMw \u2212 P2L + L2PMw + L2P + + PL2P \u2212 P2PL + PL2P+MwA + + P2P + P2P+MwA + PN (2) On average of all multiword expressions, unifying multiword expression tokens contributes from 7.47% to 9.49% in shallow parsing accuracy. It should be noted that this improvement is reported on sentences which contain at least one known multiword expression. To project this improvement on any general text, one needs to know the percentage of sentences that contain known multiword expres- sions. Then the projected improvement can be computed by multiplying these two percentages. Table 4 shows that the increase in shallow parsing accuracy is lower for expressions that consist of nouns than for those that consist of an adjective and a noun. Moreover, the improvement is higher for non-compositional expressions than compositional ones. This is expected, due to the idiosyncratic nature of non-compositional multiword expressions. The highest improvement, 15.32% to 19.67%, occurs for non-compositional multiword expressions that consist of an adjective followed by a noun. Figure 3 shows the percentage of each class over the sum of sentences whose parse before unifying multiword expression tokens is different for the parse after the replacement. The most common change class is PL2P. It contains sentences in the shallow parser output of which many phrases or leaves were all assigned to a single phrase. 34.03% of the changes are classified in this class. The least common classes are change classes P2L, L2PMw and L2P. Each of these accounts for less than 3% of the overall changes. Related Work There have been proposed several ways to classify multiword expressions according to various properties such as compositionality and institutionalisation 3 (Moon, 1998; Sag et al., 2002; Baldwin, 2006) . There is a large variety of methods in the literature that address recognising multiword expressions or some subcategory. Mc-Carthy (2006) divides multiword expression detect-ing methods into statistical (e.g. pointwise mutual information (PMI)), translation-based, dictionarybased, substitution-based, and distributional. Statistical methods score multiword expression candidates based on co-occurrence counts (Manning and Schutze, 1999; Dunning, 1993; Lin, 1999; Frantzi et al., 2000) . Translation-based methods usually take advantage of alignment to discover potential multiword expressions (Venkatapathy and Joshi, 2005) . Other methods use dictionaries to reveal semantic relationships between the components of potential multiword expressions and their context (Baldwin et al., 2003; Hashimoto et al., 2006) . Substitutionbased methods decide for multiword expressions by substituting their components with other similar words and measuring their frequency of occurrence (Lin, 1999; Fazly and Stevenson, 2006) . These techniques can be enriched with selectional preference information (Van de Cruys and Moir\u00f3n, 2007; Katz and Giesbrecht, 2006) . Fazly and Stevenson (2007) propose measures for institutionalisation, syntactic fixedness and compositionality based on the selectional preferences of verbs. There are several studies relevant to detecting compositionality of noun-noun, verb-particle and light verb constructions and verbnoun pairs (e.g. Katz and Giesbrecht (2006) ). To the best of our knowledge there are no approaches integrating multiword expression knowledge in deep or shallow parsing. However, there are several attempts to integrate other forms of lexical semantics into parsing. Bikel (2000) merged the Brown portion of the Penn Treebank with Sem-Cor, and used it to evaluate a generative bilexical model for joint word sense disambiguation and parsing. Similarly, Agirre et al. (Agirre et al., 2008) integrated semantic information in the form of semantic classes and observed significant improvement in parsing and PP attachment tasks. Xiong et al. (2005) integrated first-sense and hypernym features in a generative parse model applied to the Chinese Penn Treebank and achieved significant improvement over their baseline model. Fujita et al. (2007) extended this work by implementing a discriminative parse selection model, incorporating word sense information and achieved great improvements as well. Examples of integrating selectional preference information into parsing are Dowding et al. (1994) and Hektoen (1997) . Conlusion and future work In this paper, we presented an experimental study attempting to estimate the contribution of unifying multiword expression components into shallow parsing. The evaluation is done based on 118 multiword expressions extracted from WordNet 3.0. They consist of two successive components and are in particular, compound nominals, proper names or adjective-noun constructions. Instead of using pre-annotated text, we collected sentences that contain the above multiword expressions from the web. We applied shallow parsing before and after unifying multiword expression tokens and compared the outputs. We presented a detailed classification of changes in the shallow parser output to aid human annotation during the procedure of deciding if a parser output is correct or wrong. We presented experimental results about change classes and about the overall improvement of unifying multiword expression tokens with respect to compositionality and the parts of speech of their components. We conclude that unifying the tokens of known multiwords expressions leads to an increase of between 7.5% and 9.5% in accuracy of shallow parsing of sentences that contain these multiword expressions. Increase percentages are higher on adjective-noun constructions (12% to 15%); and even higher on non-compositional adjective-noun constructions (15.5% to 19.5%). Future work will focus in conducting similar experiments for multiword expressions longer than two words. One would expect that due to their size, a wrong interpretation of their structure would affect the shallow parser output more than it does for multiword expressions consisting of two words. Thus, unifying multiword expressions longer than two words would potentially contribute more to shallow parsing accuracy. Furthermore, the evaluation results presented in this paper could be strengthened by adding manual multiword expression annotation to some treebank. This would provide a way to avoid the change class analysis presented in Subsection 3.1 and compute statistics more accurately. Finally, the results of this paper suggest that implementing a parser able to recognise multiword expressions would be very helpful towards high accuracy parsing.",
    "abstract": "There is significant evidence in the literature that integrating knowledge about multiword expressions can improve shallow parsing accuracy. We present an experimental study to quantify this improvement, focusing on compound nominals, proper names and adjectivenoun constructions. The evaluation set of multiword expressions is derived from Word-Net and the textual data are downloaded from the web. We use a classification method to aid human annotation of output parses. This method allows us to conduct experiments on a large dataset of unannotated data. Experiments show that knowledge about multiword expressions leads to an increase of between 7.5% and 9.5% in accuracy of shallow parsing in sentences containing these multiword expressions.",
    "countries": [
        "United Kingdom"
    ],
    "languages": [
        "English",
        "Chinese"
    ],
    "numcitedby": "42",
    "year": "2010",
    "month": "June",
    "title": "Can Recognising Multiword Expressions Improve Shallow Parsing?"
}