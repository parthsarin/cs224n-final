{
    "article": "Seq2seq learning has produced promising results on summarization. However, in many cases, system summaries still struggle to keep the meaning of the original intact. They may miss out important words or relations that play critical roles in the syntactic structure of source sentences. In this paper, we present structure-infused copy mechanisms to facilitate copying important words and relations from the source sentence to summary sentence. The approach naturally combines source dependency structure with the copy mechanism of an abstractive sentence summarizer. Experimental results demonstrate the effectiveness of incorporating source-side syntactic information in the system, and our proposed approach compares favorably to state-of-the-art methods. Introduction Recent years have witnessed increasing interest in abstractive summarization. The systems seek to condense source texts to summaries that are concise, grammatical, and preserve the important meaning of the original texts (Nenkova and McKeown, 2011) . The task encompasses a number of high-level text operations, e.g., paraphrasing, generalization, text reduction and reordering (Jing and McKeown, 1999) , posing a considerable challenge to natural language understanding. Src A Mozambican man suspect of murdering Jorge Microsse, director of Maputo central prison, has escaped from the city's police headquarters, local media reported on Tuesday. Ref Mozambican suspected of killing Maputo prison director escapes Sys mozambican man arrested for murder Src An Alaska father who was too drunk to drive had his 11-year-old son take the wheel, authorities said. Ref Drunk Alaska dad has 11 year old drive home Sys alaska father who was too drunk to drive Table 1 : Example source sentences, reference and system summaries produced by a neural attentive seq-to-seq model. System summaries fail to preserve summary-worthy content of the source (e.g., main verbs) despite their syntactic importance. The sequence-to-sequence learning paradigm has achieved remarkable success on abstractive summarization (Rush et al., 2015; Nallapati et al., 2016; See et al., 2017; Paulus et al., 2017) . While the results are impressive, individual system summaries can appear unreliable and fail to preserve the meaning of the source texts. Table 1 presents two examples. In these cases, the syntactic structure of source sentences is relatively rare but perfectly normal. The first sentence contains two appositional phrases (\"suspect of murdering Jorge Microsse,\" \"director of Maputo central prison\") and the second sentence has a relative clause (\"who was too drunk to drive\"), both located between the subject and the main verb. The system, however, fails to identify the main verb in both cases; it instead chooses to focus on the first few words of the source sentences. We observe that rare syntactic constructions of the source can pose problems for neural summarization systems, possibly for two reasons. First, similar to rare words, certain syntactic constructions do not occur frequently enough in the training data to allow the system to learn the patterns. Second, neural summarization systems are not explicitly informed of the syntactic structure of the source sentences and they tend to bias towards sequential recency. 1 . If important dependency edges such as \"father \u2190 had\" can be preserved in the summary, the system summary is likely to preserve the meaning of the original. In this paper we seek to address this problem by incorporating source syntactic structure in neural sentence summarization to help the system identify summary-worthy content and compose summaries that preserve the important meaning of the source texts. We present structure-infused copy mechanisms to facilitate copying source words and relations to the summary based on their semantic and structural importance in the source sentences. For example, if important parts of the source syntactic structure, such as a dependency edge from the main verb to the subject (\"father\" \u2190 \"had,\" shown in Figure 1 ), can be preserved in the summary, the \"missing verb\" issue in Table 1 can be effectively alleviated. Our model therefore learns to recognize important source words and source dependency relations and strives to preserve them in the summaries. Our research contributions include the following: \u2022 we introduce novel neural architectures that encourage salient source words/relations to be preserved in summaries. The framework naturally combines the dependency parse tree structure with the copy mechanism of an abstractive summarization system. To the best of our knowledge, this is the first attempt at comparing various neural architectures for this purpose; \u2022 we study the effectiveness of several important components, including the vocabulary size, a coveragebased regularizer (See et al., 2017) , and a beam search with reference mechanism (Tan et al., 2017) ; \u2022 through extensive experiments we demonstrate that incorporating syntactic information in neural sentence summarization is effective. Our approach surpasses state-of-the-art published systems on the benchmark dataset. 1 Related Work Prior to the deep learning era, sentence syntactic structure has been utilized to generate summaries with an \"extract-and-compress\" framework. Compressed summaries are generated using a joint model to extract sentences and drop non-important syntactic constituents (Daume III and Marcu, 2002; Berg-Kirkpatrick et al., 2011; Thadani and McKeown, 2013; Durrett et al., 2016) , or a pipeline approach that combines generic sentence compression (McDonald, 2006; Clarke and Lapata, 2008; Filippova et al., 2015) with a sentence pre-selection or post-selection process (Zajic et al., 2007; Galanis and Androutsopoulos, 2010; Wang et al., 2013; Li et al., 2013; Li et al., 2014) . Although syntactic information is helpful for summarization, there has been little prior work investigating how best to combine sentence syntactic structure with the neural abstractive summarization systems. Existing neural summarization systems handle syntactic structure only implicitly (Kikuchi et al., 2016; Chen et al., 2016; Zhou et al., 2017; Tan et al., 2017; Paulus et al., 2017) . Most systems adopt a \"cut-andstitch\" scheme that picks words either from the vocabulary or the source text and stitch them together using a recurrent language model. However, there lacks a mechanism to ensure structurally salient words and relations in source sentences are preserved in the summaries. The resulting summary sentences can contain misleading information (e.g., \"mozambican man arrested for murder\" flips the meaning of the original) or grammatical errors (e.g., verbless, as in \"alaska father who was too drunk to drive\"). Natural language generation (NLG)-based abstractive summarization (Carenini and Cheung, 2008; Gerani et al., 2014; Fabbrizio et al., 2014; Liu et al., 2015; Takase et al., 2016) also makes extensive use of structural information, including syntactic/semantic parse trees, discourse structures, and domainspecific templates built using a text planner or an OpenIE system (Pighin et al., 2014) . In particular, Cao et al. (2018) leverage OpenIE and dependency parsing to extract fact tuples from the source text and use those to improve the faithfulness of summaries. Different from the above approaches, this paper seeks to directly incorporate source-side syntactic structure in the copy mechanism of an abstractive sentence summarization system. It learns to recognize important source words and relations during training, while striving to preserve them in the summaries at test time to aid reproduction of factual details. Our intent of incorporating source syntax in summarization is different from that of neural machine translation (NMT) (Li et al., 2017a; Chen et al., 2017) , in part because NMT does not handle the information loss from source to target. In contrast, a summarization system must selectively preserve source content to render concise and grammatical summaries. We specifically focus on sentence summarization, where the goal is to reduce the first sentence of an article to a title-like summary. We believe even for this reasonably simple task there remains issues unsolved. Our Approach We seek to transform a source sentence x to a summary sentence y that is concise, grammatical, and preserves the meaning of the source sentence. A source word is replaced by its Glove embedding (Pennington et al., 2014) before it is fed to the system; the vector is denoted by x i (i \u2208 [S]; 'S' for source). Similarly, a summary word is denoted by y t (t \u2208 [T ]; 'T' for target). If a word does not appear in the input vocabulary, it is replaced by a special ' unk ' token. We begin this section by describing the basic summarization framework, followed by our new copy mechanisms used to encourage source words and dependency relations to be preserved in the summary. The Basic Framework We build an encoder-decoder architecture for this work. An encoder condenses the entire source text to a continuous vector; it also learns a vector representation for each unit of the source text (e.g., words as units). In this work we use a two-layer stacked bi-directional Long Short-Term Memory (Hochreiter and Schmidhuber, 1997) networks as the encoder, where the input to the second layer is the concatenation of hidden states from the forward and backward passes of the first layer. We obtain the hidden states of the second layer; they are denoted by h e i . The source text vector is constructed by averaging over all h e i and passing the vector through a feedforward layer with tanh activation to convert from the encoder hidden states to an initial decoder hidden state (h d 0 ). This process is illustrated in Eq. (2). h e i = f e (h e i\u22121 , x i ) h d t = f d (h d t\u22121 , y t\u22121 ) (1) h d 0 = tanh(W h 0 1 S S i=1 h e i + b h 0 ) (2) A decoder unrolls the summary by predicting one word at a time. During training, the decoder takes as input the embeddings of ground truth summary words, denoted by y t , while at test time y t are embeddings of system predicted summary words (i.e., teacher forcing). We implement an LSTM decoder with the attention mechanism. A context vector c t is used to encode the source words that the system attends to for generating the next summary word. It is defined in , where [\u2022||\u2022] denotes the concatenation of two vectors. The \u03b1 matrix measures the strength of interaction between the decoder hidden states {h d t } and encoder hidden states {h e i }. To predict the next word, the context vector c t and h d t are concatenated and used as input to build a new vector h d t (Eq. ( 6 )). h d t is a surrogate for semantic meanings carried at time step t of the decoder. It is subsequently used to compute a probability distribution over the output vocabulary (Eq. ( 7 )). e t,i = v tanh(W e [h d t ||h e i ] + b e ) (3) \u03b1 t,i = exp(e t,i ) S i =1 exp(e t,i ) (4) c t = S i=1 \u03b1 t,i h e i (5) h d t = tanh(W h [h d t ||c t ] + b h ) (6) P vocab (w) = softmax(W y h d t + b y ) (7) [x i ||s e i ] h e i h d t c t \u21b5 t,i h d t c t \u21b5 t,i x i [h e i ||s e i ] Figure 2 : System architectures for 'Struct+Input' (left) and 'Struct+Hidden' (right). A critical question we seek to answer is whether the structural embeddings (s e i ) should be supplied as input to the encoder (left) or be exempted from encoding and directly concatenated with the encoder hidden states (right). The copy mechanism (Gulcehre et al., 2016; See et al., 2017) allows words in the source sequence to be selectively copied to the target sequence. It expands the search space for summary words to include both the output vocabulary and the source text. The copy mechanism can effectively reduce out-ofvocabulary tokens in the generated text, potentially aiding a number of applications such as MT (Luong et al., 2015b ) and text summarization (Gu et al., 2016; Cheng and Lapata, 2016; Zeng et al., 2017) . Our copy mechanism employs a 'switch' to estimate the likelihood of generating a word from the vocabulary (p gen ) vs. copying it from the source text (1 \u2212 p gen ). The basic model is similar to that of the pointer-generator networks (See et al., 2017) . The switch is a feedforward layer with sigmoid activation (Eq. ( 8 )). At time step t, its input is a concatenation of the decoder hidden state h d t , context vector c t , and the embedding of the previously generated word y t\u22121 . For predicting the next word, we combine the generation and copy probabilities, shown in Eq. ( 9 ). If a word w appears once or more in the input text, its copy probability ( i:w i =w \u03b1 t,i ) is the sum of the attention weights over all its occurrences. If w appears in both the vocabulary and source text, P (w) is a weighted sum of the two probabilities. p gen =\u03c3(W z [h d t ||c t ||y t\u22121 ])+b z ) (8) P (w)=p gen P vocab (w)+(1\u2212p gen ) i:w i =w \u03b1 t,i (9) Structure-Infused Copy Mechanisms The aforementioned copy mechanism attends to source words based on their \"semantic\" importance encoded in {\u03b1 t,i }, which measures the semantic relatedness of the encoder hidden state h e i and the decoder hidden state h d t (Eq. ( 4 )). However, the source syntactic structure is ignored. This is problematic, because it hurts the system's ability to effectively identify summary-worthy source words that are syntactically important. We next propose three strategies to inject source syntactic structure to the copy mechanism. Shallow Combination Structural info Example (1) depth in the dependency parse tree 0 (2) label of the incoming edge 'root' (3) number of outgoing edges 3 (4) part-of-speech tag 'VBD' (5) absolution position in the source text 9 (6) relative position in the source text (0.5, 0.6] Inspired by compressive summarization via structured prediction (Berg-Kirkpatrick et al., 2011; Almeida and Martins, 2013) , we hypothesize that structural labels, such as the incoming dependency arc and the depth in a dependency parse tree, can be helpful to predict word importance. We consider six categories of structural labels in this work; they are presented in Table 2 . Each structural label is mapped to a fixed-length, trainable structural embedding. However, a critical question remains as to where the structural embeddings should be injected in the existing neural architecture. This problem has not yet been systematically investigated. In this work, we compare two settings: \u2022 Struct+Input concatenates structural embeddings of position i (flattened into one vector s e i ) with the source word embedding x i and uses them as a new form of input to the encoder: x i \u21d2 [x i ||s e i ] ; h e i h d t c t \u21b5 t,i t,i x i g e i t,i h e i h d t \u21b5 t,i t,i x i [g e i ||g e p,i ] t,i c t t,i Figure 3 : System architectures for 'Struct+2Way+Word' (left) and 'Struct+2Way+Relation' (right). \u03b2t,i (left) measures the structural importance of the i-th source word; \u03b2t,i (right) measures the saliency of the dependency edge pointing to the i-th source word. g e p,i is the structural embedding of the parent. In both cases \u03b4t,i replaces \u03b1t,i to become the new attention value used to estimate the context vector ct. \u2022 Struct+Hidden concatenates structural embeddings of position i (flattened) with the encoder hidden state h e i and uses them as a new form of hidden states: h e i \u21d2 [h e i ||s e i ]. The architectural difference is illustrated in Figure 2 . Structural embeddings are important complements to existing neural architectures. However, it is unclear whether they should be supplied as input to the encoder or be left out of the encoding process and directly concatenated with the encoder hidden states. This is a critical question we seek to answer by comparing the two settings. Note that an alternative setting is to separately encode words and structural labels using two RNN encoders, we consider this as a subproblem of the \"Struct+Input\" case. The above models complement state-of-the-art by combining semantic and structural signals to determine summary-worthy content. Intuitively, a source word is copied to the summary for two reasons: it contains salient semantic content, or it serves a critical syntactic role in the source sentence. Without explicitly modeling the two factors, 'semantics' can outweigh 'structure,' resulting in summaries that fail to keep the original meaning intact. In the following we propose a two-way mechanism to separately model the \"semantic\" and \"structural\" importance of source words. 2-Way Combination (+Word) Our new architecture involves two attention matrices that are parallel to each other, denoted by \u03b1 and \u03b2. \u03b1 t,i is defined as previously in Eq. (3-4). It represents the \"semantic\" aspect, calculated as the strength of interaction between the encoder hidden state h e i and the decoder hidden state h d t . In contrast, \u03b2 t,i measures the \"structural\" importance of the i-th input word to generating the t-th output word, calculated by comparing the structure-enhanced embedding g e i with the decoder hidden state h d t (Eq. (10-11)). We use g e i = [s e i ||x i ] as a primitive (unencoded) representation of the i-th source word. We define \u03b4 t,i \u221d \u03b1 t,i + \u03b2 t,i as a weighted sum of \u03b1 t,i and \u03b2 t,i , where a trainable coefficient is introduced to balance the contribution from both sides (Eq. ( 12 )). Merging semantic and structural salience at this stage allows us to acquire an accurate estimate of how important the i-th source word is to predicting the t-th output word. \u03b4 t,i replaces \u03b1 t,i to become the new attention value. It is used to calculate the context vector c t (Eq. ( 13 )). A reliable estimate of c t is crucial as it is used to estimate the generation probability over the vocabulary (P vocab (w), Eq. (6-7)), the switch value (p gen , Eq. ( 8 )), and ultimately used to predict the next word (P (w), Eq. ( 9 )). f t,i = u tanh(W f [g e i ||h d t ] + b f ) (10) \u03b2 t,i = exp(f t,i ) S i =1 exp(f t,i ) (11) \u03b4 t,i = \u03b1 t,i + \u03b2 t,i S i =1 (\u03b1 t,i + \u03b2 t,i ) (12) c t = S i=1 \u03b4 t,i h e i (13) 3.2.3 2-Way Combination (+Relation) We observe that salient source relations also play a critical role in predicting the next word. For example, if a dependency edge (\"father\" nsubj \u2190\u2212\u2212 \"had\") is salient and \"father\" is selected to be included in the summary, it is likely that \"had\" will be selected next such that a salient source relation (\"nsubj\") is preserved in the summary. Because summary words tend to follow the word order of the original, we assume selecting a source word and including it in the summary has an impact on its subsequent source words, but not the reverse. In this formulation we use \u03b2 t,i to capture the saliency of the dependency edge pointing to the i-th source word. Thus, an edge w j \u2190 w i has its salience score saved in \u03b2 t,j ; and conversely, an edge w j \u2192 w i has its salience score in \u03b2 t,i . \u03b2 is calculated in the same way as described in Eq. (10-11). However, we replace g e i with [g e i ||g e p,i ] so that a dependency edge is characterized by the embeddings of its two endpoints (g e p,i is the parent embedding). The architectural difference between \"Struct+2Way+Word\" and \"Struct+2Way+Relation\" is illustrated in Figure 3 . To obtain the likelihood of w j being selected to the summary prior to time step t, we define \u03b1 t,j = t\u22121 t =0 \u03b1 t ,j that sums up the individual probabilities up to time step t-1. Assume there is a dependency edge w j \u2192 w i (j<i) whose salience score is denoted by \u03b2 t,i . At time step t, we calculate \u03b1 t,j \u03b2 t,i (or \u03b1 t,j \u03b2 t,j for edge w j \u2190 w i ) as the probability of w i being selected to the summary, given that one of its prior words w j (j<i) is included in the summary and there is a dependency edge connecting the two. By summing the impact over all its previous words, we obtain the likelihood of the i-th source word being included to the summary at time step t in order to preserve salient source relations; this is denoted by \u03b3 t,i (Eq. ( 15 )). Next, we define \u03b4 t,i \u221d \u03b1 t,i + \u03b3 t,i as a weighted combination of semantic and structural salience (Eq. ( 16 )). \u03b4 t,i replace \u03b1 t,i to become the new attention values used to estimate the context vector c t (Eq. ( 13 )). Finally, the calculation of generation probabilities P vocab (w), switch value p gen , and probabilities for predicting the next word P (w) remains the same as previously (Eq. (6-9)). \u03b1 t,j = t\u22121 t =0 \u03b1 t ,j (14) \u03b3 t,i = j:j<i \u03b1 t,j \u03b2 t,i if w j \u2192 w i \u03b1 t,j \u03b2 t,j if w j \u2190 w i (15) \u03b4 t,i = \u03b1 t,i + \u03b3 t,i S i =1 (\u03b1 t,i + \u03b3 t,i ) (16) Learning Objective and Beam Search We next describe our learning objective, including a coverage-based regularizer (See et al., 2017) , and a beam search with reference mechanism (Tan et al., 2017) . We want to investigate the effectiveness of these techniques on sentence summarization, which has not been explored in previous work. Learning objective. Our training proceeds by minimizing a per-target-word cross-entropy loss function. A regularization term is applied to the \u03b1 matrix. Recall that \u03b1 t,i \u2208 [0, 1] measures the interaction strength between the t-th output word and the i-th input word. Naturally, we expect a 1-to-1 mapping between the two words. The coverage-based regularizer, proposed by See et al., (2017) , encourages this behavior by tracking the historical attention values attributed to the i-th input word (up to time step t-1), denoted by \u03b1 t,i = t\u22121 t =0 \u03b1 t ,i . The approach then takes the minimum between \u03b1 t,i and \u03b1 t,i , which has the practical effect of forcing \u03b1 t,i (\u2200t) to be close to either 0 or 1, otherwise a penalty will be applied. The regularizer \u2126 is defined in Eq. ( 17 ), where M is the size of the mini-batch, S and T are the lengths of the source and target sequences. For two-way copy mechanisms, \u03b4 replaces \u03b1 to become the new attention values, we therefore apply regularization to \u03b4 instead of \u03b1. When the regularizer applies, the objective becomes minimizing (L + \u2126). \u2126=\u03bb M m=1 1 T (m) S (m) T (m) t=1 S (m) i=1 min( \u03b1 t,i ,\u03b1 t,i ) (17) Beam search with reference. During testing, we employ greedy search to generate system summary sequences. For the task of summarization, the ground truth summary sequences are usually close to the source texts. This property can be leveraged in beam search. Tan et al., (2017) describe a beam search with reference mechanism that rewards system summaries that have a high degree of bigram overlap with the source texts. We describe it in Eq. ( 18 ), where where S(w) denotes the score of word w. B(y <t , x) measures the number of bigrams shared by the system summary (up to time step t-1) and the source text; {y <t , w} adds a word w to the end of the system summary. The shorter the source text (measured by length S), the more weight a shared bigram will add to the score of the current word w. A hyperparameter \u03b7 controls the degree of closeness between the system summary and the source text. S(w)=logP (w)+\u03b7 B({y <t ,w},x)\u2212B(y <t ,x) S (18) Experiments We evaluate the proposed structure-infused copy mechanisms for summarization in this section. We describe the dataset, experimental settings, baselines, and finally, evaluation results and analysis. Data Sets We evaluate our proposed models on the Gigaword summarization dataset (Parker, 2011; Rush et al., 2015) . The task is to reduce the first sentence of an article to a title-like summary. We obtain dependency parse trees for source sentences using the Stanford neural network parser (Chen and Manning, 2014) . We also use the standard train/valid/test data splits. Following (Rush et al., 2015) , the train and valid splits are pruned 2 to improve the data quality. Spurious pairs that are repetitive, overly long/short, and pairs whose source and summary sequences have little word overlap are removed. No pruning is performed for instances in the test set. The processed corpus contains 4,018K training instances. We construct two (non-overlapped) validation sets: \"valid-4096\" contains 4,096 randomly sampled instances from the valid split; it is used for hyperparameter tuning and early stopping. \"valid-2000\" is used for evaluation; it allows the models to be trained and evaluated on pruned instances. Finally, we report results on the standard Gigaword test set (Rush et al., 2015) containing 1,951 instances (\"test-1951\"). Experimental Setup We use the Xavier scheme (Glorot and Bengio, 2010) for parameter initialization, where weights are initialized using a Gaussian distribution W i,j \u223c N (0, \u03c3), \u03c3 = 2 n in +nout ; n in and n out are numbers of the input and output units of the network; biases are set to be 0. We further implement two techniques to accelerate mini-batch training. First, all training instances are sorted by the source sequence length and partitioned into mini-batches. The shorter sequences are padded to have the same length as the longest sequence in the batch. All batches are shuffled at the beginning of each epoch. Second, we introduce a variable-length batch vocabulary containing only source words of the current mini-batch and words of the output vocabulary. P (w) in Eq. ( 9 ) only needs to be calculated for words in the batch vocabulary. It is magnitudes smaller than a direct combination of the input and output vocabularies. Finally, our input vocabulary contains the most frequent 70K words in the source texts and summaries. The output vocabulary contains 5K words by default. More network parameters are presented in Table 3 . (Kingma and Ba, 2015) lr = 1e-4 Coeff. for coverage-based regularizer \u03bb = 1 Coeff. for beam search with reference \u03b7 \u2248 13.5 Beam size K = 5 Minibatch size M = 64 Early stopping criterion (max 20 epochs) valid. loss Gradient clipping (Pascanu et al., 2013) g \u2208 [-5, 5] F1) . Models implementing the structure-infused copy mechanisms (\"Struct+*\") outperform the baseline. S: the government filed another round of criminal charges in a widening stock options scandal T: options scandal widens B: government files more charges in stock options scandal I: another round of criminal charges in stock options scandal H: charges filed in stock options scandal W: another round of criminal charges in stock options scandal R: government files another round of criminal charges in options scandal Table 5 : Example system summaries. 'S:' source; 'T:' target; 'B:' baseline; 'I:' Struct+Input; 'H:' Struct+Hidden; 'W:' 2Way+Word; \"R:\" 2Way+Relation. \"2Way+Relation\" is able to preserve important source relations in the summary, e.g., \"government nsubj \u2190 \u2212\u2212 \u2212 files,\" \"files dobj \u2212\u2212\u2192 round,\" and \"round nmod \u2212 \u2212\u2212 \u2192 charges.\" S: red cross negotiators from rivals north korea and south korea held talks wednesday on emergency food shipments to starving north koreans and agreed to meet again thursday T: koreas meet in beijing to discuss food aid from south eds B: north korea , south korea agree to meet again I: north korea , south korea meet again H: north korea , south korea meet on emergency food shipments W: north korea , south korea hold talks on food shipments R: north korea , south korea hold talks on emergency food shipments Table 6: Example system summaries. \"Struct+Hidden\" and \"2Way+Relation\" successfully preserve salient source words (\"emergency food shipments\"), which are missed out by other systems. We observe that copying \"hold talks\" from the source also makes the resulting summaries more informative than using the word \"meet.\" Results ROUGE results on valid set. We first report results on the Gigaword valid-2000 dataset in Table 4 . We present R-1, R-2, and R-L scores (Lin, 2004) that respectively measures the overlapped unigrams, bigrams, and longest common subsequences between the system and reference summaries 3 . Our baseline system (\"Baseline\") implements the seq2seq architecture with the basic copy mechanism (Eq. (1-9)). It is a strong baseline that resembles the pointer-generator networks described in (See et al., 2017) . The structural models (\"Struct+*\") differ from the baseline only on the structure-infused copy mechanisms. All models are evaluated without the coverage regularizer or beam search ( \u00a73.3) to ensure fair comparison. Overall, we observe that models equipped with the structure-infused copy mechanisms are superior to the baseline, suggesting that combining source syntactic structure with the copy mechanism is effective. We found that the \"Struct+Hidden\" architecture, which directly concatenates structural embeddings with the encoder hidden states, outperforms \"Struct+Input\" despite that the latter requires more parameters. \"Struct+2Way+Word\" also demonstrates strong performance, achieving 43.21%, 21.84%, and 40.86% F 1 scores, for R-1, R-2, and R-L respectively. ROUGE results on test set. We compare our proposed approach with a range of state-of-the-art neural summarization systems. Results on the standard Gigaword test set (\"test-1951\") are presented in Table 7 . Details about these systems are provided in Table 8 . Overall, our proposed approach with structureinfused pointer networks perform strongly, yielding ROUGE scores that are on-par with or surpassing state-of-the-art published systems. Notice that the scores on the valid-2000 dataset are generally higher than those of test-1951. This is because the (source, summary) pairs in the Gigaword test set are not pruned (see \u00a74.1). In some cases, none (or very few) of the summary words appear in the source. This may cause difficulties to the systems equipped with the copy mechanism. The \"Struct+2Way+Word\" architecture that respectively models the semantic and syntactic importance of source words achieves the highest scores. It outperforms its counterpart of \"Struct+2Way+Relation,\" which seeks to preserve source dependency relations in summaries. We conjecture that the imperfect dependency parse trees generated Gigaword Test-1951 System R-1 R-2 R-L ABS (Rush et al., 2015) 29.55 11.32 26.42 ABS+ (Rush et al., 2015) 29.76 11.88 26.96 Luong-NMT (Chopra et al., 2016) 33.10 14.45 30.71 RAS-LSTM (Chopra et al., 2016) 32.55 14.70 30.03 RAS-Elman (Chopra et al., 2016) 33.78 15.97 31.15 ASC+FSC1 (Miao and Blunsom, 2016) 34.17 15.94 31.92 lvt2k-1sent (Nallapati et al., 2016) 32.67 15.59 30.64 lvt5k-1sent (Nallapati et al., 2016) 35.30 16.64 32.62 Multi-Task (Pasunuru et al., 2017) 32.75 15.35 30.82 DRGD (Li et al., 2017b) 36 ABS and ABS+ (Rush et al., 2015) are the first work introducing an encoder-decoder architecture for summarization. Luong-NMT (Chopra et al., 2016) is a re-implementation of the attentive stacked LSTM encoder-decoder of Luong et al. (2015a) . RAS-LSTM and RAS-Elman (Chopra et al., 2016) describe a convolutional attentive encoder that ensures the decoder focuses on appropriate words at each step of generation. ASC+FSC1 (Miao and Blunsom, 2016) presents a generative auto-encoding sentence compression model jointly trained on labelled/unlabelled data. lvt2k-1sent and lvt5k-1sent (Nallapati et al., 2016) address issues in the attentive encoder-decoder framework, including modeling keywords, capturing sentence-toword structure, and handling rare words. Multi-Task w/ Entailment (Pasunuru et al., 2017) combines entailment with summarization in a multi-task setting. DRGD (Li et al., 2017b) describes a deep recurrent generative decoder learning latent structure of summary sequences via variational inference. by the parser may affect the \"Struct+2Way+Relation\" results. However, because the Gigaword dataset does not provide gold-standard annotations for parse trees, we could not easily verify this and will leave it for future work. In Table 5 and 6, we present system summaries produced by various models. Linguistic quality. To further gauge the summary quality, we hire human workers from the Amazon Mechanical Turk platform to rate summaries on a Likert scale of 1 to 5 according to three criteria (Zhang and Lapata, 2017) : fluency (is the summary grammatical and well-formed?), informativeness (to what extent is the meaning of the original sentence preserved in the summary?), and faithfulness (is the summary accurate and faithful to the original?). We sample 100 instances from the test set and employ 5 turkers to rate each summary; their averaged scores are presented in Table 9 . We found that \"Struct+2Way+Relation\" outperforms \"Struct+Input\" on all three criteria. It also compares favorably to ground-truth summaries on \"fluency\" and \"faithfulness.\" On the other hand, the ground-truth summaries, corresponding to article titles, are judged as less satisfying according to human raters. Dependency relations. We investigate the source dependency relations preserved in the summaries in Table 10 . A source relation is considered preserved if both its words appear in the summary. We observe that the models implementing structure-infused copy mechanisms (e.g., \"Struct+2Way+Word\") are more likely to preserve important dependency relations in the summaries, including nsubj, dobj, amod, nmod, and nmod:poss. Dependency relations that are less important (mark, case, conj, cc, det) are less likely to be preserved. These results show that our structure-infused copy mechanisms can learn to recognize the importance of dependency relations and selectively preserve them in the summaries. Coverage and reference beam. In Figure 11 , we investigate the effect of applying the coverage regularizer (\"coverage\") and reference-based beam search (\"ref beam\") ( \u00a73.3) to our models. The coverage regularizer is applied in a second training stage, where the system is trained for an extra 5 epochs with coverage and the model yielding the lowest validation loss is selected. Both coverage and ref beam can improve the system performance. Our observation suggests that ref beam is an effective addition to shorten the gap between different systems. Output vocabulary size. Finally, we investigate the impact of the output vocabulary size on the summarization performance in Table 12 . All our models by default use an output vocabulary of 5K words in order to make the results comparable to state-of-the-art-systems. However, we observe that there is a potential to further boost the system performance (17.25\u219217.62 R-2 F1-score, w/o coverage or ref beam) if we had chosen to use a larger vocabulary (10K) and can endure a slightly longer training time (1.2x). In Table 12 , we further report the percentages of reference summary words covered by the output vocabulary (\"InVcb\") and covered by either the output vocabulary or the source text (\"InVcb+Src\"). The gap between the two conditions shortens as the size of the output vocabulary is increased. Conclusion In this paper, we investigated structure-infused copy mechanisms that combine source syntactic structure with the copy mechanism of an abstractive summarization system. We compared various system architectures and showed that our models can effectively preserve salient source relations in summaries. Results on benchmark datasets showed that the structural models are on-par with or surpass state-of-theart published systems.",
    "abstract": "Seq2seq learning has produced promising results on summarization. However, in many cases, system summaries still struggle to keep the meaning of the original intact. They may miss out important words or relations that play critical roles in the syntactic structure of source sentences. In this paper, we present structure-infused copy mechanisms to facilitate copying important words and relations from the source sentence to summary sentence. The approach naturally combines source dependency structure with the copy mechanism of an abstractive sentence summarizer. Experimental results demonstrate the effectiveness of incorporating source-side syntactic information in the system, and our proposed approach compares favorably to state-of-the-art methods.",
    "countries": [
        "United States"
    ],
    "languages": [
        ""
    ],
    "numcitedby": "56",
    "year": "2018",
    "month": "August",
    "title": "Structure-Infused Copy Mechanisms for Abstractive Summarization"
}