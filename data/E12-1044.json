{
    "article": "Coordination disambiguation remains a difficult sub-problem in parsing despite the frequency and importance of coordination structures. We propose a method for disambiguating coordination structures. In this method, dual decomposition is used as a framework to take advantage of both HPSG parsing and coordinate structure analysis with alignment-based local features. We evaluate the performance of the proposed method on the Genia corpus and the Wall Street Journal portion of the Penn Treebank. Results show it increases the percentage of sentences in which coordination structures are detected correctly, compared with each of the two algorithms alone. Introduction Coordination structures often give syntactic ambiguity in natural language. Although a wrong analysis of a coordination structure often leads to a totally garbled parsing result, coordination disambiguation remains a difficult sub-problem in parsing, even for state-of-the-art parsers. One approach to solve this problem is a grammatical approach. This approach, however, often fails in noun and adjective coordinations because there are many possible structures in these coordinations that are grammatically correct. For example, a noun sequence of the form \"n 0 n 1 and n 2 n 3 \" has as many as five possible structures (Resnik, 1999) . Therefore, a grammatical approach is not sufficient to disambiguate coordination structures. In fact, the Stanford parser (Klein and Manning, 2003) and Enju (Miyao and Tsujii, 2004) fail to disambiguate a sentence I am a freshman advertising and marketing major. Table 1 shows the output from them and the correct coordination structure. The coordination structure above is obvious to humans because there is a symmetry of conjuncts (-ing) in the sentence. Coordination structures often have such structural and semantic symmetry of conjuncts. One approach is to capture local symmetry of conjuncts. However, this approach fails in VP and sentential coordinations, which can easily be detected by a grammatical approach. This is because conjuncts in these coordinations do not necessarily have local symmetry. It is therefore natural to think that considering both the syntax and local symmetry of conjuncts would lead to a more accurate analysis. However, it is difficult to consider both of them in a dynamic programming algorithm, which has been often used for each of them, because it explodes the computational and implementational complexity. Thus, previous studies on coordination disambiguation often dealt only with a restricted form of coordination (e.g. noun phrases) or used a heuristic approach for simplicity. In this paper, we present a statistical analysis model for coordination disambiguation that uses the dual decomposition as a framework. We consider both of the syntax, and structural and semantic symmetry of conjuncts so that it outperforms existing methods that consider only either of them. Moreover, it is still simple and requires only O(n 4 ) time per iteration, where n is the number of words in a sentence. This is equal to that of coordination structure analysis with alignmentbased local features. The overall system still has a quite simple structure because we need just slight modifications of existing models in this approach, Stanford parser/Enju I am a ( freshman advertising ) and ( marketing major ) Correct coordination structure I am a freshman ( ( advertising and marketing ) major ) The structure of this paper is as follows. First, we describe three basic methods required in the technique we propose: 1) coordination structure analysis with alignment-based local features, 2) HPSG parsing, and 3) dual decomposition. Finally, we show experimental results that demonstrate the effectiveness of our approach. We compare three methods: coordination structure analysis with alignment-based local features, HPSG parsing, and the dual-decomposition-based approach that combines both. Related Work Many previous studies for coordination disambiguation have focused on a particular type of NP coordination (Hogan, 2007) . Resnik (1999) disambiguated coordination structures by using semantic similarity of the conjuncts in a taxonomy. He dealt with two kinds of patterns, [n 0 n 1 and n 2 n 3 ] and [n 1 and n 2 n 3 ], where n i are all nouns. He detected coordination structures based on similarity of form, meaning and conceptual association between n 1 and n 2 and between n 1 and n 3 . Nakov and Hearst (2005) used the Web as a training set and applied it to a task that is similar to Resnik's. In terms of integrating coordination disambiguation with an existing parsing model, our approach resembles the approach by Hogan (2007) . She detected noun phrase coordinations by finding symmetry in conjunct structure and the dependency between the lexical heads of the conjuncts. They are used to rerank the n-best outputs of the Bikel parser ( 2004 ), whereas two models interact with each other in our method. Shimbo and Hara (2007) proposed an alignment-based method for detecting and disambiguating non-nested coordination structures. They disambiguated coordination structures based on the edit distance between two conjuncts. Hara et al. (2009) extended the method, dealing with nested coordinations as well. We used their method as one of the two sub-models. Background Coordination structure analysis with alignment-based local features Coordination structure analysis with alignmentbased local features (Hara et al., 2009 ) is a hybrid approach to coordination disambiguation that combines a simple grammar to ensure consistent global structure of coordinations in a sentence, and features based on sequence alignment to capture local symmetry of conjuncts. In this section, we describe the method briefly. A sentence is denoted by x = x 1 ...x k , where x i is the i-th word of x. A coordination boundaries set is denoted by y = y 1 ...y k , where (null, null, null, (3, 3, 5, 5), null) . y i = \uf8f1 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f2 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f3 (b l , e l , b r , e r ) ( The score of a coordination boundaries set is defined as the sum of score of all coordinating conjunctions in the sentence. score(x, y) = k \u2211 m=1 score(x, y m ) = k \u2211 m=1 w \u2022 f (x, y m ) (1) where f (x, y m ) is a real-valued feature vector of the coordination conjunct x m . We used almost the same feature set as Hara et al. (2009) : namely, the surface word, part-of-speech, suffix and prefix of the words, and their combinations. We used the averaged perceptron to tune the weight vector w. Hara et al. (2009) proposed to use a contextfree grammar to find a properly nested coordination structure. That is, the scoring function Eq (1) COORD Coordination. CJT Conjunct. N Non-coordination. CC Coordinating conjunction like \"and\". W Any word. Rules for non-coordinations: N i,k \u2192 COORD i,j N j+1,k N i,j \u2192 W i,i (COORD|N) i+1,j N i,i \u2192 W i,i Rules for pre-terminals: CC i,i \u2192 (and|or|but|, |; |+|+/\u2212) i CC i,i+1 \u2192 (, |; ) i (and|or|but) i+1 CC i,i+2 \u2192 (as) i (well) i+1 (as) i+2 W i,i \u2192 * i Table 3: Production rules is only defined on the coordination structures that are licensed by the grammar. We only slightly extended their grammar for convering more variety of coordinating conjunctions. Table 2 and Table 3 show the non-terminals and production rules used in the model. The only objective of the grammar is to ensure the consistency of two or more coordinations in a sentence, which means for any two coordinations they must be either non-overlapping or nested coordinations. We use a bottom-up chart parsing algorithm to output the coordination boundaries with the highest score. Note that these production rules don't need to be isomorphic to those of HPSG parsing and actually they aren't. This is because the two methods interact only through dual decomposition and the search spaces defined by the methods are considered separately. This method requires O(n 4 ) time, where n is the number of words. This is because there are O(n 2 ) possible coordination structures in a sentence, and the method requires O(n 2 ) time to get a feature vector of each coordination structure. HPSG parsing HPSG (Pollard and Sag, 1994) Figure 2 presents the Subject-Head Schema and the Head-Complement Schema 1 defined in (Pollard and Sag, 1994) . In order to express general constraints, schemata only provide sharing of feature values, and no instantiated values. Figure 3 has an example of HPSG parsing of the sentence \"Spring has come.\" First, each of the lexical entries for \"has\" and \"come\" are unified with a daughter feature structure of the Head-Complement Schema. Unification provides the phrasal sign of the mother. The sign of the larger constituent is obtained by repeatedly applying schemata to lexical/phrasal signs. Finally, the phrasal sign of the entire sentence is output on the top of the derivation tree. Acquiring HPSG from the Penn Treebank As discussed in Section 1, our grammar development requires each sentence to be annotated with i) a history of rule applications, and ii) additional annotations to make the grammar rules be pseudo-injective. In HPSG, a history of rule applications is represented by a tree annotated with schema names. Additional annotations are 1 The value of category has been presented for simplicity, while the other portions of the sign have been omitted. Specificat General gramm this phase, and through the desi ure 1 shows the structure of a sig features are defin formalism. In a lexicalized grammar, quite a small numbers of schemata are used to explain general grammatical constraints, compared with other theories. On the other hand, rich wordspecific characteristics are embedded in lexical entries. Both of schemata and lexical entries are represented by typed feature structures, and constraints in parsing are checked by unification among them. Figure 1 shows examples of HPSG schema. Figure 2 shows an HPSG parse tree of the sentence \"Spring has come.\" First, the lexical entries of \"has\" and \"come\" are joined by headcomplement schema. Unification gives the HPSG sign of mother. After applying schemata to HPSG signs repeatedly, the HPSG sign of the whole sentence is output. We use Enju for an English HPSG parser (Miyao et al., 2004) . Figure 3 shows how a coordination structure is built in the Enju grammar. First, a coordinating conjunction and the right conjunct are joined by coord right schema. Afterwards, the parent and the left conjunct are joined by coord left schema. The Enju parser is equipped with a disambiguation model trained by the maximum entropy method (Miyao and Tsujii, 2008 ). Since we do not need the probability of each parse tree, we treat the model just as a linear model that defines the score of a parse tree as the sum of feature weights. The features of the model are defined on local subtrees of a parse tree. The Enju parser takes O(n 3 ) time since it uses the CKY algorithm, and each cell in the CKY parse table has at most a constant number of edges because we use beam search algorithm. Thus, we can regard the parser as a decoder for a weighted CFG. Dual decomposition Dual decomposition is a classical method to solve complex optimization problems that can be de- Head-complement schema Lexical entries Spring HEAD noun SUBJ < > COMPS < > 2 HEAD verb SUBJ < > COMPS < > 1 has HEAD verb SUBJ < > COMPS < > 1 come 2 HEAD verb SUBJ < > COMPS < > 1 HEAD verb SUBJ < > COMPS < > 1 subject-head head-comp Figure 3 : HPSG parsing required because HPSG schemata are not injective, i.e., daughters' signs cannot be uniquely determined given the mother. The following annotations are at least required. First, the HEAD feature of each non-head daughter must be specified since this is not percolated to the mother sign. Second, SLASH/REL features are required as described in our previous study (Miyao et al., 2003a) . Finally, the SUBJ feature of the complement daughter in the Head-Complement Schema must be specified since this schema may subcategorize an unsaturated constituent, i.e., a constituent with a nonempty SUBJ feature. When the corpus is annotated with at least these features, the lexical entries required to explain the sentence are uniquely determined. In this study, we define partiallyspecified derivation trees as tree structures annotated with schema names and HPSG signs including the specifications of the above features. We describe the process of grammar development in terms of the four phases: specification, externalization, extraction, and verification. Specification General grammatical constraints are defined in this phase, and in HPSG, they are represented through the design of the sign and schemata. Figure 1 shows the definition for the typed feature structure of a sign used in this study. Some more features are defined for each syntactic category al-  It is becoming popular in the NLP community and has been shown to work effectively on several NLP tasks (Rush et al., 2010) . We consider an optimization problem arg max x (f (x) + g(x)) (2) which is difficult to solve (e.g. NP-hard), while arg max x f (x) and arg max x g(x) are effectively solvable. In dual decomposition, we solve min u max x,y (f (x) + g(y) + u(x \u2212 y)) instead of the original problem. To find the minimum value, we can use a subgradient method (Rush et al., 2010) . The subgradient method is given in Table 4 . As the algorithm shows, you can use existing algorithms and don't need to have an exact algorithm for the optimization problem, which are features of dual decomposition. u (1) \u2190 0 for k = 1 to K do x (k) \u2190 arg max x (f (x) + u (k) x) y (k) \u2190 arg max y (g(y) \u2212 u (k) y) if x = y then return u (k) end if u (k+1) \u2190 u k \u2212 a k (x (k) \u2212 y (k) ) end for return u (K) If x (k) = y (k) occurs during the algorithm, then we simply take x (k) as the primal solution, which is the exact answer. If not, we simply take x (K) , the answer of coordination structure analysis with alignment-based features, as an approximate answer to the primal solution. The answer does not always solve the original problem Eq (2), but previous works (e.g., (Rush et al., 2010) ) has shown that it is effective in practice. We use it in this paper. Proposed method In this section, we describe how we apply dual decomposition to the two models. Notation We define some notations here. First we describe weighted CFG parsing, which is used for both coordination structure analysis with alignmentbased features and HPSG parsing. We follows the formulation by Rush et al., (2010) . We assume a context-free grammar in Chomsky normal form, with a set of non-terminals N . All rules of the grammar are either the form A \u2192 BC or A \u2192 w where A, B, C \u2208 N and w \u2208 V . For rules of the form A \u2192 w we refer to A as the pre-terminal for w. Given a sentence with n words, w 1 w 2 ...w n , a parse tree is a set of rule productions of the form \u27e8A \u2192 BC, i, k, j\u27e9 where A, B, C \u2208 N , and 1 \u2264 i \u2264 k \u2264 j \u2264 n. Each rule production represents the use of CFG rule A \u2192 BC where nonterminal A spans words w i ...w j , non-terminal B spans word w i ...w k , and non-terminal C spans word w k+1 ...w j if k < j, and the use of CFG rule A \u2192 w i if i = k = j. We now define the index set for the coordination structure analysis as I csa = {\u27e8A \u2192 BC, i, k, j\u27e9 : A, B, C \u2208 N, 1 \u2264 i \u2264 k \u2264 j \u2264 n} Each parse tree is a vector y = {y r : r \u2208 I csa }, with y r = 1 if rule r is in the parse tree, and y r = 0 otherwise. Therefore, each parse tree is represented as a vector in {0, 1} m , where m = |I csa |. We use Y to denote the set of all valid parse-tree vectors. The set Y is a subset of {0, 1} m . In addition, we assume a vector \u03b8 csa = {\u03b8 csa r : r \u2208 I csa } that specifies a score for each rule production. Each \u03b8 csa r can take any real value. The optimal parse tree is y * = arg max y\u2208Y y \u2022 \u03b8 csa where y \u2022 \u03b8 csa = \u2211 r y r \u2022 \u03b8 csa r is the inner product between y and \u03b8 csa . We use similar notation for HPSG parsing. We define I hpsg , Z and \u03b8 hpsg as the index set for HPSG parsing, the set of all valid parse-tree vectors and the weight vector for HPSG parsing respectively. We extend the index sets for both the coordination structure analysis with alignment-based features and HPSG parsing to make a constraint between the two sub-problems. For the coordination structure analysis with alignment-based features we define the extended index set to be I \u2032 csa = I csa \u222a I uni where I uni = {(a, b, c) : a, b, c \u2208 {1...n}} Here each triple (a, b, c) represents that word w c is recognized as the last word of the right conjunct and the scope of the left conjunct or the coordinating conjunction is w a ...w b 1 . Thus each parse-tree vector y will have additional components y a,b,c . Note that this representation is over-complete, since a parse tree is enough to determine unique coordination structures for a sentence: more explicitly, the value of y a,b,c is 1 if rule COORD a,c \u2192 CJT a,b CC , CJT ,c or COORD ,c \u2192 CJT , CC a,b CJT ,c is in the parse tree; otherwise it is 0. We apply the same extension to the HPSG index set, also giving an over-complete representation. We define z a,b,c analogously to y a,b,c . Proposed method We now describe the dual decomposition approach for coordination disambiguation. First, we define the set Q as follows: Q = {(y, z) : y \u2208 Y, z \u2208 Z, y a,b,c = z a,b,c for all (a, b, c) \u2208 I uni } Therefore, Q is the set of all (y, z) pairs that agree on their coordination structures. The coordination structure analysis with alignment-based features and HPSG parsing problem is then to solve max (y,z)\u2208Q (y \u2022 \u03b8 csa + \u03b3z \u2022 \u03b8 hpsg ) (3) where \u03b3 > 0 is a parameter dictating the relative weight of the two models and is chosen to optimize performance on the development test set. This problem is equivalent to max z\u2208Z (g(z) \u2022 \u03b8 csa + \u03b3z \u2022 \u03b8 hpsg ) (4) where g : Z \u2192 Y is a function that maps a HPSG tree z to its set of coordination structures z = g(y). We solve this optimization problem by using dual decomposition. Figure 4 shows the resulting algorithm. The algorithm tries to optimize the combined objective by separately solving the sub-problems again and again. After each iteration, the algorithm updates the weights u(a, b, c). These updates modify the objective functions for the two sub-problems, encouraging them to agree on the same coordination structures. If y (k) = z (k) occurs during the iterations, then the algorithm simply returns y (k) as the exact answer. If not, the algorithm returns the answer of coordination analysis with alignment features as a heuristic answer. It is needed to modify original sub-problems for calculating (1) and ( 2 ) in Table 4 . We modified the sub-problems to regard the score of u(a, b, c) as a bonus/penalty of the coordination. The modified coordination structure analysis with alignment features adds u (k) (i, j, m) and u (k) , (i, j, l, m )) to the score of the subtree, when the rule production COORD i,m \u2192 CJT i,j CC j+1,l\u22121 CJT l,m is applied. (j+1, l\u2212 u (1) (a, b, c) \u2190 0 for all (a, b, c) \u2208 I uni for k = 1 to K do y (k) \u2190 arg max y\u2208Y (y \u2022 \u03b8 csa \u2212 (a,b,c)\u2208I uni u (k) (a, b, c)y a,b,c ) ... (1) z (k) \u2190 arg max z\u2208Z (z \u2022 \u03b8 hpsg + (a,b,c)\u2208I uni u (k) (a, b, c)z a,b,c ) ... (2) if y (k) (a, b, c) = z (k) (a, b, c) for all (a, b, c) \u2208 I uni then return y (k) end if for all (a, b, c) \u2208 I uni do u (k+1) (a, b, c) \u2190 u (k) (a, b, c) \u2212 a k (y (k) (a, b, c) \u2212 z (k) (a, b, c)) end for end for return y (K) The modified Enju adds u (k) (i, j, l) when coord left schema is applied, where word w c is recognized as a coordinating conjunction and left side of its scope is w a ...w b , or coord right schema is applied, where word w c is recognized as a coordinating conjunction and right side of its scope is w a ...w b . Experiments Test/Training data We trained the alignment-based coordination analysis model on both the Genia corpus (?) and the Wall Street Journal portion of the Penn Treebank (?), and evaluated the performance of our method on (i) the Genia corpus and (ii) the Wall Street Journal portion of the Penn Treebank. More precisely, we used HPSG treebank converted from the Penn Treebank and Genia, and further extracted the training/test data for coordination structure analysis with alignment-based features using the annotation in the Treebank. Table ?? shows the corpus used in the experiments. The Wall Street Journal portion of the Penn Treebank has 2317 sentences from WSJ articles, and there are 1356 COOD tags in the sentences, while the Genia corpus has 1754 sentences from MEDLINE abstracts, and there are 1848 COOD tags in the sentences. COOD tags are further subcategorized into phrase types such as NP-COOD or VP-COOD.  Penn Treebank has more VP-COOD tags and S-COOD tags, while the Genia corpus has more NP-COOD tags and ADJP-COOD tags. Implementation of sub-problems We used Enju (?) for the implementation of HPSG parsing, which has a wide-coverage probabilistic HPSG grammar and an efficient parsing algorithm, while we re-implemented Hara et al., (2009) 's algorithm with slight modifications. Step size We used the following step size in our algorithm (Figure ?? ). First, we initialized a 0 , which is chosen to optimize performance on the development set. Then we defined a k = a 0 \u2022 2 \u2212\u03b7 k , where \u03b7 k is the number of times that L(u (k ) ) > L(u (k \u22121) ) for k \u2264 k. Evaluation metric We evaluated the performance of the tested methods by the accuracy of coordination-level bracketing (?); i.e., we count each of the coordination scopes as one output of the system, and the system , (i, j, l, m )) to the score of the subtree, when the rule production COORD i,m \u2192 CJT i,j CC j+1,l\u22121 CJT l,m is applied. The modified Enju adds u (k) (a, b, c) when coord right schema is applied, where word w a ...w b is recognized as a coordinating conjunction and the last word of the right conjunct is w c , or coord left schema is applied, where word w a ...w b is recognized as the left conjunct and the last word of the right conjunct is w c . Experiments Test/Training data We trained the alignment-based coordination analysis model on both the Genia corpus (Kim et al., 2003) and the Wall Street Journal portion of the Penn Treebank (Marcus et al., 1993) , and evaluated the performance of our method on (i) the Genia corpus and (ii) the Wall Street Journal portion of the Penn Treebank. More precisely, we used HPSG treebank converted from the Penn Treebank and Genia, and further extracted the training/test data for coordination structure analysis with alignment-based features using the annotation in the Treebank. Implementation of sub-problems We used Enju (Miyao and Tsujii, 2004) for the implementation of HPSG parsing, which has a wide-coverage probabilistic HPSG grammar and an efficient parsing algorithm, while we reimplemented Hara et al., (2009) 's algorithm with slight modifications. Step size We used the following step size in our algorithm (Figure 4 ). First, we initialized a 0 , which is chosen to optimize performance on the development set. Then we defined a k = a 0 \u2022 2 \u2212\u03b7 k , where \u03b7 k is the number of times that L(u (k \u2032 ) ) > L(u (k \u2032 \u22121) ) for k \u2032 \u2264 k. Evaluation metric We evaluated the performance of the tested methods by the accuracy of coordination-level bracketing (Shimbo and Hara, 2007) ; i.e., we count each of the coordination scopes as one output of the system, and the system output is regarded as correct if both of the beginning of the first output conjunct and the end of the last conjunct match annotations in the Treebank (Hara et al., 2009) . Experimental results of Task (i) We ran the dual decomposition algorithm with a limit of K = 50 iterations. We found the two sub-problems return the same answer during the algorithm in over 95% of sentences. We compare the accuracy of the dual decomposition approach to two baselines: Enju and coordination structure analysis with alignment-based features. Table 7 shows all three results. The dual decomposition method gives a statistically significant gain in precision recall over the two methods 2 . Table 8 shows the recall of coordinations of each type. It indicates our re-implementation of CSA and Hara et al. (2009) have a roughly similar performance, although their experimental settings are different. It also shows the proposed method took advantage of Enju and CSA in NP coordination, while it is likely just to take the answer of Enju in VP and sentential coordinations. This means we might well use dual decomposi-2 p < 0.01 (by chi-square test) tion only on NP coordinations to have a better result. Figure 5 shows performance of the approach as a function of K, the maximum number of iterations of dual decomposition. The graphs show that values of K much less than 50 produce almost identical performance to K = 50 (with K = 50, the accuracy of the method is 73.4%, with K = 20 it is 72.6%, and with K = 1 it is 69.3%). This means you can use smaller K in practical use for speed. Experimental results of Task (ii) We also ran the dual decomposition algorithm with a limit of K = 50 iterations on Task (ii). Table 9 and 10 show the results of task (ii). They show the proposed method outperformed the two methods statistically in precision and recall 3 . Figure 6 shows performance of the approach as a function of K, the maximum number of iterations of dual decomposition. The convergence speed for WSJ was faster than that for Genia. This is because a sentence of WSJ often have a simpler coordination structure, compared with that of Genia. Conclusion and Future Work In this paper, we presented an efficient method for detecting and disambiguating coordinate structures. Our basic idea was to consider both grammar and symmetries of conjuncts by using dual decomposition. Experiments on the Genia corpus and the Wall Street Journal portion of the Penn Treebank showed that we could obtain statistically significant improvement in accuracy when using dual decomposition. We would need a further study in the following points of view: First, we should evaluate our method with corpus in different domains. Because characteristics of coordination structures differs from corpus to corpus, experiments on other corpus would lead to a different result. Second, we would want to add some features to coordination structure analysis with alignment-based local features such as ontology. Finally, we can add other methods (e.g. dependency parsing) as sub-problems to our method by using the extension of dual decomposition, which can deal with more than two sub-problems. Acknowledgments The second author is partially supported by KAK-ENHI Grant-in-Aid for Scientific Research C 21500131 and Microsoft CORE project 7.",
    "abstract": "Coordination disambiguation remains a difficult sub-problem in parsing despite the frequency and importance of coordination structures. We propose a method for disambiguating coordination structures. In this method, dual decomposition is used as a framework to take advantage of both HPSG parsing and coordinate structure analysis with alignment-based local features. We evaluate the performance of the proposed method on the Genia corpus and the Wall Street Journal portion of the Penn Treebank. Results show it increases the percentage of sentences in which coordination structures are detected correctly, compared with each of the two algorithms alone.",
    "countries": [
        "Japan"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "17",
    "year": "2012",
    "month": "April",
    "title": "Coordination Structure Analysis using Dual Decomposition"
}