{
    "article": "This paper describes and analyzes our Se-mEval 2014 Task 1 system. Its features are based on distributional and denotational similarities; word alignment; negation; and hypernym/hyponym, synonym, and antonym relations. Our System Our system combines different sources of semantic similarity to predict semantic relatedness and This work is licensed under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings footer are added by the organizers. License details: http://creativecommons.org/licenses/ by/4.0/ textual entailment. We use distributional similarity features, denotational similarity features, and alignment features based on shallow syntactic structure. Preprocessing We lemmatize all sentences with the Stanford CoreNLP system 1 and extract syntactic chunks with the Illinois Chunker (Punyakanok and Roth, 2001) . Like Young et al. (2014) , we use the Malt parser (Nivre et al., 2006) to identify 5 sets of constituents for each sentence: subject NPs, verbs, VPs, direct object NPs, and other NPs. For stopwords, we use the NLTK English stopword list of 127 high-frequency words. We remove negation words (no, not, and nor) from the stopword list since their presence is informative for this dataset and task. Distributional Similarities After stopword removal and lemmatization, we compute vectors for tokens that appear at least 10 times in Young et al. (2014) 's image description corpus. In the vector space, each dimension corresponds to one of the 1000 most frequent lemmas (contexts). The jth entry of the vector of w i is the positive normalized pointwise mutual information (pnPMI) between target w i and context w j : pnPMI(w i , w j ) = max \uf8eb \uf8ed 0, log P (w i ,w j ) P (w i )P (w j ) \u2212 log (P (w i , w j )) \uf8f6 \uf8f8 We define P (w i ) as the fraction of images with at least one caption containing w i , and P (w i , w j ) as the fraction of images whose captions contain both w i and w j . Following recent work that extends distributional similarities to phrases and sentences (Mitchell and Lapata, 2010; Baroni and Zamparelli, 2010 2011; Socher et al., 2012) , we define a phrase vector p to be the pointwise multiplication product of the vectors of the words in the phrase: p = w 1 ... w n where is the multiplication of corresponding vector components, i.e. p i = u i \u2022 v i . Denotational Similarities In Young et al. (2014) , we introduce denotational similarities, which we argue provide a more precise metric for semantic inferences. We use an image-caption corpus to define the (visual) denotation of a phrase as the set of images it describes, and construct a denotation graph, i.e. a subsumption hierarchy (lattice) of phrases paired with their denotations. For example, the denotation of the node man is the set of images in the corpus that contain a man, and the denotation of the node person is rock climbing is the set of images that depict a person rock climbing. We define the (symmetric) denotational similarity of two phrases as the pnPMI between their corresponding sets of images. We associate each constituent in the SICK dataset with a node in the denotation graph, but new nodes that are unique to the SICK data have no quantifiable similarity to other nodes in the graph. Features Table 1 summarizes our features. Since TE is a directional task and SR is symmetric, we express features that depend on sentence order twice: 1) f 1 are the features of s 1 and f 2 are the features of s 2 , 2) f 1 are the features of the longer sentence and f 2 are the features of the shorter sentence. These directional features are specified in the following feature descriptions. Negation In this dataset, contradictory sentence pairs are often marked by explicit negation, e.g. s 1 = \"The man is stirring the sauce for the chicken\" and s 2 = \"The man is not stirring the sauce for the chicken.\" A binary feature is set to 1 if either sentence contains not, no, or nobody, and set to 0 otherwise. Word Overlap We compute |W 1 \u2229W 2 | |W 1 \u222aW 2 | on lemmatized sentences without stopwords where W i is the set of word types that appear in s i . Training a MaxEnt or log-linear model using this feature achieves better performance than the word overlap baseline provided by the task organizers. Denotational Constituent Similarity Denotational similarity captures entailment-like relations between events. For example, sit and eat lunch have a high pnPMI, which follows our intuition that a person who is eating lunch is likely to be sitting. We use the same denotational constituent features that Young et al. (2014) C-C features compare constituents of the same type. These features express how often we expect corresponding constituents to describe the same situation. For example, s 1 = \"Girls are doing backbends and playing outdoors\" and s 2 = \"Chil-dren are doing backbends\" have subject nodes {girl} and {child}. Girls are sometimes described as children, so sim(girl, child) = 0.498. In addition, child is a parent node of girl, so max(sim(anc(girl), child)) = 1. There are 15 C-C features: sim (C 1 , C 2 ), max(sim(C 1 , C anc 2 ), sim(C anc 1 , C 2 )), sim(C anc 1 , C anc 2 ) for each con- stituent type. C-all features compare different constituent types. These features express how often we expect any pair of constituents to describe the same scene. For example, s 1 = \"Two teams are competing in a football match\" and s 2 = \"A player is throwing a football\" are topically related sentences. Comparing constituents of different types like player and compete or player and football match gives us more information about the similarity of the sentences. There are 15 C-all features: the maximum, minimum, and sum of sim(C t 1 , C 2 ) and sim(C 1 , C t 2 ) for each constituent type. Distributional Constituent Similarity Distributional vector-based similarity may alleviate the sparsity of the denotation graph. For example, for subject NP C-C features, we have non-zero distributional similarity for 87% of instances in the trial data, but non-zero denotational similarity for only 56% of the same instances. The football and team nodes may have no common images in the denotation graph, but we still have distributional vectors for football and for team. The 30 distributional similarity features are the same as the denotational similarity features except sim(a, b) is the cosine similarity between constituent phrase vectors. Alignment Since contradictory and entailing sentences have limited syntactic variation in this dataset, aligning sentences can help to predict semantic relatedness and textual entailment. We use the Needleman-Wunsch algorithm (1970) to compute an alignment based on exact word matches between two lemmatized sentences. The similarity between two lemmas is 1.0 if the words are identical and 0.0 otherwise, and we do not penalize gaps. This gives us the longest subsequence of matching lemmas. The alignment algorithm results in a sentence pair alignment and 2 unaligned chunk sets defined by syntactic chunks. For example, s 1 = \"A brown and white dog is running through the tall grass\" and s 2 = \"A brown and white dog is moving through the wild grass\" are mostly aligned, with the remaining chunks u 1 = {[VP run], [NP tall]} and u 2 = {[VP move], [NP wild]}. There are 23 alignment features. Directional features per sentence are the number of words (2 features), the number of aligned words (2 features), and the ratio between those counts (2 features). These features are expressed twice, once according to the sentence order in the dataset and once ordered by longer sentence before shorter sentence, for a total of 12 directional features. Non-directional features are the maximum, minimum, and average unaligned chunk length for each sentence and for both sentences combined (9 features), and the number of unaligned chunks in each sentence (2 features). Unaligned Chunk Matching We want to know the similarity of the remaining unaligned chunks because when two sentences have a high overlap, their differences are very informative. For example, in the case that two sentences are identical except for a single word in each sentence, if we know that the two words are synonymous, then we should predict that the two sentences are highly similar. However, if the two words are antonyms, the sentences are likely to be contradictory. We use phrase vector similarity to compute the most likely matches between unaligned chunks. We repeat the matching process twice: for simple matching, any 2 chunks with non-zero phrase similarity can be matched across sentences, while for strict matching, chunks can match only if they have the same type, e.g. NP or VP. This gives us two sets of features. For s 1 = \"A brown and white dog is running through the tall grass\" and s 2 = \"A brown and white dog is moving through the wild grass,\" the unaligned chunks are There are a total of 31 unaligned chunk matching features. Directional features per sentence include the number of unaligned chunks (2 features) and the ratio of the number of matched chunks to the total number of chunks (2 fea-tures). These features are expressed twice, once according to the sentence order in the dataset and once ordered by longer sentence before shorter sentence, for a total of 8 directional features. Non-directional features per sentence pair include the maximum, minimum, and average similarity of the matched chunks (3 features); the maximum, minimum, and average length of the matched chunks (3 features); and the number of matched chunks (1 feature). We extract these 15 features for both simple matching and strict matching. In addition, we also count the number of crossings that result from matching the unaligned chunks in place (1 feature). This penalizes matched sets that contain many crossings or long-distance matches. Chunk Label Alignment and Matching Since similar sentences in this dataset often have similar syntax, we compare their chunk label sequences, e.g. [NP A brown and white dog] [VP is running] [PP through] [NP the tall grass] becomes NP VP PP NP. We compute 17 features based on aligning and matching these chunk label sequences. Directional features are the total number of labels in the sequence (2 features), the number of unaligned labels (2 features), the ratio of the number of unaligned labels to the total number of labels (2 features), and the ratio of the number of matched labels to the number of unaligned labels (2 features). These features are expressed twice, once according to the sentence order in the dataset and once ordered by longer sentence before shorter sentence, for a total of 16 directional features. We also count the number of matched labels for the sentence pair (1 feature). Synonyms and Hypernyms We count the number of synonyms and hypernyms in the matched chunks for each sentence pair. Synonyms are words that share a WordNet synset, and hypernyms are words that have a hypernym relation in WordNet. There are two hypernym features because hypernymy is directional: num hyp 1 is the number of words in s 1 that have a hypernym in s 2 , while num hyp 2 is the number of words in s 2 that have a hypernym in s 1 . For example, s 1 = \"A woman is cutting a lemon\" and s 2 = \"A woman is cutting a fruit\" have num hyp 1 = 1. For synonyms, num syn is the number of word pairs in s 1 and s 2 that are synonyms. For example, s 1 = \"A brown and white dog is running through the tall grass\" and s 2 = \"A brown and white dog is moving through the wild grass\" have num syn = 1. Antonyms When we match unaligned chunks, the highest similarity pair are sometimes antonyms, e.g. s 1 = \"Some people are on a crowded street\" and s 2 = \"Some people are on an empty street.\" In other cases, they are terms that we think of as mutually exclusive, e.g. man and woman. In both cases, the sentences are unlikely to be in an entailing relationship. Since resources like WordNet will fail to identify the mutually exclusive pairs that are common in this dataset, e.g. bike and car or piano and guitar, we use the training data to build a list of these pairs. We identify the matched chunks that occur in contradictory or neutral sentences but not entailed sentences. We exclude synonyms and hypernyms and apply a frequency filter of n = 2. Commonly matched chunks in neutral or contradictory sentences include sit-stand, boygirl, and cat-dog. These are terms with different and often mutually exclusive meanings. Commonly matched chunks in entailed sentences include man-person, and lady-woman. These are terms that could easily be used to describe the same situation. However, cut-slice is a common pair in both neutral and entailed sentences and we do not want to count it as an antonym pair. Therefore, we consider frequent pairs that occur in contradictory or neutral but not entailed sentences to be antonyms. The feature num ant is the number of matched antonyms in a sentence pair. We identify an antonym if c a and c b are on the antonym list or occur in one of these patterns: X-not X, X-no X, X-no head-noun(X) (e.g. blue hat-no hat), Xno hypernym(X) (e.g. poodle-no dog), X-no synonym(X) (e.g. kid-no child). For each antonym pair, we set the similarity score of that match to 0.0. For example, num ant = 1 for s 1 = \"A small white dog is running across a lawn\" and s 2 = \"A big white dog is running across a lawn.\" In addition, num ant = 1 for s 1 = \"A woman is leaning on the ledge of a balcony\" and s 2 = \"A man is leaning on the ledge of a balcony.\" Models For the SR task, we implement a log-linear regression model using Weka (Hall et al., 2009) . Specif-  3 Results Our submitted system was trained on the full training and trial data (5000 sentences). Table 2 shows our results on the test data. We substantially outperform all baselines. Feature Ablation We train models on the training data and test on the trial data. Models marked with + include our word overlap feature. We also examine a single compositional feature (vector composition): the cosine similarity of two sentence vectors. A sentence vector is the pointwise multiplication product of component word vectors. Table 4 shows TE accuracy of each model by entailment label. On contradictions, the negation model has 86.0% accuracy while our final system has only 77.0% accuracy. However, the negation model cannot identify entailment. Its performance is due to the high proportion of contradictions that can be identified by explicit negation. We expected antonyms to improve classification of contradictions, but the antonym feature actually has the highest accuracy of any feature on entailed sentences. The dataset contains few contradictions, and most involve explicit negation, not antonyms. The antonym feature indicates that when two sentences have high word overlap and no antonyms, one is likely to entail the other. Neutral sentences often contain word pairs that are mutually exclusive, so the antonym feature distinguishes between neutral and entailed sentences. Conclusion Our system combines multiple similarity metrics to predict semantic relatedness and textual entailment. A binary negation feature and similarity comparisons based on chunking do very well, as do denotational constituent similarity features. In the future, we would like to focus on multiword paraphrases and prepositional phrases, which our current system has trouble analyzing. Acknowledgements We gratefully acknowledge support of the National Science Foundation under grants 1053856 and 1205627, as well as an NSF Graduate Research Fellowship to Alice Lai.",
    "abstract": "This paper describes and analyzes our Se-mEval 2014 Task 1 system. Its features are based on distributional and denotational similarities; word alignment; negation; and hypernym/hyponym, synonym, and antonym relations.",
    "countries": [
        "United States"
    ],
    "languages": [
        "English"
    ],
    "numcitedby": "124",
    "year": "2014",
    "month": "August",
    "title": "{I}llinois-{LH}: A Denotational and Distributional Approach to Semantics"
}