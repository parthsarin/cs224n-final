{
    "article": "We describe the development of a generator for (]erman built by reusing and adapting existing linguistic data and software. Reusability is crucial for the successful application of N I,P techniques to real-life problems since it helps to cut down on both development and adaptation effort. Itowever, combining resources not designed to work together is not trivial. We describe the problems arising when integrating three preexisting resources (FUF, a unificationbased generator, an HPS(~ (]ramrnm' for (~errnan, and X2MorF, 7~ two-level morphology (;omponent) and the adaptat, ions necessary to come up with a wide coverage l;acticM generator for (]erlnnn. Introduction A main obstacle for the successfifl application of N I,P is the necessary effort in terms of deve|opinent and adaptation time. One possible answer to this problem is the use of generic and modula.r software. An example fbr a software system develot)e.d with this goal in mind is the FUF generator (l~lhadnd, 1991) , a well-documented public domain software written in IASI: ). Still, it is no straightforward task to employ that, kind of software for new applications. Another important step is the declarative definition of linguistic data (grammar and lexicon) which also fa(:ilit~tes reuse in another setting. The reuse of existing resources does not only save efforts but, to a hopeflflly much minor extent, also creates new tasks to be solved, i.e. the integration of resources not having been *The work reported here h,~s been carried out within tit('. I;t/E Project U/ST (LRM 062-09) and funded by the Austrian t;brschungsfdrderungsfonds dcr (lcwcrblichcn Wirtsch@, Grant 2/329. l\"inan-(tim support for the Austrian Research Institute for ArtiticiM [ntelligence is provided by the Austrian 13undesministerium fiir Wisscnschaft, Forschung und Kunst. designed to work together, llow this can be done in an organized way is the topic of this paper. The work being described here was done in t, he context of a multilinguM text generation system. One Of the ohjectives of the project is to rouse ex-isting resources for those subtasks for which at> propriate resources exist, l,'or the German tactical generator 1 an irnph;mentation of an HPS(, '~ style gramrm~r of (]erman (used for parsing and genre> ation, but on a different software platform) was available inhouse. ~l)he I\"UI ? generator was chosen as the core component of t.he system. However, two problems had to be solved before FUI\" could be used for the planned purpose. One was the Net that li'UF, dew, loped for English, has no suitM)le morphologicM conlponent for the rich inflection of German. X2MorF (Trost, 1991) , an avMlahle morphologicM component had go be iH tegrated with the FUI e generator for this purpose. The other probh;m was that the existing HPS(L inspired gramrna.r of German could not be directly ported to the FUF formMisln. Before we describe the integration task we will briefly sketch the mMn characteristics of these resources, emphasizing those aspects which either cause problems lbr integration or provide the means for perfi)rrning the integration task. Available Resources 2,1 The FUF Generator li'UF (Elhadad, 1991) is a surface generator for naturM language based on the theory of flmctional unification grammar (Kay, 1979) . It employs both phrase structure rules and unification of feature descriptions. Input to I\"U F is a partially speciiied feature description which constrains the utterance to be generated. Output is a flflly specified feature description subsumed by the input struel,ure, which is then linearized to yiehl a sentence. 1 Tit(: task of a tactical generator is to produce sententbd or subsentential phrases corresponding to a semantic input specitication and does not include text planning. 2 Head Driven Phrase Structure Grammar (Pollard and Sa.g, 1987; Pollard arid S~tg, 1994) 2.1.2 Operational Characteristics C, eneraCion sCari;s fl'om an undersl>e('ified input fe=al, urc struc/,ure, li'UF unifies the grammar inlo the input sCrucl, ure, i.e. enricln:s and furl.her constrains iC. Alternatives are explored sequentially until one I>ranch succeeds. Thus Cite inl>ut st;rue-Cure never ('.ontMns all@motions. When unilieaCion aC the <:urren(, level is com-[)leCe, i.e. noChing furl, her can I)e added to the int>ut sl, rucCure, every substructure of the input rei)resenCing acat, egory is recursively unified wil;h I;he gral~H[nar. This process is re[>eaCed breadth tirst mltil all <-onsCituents are h'.aves. To det, erinine whi<:h substructures have. to be processed rceursively FUF employs two methods. The defaull; strategy (;ollecCs all subsi, rucl, ures of Chc current level having a cat feature, l';xplicit specification o[\" subconsf, il;uents is also l>ossible via the special Feai.ure cset (<:onsCiCuent set). If cuet is presenl,, FUF performs recursion on these exl)liciCly given subsCruct, ur<'s only. E.g., [,he default sCraCegy operates on (;ategory s in Fig. 1 as if (cset (subj pred)) had |teen specitied. When specifying (cset (pred)) only, no recursion wouht be performed <)n subj. 2.1.3 Linearization The recursive unification process handles only t,he dominance relations of 1%c grannuar. In order to a.c(:ounl; for linear ordering of l, tlo resulting I,ree shaped feature structure, FUF performs a linearizal;ion ])l'OC(~S8 a~0,e.t\" unification has linishcd. IAnear l)rac.e(hmc.c of ('.onstituenCs is sl)ecitied in the. grammar using (;he special feal;ure pattern. 2.2 The HPSG Grammar for German In IIPSG (Pollard and Sag, 1987; I) The grammar for German follows the version (>f IIPSG giv<;n in (Pollard and Sag, l,<)!)4) rat, her si:rit:l.ly, deviaCing only in the following aspects: \u2022 The Sub<:al, egorization l)rineil)h; is given in a binary bra.nching fashion. \u2022 '|'lie arglllllell|, struct, ure of h'.xical heads is enri(:hcd. Thus gcncrMizadons ronc<'.l'ning (:ase a.ssigntnenC att<l argmnen[; reduci, ion I)]ienomena (:an be <:el>Cured in a principled fashion (see Ileinz and Mal, iasek (1994) ). \u2022 Verb second posid<m is handhxl by a mechanism resembling Cite notion of head movemt:nt, of (] B-Cheery. X2MorF X2MorF (TrosC, 1991) (num sg)))))))) Figure 2: Lexical Entry h)r \"geM\" in HPSG and in FUF 3.1.1 The Representation of Signs The process of recasting the original ITPS(] structures in the FUF tbrmalism can best be described by exalnples. In Fig. 2 the htPS(] representation of the German verb gem (walks) and it,s representation in t?UF is shown, exemplifying the following mappings of HPS(] onto FUF: \u2022 The subtyl)ing of the IIEAI) iS represented I)y the cat feature of FUF. \u2022 SYNSEM),OCICA'rlHEAD is mapped to head. \u2022 SYNSEM]LOCleONTbm, is mapped to concept. \u2022 Instead of subcategorizing for synsem wdues a.s proposed in Pollard and Sag (1994) the convention of Pollard and Sag (1987) to subcategorize for signs is adopted. \u2022 Instead of a list-valued SUBCAT feature the feature args is used. The correspondence between (syntactic) arguments anti semantic roles is established by placing the constituent under a feature corresponding to its semantic role. Thus list manipulation is avoided and the structure corresponds more closely to the input specification (given in a language based on SPL (Kasper, 1989) ). \u2022 The NONLocal feature is dropped. Slash extraction is handled differently. It should be noted that this entry does not col'respond exactly to the actual representation in the generator, it serves simply to illustrate the basic ideas underlying the transformation. The actual implementation additionally allows for \u2022 the specification of arguments via external macros, accounting for a more principled treatment of case assignment, argument reduction and slash extraction; \u2022 a ditferentiation between lexemes and stems to account for a treatment of inflection by the morphology component. The representation of phrasal signs in IIPSG parallels the one of lexical signs; an additional feature DTR, S carries the subconstituents o[\" the phrase. One of the daughters is the head of the phrase (IIEAD-DTIt), its head features are identical to the head features of the phrase (llead Feature Principle). The other daughter may be either a corn-map between the lexieal representation of a word arm its surface fl)rm. Morphology proper on the other hand is viewed as a sirnpte concatenation process governed by a regular grammar. X2MorF augmertts standard two-lewJ morphology in two ways. First, it replaces the contimmtion class mechanism with a featurebased word grammar and lexicon. This is an important prerequisite for its use in a [hature-based sentence-level processing system (see Trost and Matiasek (1994) ). Second, it allows for interaction between two-level rules and word grammar facilitating the formulation of rules for non-concatenative morphol.actics like umlaut. The Integration Task Although the main components to be integrated fulfill reusability requirements (FU F being a fairly general and modular generation engine, the HPSG grammar being a declaratively written resource), integration of these resources into a unified system couhl only be achieved after suitable adaptation. The morphological component of FUF is very restricted. Thus it needed to be replaced by X2MorF. The available German word level grammar of X2MorF was rewritten to conform to the feature structure notation employed by FUF. The two-hwel part stayed unchanged. More substan-|ial changes were required to adapt the HPSG granLmar. Not only syntactic adaptations to another feature formalism were needed, but also the olmrational characteristics of' FUF had to be accounted for. Also some of the phrase structure information generalized in the form of principles could be \"compiled\" into phrase structure rules. HPSG in FUF First experiments to implement ItPSG in FUF rather directly showed inetficient runtime behavior. Since most grammatical constraints in IIPSG are expressed via structure sharing, and FUF uses pointers to indicate coreferences, most of the processing time was spent in following pointer chains through deeply nested feature structures. Thus the structures have considerably been fiattened and some aspects (most notably SUBCAT and CONTent) have beet, encoded differently. pleiNei'll,, a,u ;tdjurlet,, ;i. marker or a filler (realizing l,he shcsh l'e&t,lll'e (if l;|le tt(;;ul d;-:uighl, er). l!]a('h consl;ituenl, sl;rHcture is (;onsl_d'~:titl0d by {/.[1 aSsoci;d.e(l sel, or (h)mimmce s(:heniai, a and princillles. iII)S(l (lis/,inguishes be/,ween s,lz/Ls/,a'#l, bive (',aJ;e- Ilow(wer, o[[e irriporl;anl; t) rinciph~ of ll PS(], the Sub(::~A;egorizal, ion I'rineil)le ei'iSlll'illg ~he i)rol)er rela.l,ionshi 1) bel;we(m tim a, rgllmenl;8 subcaA,egorized for a, lld the eonstil,uenl, strllg|.llre el I;he phrase 81ill nee(is I,o ])e ;%(;eOlltll, e;d for. Ilow t, his const;rn, inl; is /nel, will I)e discussed next. 3.1.3 Cont;rol S f, ra f, egy FUI\" el[lploys a, t, op-down l[roccssinp; scheme (Iriven by l, he synl,;t(:l;ie (;a.I;(:gory ()1: l;lie lnol,her. This (-ont;rol sl;ra, t;egy is init(iequal;(\" when die consl,ilJuel[t st,ruc.I ure is Sl:,e(:itied lexica,lly hy t;he lle;:,A a,n[l l,hus uldcnown u.I;il l, ll(', head is eXl);~il(le(l. llPS(] lends il;self best to heiul-driven, t)otJ;olu-u l) i)roc.essiugl a,l, le;-~sl; for genera, l;h)l~l. ,':;ilt(:e t, he COlltrol regil[l(; of b'lJ l\" (:anllol, b(' (:ha31ged in prhl(-iph'~ (only delay lrle/,hods a, re awdli~ble), l, tie grPdicilri;u' it:self has 1o aCCOlltll, for :-ulequa, l,e processil~g ch,u,racterisl;ics. This i'rie,~l, ns, l,h~t, l,hc h;xicon drive. apf)i'oa.ch has I;o 1)e einula/,ed wil,hin t, he g,i'a.Iliiliar, based on |;he oper;tl, ionM behavior of FUF. The tmsic ido;~ for rcMizmg head driven pro-. c.(;ssing behavior is 1,o ilse Idle cset a,nd pattern special at, t.rib ul, es of F U F in an asymmetrical fashion. Ge.eral, ion of a phrase sial'is by realizing i{.s head-dtr. 'l'hel'e['ore only the head daught.er is specified ill IJm consl;it, uenl, set, o|' tdlc phra,sc. Once l.he [cxica.l hea.d of l.he phrase is general.ed, its ;-trglliiieill, list, is a(-I;iwfl,ed using l, he defaull, re (;llrSiOll sl;ra, t, egy o[\" FUF (8inee no cset atl;ril)ut(? is l)l'esent). The lexie;dly 8t)[;(:ilie(I ;trglltnenl.s ;u'e uow genera%ed in ~* (virtually) bol;|,onl u l) l'ashion. ,ql;rll(;t.llre sh;u'ing lmr('oliLi;es l;he args upwa.r(ts 1,() the lJiras;tl level, where l;hey m'e l,tieri re;dized via Idle lia.l;/,erl [ ['e;q] Thus Ge shape of I.ll('. resull.ing phrase la.rgely depends o, the kind of argutnenl, s it, s lexical head adtnit, s. In order to realize its argutnents, every word aMe, 1;() acl; as th.:: head of a, phra, se Ira8 1;() provide ;t 8ynt;act, i (\" a, n(l , sema[d; ic Slw~cili('at, ion (:4 i/, s a, rgumenl, 8. 'this SF.(; ~l; i(m a, 180 has l; o a, (; c, :mnl; for long distance phenomelm, i.e. (:xl; r~(; I; ion of a.ll arg/llllenl; (e.g., wh lnOVel[lell(, ), l, 'url, hern[ore, wu'ia, I; ions Fig. 5 stiows l, lic a(;l;[IM ellcOdil]g of the lexica, l entry for \"warlen\" (\"wait\"), 8ubcategorizing for all acl, or a.nd a pal, ienl;..qynl,;~ct, ic resl;rict, ious on i, lie ;/,i'glllii(;lll, a, re given hy illaoros, pp-allf-acc (~Xl)a, nds I;o a 1'1' wii;h l:U'el)oSition a'uf a.lid ILc--('.usa.l,ive case, IJie realizal, ion of die si, r [let, ural ~/l'I_~lll[lellt) Figure 5 : Lexical Entry fl)r \"warren\" in FUF ment reduction (i.e. passivization) has to be performed or not (for a theoretical background see Heinz and Matiasek (1994) ). In active contexts it becomes the subject and receives nominative case, in passive contexts it may be optionally realized as a PPvon (see Fig. 6 ). A mechanism common to all arguments and thus incorporated into every macro expanding to an argument specification is the extraction mechanism required to handle movement (see Fig. 7 ). At the phrasal level the argument which has to (;; try to fill slash by unification (({^ <slot>} \u00a3^ slash})) ;; does not unify --> add pattern (({^ pattern} (... <slot> ...)))))) Figure 7 : Slash extraction (slightly simplified) be extracted (e.g., in wh-questions the constituent asked for) has to be specified as tire slash feature of the args. Each argument must be checked during generation if it is unifiable with the slash specification, and, if so, it has to be made coref erential with slash. Otherwise, an appropriate pattern feature has to be produced to ensure the realization of the argument at the args level. 3.1.5 V2 and a Generation Example (]erman is commonly regarded as an SOV language. However, the standard word order -a sentence final verbal complex with the finite verb as the last dement -is encountered only in subordinate clauses. In declarative sentences and whquestions the finite element of the verbal complex occupies the second position in the sentence. Sentence initial position of the finite verb is encountered in imperative clauses and yes-no questions. In our grammar, the verbal complex is always generated in the standard order. To account for VI and V2 phenomena, a mechanism resembling the GB notion of head movement is imple- Figure 8 : Declarative Main Clause in FUF mented. This mechanism flmctions analogously to the slash mechanism presented above. If a feature head-slash is passed to the verbal temple:, the finite verb is extracted, allowing the governing phrase to realize it in first or second position. The morphology component ensures that separable prefixes are left, in place. The vert)al complex is generated top down. 'l'he arguments of the main verb are generated lexicon driven, once the lexical head of the phrase has been established. Subject-verb agreement and nominative case assignment is handled via the subj slot which is coreferential with args: subj and -after argument generation -contains the subject of the sentence (of. Fig. 6 ). Verb second position (:an only be ensltred, if the constituent in sentence initial l)osition is nonempty. The slot focus is designed to hold that constituent. The constituent to be topicalized or, if not specified in the input, the subj is extracte<t via the slash mechanism (cf. Fig. 7 ). The interaction between top down category driven and \"bottom up\" lexicon driven processing is illustrated in Fig. 9 , showing also the effects of the two slash extraction mechanisms. ......,,..,.......,...........,,.,...,.,.,,,.,...,, ====================================================================== .-,~.~.~,~.~.~.~.~..,...,...........,..,:,.....,... ============================================================================== ~:?'\"':':::':\"\"'\"\":':\":\":::\":::\"::'\"'~a: \"'\"\"\"\"'\"'\"\"'\"'\"''\"'\"'\"'\"\"\":\"'\"' X2MorF in FUF For the integration of X2MorF into I:UF the unification engine used in X2MorF was replaced by I\"UF itself, and the existing word grammar and ~norph h;xieon were reformulated in the FUF forlaalism, and tim word form g('neration l, ask is now 1)erfontwd l)y FUI\" itself. The= two-level rules could be taken over in l, heir original form, only l.he morl)hologieal tillers had to l)e l, ranstaLed. A simph\" functor/argumenL scheme is suflicient for the word grammar. The possible eombinal,ions are given I/y the phrase structure rules of l.he morl)h grammar. '['he affixes (fun('t.ors) may fllrthe.r restrict the arguments they may lie applied t,o. Fig. 10 t~roeessing is provided hy the ]emma lexicon. It <-otd;ains l.he argulnent st;ru<;l;ure of t;he ]exemes aim links them I;o (l)ossibly prelixed) stems. The require<l syntactic features (>f a particular word form arc dct<'a'mined l>y the sentence level syntae-ti<'. general,ion. 'Fhe ]elrlll:la lexicon l)aSSeS I;hese lhatures to the morl)hoh)gica] level and l, he woM level gr~uttH, art, akes ca.re of sele(:l.ing the al)propri: at:e allixes. I)uring the finM linearizati(>li the cxl;ended ewe l<wel rules map l, he <:on<:aCenated stems and affixes to the appropriate surface strings. :~Thc boolca.n combinal, ions of ce.rtain fea.turcs ll~Lve Imcn spelled out in the type hierarchy. Conclusion Wc have shown how existing resources can be adapted to new applications therel)y saving eon-siderably on develol>ment efforts. We have demonsl.ral, ed integration tasks on two different levels: * integration of software sys/,elns: by c()mt)itJ-",
    "abstract": "We describe the development of a generator for (]erman built by reusing and adapting existing linguistic data and software. Reusability is crucial for the successful application of N I,P techniques to real-life problems since it helps to cut down on both development and adaptation effort. Itowever, combining resources not designed to work together is not trivial. We describe the problems arising when integrating three preexisting resources (FUF, a unificationbased generator, an HPS(~ (]ramrnm' for (~errnan, and X2MorF, 7~ two-level morphology (;omponent) and the adaptat, ions necessary to come up with a wide coverage l;acticM generator for (]erlnnn.",
    "countries": [
        "Austria"
    ],
    "languages": [
        "German"
    ],
    "numcitedby": "4",
    "year": "1996",
    "month": "",
    "title": "An {HPSG}-Based Generator for {G}erman An Experiment in the Reusability of Linguistic Resources"
}