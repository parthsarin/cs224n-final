{
    "article": "We propose Adaptive Recursive Neural Network (AdaRNN) for target-dependent Twitter sentiment classification. AdaRNN adaptively propagates the sentiments of words to target depending on the context and syntactic relationships between them. It consists of more than one composition functions, and we model the adaptive sentiment propagations as distributions over these composition functions. The experimental studies illustrate that AdaRNN improves the baseline methods. Furthermore, we introduce a manually annotated dataset for target-dependent Twitter sentiment analysis. Introduction Twitter becomes one of the most popular social networking sites, which allows the users to read and post messages (i.e. tweets) up to 140 characters. Among the great varieties of topics, people in Twitter tend to express their opinions for the brands, celebrities, products and public events. As a result, it attracts much attention to estimate the crowd's sentiments in Twitter. For the tweets, our task is to classify their sentiments for a given target as positive, negative, and neutral. People may mention several entities (or targets) in one tweet, which affects the availabilities for most of existing methods. For example, the tweet \"@ballmer: windows phone is better than ios!\" has three targets (@ballmer, windows phone, and ios). The user expresses neutral, positive, and negative sentiments for them, respectively. If target information is ignored, it is difficult to obtain the correct sentiment for a specified target. For target-dependent sentiment classification, the manual evaluation of Jiang et al. (2011)     show that about 40% of errors are caused by not considering the targets in classification. The features used in traditional learning-based methods (Pang et al., 2002; Nakagawa et al., 2010) are independent to the targets, hence the results are computed despite what the targets are. Hu and Liu (2004) regard the features of products as targets, and sentiments for them are heuristically determined by the dominant opinion words. Jiang et al. (2011) combine the target-independent features (content and lexicon) and target-dependent features (rules based on the dependency parsing results) together in subjectivity classification and polarity classification for tweets. In this paper, we mainly focus on integrating target information with Recursive Neural Network (RNN) to leverage the ability of deep learning models. The neural models use distributed representation (Hinton, 1986; Rumelhart et al., 1986; Bengio et al., 2003) to automatically learn features for target-dependent sentiment classification. RNN utilizes the recursive structure of text, and it has achieved state-of-the-art sentiment analysis results for movie review dataset (Socher et al., 2012; Socher et al., 2013) . The recursive neural models employ the semantic composition functions, which enables them to handle the complex compositionalities in sentiment analysis. Specifically, we propose a framework which learns to propagate the sentiments of words towards the target depending on context and syntactic structure. We employ a novel adaptive multi-compositionality layer in recursive neural network, which is named as AdaRNN (Dong et al., 2014) . It consists of more than one composition functions, and we model the adaptive sentiment propagations as learning distributions over these composition functions. We automatically learn the composition functions and how to select them from supervisions, instead of choosing them heuristically or by hand-crafted rules. AdaRNN determines how to propagate the sentiments towards the target and handles the negation or intensification phenomena (Taboada et al., 2011) in sentiment analysis. In addition, we introduce a manually annotated dataset, and conduct extensive experiments on it. The experimental results suggest that our approach yields better performances than the baseline methods. 2 RNN: Recursive Neural Network RNN (Socher et al., 2011) represents the phrases and words as D-dimensional vectors. It performs compositions based on the binary trees, and obtain the vector representations in a bottom-up way. As illustrated in Figure 1 , we obtain the representation of \"very good\" by the composition of \"very\" and \"good\", and the representation of trigram \"not very good\" is recursively obtained by the vectors of \"not\" and \"very good\". The dimensions of parent node are calculated by linear combination of the child vectors' dimensions. The vector representation v is obtained via: v = f (g (v l , v r )) = f W v l v r + b (1) where v l , v r are the vectors of its left and right child, g is the composition function, f is the nonlinearity function (such as tanh, sigmoid, softsign, etc.), W \u2208 R D\u00d72D is the composition matrix, and b is the bias vector. The dimension of v is the same as its child vectors, and it is recursively used in the next step. Notably, the word vectors in the leaf nodes are regarded as the parameters, and will be updated according to the supervisions. The vector representation of root node is then fed into a softmax classifier to predict the label. The k-th element of softmax(x) is exp{x k } j exp{x j } . For a vector, the softmax obtains the distribution over K classes. Specifically, the predicted distribution is y = softmax (Uv), where y is the predicted distribution, U \u2208 R K\u00d7D is the classification matrix, and v is the vector representation of node. Our Approach We use the dependency parsing results to find the words syntactically connected with the interested target. Adaptive Recursive Neural Network is proposed to propagate the sentiments of words to the target node. We model the adaptive sentiment propagations as semantic compositions. The computation process is conducted in a bottom-up manner, and the vector representations are computed recursively. After we obtain the representation of target node, a classifier is used to predict the sentiment label according to the vector. In Section 3.1, we show how to build recursive structure for target using the dependency parsing results. In Section 3.2, we propose Adaptive Recursive Neural Network and use it for targetdependent sentiment analysis. Build Recursive Structure The dependency tree indicates the dependency relations between words. As described above, we propagate the sentiments of words to the target. Hence the target is placed at the root node to combine with its connected words recursively. The dependency relation types are remained to guide the sentiment propagations in our model. Algorithm 1 Convert Dependency Tree Input: Target node, Dependency tree Output: Converted tree 1: function CONV(r) 2: E r \u2190 SORT(dep edges connected with r) 3: v \u2190 r 4: for (r t \u2212 \u2192 u/u t \u2212 \u2192 r) in E r do 5: if r is head of u then 6: w \u2190 node with CONV(u), v as children 7: else 8: w \u2190 node with v, CONV(u) as children 9: v \u2190 w 10: return v 11: Call CONV(target node) to get converted tree As illustrated in the Algorithm 1, we recursively convert the dependency tree starting from the target node. We find all the words connected to the target, and these words are combined with target node by certain order. Every combination is considered as once propagation of sentiments. If the target is head of the connected words, the target vector is combined as the right node; if otherwise, it is combined as the left node. This ensures the child nodes in a certain order. We use two rules to determine the order of combinations: (1) the words whose head is the target in dependency tree are first combined, and then the rest of connected words are combined; (2) if the first rule cannot determine the order, the connected words are sorted by their positions in sentence from right to left. Notably, the conversion is performed recursively for the connected words and the dependency relation types are remained. Figure 2 shows the converted results for different targets in one sentence. AdaRNN: Adaptive Recursive Neural Network RNN employs one global matrix to linearly combine the elements of vectors. Sometimes it is challenging to obtain a single powerful function to model the semantic composition, which motivates us to propose AdaRNN. The basic idea of AdaRNN is to use more than one composition functions and adaptively select them depending on the linguistic tags and the combined vectors. The model learns to propagate the of words by using the different composition functions. Figure 2 shows the computation process for the example sentence \"windows is better than ios\", where the user expresses positive sentiment towards windows and negative sentiment to ios. For the targets, the order of compositions and the dependency types are different. AdaRNN adaptively selects the composition functions g 1 . . . g C depending on the child vectors and the linguistic types. Thus it is able to determine how to propagate the sentiments of words towards the target. Based on RNN described in Section 2, we define the composition result v in AdaRNN as: v = f C h=1 P (g h |v l , v r , e) g h (v l , v r ) (2) where g 1 , . . . , g C are the composition functions, P (g h |v l , v r , e) is the probability of employing g h given the child vectors v l , v r and external feature vector e, and f is the nonlinearity function. For the composition functions, we use the same forms as in Equation (1), i.e., we have C composition matrices W 1 . . . W C . We define the distribution over these composition functions as: \uf8ee \uf8ef \uf8f0 P (g 1 |v l , v r , e) . . . P (g C |v l , v r , e) \uf8f9 \uf8fa \uf8fb = softmax \uf8eb \uf8ed \u03b2S \uf8ee \uf8f0 v l v r e \uf8f9 \uf8fb \uf8f6 \uf8f8 ( 3 ) where \u03b2 is the hyper-parameter, S \u2208 R C\u00d7(2D+|e|)  is the matrix used to determine which composition function we use, v l , v r are the left and right child vectors, and e are external feature vector. In this work, e is a one-hot binary feature vector which indicates what the dependency type is. If relation is the k-th type, we set e k to 1 and the others to 0. Adding \u03b2 in softmax function is a widely used parametrization method in statistical mechanics, which is known as Boltzmann distribution and Gibbs measure (Georgii, 2011) . When \u03b2 = 0, this function produces a uniform distribution; when \u03b2 = 1, it is the same as softmax function; when \u03b2 \u2192 \u221e, it only activates the dimension with maximum weight, and sets its probability to 1. Model Training We use the representation of root node as the features, and feed them into the softmax classifier to predict the distribution over classes. We define the ground truth vector t as a binary vector. If the k-th class is the label, only t k is 1 and the others are 0. Our goal is to minimize the cross-entropy error between the predicted distribution y and ground truth distribution t. For each training instance, we define the objective function as: min \u0398 \u2212 j t j log y j + \u03b8\u2208\u0398 \u03bb \u03b8 \u03b8 2 2 (4) where \u0398 represents the parameters, and the L 2regularization penalty is used. Based on the converted tree, we employ backpropagation algorithm (Rumelhart et al., 1986) to propagate the errors from root node to the leaf nodes. We calculate the derivatives to update the parameters. The AdaGrad (Duchi et al., 2011) is employed to solve this optimization problem. Experiments As people tend to post comments for the celebrities, products, and companies, we use these keywords (such as \"bill gates\", \"taylor swift\", \"xbox\", \"windows 7\", \"google\") to query the Twitter API. After obtaining the tweets, we manually annotate the sentiment labels (negative, neutral, positive) for these targets. In order to eliminate the effects of data imbalance problem, we randomly sample the tweets and make the data balanced. The negative, neutral, positive classes account for 25%, 50%, 25%, respectively. Training data consists of 6,248 tweets, and testing data has 692 Dependency tree: windows is target: ios is target: Figure 2 : For the sentence \"windows is better than ios\", we convert its dependency tree for the different targets (windows and ios). AdaRNN performs semantic compositions in bottom-up manner and forward propagates sentiment information to the target node. The g 1 , . . . , g C are different composition functions, and the combined vectors and dependency types are used to select them adaptively. These composition functions decide how to propagate the sentiments to the target. tweets. We randomly sample some tweets, and they are assigned with sentiment labels by two annotators. About 82.5% of them have the same labels. The agreement percentage of polarity classification is higher than subjectivity classification. To the best of our knowledge, this is the largest target-dependent Twitter sentiment classification dataset which is annotated manually. We make the dataset publicly available 1 for research purposes. We preprocess the tweets by replacing the targets with $T$ and setting their POS tags to NN. Liblinear (Fan et al., 2008) is used for baselines. A tweet-specific tokenizer (Gimpel et al., 2011) is employed, and the dependency parsing results are computed by Stanford Parser (Klein and Manning, 2003) . The hyper-parameters are chosen by cross-validation on the training split, and the test accuracy and macro-average F1-score score are reported. For recursive neural models, the dimension of word vector is set to 25, and f = tanh is used as the nonlinearity function. We employ 10 composition matrices in AdaRNN. The parameters are randomly initialized. Notably, the word vectors will also be updated. SVM-indep: It uses the uni-gram, bi-gram, punctuations, emoticons, and #hashtags as the content features, and the numbers of positive or negative words in General Inquirer as lexicon features. These features are all target-independent. SVM-dep: We re-implement the method proposed by Jiang et al. (2011) . It combines both the target-independent (SVM-indep) and targetdependent features and uses SVM as the classifier. There are seven rules to extract target-sensitive features. We do not implement the social graph optimization and target expansion tricks in it. SVM-conn: The words, punctuations, emoticons, and #hashtags included in the converted dependency tree are used as the features for SVM. RNN: It is performed on the converted dependency tree without adaptive composition selection. AdaRNN-w/oE: Our approach without using the dependency types as features in adaptive selection for the composition functions. AdaRNN-w/E: Our approach with employing the dependency types as features in adaptive selection for the composition functions. AdaRNN-comb: We combine the root vectors obtained by AdaRNN-w/E with the uni/bi-gram features, and they are fed into a SVM classifier. As shown in the Table 1 , AdaRNN achieves better results than the baselines. Specifically, we find that the performances of SVM-dep increase than SVM-indep. It indicates that target-dependent features help improve the results. However, the accuracy and F1-score do not gain significantly. This is caused by mismatch of the rules (Jiang et al., 2011) used to extract the target-dependent features. The POS tagging and dependency parsing results are not precise enough for the Twitter data, so these hand-crafted rules are rarely matched. Further, the results of SVM-conn illustrate that using the words which have paths to target as bag-ofwords features does not perform well. RNN is also based on the converted dependency tree. It outperforms SVM-indep, and is comparable with SVM-dep. The performances of AdaRNN-w/oE are better than the above baselines. It shows that multiple composition functions and adaptive selection help improve the results. AdaRNN provides more powerful composition ability, so that it achieves better semantic composition for recursive neural models. AdaRNN-w/E obtains best performances among the above methods. Its macro-average F1-score rises by 5.3% than the target-independent method SVM-indep. It employs dependency types as binary features to select the composition functions adaptively. The results illustrate that the syntactic tags are helpful to guide the model propagate sentiments of words towards target. Although the dependency results are also not precise enough, the composition selection is automatically learned from data. Hence AdaRNN more the imprecision of parsing results than the hand-crafted rules. The performances become better after adding the unigram and bi-gram features (target-independent). Effects of \u03b2 We compare different \u03b2 for AdaRNN defined in Equation (3) in this section. Different parameter \u03b2 leads to different composition selection schemes. As illustrated in Figure 3 , the AdaRNN-w/oE and AdaRNN-w/E achieve the best accuracies at \u03b2 = 2, and they have a similar trend. Specifically, \u03b2 = 0 obtains a uniform distribution over the composition functions which does not help improve performances. \u03b2 \u2192 \u221e results in a maximum probability selection algorithm, i.e., only the composition function which has the maximum probability is used. This selection scheme makes Conclusion We propose Adaptive Recursive Neural Network (AdaRNN) for the target-dependent Twitter sentiment classification. AdaRNN employs more than one composition functions and adaptively chooses them depending on the context and linguistic tags. For a given tweet, we first convert its dependency tree for the interested target. Next, the AdaRNN learns how to adaptively propagate the sentiments of words to the target node. AdaRNN enables the sentiment propagations to be sensitive to both linguistic and semantic categories by using different compositions. The experimental results illustrate that AdaRNN improves the baselines without hand-crafted rules. Acknowledgments",
    "abstract": "We propose Adaptive Recursive Neural Network (AdaRNN) for target-dependent Twitter sentiment classification. AdaRNN adaptively propagates the sentiments of words to target depending on the context and syntactic relationships between them. It consists of more than one composition functions, and we model the adaptive sentiment propagations as distributions over these composition functions. The experimental studies illustrate that AdaRNN improves the baseline methods. Furthermore, we introduce a manually annotated dataset for target-dependent Twitter sentiment analysis.",
    "countries": [
        "China"
    ],
    "languages": [],
    "numcitedby": "572",
    "year": "2014",
    "month": "June",
    "title": "Adaptive Recursive Neural Network for Target-dependent {T}witter Sentiment Classification"
}